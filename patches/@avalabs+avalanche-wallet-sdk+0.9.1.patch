diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/.DS_Store b/node_modules/@avalabs/avalanche-wallet-sdk/.DS_Store
new file mode 100644
index 0000000..4d578ce
Binary files /dev/null and b/node_modules/@avalabs/avalanche-wallet-sdk/.DS_Store differ
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/dist/Network/index.d.ts b/node_modules/@avalabs/avalanche-wallet-sdk/dist/Network/index.d.ts
index 7980c75..65b4a1d 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/dist/Network/index.d.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/dist/Network/index.d.ts
@@ -10,7 +10,7 @@ export declare function setNetworkAsync(conf: NetworkConfig): Promise<void>;
 export declare function isFujiNetwork(activeNetwork: NetworkConfig): boolean;
 export declare function isMainnetNetwork(activeNetwork: NetworkConfig): boolean;
 export declare function isLocalNetwork(activeNetwork: NetworkConfig): boolean;
-export declare function getAvaxAssetID(): string;
+export declare function getDjtxAssetID(): string;
 export declare function getActiveNetworkConfig(): NetworkConfig;
 export { WebsocketProvider, getEvmChainID, getConfigFromUrl };
 export { NetworkConfig } from './types';
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/dist/Network/types.d.ts b/node_modules/@avalabs/avalanche-wallet-sdk/dist/Network/types.d.ts
index 3ec9b16..e8f7f6e 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/dist/Network/types.d.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/dist/Network/types.d.ts
@@ -16,6 +16,6 @@ export interface NetworkConfig {
     xChainID: string;
     pChainID: string;
     cChainID: string;
-    avaxID: string;
+    djtxID: string;
     rpcUrl: NetworkConfigRpc;
 }
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/LedgerWallet.d.ts b/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/LedgerWallet.d.ts
index ff0aa98..eb3bd23 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/LedgerWallet.d.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/LedgerWallet.d.ts
@@ -1,5 +1,5 @@
 import Eth from '@ledgerhq/hw-app-eth';
-import AppAvax from '@obsidiansystems/hw-app-avalanche';
+import AppDjtx from '@obsidiansystems/hw-app-avalanche';
 import HDKey from 'hdkey';
 import { ChainAlias, ILedgerAppConfig, WalletNameType } from "./types";
 import { Transaction } from '@ethereumjs/tx';
@@ -15,23 +15,23 @@ export default class LedgerWallet extends HDWalletAbstract {
     type: WalletNameType;
     evmAccount: HDKey;
     config: ILedgerAppConfig;
-    appAvax: AppAvax;
+    appDjtx: AppDjtx;
     ethApp: Eth;
-    constructor(avaxAcct: HDKey, evmAcct: HDKey, avaxApp: AppAvax, ethApp: Eth, config: ILedgerAppConfig);
+    constructor(djtxAcct: HDKey, evmAcct: HDKey, djtxApp: AppDjtx, ethApp: Eth, config: ILedgerAppConfig);
     /**
      * Create a new ledger wallet instance from the given transport
      * @param transport
      */
     static fromTransport(transport: any): Promise<LedgerWallet>;
-    static getAvaxAccount(app: AppAvax): Promise<HDKey>;
+    static getDjtxAccount(app: AppDjtx): Promise<HDKey>;
     static getEvmAccount(eth: Eth): Promise<HDKey>;
-    static fromApp(app: AppAvax, eth: Eth): Promise<LedgerWallet>;
+    static fromApp(app: AppDjtx, eth: Eth): Promise<LedgerWallet>;
     getAddressC(): string;
     getEvmAddressBech(): string;
     signEvm(tx: Transaction): Promise<Transaction>;
     getTransactionPaths<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx>(unsignedTx: UnsignedTx, chainId: ChainIdType): {
         paths: string[];
-        isAvaxOnly: boolean;
+        isDjtxOnly: boolean;
     };
     getPathFromAddress(address: string): string;
     signX(unsignedTx: AVMUnsignedTx): Promise<AVMTx>;
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/Wallet.d.ts b/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/Wallet.d.ts
index d87d1fb..9359a7e 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/Wallet.d.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/Wallet.d.ts
@@ -1,6 +1,6 @@
 /// <reference types="node" />
 /// <reference types="bn.js" />
-import { AssetBalanceP, AssetBalanceRawX, AvmExportChainType, AvmImportChainType, ERC20Balance, iAvaxBalance, WalletBalanceX, WalletEventArgsType, WalletEventType, WalletNameType } from './types';
+import { AssetBalanceP, AssetBalanceRawX, AvmExportChainType, AvmImportChainType, ERC20Balance, iDjtxBalance, WalletBalanceX, WalletEventArgsType, WalletEventType, WalletNameType } from './types';
 import { BN } from 'avalanche';
 import { Transaction } from '@ethereumjs/tx';
 import EvmWallet from "./EvmWallet";
@@ -56,20 +56,20 @@ export declare abstract class WalletProvider {
     /**
      *
      * @param to - the address funds are being send to.
-     * @param amount - amount of AVAX to send in nAVAX
+     * @param amount - amount of DJTX to send in nDJTX
      * @param memo - A MEMO for the transaction
      */
-    sendAvaxX(to: string, amount: BN, memo?: string): Promise<string>;
+    sendDjtxX(to: string, amount: BN, memo?: string): Promise<string>;
     /**
-     * Sends AVAX to another address on the C chain.
-     * @param to Hex address to send AVAX to.
-     * @param amount Amount of AVAX to send, represented in WEI format.
+     * Sends DJTX to another address on the C chain.
+     * @param to Hex address to send DJTX to.
+     * @param amount Amount of DJTX to send, represented in WEI format.
      * @param gasPrice Gas price in WEI format
      * @param gasLimit Gas limit
      *
      * @return Returns the transaction hash
      */
-    sendAvaxC(to: string, amount: BN, gasPrice: BN, gasLimit: number): Promise<string>;
+    sendDjtxC(to: string, amount: BN, gasPrice: BN, gasLimit: number): Promise<string>;
     /**
      * Send Avalanche Native Tokens on X chain
      * @param assetID ID of the token to send
@@ -94,11 +94,11 @@ export declare abstract class WalletProvider {
      */
     estimateErc20Gas(contractAddress: string, to: string, amount: BN): Promise<number>;
     /**
-     * Estimate the gas needed for a AVAX send transaction on the C chain.
+     * Estimate the gas needed for a DJTX send transaction on the C chain.
      * @param to Destination address.
-     * @param amount Amount of AVAX to send, in WEI.
+     * @param amount Amount of DJTX to send, in WEI.
      */
-    estimateAvaxGasLimit(to: string, amount: BN, gasPrice: BN): Promise<number>;
+    estimateDjtxGasLimit(to: string, amount: BN, gasPrice: BN): Promise<number>;
     /**
      * A method to create custom EVM transactions.
      * @param gasPrice
@@ -110,11 +110,11 @@ export declare abstract class WalletProvider {
      */
     sendCustomEvmTx(gasPrice: BN, gasLimit: number, data?: string, to?: string, value?: string, nonce?: number): Promise<string>;
     /**
-     * Returns the maximum spendable AVAX balance for the given chain.
+     * Returns the maximum spendable DJTX balance for the given chain.
      * Scans all chains and take cross over fees into account
      * @param chainType X, P or C
      */
-    getUsableAvaxBalanceForChain(chainType: ChainIdType): BN;
+    getUsableDjtxBalanceForChain(chainType: ChainIdType): BN;
     /**
      * Create a new instance of a UniversalNode for the given chain using current balance state
      * @param chain Chain of the universal node.
@@ -139,9 +139,9 @@ export declare abstract class WalletProvider {
      */
     issueEvmTx(tx: Transaction): Promise<string>;
     /**
-     * Returns the C chain AVAX balance of the wallet in WEI format.
+     * Returns the C chain DJTX balance of the wallet in WEI format.
      */
-    updateAvaxBalanceC(): Promise<BN>;
+    updateDjtxBalanceC(): Promise<BN>;
     /**
      *  Returns UTXOs on the X chain that belong to this wallet.
      *  - Makes network request.
@@ -164,7 +164,7 @@ export declare abstract class WalletProvider {
      */
     getUtxosP(): PlatformUTXOSet;
     /**
-     * Returns the number AVAX staked by this wallet.
+     * Returns the number DJTX staked by this wallet.
      */
     getStake(): Promise<GetStakeResponse>;
     /**
@@ -184,47 +184,47 @@ export declare abstract class WalletProvider {
     private updateBalanceX;
     getBalanceX(): WalletBalanceX;
     /**
-     * A helpful method that returns the AVAX balance on X, P, C chains.
-     * Internally calls chain specific getAvaxBalance methods.
+     * A helpful method that returns the DJTX balance on X, P, C chains.
+     * Internally calls chain specific getDjtxBalance methods.
      */
-    getAvaxBalance(): iAvaxBalance;
+    getDjtxBalance(): iDjtxBalance;
     /**
-     * Returns the X chain AVAX balance of the current wallet state.
+     * Returns the X chain DJTX balance of the current wallet state.
      * - Does not make a network request.
      * - Does not refresh wallet balance.
      */
-    getAvaxBalanceX(): AssetBalanceRawX;
-    getAvaxBalanceC(): BN;
+    getDjtxBalanceX(): AssetBalanceRawX;
+    getDjtxBalanceC(): BN;
     /**
-     * Returns the P chain AVAX balance of the current wallet state.
+     * Returns the P chain DJTX balance of the current wallet state.
      * - Does not make a network request.
      * - Does not refresh wallet balance.
      */
-    getAvaxBalanceP(): AssetBalanceP;
+    getDjtxBalanceP(): AssetBalanceP;
     /**
-     * Exports AVAX from P chain to X chain
+     * Exports DJTX from P chain to X chain
      * @remarks
      * The export transaction will cover the Export + Import Fees
      *
-     * @param amt amount of nAVAX to transfer
+     * @param amt amount of nDJTX to transfer
      * @return returns the transaction id.
      */
     exportPChain(amt: BN): Promise<string>;
     /**
-     * Exports AVAX from C chain to X chain
+     * Exports DJTX from C chain to X chain
      * @remarks
      * The export transaction will cover the Export + Import Fees
      *
-     * @param amt amount of nAVAX to transfer
+     * @param amt amount of nDJTX to transfer
      * @return returns the transaction id.
      */
     exportCChain(amt: BN): Promise<string>;
     /**
-     * Exports AVAX from X chain to either P or C chain
+     * Exports DJTX from X chain to either P or C chain
      * @remarks
      * The export transaction will cover the Export + Import Fees
      *
-     * @param amt amount of nAVAX to transfer
+     * @param amt amount of nDJTX to transfer
      * @param destinationChain Which chain to export to.
      * @return returns the transaction id.
      */
@@ -244,7 +244,7 @@ export declare abstract class WalletProvider {
      * Adds a validator to the network using the given node id.
      *
      * @param nodeID The node id you are adding as a validator
-     * @param amt Amount of AVAX to stake in nAVAX
+     * @param amt Amount of DJTX to stake in nDJTX
      * @param start Validation period start date
      * @param end Validation period end date
      * @param delegationFee Minimum 2%
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/constants.d.ts b/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/constants.d.ts
index f3b9c12..31cd25e 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/constants.d.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/constants.d.ts
@@ -1,5 +1,5 @@
-export declare const AVAX_TOKEN_INDEX: string;
-export declare const AVAX_ACCOUNT_PATH: string;
+export declare const DJTX_TOKEN_INDEX: string;
+export declare const DJTX_ACCOUNT_PATH: string;
 export declare const ETH_ACCOUNT_PATH: string;
 export declare const LEDGER_ETH_ACCOUNT_PATH: string;
 export declare const INDEX_RANGE: number;
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/types.d.ts b/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/types.d.ts
index 8876df0..2300a4b 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/types.d.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/dist/Wallet/types.d.ts
@@ -30,7 +30,7 @@ export interface WalletCollectiblesXGroup {
     quantity: number;
     id: number;
 }
-export interface iAvaxBalance {
+export interface iDjtxBalance {
     X: AssetBalanceRawX;
     P: AssetBalanceP;
     C: BN;
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/dist/helpers/UniversalNode.d.ts b/node_modules/@avalabs/avalanche-wallet-sdk/dist/helpers/UniversalNode.d.ts
index 589558a..9c03007 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/dist/helpers/UniversalNode.d.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/dist/helpers/UniversalNode.d.ts
@@ -25,7 +25,7 @@ export declare class UniversalNode {
      * Assumes there is enough balance on node tree
      * Returns empty array even if transaction not possible!
      * What steps to take to have the target balance on this node.
-     * @param target Amount of nAVAX needed on this node.
+     * @param target Amount of nDJTX needed on this node.
      */
     getStepsForTargetBalance(target: BN): UniversalTx[];
     addParent(node: UniversalNode): void;
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/dist/helpers/tx_helper.d.ts b/node_modules/@avalabs/avalanche-wallet-sdk/dist/helpers/tx_helper.d.ts
index d02f06b..c4714df 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/dist/helpers/tx_helper.d.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/dist/helpers/tx_helper.d.ts
@@ -21,12 +21,12 @@ gasPrice: BN, gasLimit: number, contractAddress: string): Promise<Transaction>;
 export declare function buildEvmTransferErc721Tx(from: string, to: string, gasPrice: BN, gasLimit: number, tokenContract: string, tokenId: string): Promise<Transaction>;
 export declare function estimateErc20Gas(tokenContract: string, from: string, to: string, value: BN): Promise<any>;
 /**
- * Estimates the gas needed to send AVAX
+ * Estimates the gas needed to send DJTX
  * @param to Destination address
- * @param amount Amount of AVAX to send, given in WEI
+ * @param amount Amount of DJTX to send, given in WEI
  * @param gasPrice Given in WEI
  */
-export declare function estimateAvaxGas(from: string, to: string, amount: BN, gasPrice: BN): Promise<number>;
+export declare function estimateDjtxGas(from: string, to: string, amount: BN, gasPrice: BN): Promise<number>;
 export declare enum AvmTxNameEnum {
     'Transaction',
     'Mint',
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/dist/index.js b/node_modules/@avalabs/avalanche-wallet-sdk/dist/index.js
index 625f170..3ed2e15 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/dist/index.js
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/dist/index.js
@@ -99,12 +99,12 @@ function getRpcP(conf) {
 
 // import { AVMConstants } from 'avalanche/dist/apis/avm';
 const MainnetConfig = {
-    rawUrl: 'https://api.avax.network',
+    rawUrl: 'https://api.djtx.network',
     apiProtocol: 'https',
-    apiIp: 'api.avax.network',
+    apiIp: 'api.djtx.network',
     apiPort: 443,
-    explorerURL: 'https://explorerapi.avax.network',
-    explorerSiteURL: 'https://explorer.avax.network',
+    explorerURL: 'https://explorerapi.djtx.network',
+    explorerSiteURL: 'https://explorer.djtx.network',
     networkID: 1,
     // @ts-ignore
     xChainID: utils$1.Defaults.network[1]['X']['blockchainID'],
@@ -115,7 +115,7 @@ const MainnetConfig = {
     // @ts-ignore
     evmChainID: utils$1.Defaults.network[1]['C']['chainID'],
     // @ts-ignore
-    avaxID: utils$1.Defaults.network[1]['X']['avaxAssetID'],
+    djtxID: utils$1.Defaults.network[1]['X']['djtxAssetID'],
     get rpcUrl() {
         return {
             c: getRpcC(this),
@@ -125,12 +125,12 @@ const MainnetConfig = {
     },
 };
 const TestnetConfig = {
-    rawUrl: 'https://api.avax-test.network',
+    rawUrl: 'https://api.djtx-test.network',
     apiProtocol: 'https',
-    apiIp: 'api.avax-test.network',
+    apiIp: 'api.djtx-test.network',
     apiPort: 443,
-    explorerURL: 'https://explorerapi.avax-test.network',
-    explorerSiteURL: 'https://explorer.avax-test.network',
+    explorerURL: 'https://explorerapi.djtx-test.network',
+    explorerSiteURL: 'https://explorer.djtx-test.network',
     networkID: 5,
     // @ts-ignore
     xChainID: utils$1.Defaults.network[5]['X']['blockchainID'],
@@ -141,7 +141,7 @@ const TestnetConfig = {
     // @ts-ignore
     evmChainID: utils$1.Defaults.network[5]['C']['chainID'],
     // @ts-ignore
-    avaxID: utils$1.Defaults.network[5]['X']['avaxAssetID'],
+    djtxID: utils$1.Defaults.network[5]['X']['djtxAssetID'],
     get rpcUrl() {
         return {
             c: getRpcC(this),
@@ -165,7 +165,7 @@ const LocalnetConfig = {
     // @ts-ignore
     evmChainID: utils$1.Defaults.network[12345]['C']['chainID'],
     // @ts-ignore
-    avaxID: utils$1.Defaults.network[12345]['X']['avaxAssetID'],
+    djtxID: utils$1.Defaults.network[12345]['X']['djtxAssetID'],
     get rpcUrl() {
         return {
             c: getRpcC(this),
@@ -1689,9 +1689,9 @@ function setRpcNetwork(conf, credentials = true) {
     pChain.setBlockchainAlias('P');
     cChain.refreshBlockchainID(conf.cChainID);
     cChain.setBlockchainAlias('C');
-    xChain.setAVAXAssetID(conf.avaxID);
-    pChain.setAVAXAssetID(conf.avaxID);
-    cChain.setAVAXAssetID(conf.avaxID);
+    xChain.setDJTXAssetID(conf.djtxID);
+    pChain.setDJTXAssetID(conf.djtxID);
+    cChain.setDJTXAssetID(conf.djtxID);
     if (conf.explorerURL) {
         explorer_api = createExplorerApi(conf);
     }
@@ -1727,12 +1727,12 @@ function getConfigFromUrl(url$1) {
         let fetchIdP = infoApi.getBlockchainID('P');
         let fetchIdC = infoApi.getBlockchainID('C');
         let fetchEvmChainID = connectionEvm.eth.getChainId();
-        let fetchAvaxId = yield xApi.getAVAXAssetID();
-        let values = yield Promise.all([fetchIdX, fetchIdP, fetchIdC, fetchAvaxId, fetchEvmChainID]);
+        let fetchDjtxId = yield xApi.getDJTXAssetID();
+        let values = yield Promise.all([fetchIdX, fetchIdP, fetchIdC, fetchDjtxId, fetchEvmChainID]);
         let idX = values[0];
         let idP = values[1];
         let idC = values[2];
-        let avaxId = bintools.cb58Encode(values[3]);
+        let djtxId = bintools.cb58Encode(values[3]);
         let evmChainId = values[4];
         let config = {
             rawUrl: url$1,
@@ -1743,7 +1743,7 @@ function getConfigFromUrl(url$1) {
             xChainID: idX,
             pChainID: idP,
             cChainID: idC,
-            avaxID: avaxId,
+            djtxID: djtxId,
             evmChainID: evmChainId,
             get rpcUrl() {
                 return {
@@ -1943,7 +1943,7 @@ class EVMWebSocketProvider {
     onBlock() {
         // Update wallet balances
         this.wallets.forEach((w) => {
-            w.updateAvaxBalanceC();
+            w.updateDjtxBalanceC();
         });
     }
 }
@@ -2416,8 +2416,8 @@ function isLocalNetwork(activeNetwork) {
 }
 // Default connection is Mainnet
 setNetwork(MainnetConfig);
-function getAvaxAssetID() {
-    return activeNetwork.avaxID;
+function getDjtxAssetID() {
+    return activeNetwork.djtxID;
 }
 function getActiveNetworkConfig() {
     return activeNetwork;
@@ -2430,7 +2430,7 @@ var index$2 = /*#__PURE__*/Object.freeze({
     isFujiNetwork: isFujiNetwork,
     isMainnetNetwork: isMainnetNetwork,
     isLocalNetwork: isLocalNetwork,
-    getAvaxAssetID: getAvaxAssetID,
+    getDjtxAssetID: getDjtxAssetID,
     getActiveNetworkConfig: getActiveNetworkConfig,
     WebsocketProvider: WebsocketProvider,
     getEvmChainID: getEvmChainID,
@@ -2478,8 +2478,8 @@ var index$1 = /*#__PURE__*/Object.freeze({
 // HD WALLET
 // Accounts are not used and the account index is fixed to 0
 // m / purpose' / coin_type' / account' / change / address_index
-const AVAX_TOKEN_INDEX = '9000';
-const AVAX_ACCOUNT_PATH = `m/44'/${AVAX_TOKEN_INDEX}'/0'`; // Change and index left out
+const DJTX_TOKEN_INDEX = '9000';
+const DJTX_ACCOUNT_PATH = `m/44'/${DJTX_TOKEN_INDEX}'/0'`; // Change and index left out
 const ETH_ACCOUNT_PATH = `m/44'/60'/0'`;
 const LEDGER_ETH_ACCOUNT_PATH = ETH_ACCOUNT_PATH + '/0/0';
 const INDEX_RANGE = 20; // a gap of at least 20 indexes is needed to claim an index unused
@@ -2637,27 +2637,27 @@ function bnToBig(val, denomination = 0) {
 }
 /**
  * Converts a BN amount of 18 decimals to 9.
- * Used for AVAX C <-> X,P conversions
+ * Used for DJTX C <-> X,P conversions
  * @param amount
  */
-function avaxCtoX(amount) {
+function djtxCtoX(amount) {
     let tens = new avalanche$1.BN(10).pow(new avalanche$1.BN(9));
     return amount.div(tens);
 }
-function avaxXtoC(amount) {
+function djtxXtoC(amount) {
     let tens = new avalanche$1.BN(10).pow(new avalanche$1.BN(9));
     return amount.mul(tens);
 }
-function avaxPtoC(amount) {
-    return avaxXtoC(amount);
+function djtxPtoC(amount) {
+    return djtxXtoC(amount);
 }
-function bnToBigAvaxX(val) {
+function bnToBigDjtxX(val) {
     return bnToBig(val, 9);
 }
-function bnToBigAvaxP(val) {
-    return bnToBigAvaxX(val);
+function bnToBigDjtxP(val) {
+    return bnToBigDjtxX(val);
 }
-function bnToBigAvaxC(val) {
+function bnToBigDjtxC(val) {
     return bnToBig(val, 18);
 }
 /**
@@ -2667,29 +2667,29 @@ function bnToBigAvaxC(val) {
  *
  * @example
  * ```
- * bnToAvaxC(new BN('22500000000000000000')
+ * bnToDjtxC(new BN('22500000000000000000')
  * // will return  22.5
  *```
  *
  */
-function bnToAvaxC(val) {
+function bnToDjtxC(val) {
     return bnToLocaleString(val, 18);
 }
 /**
  * Parses the value using a denomination of 9
  *
- * @param val the amount to parse given in nAVAX
+ * @param val the amount to parse given in nDJTX
  */
-function bnToAvaxX(val) {
+function bnToDjtxX(val) {
     return bnToLocaleString(val, 9);
 }
 /**
  * Parses the value using a denomination of 9
  *
- * @param val the amount to parse given in nAVAX
+ * @param val the amount to parse given in nDJTX
  */
-function bnToAvaxP(val) {
-    return bnToAvaxX(val);
+function bnToDjtxP(val) {
+    return bnToDjtxX(val);
 }
 /**
  *
@@ -2702,13 +2702,13 @@ function numberToBN(val, decimals) {
     let valBN = new avalanche$1.BN(valBig.times(tens).toFixed(0));
     return valBN;
 }
-function numberToBNAvaxX(val) {
+function numberToBNDjtxX(val) {
     return numberToBN(val, 9);
 }
-function numberToBNAvaxP(val) {
-    return numberToBNAvaxX(val);
+function numberToBNDjtxP(val) {
+    return numberToBNDjtxX(val);
 }
-function numberToBNAvaxC(val) {
+function numberToBNDjtxC(val) {
     return numberToBN(val, 18);
 }
 /**
@@ -2751,14 +2751,14 @@ function bigToLocaleString(bigVal, decimals = 9) {
 }
 const COINGECKO_URL = 'https://api.coingecko.com/api/v3/simple/price?ids=avalanche-2&vs_currencies=usd';
 /**
- * Fetches the current AVAX price using Coin Gecko.
+ * Fetches the current DJTX price using Coin Gecko.
  * @remarks
  * You might get rate limited if you use this function frequently.
  *
  * @return
- * Current USD price of 1 AVAX
+ * Current USD price of 1 DJTX
  */
-function getAvaxPrice() {
+function getDjtxPrice() {
     return __awaiter(this, void 0, void 0, function* () {
         const res = yield axios__default['default'].get(COINGECKO_URL);
         return res.data['avalanche-2'].usd;
@@ -3384,10 +3384,10 @@ fromAddressBech) {
     return __awaiter(this, void 0, void 0, function* () {
         let destinationChainId = xChain.getBlockchainID();
         const nonce = yield web3.eth.getTransactionCount(fromAddresses[0]);
-        const avaxAssetIDBuf = yield xChain.getAVAXAssetID();
-        const avaxAssetIDStr = bintools.cb58Encode(avaxAssetIDBuf);
+        const djtxAssetIDBuf = yield xChain.getDJTXAssetID();
+        const djtxAssetIDStr = bintools.cb58Encode(djtxAssetIDBuf);
         let fromAddressHex = fromAddresses[0];
-        return yield cChain.buildExportTx(amount, avaxAssetIDStr, destinationChainId, fromAddressHex, fromAddressBech, [toAddress], nonce);
+        return yield cChain.buildExportTx(amount, djtxAssetIDStr, destinationChainId, fromAddressHex, fromAddressBech, [toAddress], nonce);
     });
 }
 function buildEvmTransferNativeTx(from, to, amount, // in wei
@@ -3476,12 +3476,12 @@ function estimateErc20Gas(tokenContract, from, to, value) {
     });
 }
 /**
- * Estimates the gas needed to send AVAX
+ * Estimates the gas needed to send DJTX
  * @param to Destination address
- * @param amount Amount of AVAX to send, given in WEI
+ * @param amount Amount of DJTX to send, given in WEI
  * @param gasPrice Given in WEI
  */
-function estimateAvaxGas(from, to, amount, gasPrice) {
+function estimateDjtxGas(from, to, amount, gasPrice) {
     return __awaiter(this, void 0, void 0, function* () {
         try {
             return yield web3.eth.estimateGas({
@@ -3492,7 +3492,7 @@ function estimateAvaxGas(from, to, amount, gasPrice) {
             });
         }
         catch (e) {
-            // TODO: Throws an error if we do not have enough avax balance
+            // TODO: Throws an error if we do not have enough djtx balance
             //TODO: Is it ok to return 21000
             return 21000;
         }
@@ -3552,7 +3552,7 @@ var tx_helper = /*#__PURE__*/Object.freeze({
     buildEvmTransferErc20Tx: buildEvmTransferErc20Tx,
     buildEvmTransferErc721Tx: buildEvmTransferErc721Tx,
     estimateErc20Gas: estimateErc20Gas,
-    estimateAvaxGas: estimateAvaxGas,
+    estimateDjtxGas: estimateDjtxGas,
     get AvmTxNameEnum () { return AvmTxNameEnum; },
     get PlatfromTxNameEnum () { return PlatfromTxNameEnum; },
     get ParseableAvmTxEnum () { return ParseableAvmTxEnum; },
@@ -4293,7 +4293,7 @@ function getTransactionSummary(tx, walletAddrs, evmAddress) {
 function getTransactionSummaryEVM(tx, walletAddress) {
     let isSender = tx.fromAddr.toUpperCase() === walletAddress.toUpperCase();
     let amt = new avalanche$1.BN(tx.value);
-    let amtClean = bnToAvaxC(amt);
+    let amtClean = bnToDjtxC(amt);
     let date = new Date(tx.createdAt);
     let gasLimit = new avalanche$1.BN(tx.gasLimit);
     let gasPrice = new avalanche$1.BN(tx.gasPrice);
@@ -4446,9 +4446,9 @@ function getImportSummary(tx, addresses) {
     let sourceChain = findSourceChain(tx);
     let chainAliasFrom = idToChainAlias(sourceChain);
     let chainAliasTo = idToChainAlias(tx.chainID);
-    let avaxID = activeNetwork.avaxID;
+    let djtxID = activeNetwork.djtxID;
     let outs = tx.outputs || [];
-    let amtOut = getAssetBalanceFromUTXOs(outs, addresses, avaxID, tx.chainID);
+    let amtOut = getAssetBalanceFromUTXOs(outs, addresses, djtxID, tx.chainID);
     let time = new Date(tx.timestamp);
     let fee = xChain.getTxFee();
     let res = {
@@ -4457,7 +4457,7 @@ function getImportSummary(tx, addresses) {
         source: chainAliasFrom,
         destination: chainAliasTo,
         amount: amtOut,
-        amountClean: bnToAvaxX(amtOut),
+        amountClean: bnToDjtxX(amtOut),
         timestamp: time,
         type: 'import',
         fee: fee,
@@ -4470,10 +4470,10 @@ function getExportSummary(tx, addresses) {
     let chainAliasFrom = idToChainAlias(sourceChain);
     let destinationChain = findDestinationChain(tx);
     let chainAliasTo = idToChainAlias(destinationChain);
-    let avaxID = activeNetwork.avaxID;
+    let djtxID = activeNetwork.djtxID;
     let outs = tx.outputs || [];
-    let amtOut = getAssetBalanceFromUTXOs(outs, addresses, avaxID, destinationChain);
-    // let amtIn = getAssetBalanceFromUTXOs(inUtxos, addresses, avaxID);
+    let amtOut = getAssetBalanceFromUTXOs(outs, addresses, djtxID, destinationChain);
+    // let amtIn = getAssetBalanceFromUTXOs(inUtxos, addresses, djtxID);
     let time = new Date(tx.timestamp);
     let fee = xChain.getTxFee();
     let res = {
@@ -4482,7 +4482,7 @@ function getExportSummary(tx, addresses) {
         source: chainAliasFrom,
         destination: chainAliasTo,
         amount: amtOut,
-        amountClean: bnToAvaxX(amtOut),
+        amountClean: bnToDjtxX(amtOut),
         timestamp: time,
         type: 'export',
         fee: fee,
@@ -4492,9 +4492,9 @@ function getExportSummary(tx, addresses) {
 function getValidatorSummary(tx, ownerAddrs) {
     let time = new Date(tx.timestamp);
     let pChainID = activeNetwork.pChainID;
-    let avaxID = activeNetwork.avaxID;
+    let djtxID = activeNetwork.djtxID;
     let outs = tx.outputs || [];
-    let stakeAmt = getAssetBalanceFromUTXOs(outs, ownerAddrs, avaxID, pChainID, true);
+    let stakeAmt = getAssetBalanceFromUTXOs(outs, ownerAddrs, djtxID, pChainID, true);
     return {
         id: tx.id,
         nodeID: tx.validatorNodeID,
@@ -4504,7 +4504,7 @@ function getValidatorSummary(tx, ownerAddrs) {
         type: 'add_validator',
         fee: new avalanche$1.BN(0),
         amount: stakeAmt,
-        amountClean: bnToAvaxP(stakeAmt),
+        amountClean: bnToDjtxP(stakeAmt),
         memo: parseMemo(tx.memo),
         isRewarded: tx.rewarded,
     };
@@ -4514,9 +4514,9 @@ function getImportSummaryC(tx, ownerAddr) {
     let sourceChain = findSourceChain(tx);
     let chainAliasFrom = idToChainAlias(sourceChain);
     let chainAliasTo = idToChainAlias(tx.chainID);
-    let avaxID = activeNetwork.avaxID;
+    let djtxID = activeNetwork.djtxID;
     let outs = tx.outputs || [];
-    let amtOut = getEvmAssetBalanceFromUTXOs(outs, ownerAddr, avaxID, tx.chainID);
+    let amtOut = getEvmAssetBalanceFromUTXOs(outs, ownerAddr, djtxID, tx.chainID);
     let time = new Date(tx.timestamp);
     let fee = xChain.getTxFee();
     let res = {
@@ -4524,7 +4524,7 @@ function getImportSummaryC(tx, ownerAddr) {
         source: chainAliasFrom,
         destination: chainAliasTo,
         amount: amtOut,
-        amountClean: bnToAvaxX(amtOut),
+        amountClean: bnToDjtxX(amtOut),
         timestamp: time,
         type: 'import',
         fee: fee,
@@ -4789,7 +4789,7 @@ class UniversalNode {
      * Assumes there is enough balance on node tree
      * Returns empty array even if transaction not possible!
      * What steps to take to have the target balance on this node.
-     * @param target Amount of nAVAX needed on this node.
+     * @param target Amount of nDJTX needed on this node.
      */
     getStepsForTargetBalance(target) {
         // If the node has enough balance no transaction needed
@@ -4839,7 +4839,7 @@ class UniversalNode {
             }
             // If we still have remaining balance, we can not complete this transfer
             if (remaining.gt(new avalanche$1.BN(0))) {
-                throw new Error('Insufficient AVAX balances.');
+                throw new Error('Insufficient DJTX balances.');
             }
             return transactions;
         }
@@ -4885,21 +4885,21 @@ function createGraphForX(balX, balP, balC) {
 function getStepsForBalanceP(balX, balP, balC, targetAmount) {
     let startNode = createGraphForP(balX, balP, balC);
     if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {
-        throw new Error('Insufficient AVAX.');
+        throw new Error('Insufficient DJTX.');
     }
     return startNode.getStepsForTargetBalance(targetAmount);
 }
 function getStepsForBalanceC(balX, balP, balC, targetAmount) {
     let startNode = createGraphForC(balX, balP, balC);
     if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {
-        throw new Error('Insufficient AVAX.');
+        throw new Error('Insufficient DJTX.');
     }
     return startNode.getStepsForTargetBalance(targetAmount);
 }
 function getStepsForBalanceX(balX, balP, balC, targetAmount) {
     let startNode = createGraphForX(balX, balP, balC);
     if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {
-        throw new Error('Insufficient AVAX.');
+        throw new Error('Insufficient DJTX.');
     }
     return startNode.getStepsForTargetBalance(targetAmount);
 }
@@ -4944,18 +4944,18 @@ class WalletProvider {
         this.emit('balanceChangedX', this.balanceX);
     }
     emitBalanceChangeP() {
-        this.emit('balanceChangedP', this.getAvaxBalanceP());
+        this.emit('balanceChangedP', this.getDjtxBalanceP());
     }
     emitBalanceChangeC() {
-        this.emit('balanceChangedC', this.getAvaxBalanceC());
+        this.emit('balanceChangedC', this.getDjtxBalanceC());
     }
     /**
      *
      * @param to - the address funds are being send to.
-     * @param amount - amount of AVAX to send in nAVAX
+     * @param amount - amount of DJTX to send in nDJTX
      * @param memo - A MEMO for the transaction
      */
-    sendAvaxX(to, amount, memo) {
+    sendDjtxX(to, amount, memo) {
         return __awaiter(this, void 0, void 0, function* () {
             if (!activeNetwork)
                 throw NO_NETWORK;
@@ -4963,7 +4963,7 @@ class WalletProvider {
             let froms = this.getAllAddressesX();
             let changeAddress = this.getChangeAddressX();
             let utxoSet = this.utxosX;
-            let tx = yield xChain.buildBaseTx(utxoSet, amount, activeNetwork.avaxID, [to], froms, [changeAddress], memoBuff);
+            let tx = yield xChain.buildBaseTx(utxoSet, amount, activeNetwork.djtxID, [to], froms, [changeAddress], memoBuff);
             let signedTx = yield this.signX(tx);
             let txId = yield xChain.issueTx(signedTx);
             yield waitTxX(txId);
@@ -4973,20 +4973,20 @@ class WalletProvider {
         });
     }
     /**
-     * Sends AVAX to another address on the C chain.
-     * @param to Hex address to send AVAX to.
-     * @param amount Amount of AVAX to send, represented in WEI format.
+     * Sends DJTX to another address on the C chain.
+     * @param to Hex address to send DJTX to.
+     * @param amount Amount of DJTX to send, represented in WEI format.
      * @param gasPrice Gas price in WEI format
      * @param gasLimit Gas limit
      *
      * @return Returns the transaction hash
      */
-    sendAvaxC(to, amount, gasPrice, gasLimit) {
+    sendDjtxC(to, amount, gasPrice, gasLimit) {
         return __awaiter(this, void 0, void 0, function* () {
             let fromAddr = this.getAddressC();
             let tx = yield buildEvmTransferNativeTx(fromAddr, to, amount, gasPrice, gasLimit);
             let txId = yield this.issueEvmTx(tx);
-            yield this.updateAvaxBalanceC();
+            yield this.updateDjtxBalanceC();
             return txId;
         });
     }
@@ -5049,14 +5049,14 @@ class WalletProvider {
         });
     }
     /**
-     * Estimate the gas needed for a AVAX send transaction on the C chain.
+     * Estimate the gas needed for a DJTX send transaction on the C chain.
      * @param to Destination address.
-     * @param amount Amount of AVAX to send, in WEI.
+     * @param amount Amount of DJTX to send, in WEI.
      */
-    estimateAvaxGasLimit(to, amount, gasPrice) {
+    estimateDjtxGasLimit(to, amount, gasPrice) {
         return __awaiter(this, void 0, void 0, function* () {
             let from = this.getAddressC();
-            return yield estimateAvaxGas(from, to, amount, gasPrice);
+            return yield estimateDjtxGas(from, to, amount, gasPrice);
         });
     }
     /**
@@ -5076,11 +5076,11 @@ class WalletProvider {
         });
     }
     /**
-     * Returns the maximum spendable AVAX balance for the given chain.
+     * Returns the maximum spendable DJTX balance for the given chain.
      * Scans all chains and take cross over fees into account
      * @param chainType X, P or C
      */
-    getUsableAvaxBalanceForChain(chainType) {
+    getUsableDjtxBalanceForChain(chainType) {
         return this.createUniversalNode(chainType).reduceTotalBalanceFromParents();
     }
     /**
@@ -5089,9 +5089,9 @@ class WalletProvider {
      * @private
      */
     createUniversalNode(chain) {
-        let xBal = this.getAvaxBalanceX().unlocked;
-        let pBal = this.getAvaxBalanceP().unlocked;
-        let cBal = avaxCtoX(this.getAvaxBalanceC()); // need to use 9 decimal places
+        let xBal = this.getDjtxBalanceX().unlocked;
+        let pBal = this.getDjtxBalanceP().unlocked;
+        let cBal = djtxCtoX(this.getDjtxBalanceC()); // need to use 9 decimal places
         switch (chain) {
             case 'X':
                 return createGraphForX(xBal, pBal, cBal);
@@ -5107,7 +5107,7 @@ class WalletProvider {
      * @param amount The amount to check against
      */
     canHaveBalanceOnChain(chain, amount) {
-        // The maximum amount of AVAX we can have on this chain
+        // The maximum amount of DJTX we can have on this chain
         let maxAmt = this.createUniversalNode(chain).reduceTotalBalanceFromParents();
         return maxAmt.gte(amount);
     }
@@ -5117,9 +5117,9 @@ class WalletProvider {
      * @param amount The desired amount
      */
     getTransactionsForBalance(chain, amount) {
-        let xBal = this.getAvaxBalanceX().unlocked;
-        let pBal = this.getAvaxBalanceP().unlocked;
-        let cBal = avaxCtoX(this.getAvaxBalanceC()); // need to use 9 decimal places
+        let xBal = this.getDjtxBalanceX().unlocked;
+        let pBal = this.getDjtxBalanceP().unlocked;
+        let cBal = djtxCtoX(this.getDjtxBalanceC()); // need to use 9 decimal places
         switch (chain) {
             case 'P':
                 return getStepsForBalanceP(xBal, pBal, cBal, amount);
@@ -5143,9 +5143,9 @@ class WalletProvider {
         });
     }
     /**
-     * Returns the C chain AVAX balance of the wallet in WEI format.
+     * Returns the C chain DJTX balance of the wallet in WEI format.
      */
-    updateAvaxBalanceC() {
+    updateDjtxBalanceC() {
         return __awaiter(this, void 0, void 0, function* () {
             let balOld = this.evmWallet.getBalance();
             let balNew = yield this.evmWallet.updateBalance();
@@ -5197,7 +5197,7 @@ class WalletProvider {
         return this.utxosP;
     }
     /**
-     * Returns the number AVAX staked by this wallet.
+     * Returns the number DJTX staked by this wallet.
      */
     getStake() {
         return __awaiter(this, void 0, void 0, function* () {
@@ -5281,11 +5281,11 @@ class WalletProvider {
                 }
                 res[assetId] = asset;
             }
-            // If there are no AVAX UTXOs create a dummy empty balance object
-            let avaxID = activeNetwork.avaxID;
-            if (!res[avaxID]) {
-                let assetInfo = yield getAssetDescription(avaxID);
-                res[avaxID] = {
+            // If there are no DJTX UTXOs create a dummy empty balance object
+            let djtxID = activeNetwork.djtxID;
+            if (!res[djtxID]) {
+                let assetInfo = yield getAssetDescription(djtxID);
+                res[djtxID] = {
                     locked: new avalanche$1.BN(0),
                     unlocked: new avalanche$1.BN(0),
                     meta: assetInfo,
@@ -5301,13 +5301,13 @@ class WalletProvider {
         return this.balanceX;
     }
     /**
-     * A helpful method that returns the AVAX balance on X, P, C chains.
-     * Internally calls chain specific getAvaxBalance methods.
+     * A helpful method that returns the DJTX balance on X, P, C chains.
+     * Internally calls chain specific getDjtxBalance methods.
      */
-    getAvaxBalance() {
-        let X = this.getAvaxBalanceX();
-        let P = this.getAvaxBalanceP();
-        let C = this.getAvaxBalanceC();
+    getDjtxBalance() {
+        let X = this.getDjtxBalanceX();
+        let P = this.getDjtxBalanceP();
+        let C = this.getDjtxBalanceC();
         return {
             X,
             P,
@@ -5315,28 +5315,28 @@ class WalletProvider {
         };
     }
     /**
-     * Returns the X chain AVAX balance of the current wallet state.
+     * Returns the X chain DJTX balance of the current wallet state.
      * - Does not make a network request.
      * - Does not refresh wallet balance.
      */
-    getAvaxBalanceX() {
+    getDjtxBalanceX() {
         if (!activeNetwork) {
             throw new Error('Network not selected.');
         }
-        return (this.balanceX[activeNetwork.avaxID] || {
+        return (this.balanceX[activeNetwork.djtxID] || {
             unlocked: new avalanche$1.BN(0),
             locked: new avalanche$1.BN(0),
         });
     }
-    getAvaxBalanceC() {
+    getDjtxBalanceC() {
         return this.evmWallet.getBalance();
     }
     /**
-     * Returns the P chain AVAX balance of the current wallet state.
+     * Returns the P chain DJTX balance of the current wallet state.
      * - Does not make a network request.
      * - Does not refresh wallet balance.
      */
-    getAvaxBalanceP() {
+    getDjtxBalanceP() {
         let unlocked = new avalanche$1.BN(0);
         let locked = new avalanche$1.BN(0);
         let lockedStakeable = new avalanche$1.BN(0);
@@ -5373,11 +5373,11 @@ class WalletProvider {
         };
     }
     /**
-     * Exports AVAX from P chain to X chain
+     * Exports DJTX from P chain to X chain
      * @remarks
      * The export transaction will cover the Export + Import Fees
      *
-     * @param amt amount of nAVAX to transfer
+     * @param amt amount of nDJTX to transfer
      * @return returns the transaction id.
      */
     exportPChain(amt) {
@@ -5398,11 +5398,11 @@ class WalletProvider {
         });
     }
     /**
-     * Exports AVAX from C chain to X chain
+     * Exports DJTX from C chain to X chain
      * @remarks
      * The export transaction will cover the Export + Import Fees
      *
-     * @param amt amount of nAVAX to transfer
+     * @param amt amount of nDJTX to transfer
      * @return returns the transaction id.
      */
     exportCChain(amt) {
@@ -5417,16 +5417,16 @@ class WalletProvider {
             let tx = yield this.signC(exportTx);
             let txId = yield cChain.issueTx(tx);
             yield waitTxC(txId);
-            yield this.updateAvaxBalanceC();
+            yield this.updateDjtxBalanceC();
             return txId;
         });
     }
     /**
-     * Exports AVAX from X chain to either P or C chain
+     * Exports DJTX from X chain to either P or C chain
      * @remarks
      * The export transaction will cover the Export + Import Fees
      *
-     * @param amt amount of nAVAX to transfer
+     * @param amt amount of nDJTX to transfer
      * @param destinationChain Which chain to export to.
      * @return returns the transaction id.
      */
@@ -5540,7 +5540,7 @@ class WalletProvider {
             let tx = yield this.signC(unsignedTx);
             let id = yield cChain.issueTx(tx);
             yield waitTxC(id);
-            yield this.updateAvaxBalanceC();
+            yield this.updateDjtxBalanceC();
             return id;
         });
     }
@@ -5572,7 +5572,7 @@ class WalletProvider {
      * Adds a validator to the network using the given node id.
      *
      * @param nodeID The node id you are adding as a validator
-     * @param amt Amount of AVAX to stake in nAVAX
+     * @param amt Amount of DJTX to stake in nDJTX
      * @param start Validation period start date
      * @param end Validation period end date
      * @param delegationFee Minimum 2%
@@ -6113,7 +6113,7 @@ class MnemonicWallet extends HDWalletAbstract {
     constructor(mnemonic) {
         let seed = bip39__namespace.mnemonicToSeedSync(mnemonic);
         let masterHdKey = HDKey__default['default'].fromMasterSeed(seed);
-        let accountKey = masterHdKey.derive(AVAX_ACCOUNT_PATH);
+        let accountKey = masterHdKey.derive(DJTX_ACCOUNT_PATH);
         super(accountKey);
         this.type = 'mnemonic';
         if (!bip39__namespace.validateMnemonic(mnemonic)) {
@@ -8132,16 +8132,16 @@ exports.default = Avalanche;
 
 });
 
-var AppAvax = unwrapExports(Avalanche_1);
+var AppDjtx = unwrapExports(Avalanche_1);
 
 // @ts-ignore
 class LedgerWallet extends HDWalletAbstract {
-    constructor(avaxAcct, evmAcct, avaxApp, ethApp, config) {
-        super(avaxAcct);
+    constructor(djtxAcct, evmAcct, djtxApp, ethApp, config) {
+        super(djtxAcct);
         this.type = 'ledger';
         this.evmAccount = evmAcct;
         this.config = config;
-        this.appAvax = avaxApp;
+        this.appDjtx = djtxApp;
         this.ethApp = ethApp;
         this.evmWallet = new EvmWalletReadonly(ethereumjsUtil.importPublic(evmAcct.publicKey));
     }
@@ -8154,7 +8154,7 @@ class LedgerWallet extends HDWalletAbstract {
             transport.setExchangeTimeout(LEDGER_EXCHANGE_TIMEOUT);
             let app, eth;
             try {
-                app = new AppAvax(transport, 'w0w');
+                app = new AppDjtx(transport, 'w0w');
                 eth = new Eth(transport, 'w0w');
             }
             catch (e) {
@@ -8170,9 +8170,9 @@ class LedgerWallet extends HDWalletAbstract {
             return yield LedgerWallet.fromApp(app, eth);
         });
     }
-    static getAvaxAccount(app) {
+    static getDjtxAccount(app) {
         return __awaiter(this, void 0, void 0, function* () {
-            let res = yield app.getWalletExtendedPublicKey(AVAX_ACCOUNT_PATH);
+            let res = yield app.getWalletExtendedPublicKey(DJTX_ACCOUNT_PATH);
             let hd = new HDKey__default['default']();
             hd.publicKey = res.public_key;
             hd.chainCode = res.chain_code;
@@ -8193,10 +8193,10 @@ class LedgerWallet extends HDWalletAbstract {
     static fromApp(app, eth) {
         return __awaiter(this, void 0, void 0, function* () {
             try {
-                let avaxAccount = yield LedgerWallet.getAvaxAccount(app);
+                let djtxAccount = yield LedgerWallet.getDjtxAccount(app);
                 let evmAccount = yield LedgerWallet.getEvmAccount(eth);
                 let config = yield app.getAppConfiguration();
-                return new LedgerWallet(avaxAccount, evmAccount, app, eth, config);
+                return new LedgerWallet(djtxAccount, evmAccount, app, eth, config);
             }
             catch (e) {
                 throw new Error('Unable to create ledger wallet instance from the given apps.');
@@ -8261,15 +8261,15 @@ class LedgerWallet extends HDWalletAbstract {
         }
         let hrp = avalanche.getHRP();
         let paths = [];
-        let isAvaxOnly = true;
+        let isDjtxOnly = true;
         // Collect paths derivation paths for source addresses
         for (let i = 0; i < items.length; i++) {
             let item = items[i];
             let assetId = bintools.cb58Encode(item.getAssetID());
             // @ts-ignore
             // if (assetId !== store.state.Assets.AVA_ASSET_ID) {
-            if (assetId !== activeNetwork.avaxID) {
-                isAvaxOnly = false;
+            if (assetId !== activeNetwork.djtxID) {
+                isDjtxOnly = false;
             }
             let sigidxs = item.getInput().getSigIdxs();
             let sources = sigidxs.map((sigidx) => sigidx.getSource());
@@ -8296,7 +8296,7 @@ class LedgerWallet extends HDWalletAbstract {
                 paths.push(pathStr);
             }
         }
-        return { paths, isAvaxOnly };
+        return { paths, isDjtxOnly };
     }
     getPathFromAddress(address) {
         let externalAddrs = this.externalScan.getAllAddresses();
@@ -8327,10 +8327,10 @@ class LedgerWallet extends HDWalletAbstract {
             let txType = tx.getTxType();
             let chainId = 'X';
             let parseableTxs = ParseableAvmTxEnum;
-            let { paths, isAvaxOnly } = this.getTransactionPaths(unsignedTx, chainId);
+            let { paths, isDjtxOnly } = this.getTransactionPaths(unsignedTx, chainId);
             // If ledger doesnt support parsing, sign hash
             let canLedgerParse = this.config.version >= '0.3.1';
-            let isParsableType = txType in parseableTxs && isAvaxOnly;
+            let isParsableType = txType in parseableTxs && isDjtxOnly;
             let signedTx;
             if (canLedgerParse && isParsableType) {
                 signedTx = yield this.signTransactionParsable(unsignedTx, paths, chainId);
@@ -8384,7 +8384,7 @@ class LedgerWallet extends HDWalletAbstract {
         // changeIdx = this.platformHelper.getFirstAvailableIndex()
         // changeIdx = this.externalScan.getIndex();
         // }
-        return bip32Path.fromString(`${AVAX_ACCOUNT_PATH}/${chainChangePath}/${changeIdx}`);
+        return bip32Path.fromString(`${DJTX_ACCOUNT_PATH}/${chainChangePath}/${changeIdx}`);
     }
     // Used for signing transactions that are parsable
     signTransactionParsable(unsignedTx, paths, chainId) {
@@ -8398,7 +8398,7 @@ class LedgerWallet extends HDWalletAbstract {
             }[chainId];
             `Sign ${parseableTxs[txType]}`;
             let bip32Paths = this.pathsToUniqueBipPaths(paths);
-            const accountPath = chainId === 'C' ? bip32Path.fromString(`${ETH_ACCOUNT_PATH}`) : bip32Path.fromString(`${AVAX_ACCOUNT_PATH}`);
+            const accountPath = chainId === 'C' ? bip32Path.fromString(`${ETH_ACCOUNT_PATH}`) : bip32Path.fromString(`${DJTX_ACCOUNT_PATH}`);
             let txbuff = unsignedTx.toBuffer();
             let changePath = this.getChangeBipPath(unsignedTx, chainId);
             // let messages = this.getTransactionMessages<UnsignedTx>(unsignedTx, chainId, changePath)
@@ -8408,7 +8408,7 @@ class LedgerWallet extends HDWalletAbstract {
             //     messages: messages,
             //     info: null,
             // })
-            let ledgerSignedTx = yield this.appAvax.signTransaction(accountPath, bip32Paths, txbuff, changePath);
+            let ledgerSignedTx = yield this.appDjtx.signTransaction(accountPath, bip32Paths, txbuff, changePath);
             let sigMap = ledgerSignedTx.signatures;
             let creds = this.getCredentials(unsignedTx, paths, sigMap, chainId);
             let signedTx;
@@ -8444,8 +8444,8 @@ class LedgerWallet extends HDWalletAbstract {
             // })
             let bip32Paths = this.pathsToUniqueBipPaths(paths);
             // Sign the msg with ledger
-            const accountPath = bip32Path.fromString(`${AVAX_ACCOUNT_PATH}`);
-            let sigMap = yield this.appAvax.signHash(accountPath, bip32Paths, msg);
+            const accountPath = bip32Path.fromString(`${DJTX_ACCOUNT_PATH}`);
+            let sigMap = yield this.appDjtx.signHash(accountPath, bip32Paths, msg);
             // store.commit('Ledger/closeModal')
             let creds = this.getCredentials(unsignedTx, paths, sigMap, chainId);
             let signedTx;
@@ -8562,10 +8562,10 @@ class LedgerWallet extends HDWalletAbstract {
             let txType = tx.getTxType();
             let chainId = 'P';
             let parseableTxs = ParseablePlatformEnum;
-            let { paths, isAvaxOnly } = this.getTransactionPaths(unsignedTx, chainId);
+            let { paths, isDjtxOnly } = this.getTransactionPaths(unsignedTx, chainId);
             // If ledger doesnt support parsing, sign hash
             let canLedgerParse = this.config.version >= '0.3.1';
-            let isParsableType = txType in parseableTxs && isAvaxOnly;
+            let isParsableType = txType in parseableTxs && isDjtxOnly;
             // TODO: Remove after ledger is fixed
             // If UTXOS contain lockedStakeable funds always use sign hash
             let txIns = unsignedTx.getTransaction().getIns();
@@ -8649,22 +8649,22 @@ class PublicMnemonicWallet extends HDWalletAbstract {
 var index = /*#__PURE__*/Object.freeze({
     __proto__: null,
     bnToBig: bnToBig,
-    avaxCtoX: avaxCtoX,
-    avaxXtoC: avaxXtoC,
-    avaxPtoC: avaxPtoC,
-    bnToBigAvaxX: bnToBigAvaxX,
-    bnToBigAvaxP: bnToBigAvaxP,
-    bnToBigAvaxC: bnToBigAvaxC,
-    bnToAvaxC: bnToAvaxC,
-    bnToAvaxX: bnToAvaxX,
-    bnToAvaxP: bnToAvaxP,
+    djtxCtoX: djtxCtoX,
+    djtxXtoC: djtxXtoC,
+    djtxPtoC: djtxPtoC,
+    bnToBigDjtxX: bnToBigDjtxX,
+    bnToBigDjtxP: bnToBigDjtxP,
+    bnToBigDjtxC: bnToBigDjtxC,
+    bnToDjtxC: bnToDjtxC,
+    bnToDjtxX: bnToDjtxX,
+    bnToDjtxP: bnToDjtxP,
     numberToBN: numberToBN,
-    numberToBNAvaxX: numberToBNAvaxX,
-    numberToBNAvaxP: numberToBNAvaxP,
-    numberToBNAvaxC: numberToBNAvaxC,
+    numberToBNDjtxX: numberToBNDjtxX,
+    numberToBNDjtxP: numberToBNDjtxP,
+    numberToBNDjtxC: numberToBNDjtxC,
     bnToLocaleString: bnToLocaleString,
     bigToLocaleString: bigToLocaleString,
-    getAvaxPrice: getAvaxPrice,
+    getDjtxPrice: getDjtxPrice,
     isValidAddress: isValidAddress,
     digestMessage: digestMessage,
     waitTxX: waitTxX,
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/dist/index.js.map b/node_modules/@avalabs/avalanche-wallet-sdk/dist/index.js.map
index b94587e..94999e8 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/dist/index.js.map
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/dist/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sources":["../src/Network/helpers/rpcFromConfig.ts","../src/Network/constants.ts","../node_modules/url/node_modules/punycode/punycode.js","../node_modules/url/util.js","../node_modules/querystring/decode.js","../node_modules/querystring/encode.js","../node_modules/querystring/index.js","../node_modules/url/url.js","../src/common.ts","../src/helpers/network_helper.ts","../src/Network/network.ts","../src/Network/providers/AVMWebSocketProvider.ts","../src/Network/providers/EVMWebSocketProvider.ts","../src/Network/providers/WebsocketProvider.ts","../src/errors.ts","../src/Asset/Erc20Token.ts","../src/Asset/Erc20.ts","../src/Network/index.ts","../src/Asset/Assets.ts","../src/Wallet/constants.ts","../src/Wallet/EvmWalletReadonly.ts","../src/Wallet/EvmWallet.ts","../src/helpers/address_helper.ts","../src/utils/utils.ts","../src/helpers/tx_helper.ts","../src/helpers/utxo_helper.ts","../node_modules/events/events.js","../src/History/history.ts","../src/helpers/UniversalNode.ts","../src/helpers/universal_tx_helper.ts","../src/Wallet/Wallet.ts","../src/Explorer/Explorer.ts","../src/Wallet/HdScanner.ts","../src/Wallet/HDWalletAbstract.ts","../src/Wallet/MnemonicWallet.ts","../src/Wallet/SingletonWallet.ts","../node_modules/@ledgerhq/hw-app-eth/lib/utils.js","../node_modules/@ledgerhq/errors/dist/index.cjs.js","../node_modules/@ledgerhq/hw-app-eth/lib/Eth.js","../node_modules/bip32-path/index.js","../node_modules/@obsidiansystems/hw-app-avalanche/lib/Avalanche.js","../src/Wallet/LedgerWallet.ts","../src/Wallet/PublicMnemonicWallet.ts","../src/Keystore/Crypto.ts","../src/Keystore/keystore.ts"],"sourcesContent":["import { NetworkConfig } from '../types';\n\nexport function getRpcC(conf: NetworkConfig) {\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/C/rpc`;\n}\nexport function getRpcX(conf: NetworkConfig) {\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/X`;\n}\nexport function getRpcP(conf: NetworkConfig) {\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/P`;\n}\n","import { NetworkConfig } from './types';\n// import { AVMConstants } from 'avalanche/dist/apis/avm';\n// import Avalanche, { AvalancheCore } from 'avalanche';\nimport { Defaults } from 'avalanche/dist/utils';\nimport { getRpcC, getRpcP, getRpcX } from './helpers/rpcFromConfig';\n\nexport const MainnetConfig: NetworkConfig = {\n    rawUrl: 'https://api.avax.network',\n    apiProtocol: 'https',\n    apiIp: 'api.avax.network',\n    apiPort: 443,\n    explorerURL: 'https://explorerapi.avax.network',\n    explorerSiteURL: 'https://explorer.avax.network',\n    networkID: 1,\n    // @ts-ignore\n    xChainID: Defaults.network[1]['X']['blockchainID'],\n    // @ts-ignore\n    pChainID: Defaults.network[1]['P']['blockchainID'],\n    // @ts-ignore\n    cChainID: Defaults.network[1]['C']['blockchainID'],\n    // @ts-ignore\n    evmChainID: Defaults.network[1]['C']['chainID'],\n    // @ts-ignore\n    avaxID: Defaults.network[1]['X']['avaxAssetID'],\n    get rpcUrl() {\n        return {\n            c: getRpcC(this),\n            p: getRpcP(this),\n            x: getRpcX(this),\n        };\n    },\n};\n\nexport const TestnetConfig: NetworkConfig = {\n    rawUrl: 'https://api.avax-test.network',\n    apiProtocol: 'https',\n    apiIp: 'api.avax-test.network',\n    apiPort: 443,\n    explorerURL: 'https://explorerapi.avax-test.network',\n    explorerSiteURL: 'https://explorer.avax-test.network',\n    networkID: 5,\n    // @ts-ignore\n    xChainID: Defaults.network[5]['X']['blockchainID'],\n    // @ts-ignore\n    pChainID: Defaults.network[5]['P']['blockchainID'],\n    // @ts-ignore\n    cChainID: Defaults.network[5]['C']['blockchainID'],\n    // @ts-ignore\n    evmChainID: Defaults.network[5]['C']['chainID'],\n    // @ts-ignore\n    avaxID: Defaults.network[5]['X']['avaxAssetID'],\n    get rpcUrl() {\n        return {\n            c: getRpcC(this),\n            p: getRpcP(this),\n            x: getRpcX(this),\n        };\n    },\n};\n\nexport const LocalnetConfig: NetworkConfig = {\n    rawUrl: 'http://localhost:9650',\n    apiProtocol: 'http',\n    apiIp: 'localhost',\n    apiPort: 9650,\n    networkID: 12345,\n    // @ts-ignore\n    xChainID: Defaults.network[12345]['X']['blockchainID'],\n    // @ts-ignore\n    pChainID: Defaults.network[12345]['P']['blockchainID'],\n    // @ts-ignore\n    cChainID: Defaults.network[12345]['C']['blockchainID'],\n    // @ts-ignore\n    evmChainID: Defaults.network[12345]['C']['chainID'],\n    // @ts-ignore\n    avaxID: Defaults.network[12345]['X']['avaxAssetID'],\n    get rpcUrl() {\n        return {\n            c: getRpcC(this),\n            p: getRpcP(this),\n            x: getRpcX(this),\n        };\n    },\n};\n\n// Default network connection\nexport const DefaultConfig = MainnetConfig;\n","/*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n","import { BinTools } from 'avalanche';\n\nexport const bintools = BinTools.getInstance();\n","import { NetworkConfig } from '@/Network/types';\nimport axios from 'axios';\nimport { Avalanche } from 'avalanche';\n\nexport function wsUrlFromConfigX(config: NetworkConfig): string {\n    let protocol = config.apiProtocol === 'http' ? 'ws' : 'wss';\n    return `${protocol}://${config.apiIp}:${config.apiPort}/ext/bc/X/events`;\n}\n\nexport function wsUrlFromConfigEVM(config: NetworkConfig): string {\n    let protocol = config.apiProtocol === 'http' ? 'ws' : 'wss';\n    return `${protocol}://${config.apiIp}:${config.apiPort}/ext/bc/C/ws`;\n}\n\n/**\n * Given the base url of an Avalanche API, requests the Network ID\n * @param url The base url for the Avalanche API\n */\nexport async function getNetworkIdFromURL(url: string): Promise<number> {\n    // TODO: Not be the best to assume /ext/info but Avalanchejs complicates things\n    let res = await axios.post(url + '/ext/info', {\n        jsonrpc: '2.0',\n        id: 1,\n        method: 'info.getNetworkID',\n    });\n    return parseInt(res.data.result.networkID);\n}\n\nexport function createAvalancheProvider(config: NetworkConfig) {\n    return new Avalanche(config.apiIp, config.apiPort, config.apiProtocol, config.networkID);\n}\n/**\n * Given a network configuration returns an Axios instance connected to the explorer\n */\nexport function createExplorerApi(networkConfig: NetworkConfig) {\n    if (!networkConfig.explorerURL) {\n        throw new Error('Network configuration does not specify an explorer API.');\n    }\n\n    return axios.create({\n        baseURL: networkConfig.explorerURL,\n        withCredentials: false,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    });\n}\n\n/**\n * Checks if the given network accepts credentials.\n * This must be true to use cookies.\n */\nexport async function canUseCredentials(config: NetworkConfig): Promise<boolean> {\n    let provider = createAvalancheProvider(config);\n    provider.setRequestConfig('withCredentials', true);\n\n    let infoApi = provider.Info();\n\n    // Make a dummy request with credentials\n    try {\n        await infoApi.getNetworkID();\n        return true;\n        // eslint-disable-next-line\n    } catch (e) {}\n\n    provider.setRequestConfig('withCredentials', false);\n\n    try {\n        await infoApi.getNetworkID();\n    } catch (e) {\n        throw new Error('Unable to connect.');\n    }\n\n    return false;\n}\n","import { Avalanche } from 'avalanche/dist';\nimport { AVMAPI } from 'avalanche/dist/apis/avm';\nimport { InfoAPI } from 'avalanche/dist/apis/info';\nimport { EVMAPI } from 'avalanche/dist/apis/evm';\nimport Web3 from 'web3';\nimport { DefaultConfig } from './constants';\nimport { NetworkConfig, NetworkConfigRpc, NetworkProtocolType } from './types';\nimport { AxiosInstance } from 'axios';\nimport { getRpcC, getRpcP, getRpcX } from './helpers/rpcFromConfig';\nimport URL from 'url';\nimport { bintools } from '@/common';\nimport {\n    canUseCredentials,\n    createAvalancheProvider,\n    createExplorerApi,\n    getNetworkIdFromURL,\n} from '@/helpers/network_helper';\n\nexport const avalanche: Avalanche = createAvalancheProvider(DefaultConfig);\n\nexport const xChain: AVMAPI = avalanche.XChain();\nexport const cChain: EVMAPI = avalanche.CChain();\nexport const pChain = avalanche.PChain();\nexport const infoApi: InfoAPI = avalanche.Info();\n\nfunction getProviderFromUrl(url: string, credentials = false) {\n    return new Web3.providers.HttpProvider(url, {\n        timeout: 20000,\n        withCredentials: credentials,\n    });\n}\n\nconst rpcUrl = getRpcC(DefaultConfig);\nexport const web3 = new Web3(getProviderFromUrl(rpcUrl, true));\n\nexport let explorer_api: AxiosInstance | null = null;\nexport let activeNetwork: NetworkConfig = DefaultConfig;\n\n/**\n * Returns the evm chain ID of the active network\n */\nexport function getEvmChainID(): number {\n    return activeNetwork.evmChainID;\n}\n\n/**\n * Similar to `setRpcNetwork`, but checks if credentials can be used with the api.\n * @param config\n */\nexport async function setRpcNetworkAsync(config: NetworkConfig): Promise<void> {\n    let credentials = await canUseCredentials(config);\n    setRpcNetwork(config, credentials);\n}\n\n/**\n * Changes the connected network of the SDK.\n * This is a synchronous call that does not do any network requests.\n * @param conf\n * @param credentials\n */\nexport function setRpcNetwork(conf: NetworkConfig, credentials = true): void {\n    avalanche.setAddress(conf.apiIp, conf.apiPort, conf.apiProtocol);\n    avalanche.setNetworkID(conf.networkID);\n\n    if (credentials) {\n        avalanche.setRequestConfig('withCredentials', credentials);\n    } else {\n        avalanche.removeRequestConfig('withCredentials');\n    }\n\n    xChain.refreshBlockchainID(conf.xChainID);\n    xChain.setBlockchainAlias('X');\n\n    pChain.refreshBlockchainID(conf.pChainID);\n    pChain.setBlockchainAlias('P');\n\n    cChain.refreshBlockchainID(conf.cChainID);\n    cChain.setBlockchainAlias('C');\n\n    xChain.setAVAXAssetID(conf.avaxID);\n    pChain.setAVAXAssetID(conf.avaxID);\n    cChain.setAVAXAssetID(conf.avaxID);\n\n    if (conf.explorerURL) {\n        explorer_api = createExplorerApi(conf);\n    } else {\n        explorer_api = null;\n    }\n\n    let rpcUrl = getRpcC(conf);\n    web3.setProvider(getProviderFromUrl(rpcUrl, credentials));\n\n    activeNetwork = conf;\n}\n\n/**\n * Given the base url for an Avalanche API, returns a NetworkConfig object.\n * @param url A string including protocol, base domain, and ports (if any). Ex: `http://localhost:9650`\n */\nexport async function getConfigFromUrl(url: string): Promise<NetworkConfig> {\n    let urlObj = URL.parse(url);\n    let portStr = urlObj.port;\n\n    if (!urlObj.hostname || !urlObj.protocol) throw new Error('Invalid url.');\n\n    if (!portStr) {\n        portStr = urlObj.protocol === 'http:' ? '80' : '443';\n    }\n\n    // get network ID\n    let netID = await getNetworkIdFromURL(url);\n    let protocol: NetworkProtocolType = urlObj.protocol === 'http:' ? 'http' : 'https';\n\n    let connection = new Avalanche(urlObj.hostname, parseInt(portStr), protocol, netID);\n    // TODO: Use a helper for this\n    let connectionEvm = new Web3(urlObj.href + 'ext/bc/C/rpc');\n\n    let infoApi = connection.Info();\n    let xApi = connection.XChain();\n\n    let fetchIdX = infoApi.getBlockchainID('X');\n    let fetchIdP = infoApi.getBlockchainID('P');\n    let fetchIdC = infoApi.getBlockchainID('C');\n    let fetchEvmChainID = connectionEvm.eth.getChainId();\n    let fetchAvaxId = await xApi.getAVAXAssetID();\n\n    let values = await Promise.all([fetchIdX, fetchIdP, fetchIdC, fetchAvaxId, fetchEvmChainID]);\n\n    let idX = values[0];\n    let idP = values[1];\n    let idC = values[2];\n    let avaxId = bintools.cb58Encode(values[3]);\n    let evmChainId = values[4];\n\n    let config: NetworkConfig = {\n        rawUrl: url,\n        apiProtocol: protocol,\n        apiIp: urlObj.hostname,\n        apiPort: parseInt(portStr),\n        networkID: netID,\n        xChainID: idX,\n        pChainID: idP,\n        cChainID: idC,\n        avaxID: avaxId,\n        evmChainID: evmChainId,\n        get rpcUrl(): NetworkConfigRpc {\n            return {\n                c: getRpcC(this),\n                p: getRpcP(this),\n                x: getRpcX(this),\n            };\n        },\n    };\n\n    return config;\n}\n","import Sockette from 'sockette';\nimport { PubSub } from 'avalanche';\nimport { WalletType } from '@/Wallet/types';\n\nconst FILTER_ADDRESS_SIZE = 1000;\n\nexport default class AVMWebSocketProvider {\n    isConnected = false;\n    socket: Sockette;\n\n    wallets: WalletType[] = [];\n    boundHandler: any;\n\n    constructor(wsUrl: string) {\n        this.boundHandler = () => this.onWalletAddressChange();\n        this.socket = new Sockette(wsUrl, {\n            onopen: () => {\n                this.onOpen();\n            },\n            onclose: () => {\n                this.onClose();\n            },\n            onmessage: () => {\n                this.onMessage();\n            },\n            onerror: () => {\n                this.onError();\n            },\n        });\n    }\n\n    /**\n     * Starts watching for transactions on this wallet.\n     * @param wallet The wallet instance to track\n     */\n    trackWallet(wallet: WalletType): void {\n        if (this.wallets.includes(wallet)) {\n            return;\n        }\n        this.wallets.push(wallet);\n\n        wallet.on('addressChanged', this.boundHandler);\n        this.updateFilterAddresses();\n    }\n\n    onWalletAddressChange(): void {\n        this.updateFilterAddresses();\n    }\n\n    removeWallet(w: WalletType): void {\n        if (!this.wallets.includes(w)) {\n            return;\n        }\n\n        let index = this.wallets.indexOf(w);\n        this.wallets.splice(index, 1);\n        w.off('addressChanged', this.boundHandler);\n    }\n\n    setEndpoint(wsUrl: string): void {\n        this.socket.close();\n\n        this.socket = new Sockette(wsUrl, {\n            onopen: () => {\n                this.onOpen();\n            },\n            onclose: () => {\n                this.onClose();\n            },\n            onmessage: () => {\n                this.onMessage();\n            },\n            onerror: () => {\n                this.onError();\n            },\n        });\n    }\n\n    // Clears the filter listening to X chain transactions\n    clearFilter(): void {\n        let pubsub = new PubSub();\n        let bloom = pubsub.newBloom(FILTER_ADDRESS_SIZE);\n        this.socket.send(bloom);\n    }\n\n    /**\n     * Creates a bloom filter from the addresses of the tracked wallets and subscribes to\n     * transactions on the node.\n     */\n    updateFilterAddresses(): void {\n        if (!this.isConnected) {\n            return;\n        }\n\n        let wallets = this.wallets;\n\n        let addrs = [];\n        for (let i = 0; i < wallets.length; i++) {\n            let w = wallets[i];\n            let externalAddrs = w.getExternalAddressesX();\n            let addrsLen = externalAddrs.length;\n            let startIndex = Math.max(0, addrsLen - FILTER_ADDRESS_SIZE);\n            let addAddrs = externalAddrs.slice(startIndex);\n            addrs.push(...addAddrs);\n        }\n\n        let pubsub = new PubSub();\n        let bloom = pubsub.newBloom(FILTER_ADDRESS_SIZE);\n        this.socket.send(bloom);\n\n        // Divide addresses by 100 and send multiple messages\n        // There is a max msg size ~10kb\n        const GROUP_AMOUNT = 100;\n        let index = 0;\n        while (index < addrs.length) {\n            let chunk = addrs.slice(index, index + GROUP_AMOUNT);\n            let addAddrs = pubsub.addAddresses(chunk);\n            this.socket.send(addAddrs);\n            index += GROUP_AMOUNT;\n        }\n    }\n\n    private updateWalletBalanceX() {\n        this.wallets.forEach((w) => {\n            w.updateUtxosX();\n        });\n    }\n\n    private onOpen() {\n        this.isConnected = true;\n        this.updateFilterAddresses();\n    }\n\n    private onMessage() {\n        this.updateWalletBalanceX();\n    }\n\n    private onClose() {\n        this.isConnected = false;\n    }\n\n    private onError() {}\n}\n","import { ethers } from 'ethers';\nimport { WalletType } from '@/Wallet/types';\n\nconst SOCKET_RECONNECT_TIMEOUT = 1000;\n\nexport default class EVMWebSocketProvider {\n    provider: ethers.providers.WebSocketProvider;\n    wsUrl: string;\n    wallets: WalletType[] = [];\n\n    constructor(wsUrl: string) {\n        let provider = new ethers.providers.WebSocketProvider(wsUrl);\n        this.provider = provider;\n        this.wsUrl = wsUrl;\n\n        this.addListeners();\n    }\n\n    setEndpoint(wsUrl: string): void {\n        this.destroyConnection();\n        let provider = new ethers.providers.WebSocketProvider(wsUrl);\n        this.provider = provider;\n        this.wsUrl = wsUrl;\n\n        this.addListeners();\n    }\n\n    trackWallet(wallet: WalletType): void {\n        if (this.wallets.includes(wallet)) {\n            return;\n        }\n\n        this.wallets.push(wallet);\n    }\n\n    removeWallet(wallet: WalletType): void {\n        if (!this.wallets.includes(wallet)) {\n            return;\n        }\n\n        let index = this.wallets.indexOf(wallet);\n        this.wallets.splice(index, 1);\n    }\n\n    async destroyConnection(): Promise<void> {\n        this.provider._websocket.onclose = () => {};\n        await this.provider.destroy();\n    }\n\n    async reconnect(): Promise<void> {\n        // Clear the current onclose handler so that we dont attempt a reconnection\n        await this.destroyConnection();\n        let wsProvider = new ethers.providers.WebSocketProvider(this.wsUrl);\n        this.provider = wsProvider;\n    }\n\n    private addListeners() {\n        let provider = this.provider;\n\n        provider.on('block', () => {\n            this.onBlock();\n        });\n\n        // Save default function so we can keep calling it\n        let defaultOnOpen = provider._websocket.onopen;\n        let defaultOnClose = provider._websocket.onclose;\n\n        provider._websocket.onopen = (ev: any) => {\n            if (defaultOnOpen) defaultOnOpen(ev);\n        };\n\n        provider._websocket.onclose = (ev: any) => {\n            if (defaultOnClose) defaultOnClose(ev);\n\n            setTimeout(() => {\n                this.reconnect();\n            }, SOCKET_RECONNECT_TIMEOUT);\n        };\n    }\n\n    private removeListeners() {\n        this.provider.off('block', this.onBlock);\n    }\n\n    private onBlock() {\n        // Update wallet balances\n        this.wallets.forEach((w) => {\n            w.updateAvaxBalanceC();\n        });\n    }\n}\n","import AVMWebSocketProvider from '@/Network/providers/AVMWebSocketProvider';\nimport EVMWebSocketProvider from '@/Network/providers/EVMWebSocketProvider';\nimport { WalletType } from '@/Wallet/types';\nimport { NetworkConfig } from '@/Network/types';\nimport { wsUrlFromConfigEVM, wsUrlFromConfigX } from '@/helpers/network_helper';\nimport { activeNetwork } from '@/Network/network';\n\nexport default class WebsocketProvider {\n    avmProvider: AVMWebSocketProvider;\n    evmProvider: EVMWebSocketProvider;\n\n    constructor(avmEndpoint: string, evmEndpoint: string) {\n        this.avmProvider = new AVMWebSocketProvider(avmEndpoint);\n        this.evmProvider = new EVMWebSocketProvider(evmEndpoint);\n    }\n\n    static fromActiveNetwork(): WebsocketProvider {\n        return WebsocketProvider.fromNetworkConfig(activeNetwork);\n    }\n\n    static fromNetworkConfig(config: NetworkConfig): WebsocketProvider {\n        let evm = wsUrlFromConfigEVM(config);\n        let avm = wsUrlFromConfigX(config);\n        return new WebsocketProvider(avm, evm);\n    }\n\n    public setEndpoints(avmEndpoint: string, evmEndpoint: string): void {\n        this.avmProvider.setEndpoint(avmEndpoint);\n        this.evmProvider.setEndpoint(evmEndpoint);\n    }\n\n    public setNetwork(config: NetworkConfig): void {\n        let evm = wsUrlFromConfigEVM(config);\n        let avm = wsUrlFromConfigX(config);\n        this.setEndpoints(avm, evm);\n    }\n\n    public trackWallet(wallet: WalletType): void {\n        this.avmProvider.trackWallet(wallet);\n        this.evmProvider.trackWallet(wallet);\n    }\n\n    public removeWallet(wallet: WalletType): void {\n        this.avmProvider.removeWallet(wallet);\n        this.evmProvider.removeWallet(wallet);\n    }\n}\n","export const NO_NETWORK = new Error('No network selected.');\nexport const NO_EXPLORER_API = new Error('Explorer API not found.');\n","import { activeNetwork, web3 } from '@/Network/network';\nimport ERC20Abi from '@openzeppelin/contracts/build/contracts/ERC20.json';\nimport { Erc20TokenData } from '@/Asset/types';\nimport { NO_NETWORK } from '@/errors';\nimport { BN } from 'avalanche';\nimport { Contract } from 'web3-eth-contract';\nimport DOMPurify from 'dompurify';\n\nexport default class Erc20Token {\n    contract: Contract;\n    address: string;\n    name: string;\n    symbol: string;\n    decimals: number;\n    chainId: number;\n    data: Erc20TokenData;\n\n    constructor(data: Erc20TokenData) {\n        this.name = DOMPurify.sanitize(data.name);\n        this.symbol = DOMPurify.sanitize(data.symbol);\n        this.address = data.address;\n        this.decimals = data.decimals;\n        this.chainId = data.chainId;\n        this.data = data;\n\n        //@ts-ignore\n        this.contract = new web3.eth.Contract(ERC20Abi.abi, data.address);\n    }\n\n    toData(): Erc20TokenData {\n        return this.data;\n    }\n\n    static async getData(address: string): Promise<Erc20TokenData> {\n        //@ts-ignore\n        let contract = new web3.eth.Contract(ERC20Abi.abi, address);\n\n        // Purify the values for XSS protection\n        let name = DOMPurify.sanitize(await contract.methods.name().call());\n        let symbol = DOMPurify.sanitize(await contract.methods.symbol().call());\n        let decimals = parseInt(await contract.methods.decimals().call());\n\n        if (!activeNetwork) {\n            throw NO_NETWORK;\n        }\n\n        return {\n            name,\n            symbol,\n            decimals,\n            address,\n            chainId: activeNetwork.evmChainID,\n        };\n    }\n\n    async balanceOf(address: string): Promise<BN> {\n        let bal = await this.contract.methods.balanceOf(address).call();\n        return new BN(bal);\n    }\n}\n","import { Erc20Store, Erc20TokenData } from '@/Asset/types';\nimport Erc20Token from '@/Asset/Erc20Token';\n\nexport let erc20Cache: Erc20Store = {};\n\nexport function getErc20Cache(): Erc20Store {\n    return {\n        ...erc20Cache,\n    };\n}\n\n/**\n * Clears the internal erc20 cache.\n */\nexport function bustErc20Cache() {\n    erc20Cache = {};\n}\n\n/**\n * Fetches ERC20 data from the given contract address and adds the token to the given store.\n * @param address ERC20 Contract address\n */\nasync function addErc20Token(address: string): Promise<Erc20Token> {\n    let existing = erc20Cache[address];\n    if (existing) {\n        return existing;\n    }\n\n    try {\n        let data: Erc20TokenData = await Erc20Token.getData(address);\n        let token = new Erc20Token(data);\n\n        erc20Cache[address] = token;\n        return token;\n    } catch (e) {\n        throw new Error('Unable to add ERC20 contract.');\n    }\n}\n\n/**\n * Initates and caches an erc20 token from the given data.\n * @param data Information such as name, symbol, and address about the ERC20 token.\n */\nexport function addErc20TokenFromData(data: Erc20TokenData): Erc20Token {\n    let address = data.address;\n    let existing = erc20Cache[address];\n    if (existing) {\n        return existing;\n    }\n\n    let token = new Erc20Token(data);\n    erc20Cache[address] = token;\n    return token;\n}\n\nexport async function getContractDataErc20(address: string): Promise<Erc20TokenData> {\n    try {\n        let data: Erc20TokenData = await Erc20Token.getData(address);\n        return data;\n    } catch (e) {\n        throw new Error(`ERC20 contract ${address} does not exist.`);\n    }\n}\n\nexport async function getErc20Token(address: string): Promise<Erc20Token> {\n    let storeItem = erc20Cache[address];\n    if (storeItem) {\n        return storeItem;\n    } else {\n        return await addErc20Token(address);\n    }\n}\n","import { NetworkConfig } from './types';\nimport { MainnetConfig, TestnetConfig, LocalnetConfig } from '@/Network/constants';\nimport { activeNetwork, setRpcNetwork, getEvmChainID, getConfigFromUrl, setRpcNetworkAsync } from '@/Network/network';\nimport WebsocketProvider from '@/Network/providers/WebsocketProvider';\nimport { bustErc20Cache } from '@/Asset/Erc20';\n\nexport function setNetwork(conf: NetworkConfig) {\n    setRpcNetwork(conf);\n    bustErc20Cache();\n}\n\n/**\n * Unlike `setNetwork` this function will fail if the network is not available.\n * @param conf\n */\nexport async function setNetworkAsync(conf: NetworkConfig) {\n    await setRpcNetworkAsync(conf);\n    bustErc20Cache();\n}\n\nexport function isFujiNetwork(activeNetwork: NetworkConfig) {\n    return activeNetwork.networkID === TestnetConfig.networkID;\n}\n\nexport function isMainnetNetwork(activeNetwork: NetworkConfig) {\n    return activeNetwork.networkID === MainnetConfig.networkID;\n}\n\nexport function isLocalNetwork(activeNetwork: NetworkConfig) {\n    return activeNetwork.networkID === LocalnetConfig.networkID;\n}\n\n// Default connection is Mainnet\nsetNetwork(MainnetConfig);\n\nexport function getAvaxAssetID() {\n    return activeNetwork.avaxID;\n}\n\nexport function getActiveNetworkConfig() {\n    return activeNetwork;\n}\n\nexport { WebsocketProvider, getEvmChainID, getConfigFromUrl };\n\nexport { NetworkConfig } from './types';\n","import { xChain } from '@/Network/network';\n\nimport { iAssetCache, iAssetDescriptionClean } from '@/Asset/types';\nimport DOMPurify from 'dompurify';\n\nlet assetCache: iAssetCache = {};\n\nexport function getAssetDescriptionSync(assetId: string): iAssetDescriptionClean {\n    if (typeof assetCache[assetId] === 'undefined') throw new Error(`Asset ID ${assetId} is not known.`);\n    return assetCache[assetId];\n}\n\n/**\n * Uses the node api to get meta data given an asset ID. Saves the result to cache.\n * @param assetId\n */\nexport async function getAssetDescription(assetId: string): Promise<iAssetDescriptionClean> {\n    let cache = assetCache[assetId];\n    if (cache) {\n        return cache;\n    }\n\n    try {\n        let res = await xChain.getAssetDescription(assetId);\n        let clean: iAssetDescriptionClean = {\n            ...res,\n            assetID: assetId,\n            name: DOMPurify.sanitize(res.name),\n            symbol: DOMPurify.sanitize(res.symbol),\n        };\n\n        assetCache[assetId] = clean;\n        return clean;\n    } catch (e) {\n        throw new Error(`Asset ${assetId} does not exist.`);\n    }\n}\n","// HD WALLET\n// Accounts are not used and the account index is fixed to 0\n// m / purpose' / coin_type' / account' / change / address_index\n\nexport const AVAX_TOKEN_INDEX: string = '9000';\nexport const AVAX_ACCOUNT_PATH: string = `m/44'/${AVAX_TOKEN_INDEX}'/0'`; // Change and index left out\nexport const ETH_ACCOUNT_PATH: string = `m/44'/60'/0'`;\nexport const LEDGER_ETH_ACCOUNT_PATH = ETH_ACCOUNT_PATH + '/0/0';\n\nexport const INDEX_RANGE: number = 20; // a gap of at least 20 indexes is needed to claim an index unused\nexport const SCAN_SIZE: number = 70; // the total number of utxos to look at initially to calculate last index\nexport const SCAN_RANGE: number = SCAN_SIZE - INDEX_RANGE; // How many items are actually scanned\n\nexport const LEDGER_EXCHANGE_TIMEOUT = 90_000;\nexport const MIN_EVM_SUPPORT_V = '0.5.3';\n","import { BN, Buffer as BufferAvalanche } from 'avalanche';\nimport { avalanche, web3 } from '@/Network/network';\nimport { publicToAddress, importPublic } from 'ethereumjs-util';\nimport { ethers } from 'ethers';\nimport { KeyPair as EVMKeyPair } from 'avalanche/dist/apis/evm/keychain';\nimport { bintools } from '@/common';\n\nexport default class EvmWalletReadonly {\n    balance = new BN(0);\n    address: string;\n    publicKey: Buffer;\n\n    constructor(publicKey: Buffer) {\n        this.publicKey = publicKey;\n        this.address = '0x' + publicToAddress(publicKey).toString('hex');\n    }\n\n    getBalance(): BN {\n        return this.balance;\n    }\n\n    getAddress(): string {\n        return ethers.utils.getAddress(this.address);\n    }\n\n    getAddressBech32(): string {\n        let keypair = new EVMKeyPair(avalanche.getHRP(), 'C');\n        let addr = keypair.addressFromPublicKey(BufferAvalanche.from(this.publicKey));\n        return bintools.addressToString(avalanche.getHRP(), 'C', addr);\n    }\n\n    async updateBalance() {\n        let bal = await web3.eth.getBalance(this.address);\n        this.balance = new BN(bal);\n        return this.balance;\n    }\n}\n","import { Buffer as BufferAvalanche } from 'avalanche';\nimport { privateToPublic } from 'ethereumjs-util';\nimport { Transaction } from '@ethereumjs/tx';\nimport { avalanche } from '@/Network/network';\nimport {\n    KeyChain as EVMKeyChain,\n    KeyPair as EVMKeyPair,\n    UnsignedTx as EVMUnsignedTx,\n    Tx as EVMTx,\n} from 'avalanche/dist/apis/evm';\nimport EvmWalletReadonly from '@/Wallet/EvmWalletReadonly';\nimport { bintools } from '@/common';\n\nexport default class EvmWallet extends EvmWalletReadonly {\n    private privateKey: Buffer;\n\n    constructor(key: Buffer) {\n        let pubKey = privateToPublic(key);\n        super(pubKey);\n\n        this.privateKey = key;\n    }\n\n    private getPrivateKeyBech(): string {\n        return `PrivateKey-` + bintools.cb58Encode(BufferAvalanche.from(this.privateKey));\n    }\n\n    getKeyChain(): EVMKeyChain {\n        let keychain = new EVMKeyChain(avalanche.getHRP(), 'C');\n        keychain.importKey(this.getPrivateKeyBech());\n        return keychain;\n    }\n\n    getKeyPair(): EVMKeyPair {\n        let keychain = new EVMKeyChain(avalanche.getHRP(), 'C');\n        return keychain.importKey(this.getPrivateKeyBech());\n    }\n\n    signEVM(tx: Transaction) {\n        return tx.sign(this.privateKey);\n    }\n\n    signC(tx: EVMUnsignedTx): EVMTx {\n        return tx.sign(this.getKeyChain());\n    }\n\n    getPrivateKeyHex(): string {\n        return this.privateKey.toString('hex');\n    }\n}\n","import { ChainIdType } from '@/types';\nimport Web3 from 'web3';\nimport { bintools } from '@/common';\n\nexport const validateAddress = (address: string): boolean | string => {\n    return validateAddressX(address) || validateAddressP(address) || validateAddressEVM(address);\n};\n\nexport function validateAddressX(address: string) {\n    try {\n        let buff = bintools.parseAddress(address, 'X');\n        if (!buff) return false;\n        return true;\n    } catch (error) {\n        return false;\n    }\n}\n\nexport function validateAddressP(address: string) {\n    try {\n        let buff = bintools.parseAddress(address, 'P');\n        if (!buff) return false;\n        return true;\n    } catch (error) {\n        return false;\n    }\n}\n\nexport function validateAddressEVM(address: string) {\n    return Web3.utils.isAddress(address);\n}\n\n/**\n * Returns the human readable part of a X or P bech32 address.\n * @param address\n */\nexport function getAddressHRP(address: string): string {\n    if (!validateAddress(address)) {\n        throw new Error('Invalid X or P address.');\n    }\n    return address.split('-')[1].split('1')[0];\n}\n\n/**\n * Given an address, return which Chain it belongs to\n * @param address\n */\nexport function getAddressChain(address: string): ChainIdType {\n    if (!validateAddress(address)) {\n        throw new Error('Invalid address.');\n    }\n\n    if (Web3.utils.isAddress(address)) {\n        return 'C';\n    } else {\n        return address[0] as ChainIdType;\n    }\n}\n","// Extending Big.js with a helper function\nimport Big from 'big.js';\nimport { BN, Buffer as BufferAvalanche } from 'avalanche';\nimport { validateAddress } from '@/helpers/address_helper';\nimport createHash from 'create-hash';\nimport axios from 'axios';\nimport { cChain, pChain, web3, xChain } from '@/Network/network';\nimport {\n    AvmStatusResponseType,\n    AvmStatusType,\n    ChainStatusResponseTypeC,\n    ChainStatusTypeC,\n    PlatformStatusResponseType,\n    PlatformStatusType,\n} from '@/utils/types';\nimport { PayloadBase, PayloadTypes } from 'avalanche/dist/utils';\n\ndeclare module 'big.js' {\n    interface Big {\n        toLocaleString(toFixed?: number): string;\n    }\n}\n\nBig.prototype.toLocaleString = function (toFixed: number = 9) {\n    let fixedStr = this.toFixed(toFixed);\n    let split = fixedStr.split('.');\n    let wholeStr = parseInt(split[0]).toLocaleString('en-US');\n\n    if (split.length === 1) {\n        return wholeStr;\n    } else {\n        let remainderStr = split[1];\n\n        // remove trailing 0s\n        let lastChar = remainderStr.charAt(remainderStr.length - 1);\n        while (lastChar === '0') {\n            remainderStr = remainderStr.substring(0, remainderStr.length - 1);\n            lastChar = remainderStr.charAt(remainderStr.length - 1);\n        }\n\n        let trimmed = remainderStr.substring(0, toFixed);\n        if (!trimmed) return wholeStr;\n        return `${wholeStr}.${trimmed}`;\n    }\n};\n\n/**\n * @param val the amount to parse\n * @param denomination number of decimal places to parse with\n */\nexport function bnToBig(val: BN, denomination = 0): Big {\n    return new Big(val.toString()).div(Math.pow(10, denomination));\n}\n\n/**\n * Converts a BN amount of 18 decimals to 9.\n * Used for AVAX C <-> X,P conversions\n * @param amount\n */\nexport function avaxCtoX(amount: BN) {\n    let tens = new BN(10).pow(new BN(9));\n    return amount.div(tens);\n}\n\nexport function avaxXtoC(amount: BN) {\n    let tens = new BN(10).pow(new BN(9));\n    return amount.mul(tens);\n}\n\nexport function avaxPtoC(amount: BN) {\n    return avaxXtoC(amount);\n}\n\nexport function bnToBigAvaxX(val: BN): Big {\n    return bnToBig(val, 9);\n}\n\nexport function bnToBigAvaxP(val: BN): Big {\n    return bnToBigAvaxX(val);\n}\n\nexport function bnToBigAvaxC(val: BN): Big {\n    return bnToBig(val, 18);\n}\n\n/**\n * Parses the value using a denomination of 18\n *\n * @param val the amount to parse given in WEI\n *\n * @example\n * ```\n * bnToAvaxC(new BN('22500000000000000000')\n * // will return  22.5\n *```\n *\n */\nexport function bnToAvaxC(val: BN): string {\n    return bnToLocaleString(val, 18);\n}\n\n/**\n * Parses the value using a denomination of 9\n *\n * @param val the amount to parse given in nAVAX\n */\nexport function bnToAvaxX(val: BN): string {\n    return bnToLocaleString(val, 9);\n}\n\n/**\n * Parses the value using a denomination of 9\n *\n * @param val the amount to parse given in nAVAX\n */\nexport function bnToAvaxP(val: BN): string {\n    return bnToAvaxX(val);\n}\n\n/**\n *\n * @param val the number to parse\n * @param decimals number of decimal places used to parse the number\n */\nexport function numberToBN(val: number | string, decimals: number): BN {\n    let valBig = Big(val);\n    let tens = Big(10).pow(decimals);\n    let valBN = new BN(valBig.times(tens).toFixed(0));\n    return valBN;\n}\n\nexport function numberToBNAvaxX(val: number | string) {\n    return numberToBN(val, 9);\n}\n\nexport function numberToBNAvaxP(val: number | string) {\n    return numberToBNAvaxX(val);\n}\n\nexport function numberToBNAvaxC(val: number | string) {\n    return numberToBN(val, 18);\n}\n\n/**\n * @Remarks\n * A helper method to convert BN numbers to human readable strings.\n *\n * @param val The amount to convert\n * @param decimals Number of decimal places to parse the amount with\n *\n * @example\n * ```\n * bnToLocaleString(new BN(100095),2)\n * // will return '1,000.95'\n * ```\n */\nexport function bnToLocaleString(val: BN, decimals = 9): string {\n    let bigVal = bnToBig(val, decimals);\n    return bigToLocaleString(bigVal, decimals);\n}\n\nexport function bigToLocaleString(bigVal: Big, decimals: number = 9): string {\n    let fixedStr = bigVal.toFixed(decimals);\n    let split = fixedStr.split('.');\n    let wholeStr = parseInt(split[0]).toLocaleString('en-US');\n\n    if (split.length === 1) {\n        return wholeStr;\n    } else {\n        let remainderStr = split[1];\n\n        // remove trailing 0s\n        let lastChar = remainderStr.charAt(remainderStr.length - 1);\n        while (lastChar === '0') {\n            remainderStr = remainderStr.substring(0, remainderStr.length - 1);\n            lastChar = remainderStr.charAt(remainderStr.length - 1);\n        }\n\n        let trimmed = remainderStr.substring(0, decimals);\n        if (!trimmed) return wholeStr;\n        return `${wholeStr}.${trimmed}`;\n    }\n}\n\nconst COINGECKO_URL = 'https://api.coingecko.com/api/v3/simple/price?ids=avalanche-2&vs_currencies=usd';\n\n/**\n * Fetches the current AVAX price using Coin Gecko.\n * @remarks\n * You might get rate limited if you use this function frequently.\n *\n * @return\n * Current USD price of 1 AVAX\n */\nexport async function getAvaxPrice(): Promise<number> {\n    const res = await axios.get(COINGECKO_URL);\n    return res.data['avalanche-2'].usd;\n}\n\n/**\n * Checks if address is valid.\n *\n * @return\n * boolean if address is valid, error message if not valid.\n */\nexport function isValidAddress(address: string): boolean {\n    return validateAddress(address) === true;\n}\n\nexport function digestMessage(msgStr: string): Buffer {\n    let mBuf = Buffer.from(msgStr, 'utf8');\n    let msgSize = Buffer.alloc(4);\n    msgSize.writeUInt32BE(mBuf.length, 0);\n    let msgBuf = Buffer.from(`\\x1AAvalanche Signed Message:\\n${msgSize}${msgStr}`, 'utf8');\n    return createHash('sha256').update(msgBuf).digest();\n}\n\nexport async function waitTxX(txId: string, tryCount = 10): Promise<string> {\n    if (tryCount <= 0) {\n        throw new Error('Timeout');\n    }\n    let resp: AvmStatusResponseType;\n\n    try {\n        resp = (await xChain.getTxStatus(txId)) as AvmStatusResponseType;\n    } catch (e) {\n        throw new Error('Unable to get transaction status.');\n    }\n\n    let status: AvmStatusType;\n    let reason;\n    if (typeof resp === 'string') {\n        status = resp as AvmStatusType;\n    } else {\n        status = resp.status as AvmStatusType;\n        reason = resp.reason;\n    }\n\n    if (status === 'Unknown' || status === 'Processing') {\n        return await new Promise((resolve) => {\n            setTimeout(async () => {\n                resolve(await waitTxX(txId, tryCount - 1));\n            }, 1000);\n        });\n        // return await waitTxX(txId, tryCount - 1);\n    } else if (status === 'Rejected') {\n        throw new Error(reason);\n    } else if (status === 'Accepted') {\n        return txId;\n    }\n\n    return txId;\n}\n\nexport async function waitTxP(txId: string, tryCount = 10): Promise<string> {\n    if (tryCount <= 0) {\n        throw new Error('Timeout');\n    }\n    let resp: PlatformStatusResponseType;\n\n    try {\n        resp = (await pChain.getTxStatus(txId)) as PlatformStatusResponseType;\n    } catch (e) {\n        throw new Error('Unable to get transaction status.');\n    }\n\n    let status: PlatformStatusType;\n    let reason;\n    if (typeof resp === 'string') {\n        status = resp as PlatformStatusType;\n    } else {\n        status = resp.status as PlatformStatusType;\n        reason = resp.reason;\n    }\n\n    if (status === 'Unknown' || status === 'Processing') {\n        return await new Promise((resolve) => {\n            setTimeout(async () => {\n                resolve(await waitTxP(txId, tryCount - 1));\n            }, 1000);\n        });\n        // return await waitTxX(txId, tryCount - 1);\n    } else if (status === 'Dropped') {\n        throw new Error(reason);\n    } else if (status === 'Committed') {\n        return txId;\n    } else {\n        throw new Error('Unknown status type.');\n    }\n}\n\nexport async function waitTxEvm(txHash: string, tryCount = 10): Promise<string> {\n    if (tryCount <= 0) {\n        throw new Error('Timeout');\n    }\n\n    let receipt;\n\n    try {\n        receipt = await web3.eth.getTransactionReceipt(txHash);\n    } catch (e) {\n        throw new Error('Unable to get transaction receipt.');\n    }\n\n    if (!receipt) {\n        return await new Promise((resolve) => {\n            setTimeout(async () => {\n                resolve(await waitTxEvm(txHash, tryCount - 1));\n            }, 1000);\n        });\n    } else {\n        if (receipt.status) {\n            return txHash;\n        } else {\n            throw new Error('Transaction reverted.');\n        }\n    }\n}\n\nexport async function waitTxC(txId: string, tryCount = 10): Promise<string> {\n    if (tryCount <= 0) {\n        throw new Error('Timeout');\n    }\n\n    let resp: ChainStatusResponseTypeC;\n    try {\n        resp = (await cChain.getAtomicTxStatus(txId)) as ChainStatusResponseTypeC;\n    } catch (e) {\n        throw new Error('Unable to get transaction status.');\n    }\n\n    let status: ChainStatusTypeC;\n    let reason;\n    if (typeof resp === 'string') {\n        status = resp as ChainStatusTypeC;\n    } else {\n        status = resp.status as ChainStatusTypeC;\n        reason = resp.reason;\n    }\n\n    if (status === 'Unknown' || status === 'Processing') {\n        return await new Promise((resolve) => {\n            setTimeout(async () => {\n                resolve(await waitTxC(txId, tryCount - 1));\n            }, 1000);\n        });\n        // return await waitTxX(txId, tryCount - 1);\n    } else if (status === 'Dropped') {\n        throw new Error(reason);\n    } else if (status === 'Accepted') {\n        return txId;\n    } else {\n        throw new Error('Unknown status type.');\n    }\n}\n\nlet payloadtypes = PayloadTypes.getInstance();\n\nexport function parseNftPayload(rawPayload: string): PayloadBase {\n    let payload = BufferAvalanche.from(rawPayload, 'base64');\n    payload = BufferAvalanche.concat([new BufferAvalanche(4).fill(payload.length), payload]);\n\n    let typeId = payloadtypes.getTypeID(payload);\n    let pl: BufferAvalanche = payloadtypes.getContent(payload);\n    let payloadbase: PayloadBase = payloadtypes.select(typeId, pl);\n\n    return payloadbase;\n}\n\n/**\n * Returns the transaction fee for X chain.\n */\nexport function getTxFeeX() {\n    return xChain.getTxFee();\n}\n\n/**\n * Returns the transaction fee for P chain.\n */\nexport function getTxFeeP() {\n    return pChain.getTxFee();\n}\n","import { xChain, cChain, pChain, web3 } from '@/Network/network';\n\n// import { ITransaction } from '@/components/wallet/transfer/types';\nimport { BN, Buffer } from 'avalanche';\nimport {\n    MinterSet,\n    NFTMintOutput,\n    UnsignedTx as AVMUnsignedTx,\n    UTXO as AVMUTXO,\n    UTXOSet,\n    UTXOSet as AVMUTXOSet,\n    AVMConstants,\n} from 'avalanche/dist/apis/avm';\n\nimport { PayloadBase } from 'avalanche/dist/utils';\nimport { OutputOwners } from 'avalanche/dist/common';\nimport { UTXOSet as PlatformUTXOSet, PlatformVMConstants } from 'avalanche/dist/apis/platformvm';\n\nimport { EVMConstants } from 'avalanche/dist/apis/evm';\n\nimport { AvmExportChainType } from '../Wallet/types';\nimport { Transaction } from '@ethereumjs/tx';\nimport EthereumjsCommon from '@ethereumjs/common';\n\nimport ERC20Abi from '@openzeppelin/contracts/build/contracts/ERC20.json';\nimport ERC721Abi from '@openzeppelin/contracts/build/contracts/ERC721.json';\nimport { bintools } from '@/common';\n\nexport async function buildCreateNftFamilyTx(\n    name: string,\n    symbol: string,\n    groupNum: number,\n    fromAddrs: string[],\n    minterAddr: string,\n    changeAddr: string,\n    utxoSet: UTXOSet\n) {\n    let fromAddresses = fromAddrs;\n    let changeAddress = changeAddr;\n    let minterAddress = minterAddr;\n\n    const minterSets: MinterSet[] = [];\n\n    // Create the groups\n    for (let i = 0; i < groupNum; i++) {\n        const minterSet: MinterSet = new MinterSet(1, [minterAddress]);\n        minterSets.push(minterSet);\n    }\n\n    let unsignedTx: AVMUnsignedTx = await xChain.buildCreateNFTAssetTx(\n        utxoSet,\n        fromAddresses,\n        [changeAddress],\n        minterSets,\n        name,\n        symbol\n    );\n    return unsignedTx;\n}\n\nexport async function buildMintNftTx(\n    mintUtxo: AVMUTXO,\n    payload: PayloadBase,\n    quantity: number,\n    ownerAddress: string,\n    changeAddress: string,\n    fromAddresses: string[],\n    utxoSet: UTXOSet\n): Promise<AVMUnsignedTx> {\n    let addrBuf = bintools.parseAddress(ownerAddress, 'X');\n    let owners = [];\n\n    let sourceAddresses = fromAddresses;\n\n    for (let i = 0; i < quantity; i++) {\n        let owner = new OutputOwners([addrBuf]);\n        owners.push(owner);\n    }\n\n    let groupID = (mintUtxo.getOutput() as NFTMintOutput).getGroupID();\n\n    let mintTx = await xChain.buildCreateNFTMintTx(\n        utxoSet,\n        owners,\n        sourceAddresses,\n        [changeAddress],\n        mintUtxo.getUTXOID(),\n        groupID,\n        payload\n    );\n    return mintTx;\n}\n\nexport async function buildAvmExportTransaction(\n    destinationChain: AvmExportChainType,\n    utxoSet: AVMUTXOSet,\n    fromAddresses: string[],\n    toAddress: string,\n    amount: BN, // export amount + fee\n    sourceChangeAddress: string\n) {\n    let destinationChainId;\n    switch (destinationChain) {\n        case 'P':\n            destinationChainId = pChain.getBlockchainID();\n            break;\n        case 'C':\n            destinationChainId = cChain.getBlockchainID();\n            break;\n    }\n\n    return await xChain.buildExportTx(utxoSet as AVMUTXOSet, amount, destinationChainId, [toAddress], fromAddresses, [\n        sourceChangeAddress,\n    ]);\n}\n\nexport async function buildPlatformExportTransaction(\n    utxoSet: PlatformUTXOSet,\n    fromAddresses: string[],\n    toAddress: string,\n    amount: BN, // export amount + fee\n    sourceChangeAddress: string\n) {\n    let destinationChainId = xChain.getBlockchainID();\n\n    return await pChain.buildExportTx(utxoSet, amount, destinationChainId, [toAddress], fromAddresses, [\n        sourceChangeAddress,\n    ]);\n}\n\nexport async function buildEvmExportTransaction(\n    fromAddresses: string[],\n    toAddress: string,\n    amount: BN, // export amount + fee\n    fromAddressBech: string\n) {\n    let destinationChainId = xChain.getBlockchainID();\n\n    const nonce = await web3.eth.getTransactionCount(fromAddresses[0]);\n    const avaxAssetIDBuf: Buffer = await xChain.getAVAXAssetID();\n    const avaxAssetIDStr: string = bintools.cb58Encode(avaxAssetIDBuf);\n\n    let fromAddressHex = fromAddresses[0];\n\n    return await cChain.buildExportTx(\n        amount,\n        avaxAssetIDStr,\n        destinationChainId,\n        fromAddressHex,\n        fromAddressBech,\n        [toAddress],\n        nonce\n    );\n}\n\nexport async function buildEvmTransferNativeTx(\n    from: string,\n    to: string,\n    amount: BN, // in wei\n    gasPrice: BN,\n    gasLimit: number\n) {\n    const nonce = await web3.eth.getTransactionCount(from);\n    const chainId = await web3.eth.getChainId();\n    const networkId = await web3.eth.net.getId();\n    const chainParams = {\n        common: EthereumjsCommon.forCustomChain('mainnet', { networkId, chainId }, 'istanbul'),\n    };\n\n    const tx = Transaction.fromTxData(\n        {\n            nonce: nonce,\n            gasPrice: '0x' + gasPrice.toString('hex'),\n            gasLimit: gasLimit,\n            to: to,\n            value: '0x' + amount.toString('hex'),\n            data: '0x',\n        },\n        chainParams\n    );\n    return tx;\n}\n\nexport async function buildCustomEvmTx(\n    from: string,\n    gasPrice: BN,\n    gasLimit: number,\n    data?: string,\n    to?: string,\n    value?: string,\n    nonce?: number\n): Promise<Transaction> {\n    if (typeof nonce === 'undefined') {\n        nonce = await web3.eth.getTransactionCount(from);\n    }\n\n    const chainId = await web3.eth.getChainId();\n    const networkId = await web3.eth.net.getId();\n\n    const chainParams = {\n        common: EthereumjsCommon.forCustomChain('mainnet', { networkId, chainId }, 'istanbul'),\n    };\n\n    let gasPriceHex = `0x${gasPrice.toString('hex')}`;\n\n    let tx = Transaction.fromTxData(\n        {\n            nonce,\n            gasPrice: gasPriceHex,\n            gasLimit,\n            value,\n            to,\n            data,\n        },\n        chainParams\n    );\n    return tx;\n}\n\nexport async function buildEvmTransferErc20Tx(\n    from: string,\n    to: string,\n    amount: BN, // in wei\n    gasPrice: BN,\n    gasLimit: number,\n    contractAddress: string\n) {\n    //@ts-ignore\n    const cont = new web3.eth.Contract(ERC20Abi.abi, contractAddress);\n    const tokenTx = cont.methods.transfer(to, amount.toString());\n\n    let data = tokenTx.encodeABI();\n\n    let tx = await buildCustomEvmTx(from, gasPrice, gasLimit, data, contractAddress);\n\n    return tx;\n}\n\nexport async function buildEvmTransferErc721Tx(\n    from: string,\n    to: string,\n    gasPrice: BN,\n    gasLimit: number,\n    tokenContract: string,\n    tokenId: string\n) {\n    const nonce = await web3.eth.getTransactionCount(from);\n    const chainId = await web3.eth.getChainId();\n    const networkId = await web3.eth.net.getId();\n    const chainParams = {\n        common: EthereumjsCommon.forCustomChain('mainnet', { networkId, chainId }, 'istanbul'),\n    };\n    // @ts-ignore\n    const contract = new web3.eth.Contract(ERC721Abi.abi, tokenContract);\n    const tokenTx = contract.methods.transferFrom(from, to, tokenId);\n\n    let tx = Transaction.fromTxData(\n        {\n            nonce: nonce,\n            gasPrice: gasPrice.toString('hex'),\n            gasLimit: gasLimit,\n            value: '0x0',\n            to: tokenContract,\n            data: tokenTx.encodeABI(),\n        },\n        chainParams\n    );\n    return tx;\n}\n\nexport async function estimateErc20Gas(tokenContract: string, from: string, to: string, value: BN) {\n    //@ts-ignore\n    const contract = new web3.eth.Contract(ERC20Abi.abi, tokenContract);\n    const tokenTx = contract.methods.transfer(to, value.toString());\n    return await tokenTx.estimateGas({\n        from: from,\n    });\n}\n\n/**\n * Estimates the gas needed to send AVAX\n * @param to Destination address\n * @param amount Amount of AVAX to send, given in WEI\n * @param gasPrice Given in WEI\n */\nexport async function estimateAvaxGas(from: string, to: string, amount: BN, gasPrice: BN): Promise<number> {\n    try {\n        return await web3.eth.estimateGas({\n            from,\n            to,\n            gasPrice: `0x${gasPrice.toString('hex')}`,\n            value: `0x${amount.toString('hex')}`,\n        });\n    } catch (e) {\n        // TODO: Throws an error if we do not have enough avax balance\n        //TODO: Is it ok to return 21000\n        return 21000;\n    }\n}\n\nexport enum AvmTxNameEnum {\n    'Transaction' = AVMConstants.BASETX,\n    'Mint' = AVMConstants.CREATEASSETTX,\n    'Operation' = AVMConstants.OPERATIONTX,\n    'Import' = AVMConstants.IMPORTTX,\n    'Export' = AVMConstants.EXPORTTX,\n}\n\nexport enum PlatfromTxNameEnum {\n    'Transaction' = PlatformVMConstants.BASETX,\n    'Add Validator' = PlatformVMConstants.ADDVALIDATORTX,\n    'Add Delegator' = PlatformVMConstants.ADDDELEGATORTX,\n    'Import' = PlatformVMConstants.IMPORTTX,\n    'Export' = PlatformVMConstants.EXPORTTX,\n    'Add Subnet Validator' = PlatformVMConstants.ADDSUBNETVALIDATORTX,\n    'Create Chain' = PlatformVMConstants.CREATECHAINTX,\n    'Create Subnet' = PlatformVMConstants.CREATESUBNETTX,\n    'Advance Time' = PlatformVMConstants.ADVANCETIMETX,\n    'Reward Validator' = PlatformVMConstants.REWARDVALIDATORTX,\n}\n\n// TODO: create asset transactions\nexport enum ParseableAvmTxEnum {\n    'Transaction' = AVMConstants.BASETX,\n    'Import' = AVMConstants.IMPORTTX,\n    'Export' = AVMConstants.EXPORTTX,\n}\n\nexport enum ParseablePlatformEnum {\n    'Transaction' = PlatformVMConstants.BASETX,\n    'Add Validator' = PlatformVMConstants.ADDVALIDATORTX,\n    'Add Delegator' = PlatformVMConstants.ADDDELEGATORTX,\n    'Import' = PlatformVMConstants.IMPORTTX,\n    'Export' = PlatformVMConstants.EXPORTTX,\n}\n\nexport enum ParseableEvmTxEnum {\n    'Import' = EVMConstants.IMPORTTX,\n    'Export' = EVMConstants.EXPORTTX,\n}\n","import { UTXOSet as AVMUTXOSet } from 'avalanche/dist/apis/avm/utxos';\nimport { UTXOSet as PlatformUTXOSet } from 'avalanche/dist/apis/platformvm/utxos';\nimport { UTXOSet as EVMUTXOSet } from 'avalanche/dist/apis/evm/utxos';\nimport { xChain, cChain, pChain } from '@/Network/network';\nimport { AvmImportChainType } from '@/Wallet/types';\nimport { GetStakeResponse } from 'avalanche/dist/common';\n\n/**\n *\n * @param addrs an array of X chain addresses to get the atomic utxos of\n * @param chainID Which chain to check agains, either `P` or `C`\n */\nexport async function avmGetAtomicUTXOs(addrs: string[], chainID: AvmImportChainType): Promise<AVMUTXOSet> {\n    const selection = addrs.slice(0, 1024);\n    const remaining = addrs.slice(1024);\n\n    let utxoSet;\n    if (chainID === 'P') {\n        utxoSet = (await xChain.getUTXOs(selection, pChain.getBlockchainID())).utxos;\n    } else {\n        utxoSet = (await xChain.getUTXOs(selection, cChain.getBlockchainID())).utxos;\n    }\n\n    if (remaining.length > 0) {\n        const nextSet = await avmGetAtomicUTXOs(remaining, chainID);\n        utxoSet = utxoSet.merge(nextSet);\n    }\n    return utxoSet;\n}\n\n// todo: Use end index to get ALL utxos\nexport async function platformGetAtomicUTXOs(addrs: string[]): Promise<PlatformUTXOSet> {\n    let selection = addrs.slice(0, 1024);\n    let remaining = addrs.slice(1024);\n\n    let utxoSet = (await pChain.getUTXOs(selection, xChain.getBlockchainID())).utxos;\n    if (remaining.length > 0) {\n        // @ts-ignore\n        let nextSet = await platformGetAtomicUTXOs(remaining);\n        // @ts-ignore\n        utxoSet = utxoSet.merge(nextSet);\n    }\n    return utxoSet;\n}\n\n// todo: Use end index to get ALL utxos\nexport async function evmGetAtomicUTXOs(addrs: string[]): Promise<EVMUTXOSet> {\n    if (addrs.length > 1024) {\n        throw new Error('Number of addresses can not be greater than 1024.');\n    }\n\n    let result: EVMUTXOSet = (await cChain.getUTXOs(addrs, xChain.getBlockchainID())).utxos;\n    return result;\n}\n\nexport async function getStakeForAddresses(addrs: string[]): Promise<GetStakeResponse> {\n    if (addrs.length <= 256) {\n        let data = await pChain.getStake(addrs);\n        return data;\n    } else {\n        //Break the list in to 1024 chunks\n        let chunk = addrs.slice(0, 256);\n        let remainingChunk = addrs.slice(256);\n\n        let chunkData = await pChain.getStake(chunk);\n        let chunkStake = chunkData.staked;\n        let chunkUtxos = chunkData.stakedOutputs;\n\n        let next = await getStakeForAddresses(remainingChunk);\n        return {\n            staked: chunkStake.add(next.staked),\n            stakedOutputs: [...chunkUtxos, ...next.stakedOutputs],\n        };\n    }\n}\n\nexport async function avmGetAllUTXOs(addrs: string[]): Promise<AVMUTXOSet> {\n    if (addrs.length <= 1024) {\n        let utxos = await avmGetAllUTXOsForAddresses(addrs);\n        return utxos;\n    } else {\n        //Break the list in to 1024 chunks\n        let chunk = addrs.slice(0, 1024);\n        let remainingChunk = addrs.slice(1024);\n\n        let newSet = await avmGetAllUTXOsForAddresses(chunk);\n        return newSet.merge(await avmGetAllUTXOs(remainingChunk));\n    }\n}\n\nexport async function avmGetAllUTXOsForAddresses(addrs: string[], endIndex?: any): Promise<AVMUTXOSet> {\n    if (addrs.length > 1024) throw new Error('Maximum length of addresses is 1024');\n    let response;\n    if (!endIndex) {\n        response = await xChain.getUTXOs(addrs);\n    } else {\n        response = await xChain.getUTXOs(addrs, undefined, 0, endIndex);\n    }\n\n    let utxoSet = response.utxos;\n    let utxos = utxoSet.getAllUTXOs();\n    let nextEndIndex = response.endIndex;\n    let len = response.numFetched;\n\n    if (len >= 1024) {\n        let subUtxos = await avmGetAllUTXOsForAddresses(addrs, nextEndIndex);\n        return utxoSet.merge(subUtxos);\n    }\n    return utxoSet;\n}\n\n// helper method to get utxos for more than 1024 addresses\nexport async function platformGetAllUTXOs(addrs: string[]): Promise<PlatformUTXOSet> {\n    if (addrs.length <= 1024) {\n        let newSet = await platformGetAllUTXOsForAddresses(addrs);\n        return newSet;\n    } else {\n        //Break the list in to 1024 chunks\n        let chunk = addrs.slice(0, 1024);\n        let remainingChunk = addrs.slice(1024);\n\n        let newSet = await platformGetAllUTXOsForAddresses(chunk);\n\n        return newSet.merge(await platformGetAllUTXOs(remainingChunk));\n    }\n}\n\nexport async function platformGetAllUTXOsForAddresses(addrs: string[], endIndex?: any): Promise<PlatformUTXOSet> {\n    let response;\n    if (!endIndex) {\n        response = await pChain.getUTXOs(addrs);\n    } else {\n        response = await pChain.getUTXOs(addrs, undefined, 0, endIndex);\n    }\n\n    let utxoSet = response.utxos;\n    let nextEndIndex = response.endIndex;\n    let len = response.numFetched;\n\n    if (len >= 1024) {\n        let subUtxos = await platformGetAllUTXOsForAddresses(addrs, nextEndIndex);\n        return utxoSet.merge(subUtxos);\n    }\n\n    return utxoSet;\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","import {\n    AVMHistoryItemType,\n    iHistoryAddDelegator,\n    iHistoryBaseTx,\n    iHistoryBaseTxNFTsReceived,\n    iHistoryBaseTxNFTsReceivedRaw,\n    iHistoryBaseTxNFTsSent,\n    iHistoryBaseTxNFTsSentRaw,\n    iHistoryBaseTxTokensReceived,\n    iHistoryBaseTxTokensReceivedRaw,\n    iHistoryBaseTxTokensSent,\n    iHistoryBaseTxTokensSentRaw,\n    iHistoryEVMTx,\n    iHistoryImportExport,\n    iHistoryNftFamilyBalance,\n    ITransactionData,\n    ITransactionDataEVM,\n    UTXO,\n} from '@/History/types';\nimport { activeNetwork, explorer_api, xChain } from '@/Network/network';\nimport { BN } from 'avalanche';\nimport { ChainIdType } from '@/types';\nimport { AVMConstants } from 'avalanche/dist/apis/avm';\nimport { bnToAvaxC, bnToAvaxP, bnToAvaxX, bnToLocaleString, parseNftPayload } from '@/utils/utils';\nimport * as Assets from '@/Asset/Assets';\nimport { NO_EXPLORER_API } from '@/errors';\n\n/**\n * Returns transactions FROM and TO the address given\n * @param addr The address to get historic transactions for.\n */\nexport async function getAddressHistoryEVM(addr: string): Promise<ITransactionDataEVM[]> {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    let endpoint = `v2/ctransactions?address=${addr}`;\n    let data: ITransactionDataEVM[] = (await explorer_api.get(endpoint)).data.Transactions;\n\n    data.sort((a, b) => {\n        let dateA = new Date(a.createdAt);\n        let dateB = new Date(b.createdAt);\n\n        return dateB.getTime() - dateA.getTime();\n    });\n\n    return data;\n}\n\nexport async function getAddressHistory(\n    addrs: string[],\n    limit = 20,\n    chainID: string,\n    endTime?: string\n): Promise<ITransactionData[]> {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    const ADDR_SIZE = 1024;\n    let selection = addrs.slice(0, ADDR_SIZE);\n    let remaining = addrs.slice(ADDR_SIZE);\n\n    let addrsRaw = selection.map((addr) => {\n        return addr.split('-')[1];\n    });\n\n    let rootUrl = 'v2/transactions';\n\n    let req = {\n        address: addrsRaw,\n        sort: ['timestamp-desc'],\n        disableCount: ['1'],\n        chainID: [chainID],\n        disableGenesis: ['false'],\n    };\n\n    if (limit > 0) {\n        //@ts-ignore\n        req.limit = [limit.toString()];\n    }\n\n    if (endTime) {\n        //@ts-ignore\n        req.endTime = [endTime];\n    }\n\n    let res = await explorer_api.post(rootUrl, req);\n    let txs = res.data.transactions;\n    let next: string | undefined = res.data.next;\n\n    if (txs === null) txs = [];\n\n    // If we need to fetch more for this address\n    if (next && !limit) {\n        let endTime = next.split('&')[0].split('=')[1];\n        let nextRes = await getAddressHistory(selection, limit, chainID, endTime);\n        txs.push(...nextRes);\n    }\n\n    // If there are addresses left, fetch them too\n    // TODO: Do this in parallel, not recursive\n    if (remaining.length > 0) {\n        let nextRes = await getAddressHistory(remaining, limit, chainID);\n        txs.push(...nextRes);\n    }\n\n    return txs;\n}\n\nexport async function getTransactionSummary(\n    tx: ITransactionData,\n    walletAddrs: string[],\n    evmAddress: string\n): Promise<AVMHistoryItemType> {\n    let sum;\n\n    let cleanAddressesXP = walletAddrs.map((addr) => addr.split('-')[1]);\n\n    switch (tx.type) {\n        case 'import':\n        case 'pvm_import':\n            sum = getImportSummary(tx, cleanAddressesXP);\n            break;\n        case 'export':\n        case 'pvm_export':\n        case 'atomic_export_tx':\n            sum = getExportSummary(tx, cleanAddressesXP);\n            break;\n        case 'add_validator':\n            sum = getValidatorSummary(tx, cleanAddressesXP);\n            break;\n        case 'add_delegator':\n            sum = getValidatorSummary(tx, cleanAddressesXP);\n            break;\n        case 'atomic_import_tx':\n            sum = getImportSummaryC(tx, evmAddress);\n            break;\n        case 'operation':\n        case 'base':\n            sum = await getBaseTxSummary(tx, cleanAddressesXP);\n            break;\n        default:\n            throw new Error(`Unsupported history transaction type. (${tx.type})`);\n    }\n    return sum;\n}\n\nexport function getTransactionSummaryEVM(tx: ITransactionDataEVM, walletAddress: string): iHistoryEVMTx {\n    let isSender = tx.fromAddr.toUpperCase() === walletAddress.toUpperCase();\n\n    let amt = new BN(tx.value);\n    let amtClean = bnToAvaxC(amt);\n    let date = new Date(tx.createdAt);\n\n    let gasLimit = new BN(tx.gasLimit);\n    let gasPrice = new BN(tx.gasPrice);\n    let feeBN = gasLimit.mul(gasPrice); // in gwei\n\n    return {\n        id: tx.hash,\n        fee: feeBN,\n        memo: '',\n        hash: tx.hash,\n        block: tx.block,\n        isSender,\n        type: 'transaction_evm',\n        amount: amt,\n        amountClean: amtClean,\n        gasLimit: tx.gasLimit,\n        gasPrice: tx.gasPrice,\n        from: tx.fromAddr,\n        to: tx.toAddr,\n        timestamp: date,\n    };\n}\n\nfunction idToChainAlias(id: string): ChainIdType {\n    if (id === activeNetwork.xChainID) {\n        return 'X';\n    } else if (id === activeNetwork.pChainID) {\n        return 'P';\n    } else if (id === activeNetwork.cChainID) {\n        return 'C';\n    }\n    throw new Error('Unknown chain ID.');\n}\n\n// If any of the outputs has a different chain ID, thats the destination chain\n// else return current chain\nfunction findDestinationChain(tx: ITransactionData): string {\n    let baseChain = tx.chainID;\n    let outs = tx.outputs || [];\n\n    for (let i = 0; i < outs.length; i++) {\n        let outChainId = outs[i].outChainID;\n\n        if (outChainId !== baseChain) return outChainId;\n    }\n    return baseChain;\n}\n\n// If any of the inputs has a different chain ID, thats the source chain\n// else return current chain\nfunction findSourceChain(tx: ITransactionData): string {\n    let baseChain = tx.chainID;\n    let ins = tx.inputs;\n\n    for (let i = 0; i < ins.length; i++) {\n        let inChainId = ins[i].output.inChainID;\n        if (inChainId !== baseChain) return inChainId;\n    }\n    return baseChain;\n}\n\nfunction isOutputOwner(ownerAddrs: string[], output: UTXO): boolean {\n    let outAddrs = output.addresses;\n    if (!outAddrs) return false;\n\n    let totAddrs = outAddrs.filter((addr) => {\n        return ownerAddrs.includes(addr);\n    });\n\n    return totAddrs.length > 0;\n}\n\nfunction isOutputOwnerC(ownerAddr: string, output: UTXO): boolean {\n    let outAddrs = output.caddresses;\n    if (!outAddrs) return false;\n    return outAddrs.includes(ownerAddr);\n}\n\n/**\n * Returns the total amount of `assetID` in the given `utxos` owned by `address`. Checks for X/P addresses.\n * @param utxos UTXOs to calculate balance from.\n * @param addresses The wallet's  addresses.\n * @param assetID Only count outputs of this asset ID.\n * @param chainID Only count the outputs on this chain.\n * @param isStake Set to `true` if looking for staking utxos.\n */\nfunction getAssetBalanceFromUTXOs(\n    utxos: UTXO[],\n    addresses: string[],\n    assetID: string,\n    chainID: string,\n    isStake = false\n) {\n    let myOuts = utxos.filter((utxo) => {\n        if (\n            assetID === utxo.assetID &&\n            isOutputOwner(addresses, utxo) &&\n            chainID === utxo.chainID &&\n            utxo.stake === isStake\n        ) {\n            return true;\n        }\n        return false;\n    });\n\n    let tot = myOuts.reduce((acc, utxo) => {\n        return acc.add(new BN(utxo.amount));\n    }, new BN(0));\n\n    return tot;\n}\n\nfunction getNFTBalanceFromUTXOs(utxos: UTXO[], addresses: string[], assetID: string): iHistoryNftFamilyBalance {\n    let nftUTXOs = utxos.filter((utxo) => {\n        if (\n            utxo.outputType === AVMConstants.NFTXFEROUTPUTID &&\n            utxo.assetID === assetID &&\n            isOutputOwner(addresses, utxo)\n        ) {\n            return true;\n        }\n        return false;\n    });\n\n    let res: iHistoryNftFamilyBalance = {};\n    for (let i = 0; i < nftUTXOs.length; i++) {\n        let utxo = nftUTXOs[i];\n        let groupID = utxo.groupID;\n\n        let content;\n        if (utxo.payload) {\n            let parsedPayload = parseNftPayload(utxo.payload);\n            content = parsedPayload.getContent().toString();\n        }\n\n        if (res[groupID]) {\n            res[groupID].amount++;\n        } else {\n            res[groupID] = {\n                payload: content || '',\n                amount: 1,\n            };\n        }\n    }\n    return res;\n}\n\n/**\n * Returns the total amount of `assetID` in the given `utxos` owned by `address`. Checks for EVM address.\n * @param utxos UTXOs to calculate balance from.\n * @param address The wallet's  evm address `0x...`.\n * @param assetID Only count outputs of this asset ID.\n * @param chainID Only count the outputs on this chain.\n * @param isStake Set to `true` if looking for staking utxos.\n */\nfunction getEvmAssetBalanceFromUTXOs(\n    utxos: UTXO[],\n    address: string,\n    assetID: string,\n    chainID: string,\n    isStake = false\n) {\n    let myOuts = utxos.filter((utxo) => {\n        if (\n            assetID === utxo.assetID &&\n            isOutputOwnerC(address, utxo) &&\n            chainID === utxo.chainID &&\n            utxo.stake === isStake\n        ) {\n            return true;\n        }\n        return false;\n    });\n\n    let tot = myOuts.reduce((acc, utxo) => {\n        return acc.add(new BN(utxo.amount));\n    }, new BN(0));\n\n    return tot;\n}\n\nfunction getImportSummary(tx: ITransactionData, addresses: string[]): iHistoryImportExport {\n    let sourceChain = findSourceChain(tx);\n    let chainAliasFrom = idToChainAlias(sourceChain);\n    let chainAliasTo = idToChainAlias(tx.chainID);\n\n    let avaxID = activeNetwork.avaxID;\n\n    let outs = tx.outputs || [];\n    let amtOut = getAssetBalanceFromUTXOs(outs, addresses, avaxID, tx.chainID);\n\n    let time = new Date(tx.timestamp);\n    let fee = xChain.getTxFee();\n\n    let res: iHistoryImportExport = {\n        id: tx.id,\n        memo: parseMemo(tx.memo),\n        source: chainAliasFrom,\n        destination: chainAliasTo,\n        amount: amtOut,\n        amountClean: bnToAvaxX(amtOut),\n        timestamp: time,\n        type: 'import',\n        fee: fee,\n    };\n\n    return res;\n}\n\nfunction getExportSummary(tx: ITransactionData, addresses: string[]): iHistoryImportExport {\n    let inputs = tx.inputs;\n    let sourceChain = inputs[0].output.chainID;\n    let chainAliasFrom = idToChainAlias(sourceChain);\n\n    let destinationChain = findDestinationChain(tx);\n    let chainAliasTo = idToChainAlias(destinationChain);\n\n    let avaxID = activeNetwork.avaxID;\n\n    let outs = tx.outputs || [];\n    let amtOut = getAssetBalanceFromUTXOs(outs, addresses, avaxID, destinationChain);\n    // let amtIn = getAssetBalanceFromUTXOs(inUtxos, addresses, avaxID);\n\n    let time = new Date(tx.timestamp);\n    let fee = xChain.getTxFee();\n\n    let res: iHistoryImportExport = {\n        id: tx.id,\n        memo: parseMemo(tx.memo),\n        source: chainAliasFrom,\n        destination: chainAliasTo,\n        amount: amtOut,\n        amountClean: bnToAvaxX(amtOut),\n        timestamp: time,\n        type: 'export',\n        fee: fee,\n    };\n\n    return res;\n}\n\nfunction getValidatorSummary(tx: ITransactionData, ownerAddrs: string[]): iHistoryAddDelegator {\n    let time = new Date(tx.timestamp);\n\n    let pChainID = activeNetwork.pChainID;\n    let avaxID = activeNetwork.avaxID;\n\n    let outs = tx.outputs || [];\n    let stakeAmt = getAssetBalanceFromUTXOs(outs, ownerAddrs, avaxID, pChainID, true);\n\n    return {\n        id: tx.id,\n        nodeID: tx.validatorNodeID,\n        stakeStart: new Date(tx.validatorStart * 1000),\n        stakeEnd: new Date(tx.validatorEnd * 1000),\n        timestamp: time,\n        type: 'add_validator',\n        fee: new BN(0),\n        amount: stakeAmt,\n        amountClean: bnToAvaxP(stakeAmt),\n        memo: parseMemo(tx.memo),\n        isRewarded: tx.rewarded,\n    };\n}\n\n// Returns the summary for a C chain import TX\nfunction getImportSummaryC(tx: ITransactionData, ownerAddr: string) {\n    let sourceChain = findSourceChain(tx);\n    let chainAliasFrom = idToChainAlias(sourceChain);\n    let chainAliasTo = idToChainAlias(tx.chainID);\n\n    let avaxID = activeNetwork.avaxID;\n\n    let outs = tx.outputs || [];\n    let amtOut = getEvmAssetBalanceFromUTXOs(outs, ownerAddr, avaxID, tx.chainID);\n\n    let time = new Date(tx.timestamp);\n    let fee = xChain.getTxFee();\n\n    let res: iHistoryImportExport = {\n        id: tx.id,\n        source: chainAliasFrom,\n        destination: chainAliasTo,\n        amount: amtOut,\n        amountClean: bnToAvaxX(amtOut),\n        timestamp: time,\n        type: 'import',\n        fee: fee,\n        memo: parseMemo(tx.memo),\n    };\n\n    return res;\n}\n\nasync function getBaseTxSummary(tx: ITransactionData, ownerAddrs: string[]): Promise<iHistoryBaseTx> {\n    // Calculate losses from inputs\n    let losses = getBaseTxTokenLosses(tx, ownerAddrs);\n    let lossesNFT = getBaseTxNFTLosses(tx, ownerAddrs);\n\n    // Calculate gains from inputs\n    let gains = getBaseTxTokenGains(tx, ownerAddrs);\n    let gainsNFT = getBaseTxNFTGains(tx, ownerAddrs);\n\n    // TODO: Calculate absolutes\n    // gains - losses\n\n    let received: iHistoryBaseTxTokensReceived = {};\n    let receivedNFTs: iHistoryBaseTxNFTsReceived = {};\n\n    // Process Received Tokens\n    for (let assetID in gains) {\n        let fromAddrs = getBaseTxSenders(tx, assetID);\n        let tokenDesc = await Assets.getAssetDescription(assetID);\n        let amtBN = gains[assetID];\n        received[assetID] = {\n            amount: amtBN,\n            amountClean: bnToLocaleString(amtBN, tokenDesc.denomination),\n            from: fromAddrs,\n            asset: tokenDesc,\n        };\n    }\n\n    // Process Received NFTs\n    for (let assetID in gainsNFT) {\n        let fromAddrs = getBaseTxSenders(tx, assetID);\n        let tokenDesc = await Assets.getAssetDescription(assetID);\n        let groups = gainsNFT[assetID];\n        receivedNFTs[assetID] = {\n            groups: groups,\n            from: fromAddrs,\n            asset: tokenDesc,\n        };\n    }\n\n    // Process Sent Tokens\n    let sent: iHistoryBaseTxTokensSent = {};\n    let sentNFTs: iHistoryBaseTxNFTsSent = {};\n\n    // Process sent tokens\n    for (let assetID in losses) {\n        let toAddrs = getBaseTxReceivers(tx, assetID);\n        let tokenDesc = await Assets.getAssetDescription(assetID);\n        let amtBN = losses[assetID];\n\n        sent[assetID] = {\n            amount: amtBN,\n            amountClean: bnToLocaleString(amtBN, tokenDesc.denomination),\n            to: toAddrs,\n            asset: tokenDesc,\n        };\n    }\n\n    // Process Received NFTs\n    for (let assetID in lossesNFT) {\n        let fromAddrs = getBaseTxSenders(tx, assetID);\n        let tokenDesc = await Assets.getAssetDescription(assetID);\n        let groups = lossesNFT[assetID];\n        sentNFTs[assetID] = {\n            groups: groups,\n            to: fromAddrs,\n            asset: tokenDesc,\n        };\n    }\n\n    return {\n        id: tx.id,\n        fee: xChain.getTxFee(),\n        type: 'transaction',\n        timestamp: new Date(tx.timestamp),\n        memo: parseMemo(tx.memo),\n        tokens: {\n            sent,\n            received,\n        },\n        nfts: {\n            sent: sentNFTs,\n            received: receivedNFTs,\n        },\n    };\n}\n\nfunction getBaseTxNFTLosses(tx: ITransactionData, ownerAddrs: string[]): iHistoryBaseTxNFTsSentRaw {\n    let inUTXOs = tx.inputs.map((input) => input.output);\n    let nftUTXOs = inUTXOs.filter((utxo) => {\n        return utxo.outputType === AVMConstants.NFTXFEROUTPUTID;\n    });\n\n    let res: iHistoryBaseTxNFTsSentRaw = {};\n    for (let assetID in tx.inputTotals) {\n        let nftBal = getNFTBalanceFromUTXOs(nftUTXOs, ownerAddrs, assetID);\n\n        // If empty dictionary pass\n        if (Object.keys(nftBal).length === 0) continue;\n\n        res[assetID] = nftBal;\n    }\n    return res;\n}\n\nfunction getBaseTxNFTGains(tx: ITransactionData, ownerAddrs: string[]): iHistoryBaseTxNFTsReceivedRaw {\n    let outs = tx.outputs || [];\n    let nftUTXOs = outs.filter((utxo) => {\n        return utxo.outputType === AVMConstants.NFTXFEROUTPUTID;\n    });\n    let res: iHistoryBaseTxNFTsReceivedRaw = {};\n\n    for (let assetID in tx.inputTotals) {\n        let nftBal = getNFTBalanceFromUTXOs(nftUTXOs, ownerAddrs, assetID);\n        // If empty dictionary pass\n        if (Object.keys(nftBal).length === 0) continue;\n\n        res[assetID] = nftBal;\n    }\n    return res;\n}\n\nfunction getBaseTxTokenLosses(tx: ITransactionData, ownerAddrs: string[]): iHistoryBaseTxTokensSentRaw {\n    let inUTXOs = tx.inputs.map((input) => input.output);\n    let tokenUTXOs = inUTXOs.filter((utxo) => {\n        return utxo.outputType === AVMConstants.SECPXFEROUTPUTID;\n    });\n\n    let chainID = xChain.getBlockchainID();\n    let res: iHistoryBaseTxTokensSentRaw = {};\n    for (let assetID in tx.inputTotals) {\n        let bal = getAssetBalanceFromUTXOs(tokenUTXOs, ownerAddrs, assetID, chainID);\n        if (bal.isZero()) continue;\n        res[assetID] = bal;\n    }\n    return res;\n}\n\nfunction getBaseTxTokenGains(tx: ITransactionData, ownerAddrs: string[]): iHistoryBaseTxTokensReceivedRaw {\n    let chainID = xChain.getBlockchainID();\n    let outs = tx.outputs || [];\n    let tokenUTXOs = outs.filter((utxo) => {\n        return utxo.outputType === AVMConstants.SECPXFEROUTPUTID;\n    });\n\n    let res: iHistoryBaseTxTokensReceivedRaw = {};\n    for (let assetID in tx.outputTotals) {\n        let bal = getAssetBalanceFromUTXOs(tokenUTXOs, ownerAddrs, assetID, chainID);\n        if (bal.isZero()) continue;\n        res[assetID] = bal;\n    }\n    return res;\n}\n\n// Look at the inputs and check where the assetID came from.\nfunction getBaseTxSenders(tx: ITransactionData, assetID: string): string[] {\n    let inUTXOs = tx.inputs.map((input) => input.output);\n    let res: string[] = [];\n    for (let i = 0; i < inUTXOs.length; i++) {\n        let utxo = inUTXOs[i];\n        if (utxo.assetID === assetID && utxo.addresses) {\n            res.push(...utxo.addresses);\n        }\n    }\n    // Eliminate Duplicates\n    return res.filter((addr, i) => {\n        return res.indexOf(addr) === i;\n    });\n}\n\n// Look at the inputs and check where the assetID came from.\nfunction getBaseTxReceivers(tx: ITransactionData, assetID: string): string[] {\n    let res: string[] = [];\n    let outs = tx.outputs || [];\n    for (let i = 0; i < outs.length; i++) {\n        let utxo = outs[i];\n        if (utxo.assetID === assetID && utxo.addresses) {\n            res.push(...utxo.addresses);\n        }\n    }\n    // Eliminate Duplicates\n    return res.filter((addr, i) => {\n        return res.indexOf(addr) === i;\n    });\n}\n\nfunction parseMemo(raw: string): string {\n    const memoText = new Buffer(raw, 'base64').toString('utf8');\n\n    // Bug that sets memo to empty string (AAAAAA==) for some tx types\n    if (!memoText.length || raw === 'AAAAAA==') return '';\n    return memoText;\n}\n","import { BN } from 'avalanche';\nimport { ChainIdType } from '@/types';\nimport { xChain } from '@/Network/network';\nimport { UniversalTx, UniversalTxActionType } from '@/helpers/universal_tx_helper';\n\nexport class UniversalNode {\n    parents: UniversalNode[];\n    child: UniversalNode | null; // can only have 1 child\n    balance: BN;\n    chain: ChainIdType;\n    constructor(balance: BN, chain: ChainIdType, parents: UniversalNode[] = [], child: UniversalNode | null = null) {\n        this.parents = parents;\n        this.child = child;\n        this.balance = balance;\n        this.chain = chain;\n    }\n\n    // Sum of the node's balance + all balance of parents minus the transfer fees\n    reduceTotalBalanceFromParents(): BN {\n        // If there are no balance return balance of self\n        if (this.parents.length === 0) {\n            return this.balance;\n        }\n\n        let fee = xChain.getTxFee();\n\n        let parentBals = this.parents.map((node) => {\n            // Subtract transfer fees from parent balance\n            // import + export\n            let parentBalance = node.reduceTotalBalanceFromParents();\n            parentBalance = parentBalance.sub(fee).sub(fee);\n            let zero = new BN(0);\n            return BN.max(parentBalance, zero);\n        });\n\n        let tot = parentBals.reduce((prev, current) => {\n            return prev.add(current);\n        }, new BN(0));\n\n        return tot.add(this.balance);\n    }\n\n    /**\n     * Returns the export action type from this node to its child\n     * @param to\n     */\n    getExportMethod(to?: ChainIdType): UniversalTxActionType {\n        switch (this.chain) {\n            case 'X':\n                if (to === 'P') {\n                    return 'export_x_p';\n                } else {\n                    return 'export_x_c';\n                }\n            case 'C':\n                return 'export_c_x';\n            case 'P':\n                return 'export_p_x';\n        }\n    }\n\n    /**\n     * Returns the import action type from this node to its child\n     * @param from Which chain are we importing from\n     */\n    getImportMethod(from?: ChainIdType): UniversalTxActionType {\n        switch (this.chain) {\n            case 'X':\n                if (from === 'P') {\n                    return 'import_p_x';\n                } else {\n                    return 'import_c_x';\n                }\n            case 'C':\n                return 'import_x_c';\n            case 'P':\n                return 'import_x_p';\n        }\n    }\n\n    buildExportTx(amount: BN): UniversalTx {\n        return {\n            action: this.getExportMethod(this.child?.chain),\n            amount: amount,\n        };\n    }\n\n    buildImportTx(from?: ChainIdType): UniversalTx {\n        return {\n            action: this.getImportMethod(from),\n        };\n    }\n\n    /***\n     * Assumes there is enough balance on node tree\n     * Returns empty array even if transaction not possible!\n     * What steps to take to have the target balance on this node.\n     * @param target Amount of nAVAX needed on this node.\n     */\n    getStepsForTargetBalance(target: BN): UniversalTx[] {\n        // If the node has enough balance no transaction needed\n        // If target is negative or zero no transaction needed\n        if (this.balance.gte(target) || target.lte(new BN(0))) {\n            return [];\n        }\n\n        let fee = xChain.getTxFee();\n        let feeImportExport = fee.add(fee);\n\n        // If not enough balance and no parents\n        // return all the balance\n        if (this.balance.lt(target) && this.parents.length === 0) {\n            let tx = this.buildExportTx(this.balance.sub(feeImportExport));\n            return [tx];\n        }\n\n        // If not enough balance\n\n        // Amount needed to collect from parents\n        let remaining = target.sub(this.balance);\n\n        // Amount the parent must have\n\n        if (this.parents.length === 1) {\n            // Export from parent to this node\n            let parent = this.parents[0];\n            let parentBalanceNeeded = remaining.add(feeImportExport);\n            let txs = parent.getStepsForTargetBalance(parentBalanceNeeded);\n            let tx = parent.buildExportTx(remaining);\n            let importTx = this.buildImportTx(parent.chain);\n            return [...txs, tx, importTx];\n        } else {\n            let transactions = [];\n            for (let i = 0; i < this.parents.length; i++) {\n                let p = this.parents[i];\n                let pBal = p.reduceTotalBalanceFromParents();\n                let pBalMax = pBal.sub(feeImportExport);\n                let parentBalanceNeeded = remaining.add(feeImportExport);\n\n                let exportAmt = BN.min(pBalMax, remaining); // The amount that will cross to the target chain\n                let target = BN.min(pBalMax, parentBalanceNeeded);\n\n                if (exportAmt.lte(new BN(0))) continue;\n\n                let pTxs = p.getStepsForTargetBalance(target);\n                let pTx = p.buildExportTx(exportAmt);\n                let importTx = this.buildImportTx(p.chain);\n                transactions.push(...pTxs);\n                transactions.push(pTx);\n                transactions.push(importTx);\n\n                remaining = remaining.sub(exportAmt);\n            }\n\n            // If we still have remaining balance, we can not complete this transfer\n            if (remaining.gt(new BN(0))) {\n                throw new Error('Insufficient AVAX balances.');\n            }\n\n            return transactions;\n        }\n    }\n\n    addParent(node: UniversalNode) {\n        this.parents.push(node);\n    }\n\n    setChild(node: UniversalNode) {\n        this.child = node;\n    }\n}\n","import { BN } from 'avalanche';\nimport { UniversalNode } from '@/helpers/UniversalNode';\n\ntype UniversalTxActionTypesX = 'send_x' | 'export_x_c' | 'export_x_p' | 'import_p_x' | 'import_c_x';\ntype UniversalTxActionTypesC = 'send_c' | 'export_c_x' | 'import_x_c';\ntype UniversalTxActionTypesP = 'export_p_x' | 'import_x_p';\n\nexport type UniversalTxActionType = UniversalTxActionTypesX | UniversalTxActionTypesC | UniversalTxActionTypesP;\n\nexport interface UniversalTx {\n    action: UniversalTxActionType;\n    amount?: BN;\n}\n\nexport function createGraphForP(balX: BN, balP: BN, balC: BN): UniversalNode {\n    let xNode = new UniversalNode(balX, 'X');\n    let pNode = new UniversalNode(balP, 'P');\n    let cNode = new UniversalNode(balC, 'C');\n\n    pNode.addParent(xNode);\n    xNode.addParent(cNode);\n\n    cNode.setChild(xNode);\n    xNode.setChild(pNode);\n    return pNode;\n}\n\nexport function createGraphForC(balX: BN, balP: BN, balC: BN): UniversalNode {\n    let xNode = new UniversalNode(balX, 'X');\n    let pNode = new UniversalNode(balP, 'P');\n    let cNode = new UniversalNode(balC, 'C');\n\n    cNode.addParent(xNode);\n    xNode.addParent(pNode);\n\n    pNode.setChild(xNode);\n    xNode.setChild(cNode);\n\n    return cNode;\n}\n\nexport function createGraphForX(balX: BN, balP: BN, balC: BN): UniversalNode {\n    let xNode = new UniversalNode(balX, 'X');\n    let pNode = new UniversalNode(balP, 'P');\n    let cNode = new UniversalNode(balC, 'C');\n\n    xNode.addParent(pNode);\n    xNode.addParent(cNode);\n\n    cNode.setChild(xNode);\n    pNode.setChild(xNode);\n\n    return xNode;\n}\n\nexport function canHaveBalanceOnX(balX: BN, balP: BN, balC: BN, targetAmount: BN): boolean {\n    let startNode = createGraphForX(balX, balP, balC);\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\n}\n\nexport function canHaveBalanceOnP(balX: BN, balP: BN, balC: BN, targetAmount: BN): boolean {\n    let startNode = createGraphForP(balX, balP, balC);\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\n}\n\n/**\n * Will return true if `targetAmount` can exist on C chain\n */\nexport function canHaveBalanceOnC(balX: BN, balP: BN, balC: BN, targetAmount: BN): boolean {\n    let startNode = createGraphForC(balX, balP, balC);\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\n}\n\nexport function getStepsForBalanceP(balX: BN, balP: BN, balC: BN, targetAmount: BN): UniversalTx[] {\n    let startNode = createGraphForP(balX, balP, balC);\n\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\n        throw new Error('Insufficient AVAX.');\n    }\n\n    return startNode.getStepsForTargetBalance(targetAmount);\n}\n\nexport function getStepsForBalanceC(balX: BN, balP: BN, balC: BN, targetAmount: BN): UniversalTx[] {\n    let startNode = createGraphForC(balX, balP, balC);\n\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\n        throw new Error('Insufficient AVAX.');\n    }\n\n    return startNode.getStepsForTargetBalance(targetAmount);\n}\n\nexport function getStepsForBalanceX(balX: BN, balP: BN, balC: BN, targetAmount: BN): UniversalTx[] {\n    let startNode = createGraphForX(balX, balP, balC);\n\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\n        throw new Error('Insufficient AVAX.');\n    }\n\n    return startNode.getStepsForTargetBalance(targetAmount);\n}\n","import {\n    AssetBalanceP,\n    AssetBalanceRawX,\n    AssetBalanceX,\n    AvmExportChainType,\n    AvmImportChainType,\n    ERC20Balance,\n    iAvaxBalance,\n    WalletBalanceX,\n    WalletEventArgsType,\n    WalletEventType,\n    WalletNameType,\n} from './types';\nimport {\n    buildAvmExportTransaction,\n    buildCreateNftFamilyTx,\n    buildCustomEvmTx,\n    buildEvmExportTransaction,\n    buildEvmTransferErc20Tx,\n    buildEvmTransferNativeTx,\n    buildMintNftTx,\n    estimateAvaxGas,\n    estimateErc20Gas,\n} from '@/helpers/tx_helper';\nimport { BN, Buffer } from 'avalanche';\nimport { Transaction } from '@ethereumjs/tx';\nimport { activeNetwork, avalanche, cChain, pChain, web3, xChain } from '@/Network/network';\nimport EvmWallet from '@/Wallet/EvmWallet';\n\nimport {\n    avmGetAllUTXOs,\n    avmGetAtomicUTXOs,\n    getStakeForAddresses,\n    platformGetAllUTXOs,\n    platformGetAtomicUTXOs,\n} from '@/helpers/utxo_helper';\n\nimport {\n    UTXOSet as AVMUTXOSet,\n    UnsignedTx as AVMUnsignedTx,\n    UTXO as AVMUTXO,\n    Tx as AvmTx,\n    AVMConstants,\n    AmountOutput,\n} from 'avalanche/dist/apis/avm';\nimport {\n    UTXOSet as PlatformUTXOSet,\n    UTXO as PlatformUTXO,\n    UnsignedTx as PlatformUnsignedTx,\n    Tx as PlatformTx,\n    PlatformVMConstants,\n    StakeableLockOut,\n} from 'avalanche/dist/apis/platformvm';\nimport { UnsignedTx as EVMUnsignedTx, Tx as EVMTx, UTXOSet as EVMUTXOSet } from 'avalanche/dist/apis/evm';\n\nimport { PayloadBase, UnixNow } from 'avalanche/dist/utils';\nimport { getAssetDescription } from '@/Asset/Assets';\nimport { getErc20Token } from '@/Asset/Erc20';\nimport { NO_NETWORK } from '@/errors';\nimport { avaxCtoX, bnToLocaleString, waitTxC, waitTxEvm, waitTxP, waitTxX } from '@/utils/utils';\nimport EvmWalletReadonly from '@/Wallet/EvmWalletReadonly';\nimport EventEmitter from 'events';\nimport {\n    getAddressHistory,\n    getAddressHistoryEVM,\n    getTransactionSummary,\n    getTransactionSummaryEVM,\n} from '@/History/history';\nimport { HistoryItemType, ITransactionData } from '@/History/types';\nimport moment from 'moment';\nimport { bintools } from '@/common';\nimport { ChainIdType } from '@/types';\nimport {\n    createGraphForC,\n    createGraphForP,\n    createGraphForX,\n    getStepsForBalanceC,\n    getStepsForBalanceP,\n    getStepsForBalanceX,\n    UniversalTx,\n} from '@/helpers/universal_tx_helper';\nimport { UniversalNode } from '@/helpers/UniversalNode';\nimport { GetStakeResponse } from 'avalanche/dist/common';\n\nexport abstract class WalletProvider {\n    abstract type: WalletNameType;\n    abstract evmWallet: EvmWallet | EvmWalletReadonly;\n\n    /**\n     * The X chain UTXOs of the wallet's current state\n     */\n    public utxosX: AVMUTXOSet = new AVMUTXOSet();\n\n    /**\n     * The P chain UTXOs of the wallet's current state\n     */\n    public utxosP: PlatformUTXOSet = new PlatformUTXOSet();\n\n    public balanceX: WalletBalanceX = {};\n\n    abstract signEvm(tx: Transaction): Promise<Transaction>;\n    abstract signX(tx: AVMUnsignedTx): Promise<AvmTx>;\n    abstract signP(tx: PlatformUnsignedTx): Promise<PlatformTx>;\n    abstract signC(tx: EVMUnsignedTx): Promise<EVMTx>;\n\n    abstract getAddressX(): string;\n    abstract getChangeAddressX(): string;\n    abstract getAddressP(): string;\n    abstract getAddressC(): string;\n    abstract getEvmAddressBech(): string;\n\n    abstract getExternalAddressesX(): string[];\n    abstract getInternalAddressesX(): string[];\n    abstract getExternalAddressesP(): string[];\n\n    abstract getAllAddressesX(): string[];\n    abstract getAllAddressesP(): string[];\n\n    /***\n     * Used to get an identifier string that is consistent across different network connections.\n     * Currently returns the C address of this wallet.\n     */\n    public getBaseAddress(): string {\n        return this.getAddressC();\n    }\n\n    protected emitter: EventEmitter = new EventEmitter();\n\n    public on(event: WalletEventType, listener: (...args: any[]) => void): void {\n        this.emitter.on(event, listener);\n    }\n\n    public off(event: WalletEventType, listener: (...args: any[]) => void): void {\n        this.emitter.off(event, listener);\n    }\n\n    protected emit(event: WalletEventType, args?: WalletEventArgsType): void {\n        this.emitter.emit(event, args);\n    }\n\n    protected emitAddressChange(): void {\n        this.emit('addressChanged', {\n            X: this.getAddressX(),\n            changeX: this.getChangeAddressX(),\n            P: this.getAddressP(),\n        });\n    }\n\n    protected emitBalanceChangeX(): void {\n        this.emit('balanceChangedX', this.balanceX);\n    }\n\n    protected emitBalanceChangeP(): void {\n        this.emit('balanceChangedP', this.getAvaxBalanceP());\n    }\n\n    protected emitBalanceChangeC(): void {\n        this.emit('balanceChangedC', this.getAvaxBalanceC());\n    }\n\n    /**\n     *\n     * @param to - the address funds are being send to.\n     * @param amount - amount of AVAX to send in nAVAX\n     * @param memo - A MEMO for the transaction\n     */\n    async sendAvaxX(to: string, amount: BN, memo?: string): Promise<string> {\n        if (!activeNetwork) throw NO_NETWORK;\n\n        let memoBuff = memo ? Buffer.from(memo) : undefined;\n\n        let froms = this.getAllAddressesX();\n        let changeAddress = this.getChangeAddressX();\n        let utxoSet = this.utxosX;\n\n        let tx = await xChain.buildBaseTx(\n            utxoSet,\n            amount,\n            activeNetwork.avaxID,\n            [to],\n            froms,\n            [changeAddress],\n            memoBuff\n        );\n        let signedTx = await this.signX(tx);\n        let txId = await xChain.issueTx(signedTx);\n        await waitTxX(txId);\n\n        // Update UTXOs\n        this.updateUtxosX();\n\n        return txId;\n    }\n\n    /**\n     * Sends AVAX to another address on the C chain.\n     * @param to Hex address to send AVAX to.\n     * @param amount Amount of AVAX to send, represented in WEI format.\n     * @param gasPrice Gas price in WEI format\n     * @param gasLimit Gas limit\n     *\n     * @return Returns the transaction hash\n     */\n    async sendAvaxC(to: string, amount: BN, gasPrice: BN, gasLimit: number): Promise<string> {\n        let fromAddr = this.getAddressC();\n        let tx = await buildEvmTransferNativeTx(fromAddr, to, amount, gasPrice, gasLimit);\n        let txId = await this.issueEvmTx(tx);\n        await this.updateAvaxBalanceC();\n        return txId;\n    }\n\n    /**\n     * Send Avalanche Native Tokens on X chain\n     * @param assetID ID of the token to send\n     * @param amount How many units of the token to send. Based on smallest divisible unit.\n     * @param to X chain address to send tokens to\n     */\n    async sendANT(assetID: string, amount: BN, to: string): Promise<string> {\n        let utxoSet = this.getUtxosX();\n        let fromAddrs = this.getAllAddressesX();\n        let changeAddr = this.getChangeAddressX();\n\n        let tx = await xChain.buildBaseTx(utxoSet, amount, assetID, [to], fromAddrs, [changeAddr]);\n        let signed = await this.signX(tx);\n        let txId = await xChain.issueTx(signed);\n        await waitTxX(txId);\n\n        this.updateUtxosX();\n        return txId;\n    }\n\n    /**\n     * Makes a transfer call on a ERC20 contract.\n     * @param to Hex address to transfer tokens to.\n     * @param amount Amount of the ERC20 token to send, donated in the token's correct denomination.\n     * @param gasPrice Gas price in WEI format\n     * @param gasLimit Gas limit\n     * @param contractAddress Contract address of the ERC20 token\n     */\n    async sendErc20(to: string, amount: BN, gasPrice: BN, gasLimit: number, contractAddress: string): Promise<string> {\n        let fromAddr = this.getAddressC();\n        let token = await getErc20Token(contractAddress);\n        let balOld = await token.balanceOf(fromAddr);\n        let tx = await buildEvmTransferErc20Tx(fromAddr, to, amount, gasPrice, gasLimit, contractAddress);\n        let txHash = await this.issueEvmTx(tx);\n\n        // TODO: We should not be using setTimeout, wait until tx is confirmed on chain\n        // TODO: Can it be an issue with sticky sessions? Nodes behind a LB?\n        // If new balance doesnt match old, emit balance change\n        setTimeout(async () => {\n            let balNew = await token.balanceOf(fromAddr);\n            if (!balOld.eq(balNew)) {\n                this.emitBalanceChangeC();\n            }\n        }, 2000);\n\n        return txHash;\n    }\n\n    /**\n     * Estimate the gas needed for an ERC20 Transfer transaction\n     * @param contractAddress The ERC20 contract address\n     * @param to Address receiving the tokens\n     * @param amount Amount to send. Given in the smallest divisible unit.\n     */\n    async estimateErc20Gas(contractAddress: string, to: string, amount: BN): Promise<number> {\n        let from = this.getAddressC();\n        return await estimateErc20Gas(contractAddress, from, to, amount);\n    }\n\n    /**\n     * Estimate the gas needed for a AVAX send transaction on the C chain.\n     * @param to Destination address.\n     * @param amount Amount of AVAX to send, in WEI.\n     */\n    async estimateAvaxGasLimit(to: string, amount: BN, gasPrice: BN): Promise<number> {\n        let from = this.getAddressC();\n        return await estimateAvaxGas(from, to, amount, gasPrice);\n    }\n\n    /**\n     * A method to create custom EVM transactions.\n     * @param gasPrice\n     * @param gasLimit\n     * @param data `data` field of the transaction, in hex format\n     * @param to `to` field of the transaction, in hex format\n     * @param value `value` field of the transaction, in hex format\n     * @param nonce Nonce of the transaction, in number. If not provided, SDK will get the latest nonce from the network\n     */\n    async sendCustomEvmTx(gasPrice: BN, gasLimit: number, data?: string, to?: string, value?: string, nonce?: number) {\n        let from = this.getAddressC();\n        let tx = await buildCustomEvmTx(from, gasPrice, gasLimit, data, to, value, nonce);\n        return await this.issueEvmTx(tx);\n    }\n\n    /**\n     * Returns the maximum spendable AVAX balance for the given chain.\n     * Scans all chains and take cross over fees into account\n     * @param chainType X, P or C\n     */\n    public getUsableAvaxBalanceForChain(chainType: ChainIdType): BN {\n        return this.createUniversalNode(chainType).reduceTotalBalanceFromParents();\n    }\n\n    /**\n     * Create a new instance of a UniversalNode for the given chain using current balance state\n     * @param chain Chain of the universal node.\n     * @private\n     */\n    private createUniversalNode(chain: ChainIdType): UniversalNode {\n        let xBal = this.getAvaxBalanceX().unlocked;\n        let pBal = this.getAvaxBalanceP().unlocked;\n        let cBal = avaxCtoX(this.getAvaxBalanceC()); // need to use 9 decimal places\n\n        switch (chain) {\n            case 'X':\n                return createGraphForX(xBal, pBal, cBal);\n            case 'P':\n                return createGraphForP(xBal, pBal, cBal);\n            case 'C':\n                return createGraphForC(xBal, pBal, cBal);\n        }\n    }\n\n    /**\n     * Can this wallet have the given amount on the given chain after a series of internal transactions (if required).\n     * @param chain X/P/C\n     * @param amount The amount to check against\n     */\n    public canHaveBalanceOnChain(chain: ChainIdType, amount: BN): boolean {\n        // The maximum amount of AVAX we can have on this chain\n        let maxAmt = this.createUniversalNode(chain).reduceTotalBalanceFromParents();\n        return maxAmt.gte(amount);\n    }\n\n    /**\n     * Returns an array of transaction to do in order to have the target amount on the given chain\n     * @param chain The chain (X/P/C) to have the desired amount on\n     * @param amount The desired amount\n     */\n    public getTransactionsForBalance(chain: ChainIdType, amount: BN): UniversalTx[] {\n        let xBal = this.getAvaxBalanceX().unlocked;\n        let pBal = this.getAvaxBalanceP().unlocked;\n        let cBal = avaxCtoX(this.getAvaxBalanceC()); // need to use 9 decimal places\n\n        switch (chain) {\n            case 'P':\n                return getStepsForBalanceP(xBal, pBal, cBal, amount);\n            case 'C':\n                return getStepsForBalanceC(xBal, pBal, cBal, amount);\n            case 'X':\n                return getStepsForBalanceX(xBal, pBal, cBal, amount);\n        }\n    }\n\n    /**\n     * Given a `Transaction`, it will sign and issue it to the network.\n     * @param tx The unsigned transaction to issue.\n     */\n    async issueEvmTx(tx: Transaction): Promise<string> {\n        let signedTx = await this.signEvm(tx);\n        let txHex = signedTx.serialize().toString('hex');\n        let hash = await web3.eth.sendSignedTransaction('0x' + txHex);\n        const txHash = hash.transactionHash;\n        return await waitTxEvm(txHash);\n    }\n\n    /**\n     * Returns the C chain AVAX balance of the wallet in WEI format.\n     */\n    async updateAvaxBalanceC(): Promise<BN> {\n        let balOld = this.evmWallet.getBalance();\n        let balNew = await this.evmWallet.updateBalance();\n\n        if (!balOld.eq(balNew)) {\n            this.emitBalanceChangeC();\n        }\n\n        return balNew;\n    }\n\n    /**\n     *  Returns UTXOs on the X chain that belong to this wallet.\n     *  - Makes network request.\n     *  - Updates `this.utxosX` with new UTXOs\n     *  - Calls `this.updateBalanceX()` after success.\n     *  */\n    public async updateUtxosX(): Promise<AVMUTXOSet> {\n        const addresses = this.getAllAddressesX();\n        // let oldUtxos = this.utxosX;\n        this.utxosX = await avmGetAllUTXOs(addresses);\n\n        await this.updateUnknownAssetsX();\n        this.updateBalanceX();\n\n        return this.utxosX;\n    }\n\n    /**\n     *  Returns the fetched UTXOs on the X chain that belong to this wallet.\n     */\n    public getUtxosX(): AVMUTXOSet {\n        return this.utxosX;\n    }\n\n    /**\n     *  Returns UTXOs on the P chain that belong to this wallet.\n     *  - Makes network request.\n     *  - Updates `this.utxosP` with the new UTXOs\n     */\n    public async updateUtxosP(): Promise<PlatformUTXOSet> {\n        let addresses = this.getAllAddressesP();\n        this.utxosP = await platformGetAllUTXOs(addresses);\n\n        this.emitBalanceChangeP();\n\n        return this.utxosP;\n    }\n\n    /**\n     * Returns the fetched UTXOs on the P chain that belong to this wallet.\n     */\n    public getUtxosP(): PlatformUTXOSet {\n        return this.utxosP;\n    }\n\n    /**\n     * Returns the number AVAX staked by this wallet.\n     */\n    public async getStake(): Promise<GetStakeResponse> {\n        let addrs = this.getAllAddressesP();\n        return await getStakeForAddresses(addrs);\n    }\n\n    /**\n     * Returns the wallet's balance of the given ERC20 contracts\n     * @param addresses ERC20 Contract addresses\n     */\n    public async getBalanceERC20(addresses: string[]): Promise<ERC20Balance[]> {\n        let walletAddr = this.getAddressC();\n        let tokenCalls = addresses.map((addr) => getErc20Token(addr));\n        let tokens = await Promise.all(tokenCalls);\n\n        let balanceCalls = tokens.map((token) => token.balanceOf(walletAddr));\n        let balances = await Promise.all(balanceCalls);\n\n        return balances.map((bal, i) => {\n            let token = tokens[i];\n            let balance: ERC20Balance = {\n                address: token.address,\n                denomination: token.decimals,\n                balanceParsed: bnToLocaleString(bal, token.decimals),\n                balance: bal,\n                name: token.name,\n                symbol: token.symbol,\n            };\n            return balance;\n        });\n    }\n\n    private async updateUnknownAssetsX() {\n        let utxos = this.utxosX.getAllUTXOs();\n\n        for (let i = 0; i < utxos.length; i++) {\n            let utxo = utxos[i];\n            let assetIdBuff = utxo.getAssetID();\n            let assetId = bintools.cb58Encode(assetIdBuff);\n            await getAssetDescription(assetId);\n        }\n    }\n\n    /**\n     * Uses the X chain UTXOs owned by this wallet, gets asset description for unknown assets,\n     * and returns a dictionary of Asset IDs to balance amounts.\n     * - Updates `this.balanceX`\n     * - Expensive operation if there are unknown assets\n     * - Uses existing UTXOs\n     * @private\n     */\n    private async updateBalanceX(): Promise<WalletBalanceX> {\n        if (!activeNetwork) throw NO_NETWORK;\n        let utxos = this.utxosX.getAllUTXOs();\n\n        let unixNow = UnixNow();\n\n        let res: WalletBalanceX = {};\n\n        for (let i = 0; i < utxos.length; i++) {\n            let utxo = utxos[i];\n            let out = utxo.getOutput();\n            let type = out.getOutputID();\n\n            if (type != AVMConstants.SECPXFEROUTPUTID) continue;\n\n            let locktime = out.getLocktime();\n            let amount = (out as AmountOutput).getAmount();\n            let assetIdBuff = utxo.getAssetID();\n            let assetId = bintools.cb58Encode(assetIdBuff);\n\n            let asset: AssetBalanceX = res[assetId];\n\n            if (!asset) {\n                let assetInfo = await getAssetDescription(assetId);\n                asset = { locked: new BN(0), unlocked: new BN(0), meta: assetInfo };\n            }\n\n            if (locktime.lte(unixNow)) {\n                // not locked\n                asset.unlocked = asset.unlocked.add(amount);\n            } else {\n                // locked\n                asset.locked = asset.locked.add(amount);\n            }\n\n            res[assetId] = asset;\n        }\n\n        // If there are no AVAX UTXOs create a dummy empty balance object\n        let avaxID = activeNetwork.avaxID;\n        if (!res[avaxID]) {\n            let assetInfo = await getAssetDescription(avaxID);\n            res[avaxID] = {\n                locked: new BN(0),\n                unlocked: new BN(0),\n                meta: assetInfo,\n            };\n        }\n\n        this.balanceX = res;\n\n        // TODO: Check previous value\n        this.emitBalanceChangeX();\n        return res;\n    }\n\n    public getBalanceX(): WalletBalanceX {\n        return this.balanceX;\n    }\n\n    /**\n     * A helpful method that returns the AVAX balance on X, P, C chains.\n     * Internally calls chain specific getAvaxBalance methods.\n     */\n    public getAvaxBalance(): iAvaxBalance {\n        let X = this.getAvaxBalanceX();\n        let P = this.getAvaxBalanceP();\n        let C = this.getAvaxBalanceC();\n\n        return {\n            X,\n            P,\n            C,\n        };\n    }\n\n    /**\n     * Returns the X chain AVAX balance of the current wallet state.\n     * - Does not make a network request.\n     * - Does not refresh wallet balance.\n     */\n    public getAvaxBalanceX(): AssetBalanceRawX {\n        if (!activeNetwork) {\n            throw new Error('Network not selected.');\n        }\n        return (\n            this.balanceX[activeNetwork.avaxID] || {\n                unlocked: new BN(0),\n                locked: new BN(0),\n            }\n        );\n    }\n\n    public getAvaxBalanceC(): BN {\n        return this.evmWallet.getBalance();\n    }\n\n    /**\n     * Returns the P chain AVAX balance of the current wallet state.\n     * - Does not make a network request.\n     * - Does not refresh wallet balance.\n     */\n    public getAvaxBalanceP(): AssetBalanceP {\n        let unlocked = new BN(0);\n        let locked = new BN(0);\n        let lockedStakeable = new BN(0);\n\n        let utxos = this.utxosP.getAllUTXOs();\n        let unixNow = UnixNow();\n\n        for (let i = 0; i < utxos.length; i++) {\n            let utxo = utxos[i];\n            let out = utxo.getOutput();\n            let type = out.getOutputID();\n\n            let amount = (out as AmountOutput).getAmount();\n\n            if (type === PlatformVMConstants.STAKEABLELOCKOUTID) {\n                let locktime = (out as StakeableLockOut).getStakeableLocktime();\n                if (locktime.lte(unixNow)) {\n                    unlocked.iadd(amount);\n                } else {\n                    lockedStakeable = lockedStakeable.add(amount);\n                }\n            } else {\n                let locktime = (out as AmountOutput).getLocktime();\n                if (locktime.lte(unixNow)) {\n                    unlocked.iadd(amount);\n                } else {\n                    locked.iadd(amount);\n                }\n            }\n        }\n\n        return {\n            unlocked,\n            locked,\n            lockedStakeable: lockedStakeable,\n        };\n    }\n\n    /**\n     * Exports AVAX from P chain to X chain\n     * @remarks\n     * The export transaction will cover the Export + Import Fees\n     *\n     * @param amt amount of nAVAX to transfer\n     * @return returns the transaction id.\n     */\n    async exportPChain(amt: BN) {\n        let fee = xChain.getTxFee();\n        let amtFee = amt.add(fee);\n\n        let utxoSet = this.utxosP;\n        let destinationAddr = this.getAddressX();\n\n        let pChangeAddr = this.getAddressP();\n        let fromAddrs = this.getAllAddressesP();\n\n        let xId = xChain.getBlockchainID();\n\n        let exportTx = await pChain.buildExportTx(utxoSet, amtFee, xId, [destinationAddr], fromAddrs, [pChangeAddr]);\n\n        let tx = await this.signP(exportTx);\n        let txId = await pChain.issueTx(tx);\n        await waitTxP(txId);\n\n        await this.updateUtxosP();\n\n        return txId;\n    }\n\n    /**\n     * Exports AVAX from C chain to X chain\n     * @remarks\n     * The export transaction will cover the Export + Import Fees\n     *\n     * @param amt amount of nAVAX to transfer\n     * @return returns the transaction id.\n     */\n    async exportCChain(amt: BN): Promise<string> {\n        let fee = xChain.getTxFee();\n        let amtFee = amt.add(fee);\n\n        let hexAddr = this.getAddressC();\n        let bechAddr = this.getEvmAddressBech();\n\n        let fromAddresses = [hexAddr];\n        let destinationAddr = this.getAddressX();\n\n        let exportTx = await buildEvmExportTransaction(fromAddresses, destinationAddr, amtFee, bechAddr);\n\n        let tx = await this.signC(exportTx);\n\n        let txId = await cChain.issueTx(tx);\n\n        await waitTxC(txId);\n\n        await this.updateAvaxBalanceC();\n        return txId;\n    }\n\n    /**\n     * Exports AVAX from X chain to either P or C chain\n     * @remarks\n     * The export transaction will cover the Export + Import Fees\n     *\n     * @param amt amount of nAVAX to transfer\n     * @param destinationChain Which chain to export to.\n     * @return returns the transaction id.\n     */\n    async exportXChain(amt: BN, destinationChain: AvmExportChainType) {\n        let fee = xChain.getTxFee();\n        let amtFee = amt.add(fee);\n\n        let destinationAddr;\n        if (destinationChain === 'P') {\n            destinationAddr = this.getAddressP();\n        } else {\n            // C Chain\n            destinationAddr = this.getEvmAddressBech();\n        }\n\n        let fromAddresses = this.getAllAddressesX();\n        let changeAddress = this.getChangeAddressX();\n        let utxos = this.utxosX;\n        let exportTx = (await buildAvmExportTransaction(\n            destinationChain,\n            utxos,\n            fromAddresses,\n            destinationAddr,\n            amtFee,\n            changeAddress\n        )) as AVMUnsignedTx;\n\n        let tx = await this.signX(exportTx);\n\n        let txId = await xChain.issueTx(tx);\n        await waitTxX(txId);\n\n        // Update UTXOs\n        await this.updateUtxosX();\n\n        return txId;\n    }\n\n    async getAtomicUTXOsX(chainID: AvmImportChainType) {\n        let addrs = this.getAllAddressesX();\n        let result = await avmGetAtomicUTXOs(addrs, chainID);\n        return result;\n    }\n\n    async getAtomicUTXOsP(): Promise<PlatformUTXOSet> {\n        let addrs = this.getAllAddressesP();\n        return await platformGetAtomicUTXOs(addrs);\n    }\n\n    /**\n     * Imports atomic X chain utxos to the current actie X chain address\n     * @param chainID The chain ID to import from, either `P` or `C`\n     */\n    async importX(chainID: AvmImportChainType) {\n        const utxoSet = await this.getAtomicUTXOsX(chainID);\n\n        if (utxoSet.getAllUTXOs().length === 0) {\n            throw new Error('Nothing to import.');\n        }\n\n        let xToAddr = this.getAddressX();\n\n        let hrp = avalanche.getHRP();\n        let utxoAddrs = utxoSet.getAddresses().map((addr) => bintools.addressToString(hrp, 'X', addr));\n\n        let fromAddrs = utxoAddrs;\n        let ownerAddrs = utxoAddrs;\n\n        let sourceChainId;\n        if (chainID === 'P') {\n            sourceChainId = pChain.getBlockchainID();\n        } else {\n            sourceChainId = cChain.getBlockchainID();\n        }\n\n        // Owner addresses, the addresses we exported to\n        const unsignedTx = await xChain.buildImportTx(utxoSet, ownerAddrs, sourceChainId, [xToAddr], fromAddrs, [\n            xToAddr,\n        ]);\n\n        const tx = await this.signX(unsignedTx);\n        const txId = await xChain.issueTx(tx);\n\n        await waitTxX(txId);\n\n        // Update UTXOs\n        await this.updateUtxosX();\n\n        return txId;\n    }\n\n    async importP(toAddress?: string): Promise<string> {\n        const utxoSet = await this.getAtomicUTXOsP();\n\n        if (utxoSet.getAllUTXOs().length === 0) {\n            throw new Error('Nothing to import.');\n        }\n\n        // Owner addresses, the addresses we exported to\n        let walletAddrP = this.getAddressP();\n\n        let hrp = avalanche.getHRP();\n        let utxoAddrs = utxoSet.getAddresses().map((addr) => bintools.addressToString(hrp, 'P', addr));\n\n        // let fromAddrs = utxoAddrs;\n        let ownerAddrs = utxoAddrs;\n\n        if (!toAddress) {\n            toAddress = walletAddrP;\n        }\n\n        const unsignedTx = await pChain.buildImportTx(\n            utxoSet,\n            ownerAddrs,\n            xChain.getBlockchainID(),\n            [toAddress],\n            ownerAddrs,\n            [walletAddrP],\n            undefined,\n            undefined\n        );\n        const tx = await this.signP(unsignedTx);\n        const txId = await pChain.issueTx(tx);\n\n        await waitTxP(txId);\n\n        await this.updateUtxosP();\n\n        return txId;\n    }\n\n    async importC() {\n        let bechAddr = this.getEvmAddressBech();\n\n        const utxoResponse = await cChain.getUTXOs(bechAddr, xChain.getBlockchainID());\n        const utxoSet: EVMUTXOSet = utxoResponse.utxos;\n\n        if (utxoSet.getAllUTXOs().length === 0) {\n            throw new Error('Nothing to import.');\n        }\n\n        let toAddress = this.getAddressC();\n        let ownerAddresses = [bechAddr];\n        let fromAddresses = ownerAddresses;\n        let sourceChain = xChain.getBlockchainID();\n\n        const unsignedTx = await cChain.buildImportTx(utxoSet, toAddress, ownerAddresses, sourceChain, fromAddresses);\n        let tx = await this.signC(unsignedTx);\n        let id = await cChain.issueTx(tx);\n\n        await waitTxC(id);\n\n        await this.updateAvaxBalanceC();\n\n        return id;\n    }\n\n    async createNftFamily(name: string, symbol: string, groupNum: number) {\n        let fromAddresses = this.getAllAddressesX();\n        let changeAddress = this.getChangeAddressX();\n\n        let minterAddress = this.getAddressX();\n\n        let utxoSet = this.utxosX;\n\n        let unsignedTx = await buildCreateNftFamilyTx(\n            name,\n            symbol,\n            groupNum,\n            fromAddresses,\n            minterAddress,\n            changeAddress,\n            utxoSet\n        );\n\n        let signed = await this.signX(unsignedTx);\n        const txId = await xChain.issueTx(signed);\n        return await waitTxX(txId);\n    }\n\n    async mintNft(mintUtxo: AVMUTXO, payload: PayloadBase, quantity: number) {\n        let ownerAddress = this.getAddressX();\n        let changeAddress = this.getChangeAddressX();\n\n        let sourceAddresses = this.getAllAddressesX();\n\n        let utxoSet = this.utxosX;\n        let tx = await buildMintNftTx(\n            mintUtxo,\n            payload,\n            quantity,\n            ownerAddress,\n            changeAddress,\n            sourceAddresses,\n            utxoSet\n        );\n        let signed = await this.signX(tx);\n        const txId = await xChain.issueTx(signed);\n        return await waitTxX(txId);\n    }\n\n    /**\n     * Adds a validator to the network using the given node id.\n     *\n     * @param nodeID The node id you are adding as a validator\n     * @param amt Amount of AVAX to stake in nAVAX\n     * @param start Validation period start date\n     * @param end Validation period end date\n     * @param delegationFee Minimum 2%\n     * @param rewardAddress P chain address to send staking rewards\n     * @param utxos\n     *\n     * @return Transaction id\n     */\n    async validate(\n        nodeID: string,\n        amt: BN,\n        start: Date,\n        end: Date,\n        delegationFee: number,\n        rewardAddress?: string,\n        utxos?: PlatformUTXO[]\n    ): Promise<string> {\n        let utxoSet = this.utxosP;\n\n        // If given custom UTXO set use that\n        if (utxos) {\n            utxoSet = new PlatformUTXOSet();\n            utxoSet.addArray(utxos);\n        }\n\n        let pAddressStrings = this.getAllAddressesP();\n        // let pAddressStrings = this.platformHelper.getAllDerivedAddresses()\n\n        let stakeAmount = amt;\n\n        // If reward address isn't given use index 0 address\n        if (!rewardAddress) {\n            rewardAddress = this.getAddressP();\n        }\n\n        // For change address use first available on the platform chain\n        let changeAddress = this.getAddressP();\n\n        let stakeReturnAddr = this.getAddressP();\n\n        // Convert dates to unix time\n        let startTime = new BN(Math.round(start.getTime() / 1000));\n        let endTime = new BN(Math.round(end.getTime() / 1000));\n\n        const unsignedTx = await pChain.buildAddValidatorTx(\n            utxoSet,\n            [stakeReturnAddr],\n            pAddressStrings, // from\n            [changeAddress], // change\n            nodeID,\n            startTime,\n            endTime,\n            stakeAmount,\n            [rewardAddress],\n            delegationFee\n        );\n\n        let tx = await this.signP(unsignedTx);\n        const txId = await pChain.issueTx(tx);\n        await waitTxP(txId);\n\n        this.updateUtxosP();\n\n        return txId;\n    }\n\n    async delegate(\n        nodeID: string,\n        amt: BN,\n        start: Date,\n        end: Date,\n        rewardAddress?: string,\n        utxos?: PlatformUTXO[]\n    ): Promise<string> {\n        let utxoSet = this.utxosP;\n        let pAddressStrings = this.getAllAddressesP();\n\n        let stakeAmount = amt;\n\n        // If given custom UTXO set use that\n        if (utxos) {\n            utxoSet = new PlatformUTXOSet();\n            utxoSet.addArray(utxos);\n        }\n\n        // If reward address isn't given use current P address\n        if (!rewardAddress) {\n            rewardAddress = this.getAddressP();\n        }\n\n        let stakeReturnAddr = this.getAddressP();\n\n        // For change address use the current platform chain\n        let changeAddress = this.getAddressP();\n\n        // Convert dates to unix time\n        let startTime = new BN(Math.round(start.getTime() / 1000));\n        let endTime = new BN(Math.round(end.getTime() / 1000));\n\n        const unsignedTx = await pChain.buildAddDelegatorTx(\n            utxoSet,\n            [stakeReturnAddr],\n            pAddressStrings,\n            [changeAddress],\n            nodeID,\n            startTime,\n            endTime,\n            stakeAmount,\n            [rewardAddress] // reward address\n        );\n\n        const tx = await this.signP(unsignedTx);\n        const txId = await pChain.issueTx(tx);\n        await waitTxP(txId);\n\n        this.updateUtxosP();\n        return txId;\n    }\n\n    /**\n     * Issues the given transaction.\n     * @param tx A universal transaction json object.\n     */\n    public async issueUniversalTx(tx: UniversalTx): Promise<string> {\n        switch (tx.action) {\n            case 'export_x_c':\n                if (!tx.amount) throw new Error('Universal transaction must specify an amount.');\n                return await this.exportXChain(tx.amount, 'C');\n            case 'import_x_c':\n                return await this.importC();\n            case 'export_x_p':\n                if (!tx.amount) throw new Error('Universal transaction must specify an amount.');\n                return await this.exportXChain(tx.amount, 'P');\n            case 'import_x_p':\n                return await this.importP();\n            case 'export_c_x':\n                if (!tx.amount) throw new Error('Universal transaction must specify an amount.');\n                return await this.exportCChain(tx.amount);\n            case 'import_c_x':\n                return await this.importX('C');\n            case 'export_p_x':\n                if (!tx.amount) throw new Error('Universal transaction must specify an amount.');\n                return await this.exportPChain(tx.amount);\n            case 'import_p_x':\n                return await this.importX('P');\n            default:\n                throw new Error('Method not supported.');\n        }\n    }\n\n    async getHistoryX(limit = 0): Promise<ITransactionData[]> {\n        let addrs = this.getAllAddressesX();\n        return await getAddressHistory(addrs, limit, xChain.getBlockchainID());\n    }\n\n    async getHistoryP(limit = 0): Promise<ITransactionData[]> {\n        let addrs = this.getAllAddressesP();\n        return await getAddressHistory(addrs, limit, pChain.getBlockchainID());\n    }\n\n    async getHistoryC(limit = 0): Promise<ITransactionData[]> {\n        let addrs = [this.getEvmAddressBech()];\n        return await getAddressHistory(addrs, limit, cChain.getBlockchainID());\n    }\n\n    async getHistoryEVM() {\n        let addr = this.getAddressC();\n        return await getAddressHistoryEVM(addr);\n    }\n\n    async getHistory(limit: number = 0): Promise<HistoryItemType[]> {\n        let txsX = await this.getHistoryX(limit);\n        let txsP = await this.getHistoryP(limit);\n        let txsC = await this.getHistoryC(limit);\n\n        let txsXPC = txsX.concat(txsP, txsC);\n\n        let txsEVM = await this.getHistoryEVM();\n\n        let addrs = this.getAllAddressesX();\n        let addrC = this.getAddressC();\n\n        // Parse X,P,C transactions\n        // Have to loop because of the asynchronous call\n        let parsedXPC = [];\n        for (let i = 0; i < txsXPC.length; i++) {\n            let tx = txsXPC[i];\n            try {\n                let summary = await getTransactionSummary(tx, addrs, addrC);\n                parsedXPC.push(summary);\n            } catch (err) {\n                console.error(err);\n            }\n        }\n\n        // Parse EVM Transactions\n        let parsedEVM = txsEVM.map((tx) => getTransactionSummaryEVM(tx, addrC));\n\n        // Sort and join X,P,C transactions\n        let parsedAll = [...parsedXPC, ...parsedEVM];\n        let txsSorted = parsedAll.sort((x, y) => (moment(x.timestamp).isBefore(moment(y.timestamp)) ? 1 : -1));\n\n        // If there is a limit only return that much\n        if (limit > 0) {\n            return txsSorted.slice(0, limit);\n        }\n        return txsSorted;\n    }\n}\n","import { explorer_api } from '@/Network/network';\nimport { NO_EXPLORER_API } from '@/errors';\n\nasync function isAddressUsedX(addr: string) {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    let addrRaw = addr.split('-')[1];\n    let url = `/x/transactions?address=${addrRaw}&limit=1&disableCount=1`;\n\n    let res = await explorer_api.get(url);\n    if (res.data.transactions.length > 0) return true;\n    else return false;\n}\n\nasync function getAddressDetailX(addr: string) {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    let addrRaw = addr.split('-')[1];\n    let url = `/x/addresses/${addrRaw}`;\n\n    let res = await explorer_api.get(url);\n    return res.data;\n}\n\n// Given an array of addresses, checks which chain each address was already used on\nasync function getAddressChains(addrs: string[]) {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    // Strip the prefix\n    let rawAddrs = addrs.map((addr) => {\n        return addr.split('-')[1];\n    });\n\n    let urlRoot = `/v2/addressChains`;\n\n    let res = await explorer_api.post(urlRoot, {\n        address: rawAddrs,\n        disableCount: ['1'],\n    });\n\n    return res.data.addressChains;\n}\n\nexport { getAddressDetailX, isAddressUsedX, getAddressChains };\n","import HDKey from 'hdkey';\nimport { getPreferredHRP } from 'avalanche/dist/utils';\nimport { activeNetwork, avalanche, pChain, xChain } from '@/Network/network';\nimport { KeyPair as AVMKeyPair, KeyChain as AVMKeyChain } from 'avalanche/dist/apis/avm/keychain';\nimport { KeyChain as PlatformKeyChain, KeyPair as PlatformKeyPair } from 'avalanche/dist/apis/platformvm';\nimport { HdChainType } from './types';\nimport { Buffer } from 'avalanche';\nimport { INDEX_RANGE, SCAN_RANGE, SCAN_SIZE } from './constants';\nimport { getAddressChains } from '../Explorer/Explorer';\nimport { NO_NETWORK } from '@/errors';\nimport { bintools } from '@/common';\n\ntype AddressCache = {\n    [index: string]: HDKey;\n};\n\ntype KeyCacheX = {\n    [index: string]: AVMKeyPair;\n};\n\ntype KeyCacheP = {\n    [index: string]: PlatformKeyPair;\n};\n\n// Each HD wallet has 2 HdScaners, one for internal chain, one for external\nexport default class HdScanner {\n    protected index = 0;\n    protected addressCache: AddressCache = {};\n    protected keyCacheX: KeyCacheX = {};\n    protected keyCacheP: KeyCacheP = {};\n    readonly changePath: string;\n    readonly accountKey: HDKey;\n\n    constructor(accountKey: HDKey, isInternal = true) {\n        this.changePath = isInternal ? '1' : '0';\n        this.accountKey = accountKey;\n    }\n\n    getIndex() {\n        return this.index;\n    }\n\n    public increment(): number {\n        return this.index++;\n    }\n\n    public getAddressX() {\n        return this.getAddressForIndex(this.index, 'X');\n    }\n\n    public getAddressP() {\n        return this.getAddressForIndex(this.index, 'P');\n    }\n\n    public getAllAddresses(chainId: HdChainType = 'X'): string[] {\n        let upTo = this.index;\n        let addrs = [];\n        for (let i = 0; i <= upTo; i++) {\n            addrs.push(this.getAddressForIndex(i, chainId));\n        }\n        return addrs;\n    }\n\n    getAddressesInRange(start: number, end: number): string[] {\n        let res = [];\n        for (let i = start; i < end; i++) {\n            res.push(this.getAddressForIndex(i));\n        }\n        return res;\n    }\n\n    getKeyChainX(): AVMKeyChain {\n        let keychain = xChain.newKeyChain();\n        for (let i = 0; i <= this.index; i++) {\n            let key = this.getKeyForIndexX(i);\n            keychain.addKey(key);\n        }\n        return keychain;\n    }\n\n    getKeyChainP(): PlatformKeyChain {\n        let keychain = pChain.newKeyChain();\n        for (let i = 0; i <= this.index; i++) {\n            let key = this.getKeyForIndexP(i);\n            keychain.addKey(key);\n        }\n        return keychain;\n    }\n\n    getKeyForIndexX(index: number): AVMKeyPair {\n        let cache = this.keyCacheX[index];\n        if (cache) return cache;\n\n        let hdKey = this.getHdKeyForIndex(index);\n        let pkHex = hdKey.privateKey.toString('hex');\n\n        let pkBuf: Buffer = new Buffer(pkHex, 'hex');\n\n        let keychain = xChain.newKeyChain();\n        let keypair = keychain.importKey(pkBuf);\n\n        this.keyCacheX[index] = keypair;\n        return keypair;\n    }\n\n    getKeyForIndexP(index: number): PlatformKeyPair {\n        let cache = this.keyCacheP[index];\n        if (cache) return cache;\n\n        let hdKey = this.getHdKeyForIndex(index);\n        let pkHex = hdKey.privateKey.toString('hex');\n\n        let pkBuf: Buffer = new Buffer(pkHex, 'hex');\n\n        let keychain = pChain.newKeyChain();\n        let keypair = keychain.importKey(pkBuf);\n\n        this.keyCacheP[index] = keypair;\n\n        return keypair;\n    }\n\n    private getHdKeyForIndex(index: number): HDKey {\n        let key: HDKey;\n        if (this.addressCache[index]) {\n            key = this.addressCache[index];\n        } else {\n            key = this.accountKey.derive(`m/${this.changePath}/${index}`) as HDKey;\n            this.addressCache[index] = key;\n        }\n        return key;\n    }\n\n    private getAddressForIndex(index: number, chainId: HdChainType = 'X'): string {\n        let key = this.getHdKeyForIndex(index);\n\n        let publicKey = key.publicKey.toString('hex');\n        let publicKeyBuff = Buffer.from(publicKey, 'hex');\n\n        let hrp = getPreferredHRP(avalanche.getNetworkID());\n\n        let keypair = new AVMKeyPair(hrp, chainId);\n        let addrBuf = keypair.addressFromPublicKey(publicKeyBuff);\n        let addr = bintools.addressToString(hrp, chainId, addrBuf);\n\n        return addr;\n    }\n\n    // Uses the explorer to scan used addresses and find its starting index\n    public async resetIndex(startIndex = 0): Promise<number> {\n        if (!activeNetwork) throw NO_NETWORK;\n\n        let index;\n        if (activeNetwork.explorerURL) {\n            index = await this.findAvailableIndexExplorer(startIndex);\n        } else {\n            index = await this.findAvailableIndexNode(startIndex);\n        }\n        this.index = index;\n        return index;\n    }\n\n    // Scans the address space of this hd path and finds the last used index using the\n    // explorer API.\n    private async findAvailableIndexExplorer(startIndex = 0): Promise<number> {\n        let upTo = 512;\n\n        let addrs = this.getAddressesInRange(startIndex, startIndex + upTo);\n        let addrChains = await getAddressChains(addrs);\n\n        for (let i = 0; i < addrs.length - INDEX_RANGE; i++) {\n            let gapSize: number = 0;\n\n            for (let n = 0; n < INDEX_RANGE; n++) {\n                let scanIndex = i + n;\n                let scanAddr = addrs[scanIndex];\n\n                let rawAddr = scanAddr.split('-')[1];\n                let chains: string[] = addrChains[rawAddr];\n\n                if (!chains) {\n                    // If doesnt exist on any chain\n                    gapSize++;\n                } else {\n                    i = i + n;\n                    break;\n                }\n            }\n\n            // If the gap is reached return the index\n            if (gapSize === INDEX_RANGE) {\n                return startIndex + i;\n            }\n        }\n\n        return await this.findAvailableIndexExplorer(startIndex + (upTo - INDEX_RANGE));\n    }\n\n    // Uses the node to find last used HD index\n    // Only used when there is no explorer API available\n    private async findAvailableIndexNode(start = 0): Promise<number> {\n        let addrsX: string[] = [];\n        let addrsP: string[] = [];\n\n        // Get keys for indexes start to start+scan_size\n        for (let i: number = start; i < start + SCAN_SIZE; i++) {\n            let addressX = this.getAddressForIndex(i, 'X');\n            let addressP = this.getAddressForIndex(i, 'P');\n            addrsX.push(addressX);\n            addrsP.push(addressP);\n        }\n\n        let utxoSetX = (await xChain.getUTXOs(addrsX)).utxos;\n        let utxoSetP = (await pChain.getUTXOs(addrsP)).utxos;\n\n        // Scan UTXOs of these indexes and try to find a gap of INDEX_RANGE\n        for (let i: number = 0; i < addrsX.length - INDEX_RANGE; i++) {\n            let gapSize: number = 0;\n            for (let n: number = 0; n < INDEX_RANGE; n++) {\n                let scanIndex: number = i + n;\n                let addr: string = addrsX[scanIndex];\n                let addrBuf = bintools.parseAddress(addr, 'X');\n                let addrUTXOsX: string[] = utxoSetX.getUTXOIDs([addrBuf]);\n                let addrUTXOsP: string[] = utxoSetP.getUTXOIDs([addrBuf]);\n                if (addrUTXOsX.length === 0 && addrUTXOsP.length === 0) {\n                    gapSize++;\n                } else {\n                    // Potential improvement\n                    i = i + n;\n                    break;\n                }\n            }\n\n            // If we found a gap of 20, we can return the last fullIndex+1\n            if (gapSize === INDEX_RANGE) {\n                let targetIndex = start + i;\n                return targetIndex;\n            }\n        }\n        return await this.findAvailableIndexNode(start + SCAN_RANGE);\n    }\n}\n","import { WalletProvider } from '@/Wallet/Wallet';\nimport HdScanner from '@/Wallet/HdScanner';\nimport HDKey from 'hdkey';\nimport { UTXOSet as AVMUTXOSet } from 'avalanche/dist/apis/avm/utxos';\nimport { avalanche } from '@/Network/network';\nimport { UTXOSet as PlatformUTXOSet } from 'avalanche/dist/apis/platformvm';\nimport { iHDWalletIndex } from '@/Wallet/types';\nimport { bintools } from '@/common';\n\nexport abstract class HDWalletAbstract extends WalletProvider {\n    protected internalScan: HdScanner;\n    protected externalScan: HdScanner;\n    protected accountKey: HDKey;\n\n    protected constructor(accountKey: HDKey) {\n        super();\n\n        this.internalScan = new HdScanner(accountKey, true);\n        this.externalScan = new HdScanner(accountKey, false);\n        this.accountKey = accountKey;\n    }\n\n    /**\n     * Returns current index used for external address derivation.\n     */\n    public getExternalIndex(): number {\n        return this.externalScan.getIndex();\n    }\n\n    /**\n     * Returns current index used for internal address derivation.\n     */\n    public getInternalIndex(): number {\n        return this.internalScan.getIndex();\n    }\n\n    /**\n     * Gets the active external address on the X chain\n     * - The X address will change after every deposit.\n     */\n    public getAddressX(): string {\n        return this.externalScan.getAddressX();\n    }\n\n    /**\n     * Gets the active change address on the X chain\n     * - The change address will change after every transaction on the X chain.\n     */\n    public getChangeAddressX() {\n        return this.internalScan.getAddressX();\n    }\n\n    /**\n     * Gets the active address on the P chain\n     */\n    public getAddressP(): string {\n        return this.externalScan.getAddressP();\n    }\n\n    /**\n     * Returns every external X chain address used by the wallet up to now.\n     */\n    public getExternalAddressesX(): string[] {\n        return this.externalScan.getAllAddresses('X');\n    }\n\n    /**\n     * Returns every internal X chain address used by the wallet up to now.\n     */\n    public getInternalAddressesX(): string[] {\n        return this.internalScan.getAllAddresses('X');\n    }\n\n    /**\n     * Returns every X chain address used by the wallet up to now (internal + external).\n     */\n    public getAllAddressesX(): string[] {\n        return [...this.getExternalAddressesX(), ...this.getInternalAddressesX()];\n    }\n\n    public getExternalAddressesP(): string[] {\n        return this.externalScan.getAllAddresses('P');\n    }\n\n    /**\n     * Returns every P chain address used by the wallet up to now.\n     */\n    public getAllAddressesP(): string[] {\n        return this.getExternalAddressesP();\n    }\n\n    /**\n     * Scans the network and initializes internal and external addresses on P and X chains.\n     * - Heavy operation\n     * - MUST use the explorer api to find the last used address\n     * - If explorer is not available it will use the connected node. This may result in invalid balances.\n     */\n    public async resetHdIndices(externalStart = 0, internalStart = 0): Promise<iHDWalletIndex> {\n        let indexExt = await this.externalScan.resetIndex(externalStart);\n        let indexInt = await this.internalScan.resetIndex(internalStart);\n\n        let indices = {\n            internal: indexInt,\n            external: indexExt,\n        };\n\n        this.emitAddressChange();\n        this.emitHdReady(indices);\n\n        return indices;\n    }\n\n    /**\n     * Emits an event to indicate the wallet has finishing calculating its last use address\n     * @protected\n     */\n    protected emitHdReady(indices: iHDWalletIndex): void {\n        this.emit('hd_ready', indices);\n    }\n\n    public async updateUtxosX(): Promise<AVMUTXOSet> {\n        let utxosX = await super.updateUtxosX();\n\n        // If the current internal or external X address is in the utxo set, increment hd index\n        let utxoAddrs = utxosX.getAddresses();\n        let utxoAddrsStr = utxoAddrs.map((addr) => {\n            return bintools.addressToString(avalanche.getHRP(), 'X', addr);\n        });\n\n        let addrExternalX = this.getAddressX();\n        let addrInternalX = this.getChangeAddressX();\n\n        let isAddrChange = false;\n        // Increment external index if the current address is in the utxo set\n        if (utxoAddrsStr.includes(addrExternalX)) {\n            this.incrementExternal();\n            isAddrChange = true;\n        }\n\n        // Increment internal index if the current address is in the utxo set\n        if (utxoAddrsStr.includes(addrInternalX)) {\n            this.incrementInternal();\n            isAddrChange = true;\n        }\n\n        if (isAddrChange) this.emitAddressChange();\n\n        return utxosX;\n    }\n\n    private incrementExternal() {\n        this.externalScan.increment();\n    }\n\n    private incrementInternal() {\n        this.internalScan.increment();\n    }\n\n    public async updateUtxosP(): Promise<PlatformUTXOSet> {\n        let utxosP = await super.updateUtxosP();\n\n        // If the current P address is in the utxo set, increment hd index\n        let utxoAddrs = utxosP.getAddresses();\n        let utxoAddrsStr = utxoAddrs.map((addr) => {\n            return bintools.addressToString(avalanche.getHRP(), 'P', addr);\n        });\n\n        let addrExternalP = this.getAddressP();\n\n        // Increment external index if the current address is in the utxo set\n        if (utxoAddrsStr.includes(addrExternalP)) {\n            this.incrementExternal();\n            this.emitAddressChange();\n        }\n\n        return utxosP;\n    }\n\n    public getAddressAtIndexExternalX(index: number): string {\n        if (index < 0) throw new Error('Index must be >= 0');\n        return this.externalScan.getKeyForIndexX(index).getAddressString();\n    }\n\n    public getAddressAtIndexInternalX(index: number): string {\n        if (index < 0) throw new Error('Index must be >= 0');\n        return this.internalScan.getKeyForIndexX(index).getAddressString();\n    }\n\n    public getAddressAtIndexExternalP(index: number): string {\n        if (index < 0) throw new Error('Index must be >= 0');\n        return this.externalScan.getKeyForIndexP(index).getAddressString();\n    }\n}\n","import * as bip39 from 'bip39';\nimport HDKey from 'hdkey';\nimport { AVAX_ACCOUNT_PATH, ETH_ACCOUNT_PATH } from './constants';\nimport EvmWallet from './EvmWallet';\nimport { UnsafeWallet, WalletNameType } from './types';\nimport { Buffer } from 'avalanche';\nimport { Transaction } from '@ethereumjs/tx';\nimport { Tx as AVMTx, UnsignedTx as AVMUnsignedTx } from 'avalanche/dist/apis/avm';\nimport { Tx as PlatformTx, UnsignedTx as PlatformUnsignedTx } from 'avalanche/dist/apis/platformvm';\nimport { KeyPair as AVMKeyPair, KeyChain as AVMKeyChain } from 'avalanche/dist/apis/avm/keychain';\nimport { KeyChain as PlatformKeyChain } from 'avalanche/dist/apis/platformvm';\nimport {\n    UnsignedTx as EVMUnsignedTx,\n    Tx as EVMTx,\n    KeyChain as EVMKeychain,\n    KeyPair as EVMKeyPair,\n} from 'avalanche/dist/apis/evm';\nimport { avalanche } from '@/Network/network';\nimport { digestMessage } from '@/utils/utils';\nimport { HDWalletAbstract } from '@/Wallet/HDWalletAbstract';\nimport { bintools } from '@/common';\n\nexport default class MnemonicWallet extends HDWalletAbstract implements UnsafeWallet {\n    evmWallet: EvmWallet;\n    type: WalletNameType;\n    mnemonic: string;\n\n    private ethAccountKey: HDKey;\n\n    constructor(mnemonic: string) {\n        let seed: globalThis.Buffer = bip39.mnemonicToSeedSync(mnemonic);\n        let masterHdKey: HDKey = HDKey.fromMasterSeed(seed);\n        let accountKey = masterHdKey.derive(AVAX_ACCOUNT_PATH);\n\n        super(accountKey);\n\n        this.type = 'mnemonic';\n        if (!bip39.validateMnemonic(mnemonic)) {\n            throw new Error('Invalid mnemonic phrase.');\n        }\n\n        let ethAccountKey = masterHdKey.derive(ETH_ACCOUNT_PATH + '/0/0');\n        this.ethAccountKey = ethAccountKey;\n        let ethKey = ethAccountKey.privateKey;\n        let evmWallet = new EvmWallet(ethKey);\n\n        this.mnemonic = mnemonic;\n        this.evmWallet = evmWallet;\n    }\n\n    /**\n     * Gets the active address on the C chain in Bech32 encoding\n     * @return\n     * Bech32 representation of the EVM address.\n     */\n    public getEvmAddressBech(): string {\n        let keypair = new EVMKeyPair(avalanche.getHRP(), 'C');\n        let addr = keypair.addressFromPublicKey(Buffer.from(this.ethAccountKey.publicKey));\n        return bintools.addressToString(avalanche.getHRP(), 'C', addr);\n    }\n\n    /**\n     * Returns the derived private key used by the EVM wallet.\n     */\n    public getEvmPrivateKeyHex(): string {\n        return this.evmWallet.getPrivateKeyHex();\n    }\n\n    /**\n     * Generates a 24 word mnemonic phrase and initializes a wallet instance with it.\n     * @return Returns the initialized wallet.\n     */\n    static create(): MnemonicWallet {\n        const mnemonic = bip39.generateMnemonic(256);\n        return MnemonicWallet.fromMnemonic(mnemonic);\n    }\n\n    /**\n     * Returns a new 24 word mnemonic key phrase.\n     */\n    static generateMnemonicPhrase(): string {\n        return bip39.generateMnemonic(256);\n    }\n\n    /**\n     * Returns a new instance of a Mnemonic wallet from the given key phrase.\n     * @param mnemonic The 24 word mnemonic phrase of the wallet\n     */\n    static fromMnemonic(mnemonic: string): MnemonicWallet {\n        return new MnemonicWallet(mnemonic);\n    }\n\n    /**\n     * Signs an EVM transaction on the C chain.\n     * @param tx The unsigned transaction\n     */\n    async signEvm(tx: Transaction): Promise<Transaction> {\n        return this.evmWallet.signEVM(tx);\n    }\n\n    /**\n     * Signs an AVM transaction.\n     * @param tx The unsigned transaction\n     */\n    async signX(tx: AVMUnsignedTx): Promise<AVMTx> {\n        return tx.sign(this.getKeyChainX());\n    }\n\n    /**\n     * Signs a PlatformVM transaction.\n     * @param tx The unsigned transaction\n     */\n    async signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\n        return tx.sign(this.getKeyChainP());\n    }\n\n    /**\n     * Signs a C chain transaction\n     * @remarks\n     * Used for Import and Export transactions on the C chain. For everything else, use `this.signEvm()`\n     * @param tx The unsigned transaction\n     */\n    async signC(tx: EVMUnsignedTx): Promise<EVMTx> {\n        return this.evmWallet.signC(tx);\n    }\n\n    /**\n     * Returns a keychain with the keys of every derived X chain address.\n     * @private\n     */\n    private getKeyChainX(): AVMKeyChain {\n        let internal = this.internalScan.getKeyChainX();\n        let external = this.externalScan.getKeyChainX();\n        return internal.union(external);\n    }\n\n    /**\n     * Returns a keychain with the keys of every derived P chain address.\n     * @private\n     */\n    private getKeyChainP(): PlatformKeyChain {\n        return this.externalScan.getKeyChainP();\n    }\n\n    /**\n     * Gets the active address on the C chain\n     * @return\n     * Hex representation of the EVM address.\n     */\n    public getAddressC(): string {\n        return this.evmWallet.getAddress();\n    }\n\n    // TODO: Support internal address as well\n    signMessage(msgStr: string, index: number): string {\n        let key = this.externalScan.getKeyForIndexX(index) as AVMKeyPair;\n        let digest = digestMessage(msgStr);\n\n        // Convert to the other Buffer and sign\n        let digestHex = digest.toString('hex');\n        let digestBuff = Buffer.from(digestHex, 'hex');\n        let signed = key.sign(digestBuff);\n\n        return bintools.cb58Encode(signed);\n    }\n}\n","import { WalletProvider } from '@/Wallet/Wallet';\nimport { UnsafeWallet, WalletNameType } from '@/Wallet/types';\n\nimport { KeyChain as AVMKeyChain, UnsignedTx as AVMUnsignedTx, Tx as AVMTx } from 'avalanche/dist/apis/avm';\nimport {\n    KeyChain as PlatformKeyChain,\n    UnsignedTx as PlatformUnsignedTx,\n    Tx as PlatformTx,\n} from 'avalanche/dist/apis/platformvm';\nimport { avalanche, pChain, xChain } from '@/Network/network';\nimport { Buffer as BufferAvalanche } from 'avalanche';\nimport EvmWallet from '@/Wallet/EvmWallet';\nimport { UnsignedTx, Tx, KeyPair as EVMKeyPair } from 'avalanche/dist/apis/evm';\nimport { Transaction } from '@ethereumjs/tx';\nimport { bintools } from '@/common';\n\nexport default class SingletonWallet extends WalletProvider implements UnsafeWallet {\n    type: WalletNameType = 'singleton';\n    key = '';\n    keyBuff: BufferAvalanche;\n    evmWallet: EvmWallet;\n\n    /**\n     *\n     * @param privateKey An avalanche private key, starts with `PrivateKey-`\n     */\n    constructor(privateKey: string) {\n        super();\n\n        this.key = privateKey;\n\n        // Derive EVM key and address\n        let pkBuf = bintools.cb58Decode(privateKey.split('-')[1]);\n        this.keyBuff = pkBuf;\n\n        let pkHex = pkBuf.toString('hex');\n        let pkBuffNative = Buffer.from(pkHex, 'hex');\n\n        this.evmWallet = new EvmWallet(pkBuffNative);\n    }\n\n    static fromPrivateKey(key: string): SingletonWallet {\n        return new SingletonWallet(key);\n    }\n\n    static fromEvmKey(key: string): SingletonWallet {\n        let keyBuff = bintools.cb58Encode(BufferAvalanche.from(key, 'hex'));\n        let avmKeyStr = `PrivateKey-${keyBuff}`;\n        return new SingletonWallet(avmKeyStr);\n    }\n\n    private getKeyChainX(): AVMKeyChain {\n        let keyChain = xChain.newKeyChain();\n        keyChain.importKey(this.key);\n        return keyChain;\n    }\n\n    private getKeyChainP(): PlatformKeyChain {\n        let keyChain = pChain.newKeyChain();\n        keyChain.importKey(this.key);\n        return keyChain;\n    }\n\n    /**\n     * Returns the derived private key used by the EVM wallet.\n     */\n    public getEvmPrivateKeyHex(): string {\n        return this.evmWallet.getPrivateKeyHex();\n    }\n\n    getAddressC(): string {\n        return this.evmWallet.getAddress();\n    }\n\n    getAddressP(): string {\n        let keyChain = this.getKeyChainP();\n        return keyChain.getAddressStrings()[0];\n    }\n\n    getAddressX(): string {\n        let keyChain = this.getKeyChainX();\n        return keyChain.getAddressStrings()[0];\n    }\n\n    getAllAddressesP(): string[] {\n        return [this.getAddressP()];\n    }\n\n    getAllAddressesX(): string[] {\n        return [this.getAddressX()];\n    }\n\n    getChangeAddressX(): string {\n        return this.getAddressX();\n    }\n\n    getEvmAddressBech(): string {\n        let keypair = new EVMKeyPair(avalanche.getHRP(), 'C');\n        keypair.importKey(this.keyBuff);\n        return keypair.getAddressString();\n    }\n\n    getExternalAddressesP(): string[] {\n        return [this.getAddressP()];\n    }\n\n    getExternalAddressesX(): string[] {\n        return [this.getAddressX()];\n    }\n\n    getInternalAddressesX(): string[] {\n        return [this.getAddressX()];\n    }\n\n    async signC(tx: UnsignedTx): Promise<Tx> {\n        return this.evmWallet.signC(tx);\n    }\n\n    async signEvm(tx: Transaction): Promise<Transaction> {\n        return this.evmWallet.signEVM(tx);\n    }\n\n    async signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\n        return tx.sign(this.getKeyChainP());\n    }\n\n    async signX(tx: AVMUnsignedTx): Promise<AVMTx> {\n        return tx.sign(this.getKeyChainX());\n    }\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defer = defer;\nexports.splitPath = splitPath;\nexports.eachSeries = eachSeries;\nexports.foreach = foreach;\nexports.doIf = doIf;\nexports.asyncWhile = asyncWhile;\n\n/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\nfunction defer() {\n  let resolve, reject;\n  let promise = new Promise(function (success, failure) {\n    resolve = success;\n    reject = failure;\n  });\n  if (!resolve || !reject) throw \"defer() error\"; // this never happens and is just to make flow happy\n\n  return {\n    promise,\n    resolve,\n    reject\n  };\n} // TODO use bip32-path library\n\n\nfunction splitPath(path) {\n  let result = [];\n  let components = path.split(\"/\");\n  components.forEach(element => {\n    let number = parseInt(element, 10);\n\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n\n    result.push(number);\n  });\n  return result;\n} // TODO use async await\n\n\nfunction eachSeries(arr, fun) {\n  return arr.reduce((p, e) => p.then(() => fun(e)), Promise.resolve());\n}\n\nfunction foreach(arr, callback) {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else return callback(array[index], index).then(function (res) {\n      result.push(res);\n      return iterate(index + 1, array, result);\n    });\n  }\n\n  return Promise.resolve().then(() => iterate(0, arr, []));\n}\n\nfunction doIf(condition, callback) {\n  return Promise.resolve().then(() => {\n    if (condition) {\n      return callback();\n    }\n  });\n}\n\nfunction asyncWhile(predicate, callback) {\n  function iterate(result) {\n    if (!predicate()) {\n      return result;\n    } else {\n      return callback().then(res => {\n        result.push(res);\n        return iterate(result);\n      });\n    }\n  }\n\n  return Promise.resolve([]).then(iterate);\n}\n//# sourceMappingURL=utils.js.map","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/* eslint-disable no-continue */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-prototype-builtins */\r\nvar errorClasses = {};\r\nvar deserializers = {};\r\nvar addCustomErrorDeserializer = function (name, deserializer) {\r\n    deserializers[name] = deserializer;\r\n};\r\nvar createCustomErrorClass = function (name) {\r\n    var C = function CustomError(message, fields) {\r\n        Object.assign(this, fields);\r\n        this.name = name;\r\n        this.message = message || name;\r\n        this.stack = new Error().stack;\r\n    };\r\n    C.prototype = new Error();\r\n    errorClasses[name] = C;\r\n    return C;\r\n};\r\n// inspired from https://github.com/programble/errio/blob/master/index.js\r\nvar deserializeError = function (object) {\r\n    if (typeof object === \"object\" && object) {\r\n        try {\r\n            // $FlowFixMe FIXME HACK\r\n            var msg = JSON.parse(object.message);\r\n            if (msg.message && msg.name) {\r\n                object = msg;\r\n            }\r\n        }\r\n        catch (e) {\r\n            // nothing\r\n        }\r\n        var error = void 0;\r\n        if (typeof object.name === \"string\") {\r\n            var name_1 = object.name;\r\n            var des = deserializers[name_1];\r\n            if (des) {\r\n                error = des(object);\r\n            }\r\n            else {\r\n                var constructor = name_1 === \"Error\" ? Error : errorClasses[name_1];\r\n                if (!constructor) {\r\n                    console.warn(\"deserializing an unknown class '\" + name_1 + \"'\");\r\n                    constructor = createCustomErrorClass(name_1);\r\n                }\r\n                error = Object.create(constructor.prototype);\r\n                try {\r\n                    for (var prop in object) {\r\n                        if (object.hasOwnProperty(prop)) {\r\n                            error[prop] = object[prop];\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // sometimes setting a property can fail (e.g. .name)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            error = new Error(object.message);\r\n        }\r\n        if (!error.stack && Error.captureStackTrace) {\r\n            Error.captureStackTrace(error, deserializeError);\r\n        }\r\n        return error;\r\n    }\r\n    return new Error(String(object));\r\n};\r\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\r\nvar serializeError = function (value) {\r\n    if (!value)\r\n        return value;\r\n    if (typeof value === \"object\") {\r\n        return destroyCircular(value, []);\r\n    }\r\n    if (typeof value === \"function\") {\r\n        return \"[Function: \" + (value.name || \"anonymous\") + \"]\";\r\n    }\r\n    return value;\r\n};\r\n// https://www.npmjs.com/package/destroy-circular\r\nfunction destroyCircular(from, seen) {\r\n    var to = {};\r\n    seen.push(from);\r\n    for (var _i = 0, _a = Object.keys(from); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        var value = from[key];\r\n        if (typeof value === \"function\") {\r\n            continue;\r\n        }\r\n        if (!value || typeof value !== \"object\") {\r\n            to[key] = value;\r\n            continue;\r\n        }\r\n        if (seen.indexOf(from[key]) === -1) {\r\n            to[key] = destroyCircular(from[key], seen.slice(0));\r\n            continue;\r\n        }\r\n        to[key] = \"[Circular]\";\r\n    }\r\n    if (typeof from.name === \"string\") {\r\n        to.name = from.name;\r\n    }\r\n    if (typeof from.message === \"string\") {\r\n        to.message = from.message;\r\n    }\r\n    if (typeof from.stack === \"string\") {\r\n        to.stack = from.stack;\r\n    }\r\n    return to;\r\n}\n\nvar AccountNameRequiredError = createCustomErrorClass(\"AccountNameRequired\");\r\nvar AccountNotSupported = createCustomErrorClass(\"AccountNotSupported\");\r\nvar AmountRequired = createCustomErrorClass(\"AmountRequired\");\r\nvar BluetoothRequired = createCustomErrorClass(\"BluetoothRequired\");\r\nvar BtcUnmatchedApp = createCustomErrorClass(\"BtcUnmatchedApp\");\r\nvar CantOpenDevice = createCustomErrorClass(\"CantOpenDevice\");\r\nvar CashAddrNotSupported = createCustomErrorClass(\"CashAddrNotSupported\");\r\nvar CurrencyNotSupported = createCustomErrorClass(\"CurrencyNotSupported\");\r\nvar DeviceAppVerifyNotSupported = createCustomErrorClass(\"DeviceAppVerifyNotSupported\");\r\nvar DeviceGenuineSocketEarlyClose = createCustomErrorClass(\"DeviceGenuineSocketEarlyClose\");\r\nvar DeviceNotGenuineError = createCustomErrorClass(\"DeviceNotGenuine\");\r\nvar DeviceOnDashboardExpected = createCustomErrorClass(\"DeviceOnDashboardExpected\");\r\nvar DeviceOnDashboardUnexpected = createCustomErrorClass(\"DeviceOnDashboardUnexpected\");\r\nvar DeviceInOSUExpected = createCustomErrorClass(\"DeviceInOSUExpected\");\r\nvar DeviceHalted = createCustomErrorClass(\"DeviceHalted\");\r\nvar DeviceNameInvalid = createCustomErrorClass(\"DeviceNameInvalid\");\r\nvar DeviceSocketFail = createCustomErrorClass(\"DeviceSocketFail\");\r\nvar DeviceSocketNoBulkStatus = createCustomErrorClass(\"DeviceSocketNoBulkStatus\");\r\nvar DisconnectedDevice = createCustomErrorClass(\"DisconnectedDevice\");\r\nvar DisconnectedDeviceDuringOperation = createCustomErrorClass(\"DisconnectedDeviceDuringOperation\");\r\nvar EnpointConfigError = createCustomErrorClass(\"EnpointConfig\");\r\nvar EthAppPleaseEnableContractData = createCustomErrorClass(\"EthAppPleaseEnableContractData\");\r\nvar FeeEstimationFailed = createCustomErrorClass(\"FeeEstimationFailed\");\r\nvar FirmwareNotRecognized = createCustomErrorClass(\"FirmwareNotRecognized\");\r\nvar HardResetFail = createCustomErrorClass(\"HardResetFail\");\r\nvar InvalidXRPTag = createCustomErrorClass(\"InvalidXRPTag\");\r\nvar InvalidAddress = createCustomErrorClass(\"InvalidAddress\");\r\nvar InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass(\"InvalidAddressBecauseDestinationIsAlsoSource\");\r\nvar LatestMCUInstalledError = createCustomErrorClass(\"LatestMCUInstalledError\");\r\nvar UnknownMCU = createCustomErrorClass(\"UnknownMCU\");\r\nvar LedgerAPIError = createCustomErrorClass(\"LedgerAPIError\");\r\nvar LedgerAPIErrorWithMessage = createCustomErrorClass(\"LedgerAPIErrorWithMessage\");\r\nvar LedgerAPINotAvailable = createCustomErrorClass(\"LedgerAPINotAvailable\");\r\nvar ManagerAppAlreadyInstalledError = createCustomErrorClass(\"ManagerAppAlreadyInstalled\");\r\nvar ManagerAppRelyOnBTCError = createCustomErrorClass(\"ManagerAppRelyOnBTC\");\r\nvar ManagerAppDepInstallRequired = createCustomErrorClass(\"ManagerAppDepInstallRequired\");\r\nvar ManagerAppDepUninstallRequired = createCustomErrorClass(\"ManagerAppDepUninstallRequired\");\r\nvar ManagerDeviceLockedError = createCustomErrorClass(\"ManagerDeviceLocked\");\r\nvar ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass(\"ManagerFirmwareNotEnoughSpace\");\r\nvar ManagerNotEnoughSpaceError = createCustomErrorClass(\"ManagerNotEnoughSpace\");\r\nvar ManagerUninstallBTCDep = createCustomErrorClass(\"ManagerUninstallBTCDep\");\r\nvar NetworkDown = createCustomErrorClass(\"NetworkDown\");\r\nvar NoAddressesFound = createCustomErrorClass(\"NoAddressesFound\");\r\nvar NotEnoughBalance = createCustomErrorClass(\"NotEnoughBalance\");\r\nvar NotEnoughBalanceToDelegate = createCustomErrorClass(\"NotEnoughBalanceToDelegate\");\r\nvar NotEnoughBalanceInParentAccount = createCustomErrorClass(\"NotEnoughBalanceInParentAccount\");\r\nvar NotEnoughSpendableBalance = createCustomErrorClass(\"NotEnoughSpendableBalance\");\r\nvar NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass(\"NotEnoughBalanceBecauseDestinationNotCreated\");\r\nvar NoAccessToCamera = createCustomErrorClass(\"NoAccessToCamera\");\r\nvar NotEnoughGas = createCustomErrorClass(\"NotEnoughGas\");\r\nvar NotSupportedLegacyAddress = createCustomErrorClass(\"NotSupportedLegacyAddress\");\r\nvar GasLessThanEstimate = createCustomErrorClass(\"GasLessThanEstimate\");\r\nvar PasswordsDontMatchError = createCustomErrorClass(\"PasswordsDontMatch\");\r\nvar PasswordIncorrectError = createCustomErrorClass(\"PasswordIncorrect\");\r\nvar RecommendSubAccountsToEmpty = createCustomErrorClass(\"RecommendSubAccountsToEmpty\");\r\nvar RecommendUndelegation = createCustomErrorClass(\"RecommendUndelegation\");\r\nvar TimeoutTagged = createCustomErrorClass(\"TimeoutTagged\");\r\nvar UnexpectedBootloader = createCustomErrorClass(\"UnexpectedBootloader\");\r\nvar MCUNotGenuineToDashboard = createCustomErrorClass(\"MCUNotGenuineToDashboard\");\r\nvar RecipientRequired = createCustomErrorClass(\"RecipientRequired\");\r\nvar UnavailableTezosOriginatedAccountReceive = createCustomErrorClass(\"UnavailableTezosOriginatedAccountReceive\");\r\nvar UnavailableTezosOriginatedAccountSend = createCustomErrorClass(\"UnavailableTezosOriginatedAccountSend\");\r\nvar UpdateFetchFileFail = createCustomErrorClass(\"UpdateFetchFileFail\");\r\nvar UpdateIncorrectHash = createCustomErrorClass(\"UpdateIncorrectHash\");\r\nvar UpdateIncorrectSig = createCustomErrorClass(\"UpdateIncorrectSig\");\r\nvar UpdateYourApp = createCustomErrorClass(\"UpdateYourApp\");\r\nvar UserRefusedDeviceNameChange = createCustomErrorClass(\"UserRefusedDeviceNameChange\");\r\nvar UserRefusedAddress = createCustomErrorClass(\"UserRefusedAddress\");\r\nvar UserRefusedFirmwareUpdate = createCustomErrorClass(\"UserRefusedFirmwareUpdate\");\r\nvar UserRefusedAllowManager = createCustomErrorClass(\"UserRefusedAllowManager\");\r\nvar UserRefusedOnDevice = createCustomErrorClass(\"UserRefusedOnDevice\"); // TODO rename because it's just for transaction refusal\r\nvar TransportOpenUserCancelled = createCustomErrorClass(\"TransportOpenUserCancelled\");\r\nvar TransportInterfaceNotAvailable = createCustomErrorClass(\"TransportInterfaceNotAvailable\");\r\nvar TransportRaceCondition = createCustomErrorClass(\"TransportRaceCondition\");\r\nvar TransportWebUSBGestureRequired = createCustomErrorClass(\"TransportWebUSBGestureRequired\");\r\nvar DeviceShouldStayInApp = createCustomErrorClass(\"DeviceShouldStayInApp\");\r\nvar WebsocketConnectionError = createCustomErrorClass(\"WebsocketConnectionError\");\r\nvar WebsocketConnectionFailed = createCustomErrorClass(\"WebsocketConnectionFailed\");\r\nvar WrongDeviceForAccount = createCustomErrorClass(\"WrongDeviceForAccount\");\r\nvar WrongAppForCurrency = createCustomErrorClass(\"WrongAppForCurrency\");\r\nvar ETHAddressNonEIP = createCustomErrorClass(\"ETHAddressNonEIP\");\r\nvar CantScanQRCode = createCustomErrorClass(\"CantScanQRCode\");\r\nvar FeeNotLoaded = createCustomErrorClass(\"FeeNotLoaded\");\r\nvar FeeRequired = createCustomErrorClass(\"FeeRequired\");\r\nvar FeeTooHigh = createCustomErrorClass(\"FeeTooHigh\");\r\nvar SyncError = createCustomErrorClass(\"SyncError\");\r\nvar PairingFailed = createCustomErrorClass(\"PairingFailed\");\r\nvar GenuineCheckFailed = createCustomErrorClass(\"GenuineCheckFailed\");\r\nvar LedgerAPI4xx = createCustomErrorClass(\"LedgerAPI4xx\");\r\nvar LedgerAPI5xx = createCustomErrorClass(\"LedgerAPI5xx\");\r\nvar FirmwareOrAppUpdateRequired = createCustomErrorClass(\"FirmwareOrAppUpdateRequired\");\r\n// db stuff, no need to translate\r\nvar NoDBPathGiven = createCustomErrorClass(\"NoDBPathGiven\");\r\nvar DBWrongPassword = createCustomErrorClass(\"DBWrongPassword\");\r\nvar DBNotReset = createCustomErrorClass(\"DBNotReset\");\r\n/**\r\n * TransportError is used for any generic transport errors.\r\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\r\n */\r\nfunction TransportError(message, id) {\r\n    this.name = \"TransportError\";\r\n    this.message = message;\r\n    this.stack = new Error().stack;\r\n    this.id = id;\r\n}\r\nTransportError.prototype = new Error();\r\naddCustomErrorDeserializer(\"TransportError\", function (e) { return new TransportError(e.message, e.id); });\r\nvar StatusCodes = {\r\n    PIN_REMAINING_ATTEMPTS: 0x63c0,\r\n    INCORRECT_LENGTH: 0x6700,\r\n    MISSING_CRITICAL_PARAMETER: 0x6800,\r\n    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\r\n    SECURITY_STATUS_NOT_SATISFIED: 0x6982,\r\n    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\r\n    INCORRECT_DATA: 0x6a80,\r\n    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\r\n    REFERENCED_DATA_NOT_FOUND: 0x6a88,\r\n    FILE_ALREADY_EXISTS: 0x6a89,\r\n    INCORRECT_P1_P2: 0x6b00,\r\n    INS_NOT_SUPPORTED: 0x6d00,\r\n    CLA_NOT_SUPPORTED: 0x6e00,\r\n    TECHNICAL_PROBLEM: 0x6f00,\r\n    OK: 0x9000,\r\n    MEMORY_PROBLEM: 0x9240,\r\n    NO_EF_SELECTED: 0x9400,\r\n    INVALID_OFFSET: 0x9402,\r\n    FILE_NOT_FOUND: 0x9404,\r\n    INCONSISTENT_FILE: 0x9408,\r\n    ALGORITHM_NOT_SUPPORTED: 0x9484,\r\n    INVALID_KCV: 0x9485,\r\n    CODE_NOT_INITIALIZED: 0x9802,\r\n    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\r\n    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\r\n    CONTRADICTION_INVALIDATION: 0x9810,\r\n    CODE_BLOCKED: 0x9840,\r\n    MAX_VALUE_REACHED: 0x9850,\r\n    GP_AUTH_FAILED: 0x6300,\r\n    LICENSING: 0x6f42,\r\n    HALTED: 0x6faa,\r\n};\r\nfunction getAltStatusMessage(code) {\r\n    switch (code) {\r\n        // improve text of most common errors\r\n        case 0x6700:\r\n            return \"Incorrect length\";\r\n        case 0x6800:\r\n            return \"Missing critical parameter\";\r\n        case 0x6982:\r\n            return \"Security not satisfied (dongle locked or have invalid access rights)\";\r\n        case 0x6985:\r\n            return \"Condition of use not satisfied (denied by the user?)\";\r\n        case 0x6a80:\r\n            return \"Invalid data received\";\r\n        case 0x6b00:\r\n            return \"Invalid parameter received\";\r\n    }\r\n    if (0x6f00 <= code && code <= 0x6fff) {\r\n        return \"Internal error, please report\";\r\n    }\r\n}\r\n/**\r\n * Error thrown when a device returned a non success status.\r\n * the error.statusCode is one of the `StatusCodes` exported by this library.\r\n */\r\nfunction TransportStatusError(statusCode) {\r\n    this.name = \"TransportStatusError\";\r\n    var statusText = Object.keys(StatusCodes).find(function (k) { return StatusCodes[k] === statusCode; }) ||\r\n        \"UNKNOWN_ERROR\";\r\n    var smsg = getAltStatusMessage(statusCode) || statusText;\r\n    var statusCodeStr = statusCode.toString(16);\r\n    this.message = \"Ledger device: \" + smsg + \" (0x\" + statusCodeStr + \")\";\r\n    this.stack = new Error().stack;\r\n    this.statusCode = statusCode;\r\n    this.statusText = statusText;\r\n}\r\nTransportStatusError.prototype = new Error();\r\naddCustomErrorDeserializer(\"TransportStatusError\", function (e) { return new TransportStatusError(e.statusCode); });\n\nexports.AccountNameRequiredError = AccountNameRequiredError;\nexports.AccountNotSupported = AccountNotSupported;\nexports.AmountRequired = AmountRequired;\nexports.BluetoothRequired = BluetoothRequired;\nexports.BtcUnmatchedApp = BtcUnmatchedApp;\nexports.CantOpenDevice = CantOpenDevice;\nexports.CantScanQRCode = CantScanQRCode;\nexports.CashAddrNotSupported = CashAddrNotSupported;\nexports.CurrencyNotSupported = CurrencyNotSupported;\nexports.DBNotReset = DBNotReset;\nexports.DBWrongPassword = DBWrongPassword;\nexports.DeviceAppVerifyNotSupported = DeviceAppVerifyNotSupported;\nexports.DeviceGenuineSocketEarlyClose = DeviceGenuineSocketEarlyClose;\nexports.DeviceHalted = DeviceHalted;\nexports.DeviceInOSUExpected = DeviceInOSUExpected;\nexports.DeviceNameInvalid = DeviceNameInvalid;\nexports.DeviceNotGenuineError = DeviceNotGenuineError;\nexports.DeviceOnDashboardExpected = DeviceOnDashboardExpected;\nexports.DeviceOnDashboardUnexpected = DeviceOnDashboardUnexpected;\nexports.DeviceShouldStayInApp = DeviceShouldStayInApp;\nexports.DeviceSocketFail = DeviceSocketFail;\nexports.DeviceSocketNoBulkStatus = DeviceSocketNoBulkStatus;\nexports.DisconnectedDevice = DisconnectedDevice;\nexports.DisconnectedDeviceDuringOperation = DisconnectedDeviceDuringOperation;\nexports.ETHAddressNonEIP = ETHAddressNonEIP;\nexports.EnpointConfigError = EnpointConfigError;\nexports.EthAppPleaseEnableContractData = EthAppPleaseEnableContractData;\nexports.FeeEstimationFailed = FeeEstimationFailed;\nexports.FeeNotLoaded = FeeNotLoaded;\nexports.FeeRequired = FeeRequired;\nexports.FeeTooHigh = FeeTooHigh;\nexports.FirmwareNotRecognized = FirmwareNotRecognized;\nexports.FirmwareOrAppUpdateRequired = FirmwareOrAppUpdateRequired;\nexports.GasLessThanEstimate = GasLessThanEstimate;\nexports.GenuineCheckFailed = GenuineCheckFailed;\nexports.HardResetFail = HardResetFail;\nexports.InvalidAddress = InvalidAddress;\nexports.InvalidAddressBecauseDestinationIsAlsoSource = InvalidAddressBecauseDestinationIsAlsoSource;\nexports.InvalidXRPTag = InvalidXRPTag;\nexports.LatestMCUInstalledError = LatestMCUInstalledError;\nexports.LedgerAPI4xx = LedgerAPI4xx;\nexports.LedgerAPI5xx = LedgerAPI5xx;\nexports.LedgerAPIError = LedgerAPIError;\nexports.LedgerAPIErrorWithMessage = LedgerAPIErrorWithMessage;\nexports.LedgerAPINotAvailable = LedgerAPINotAvailable;\nexports.MCUNotGenuineToDashboard = MCUNotGenuineToDashboard;\nexports.ManagerAppAlreadyInstalledError = ManagerAppAlreadyInstalledError;\nexports.ManagerAppDepInstallRequired = ManagerAppDepInstallRequired;\nexports.ManagerAppDepUninstallRequired = ManagerAppDepUninstallRequired;\nexports.ManagerAppRelyOnBTCError = ManagerAppRelyOnBTCError;\nexports.ManagerDeviceLockedError = ManagerDeviceLockedError;\nexports.ManagerFirmwareNotEnoughSpaceError = ManagerFirmwareNotEnoughSpaceError;\nexports.ManagerNotEnoughSpaceError = ManagerNotEnoughSpaceError;\nexports.ManagerUninstallBTCDep = ManagerUninstallBTCDep;\nexports.NetworkDown = NetworkDown;\nexports.NoAccessToCamera = NoAccessToCamera;\nexports.NoAddressesFound = NoAddressesFound;\nexports.NoDBPathGiven = NoDBPathGiven;\nexports.NotEnoughBalance = NotEnoughBalance;\nexports.NotEnoughBalanceBecauseDestinationNotCreated = NotEnoughBalanceBecauseDestinationNotCreated;\nexports.NotEnoughBalanceInParentAccount = NotEnoughBalanceInParentAccount;\nexports.NotEnoughBalanceToDelegate = NotEnoughBalanceToDelegate;\nexports.NotEnoughGas = NotEnoughGas;\nexports.NotEnoughSpendableBalance = NotEnoughSpendableBalance;\nexports.NotSupportedLegacyAddress = NotSupportedLegacyAddress;\nexports.PairingFailed = PairingFailed;\nexports.PasswordIncorrectError = PasswordIncorrectError;\nexports.PasswordsDontMatchError = PasswordsDontMatchError;\nexports.RecipientRequired = RecipientRequired;\nexports.RecommendSubAccountsToEmpty = RecommendSubAccountsToEmpty;\nexports.RecommendUndelegation = RecommendUndelegation;\nexports.StatusCodes = StatusCodes;\nexports.SyncError = SyncError;\nexports.TimeoutTagged = TimeoutTagged;\nexports.TransportError = TransportError;\nexports.TransportInterfaceNotAvailable = TransportInterfaceNotAvailable;\nexports.TransportOpenUserCancelled = TransportOpenUserCancelled;\nexports.TransportRaceCondition = TransportRaceCondition;\nexports.TransportStatusError = TransportStatusError;\nexports.TransportWebUSBGestureRequired = TransportWebUSBGestureRequired;\nexports.UnavailableTezosOriginatedAccountReceive = UnavailableTezosOriginatedAccountReceive;\nexports.UnavailableTezosOriginatedAccountSend = UnavailableTezosOriginatedAccountSend;\nexports.UnexpectedBootloader = UnexpectedBootloader;\nexports.UnknownMCU = UnknownMCU;\nexports.UpdateFetchFileFail = UpdateFetchFileFail;\nexports.UpdateIncorrectHash = UpdateIncorrectHash;\nexports.UpdateIncorrectSig = UpdateIncorrectSig;\nexports.UpdateYourApp = UpdateYourApp;\nexports.UserRefusedAddress = UserRefusedAddress;\nexports.UserRefusedAllowManager = UserRefusedAllowManager;\nexports.UserRefusedDeviceNameChange = UserRefusedDeviceNameChange;\nexports.UserRefusedFirmwareUpdate = UserRefusedFirmwareUpdate;\nexports.UserRefusedOnDevice = UserRefusedOnDevice;\nexports.WebsocketConnectionError = WebsocketConnectionError;\nexports.WebsocketConnectionFailed = WebsocketConnectionFailed;\nexports.WrongAppForCurrency = WrongAppForCurrency;\nexports.WrongDeviceForAccount = WrongDeviceForAccount;\nexports.addCustomErrorDeserializer = addCustomErrorDeserializer;\nexports.createCustomErrorClass = createCustomErrorClass;\nexports.deserializeError = deserializeError;\nexports.getAltStatusMessage = getAltStatusMessage;\nexports.serializeError = serializeError;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nvar _errors = require(\"@ledgerhq/errors\");\n\nvar _bignumber = require(\"bignumber.js\");\n\nvar _rlp = require(\"rlp\");\n\n/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// FIXME drop:\nconst starkQuantizationTypeMap = {\n  eth: 1,\n  erc20: 2,\n  erc721: 3,\n  erc20mintable: 4,\n  erc721mintable: 5\n};\n\nfunction hexBuffer(str) {\n  return Buffer.from(str.startsWith(\"0x\") ? str.slice(2) : str, \"hex\");\n}\n\nfunction maybeHexBuffer(str) {\n  if (!str) return null;\n  return hexBuffer(str);\n}\n\nconst remapTransactionRelatedErrors = e => {\n  if (e && e.statusCode === 0x6a80) {\n    return new _errors.EthAppPleaseEnableContractData(\"Please enable Contract data on the Ethereum app Settings\");\n  }\n\n  return e;\n};\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\n\n\nclass Eth {\n  constructor(transport, scrambleKey = \"w0w\") {\n    this.transport = void 0;\n    this.transport = transport;\n    transport.decorateAppAPIMethods(this, [\"getAddress\", \"provideERC20TokenInformation\", \"signTransaction\", \"signPersonalMessage\", \"getAppConfiguration\", \"signEIP712HashedMessage\", \"starkGetPublicKey\", \"starkSignOrder\", \"starkSignOrder_v2\", \"starkSignTransfer\", \"starkSignTransfer_v2\", \"starkProvideQuantum\", \"starkProvideQuantum_v2\", \"starkUnsafeSign\", \"eth2GetPublicKey\", \"eth2SetWithdrawalIndex\"], scrambleKey);\n  }\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n\n\n  getAddress(path, boolDisplay, boolChaincode) {\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x02, boolDisplay ? 0x01 : 0x00, boolChaincode ? 0x01 : 0x00, buffer).then(response => {\n      let result = {};\n      let publicKeyLength = response[0];\n      let addressLength = response[1 + publicKeyLength];\n      result.publicKey = response.slice(1, 1 + publicKeyLength).toString(\"hex\");\n      result.address = \"0x\" + response.slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength).toString(\"ascii\");\n\n      if (boolChaincode) {\n        result.chainCode = response.slice(1 + publicKeyLength + 1 + addressLength, 1 + publicKeyLength + 1 + addressLength + 32).toString(\"hex\");\n      }\n\n      return result;\n    });\n  }\n  /**\n   * This commands provides a trusted description of an ERC 20 token\n   * to associate a contract address with a ticker and number of decimals.\n   *\n   * It shall be run immediately before performing a transaction involving a contract\n   * calling this contract address to display the proper token information to the user if necessary.\n   *\n   * @param {*} info: a blob from \"erc20.js\" utilities that contains all token information.\n   *\n   * @example\n   * import { byContractAddress } from \"@ledgerhq/hw-app-eth/erc20\"\n   * const zrxInfo = byContractAddress(\"0xe41d2489571d322189246dafa5ebde1f4699f498\")\n   * if (zrxInfo) await appEth.provideERC20TokenInformation(zrxInfo)\n   * const signed = await appEth.signTransaction(path, rawTxHex)\n   */\n\n\n  provideERC20TokenInformation({\n    data\n  }) {\n    return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n        // we return a flag to know if the call was effective or not\n        return false;\n      }\n\n      throw e;\n    });\n  }\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n   * @example\n   eth.signTransaction(\"44'/60'/0'/0/0\", \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\").then(result => ...)\n   */\n\n\n  signTransaction(path, rawTxHex) {\n    let paths = (0, _utils.splitPath)(path);\n    let offset = 0;\n    let rawTx = Buffer.from(rawTxHex, \"hex\");\n    let toSend = [];\n    let response; // Check if the TX is encoded following EIP 155\n\n    let rlpTx = (0, _rlp.decode)(rawTx);\n    let rlpOffset = 0;\n    let chainIdPrefix = \"\";\n\n    if (rlpTx.length > 6) {\n      let rlpVrs = (0, _rlp.encode)(rlpTx.slice(-3));\n      rlpOffset = rawTx.length - (rlpVrs.length - 1);\n      const chainIdSrc = rlpTx[6];\n      const chainIdBuf = Buffer.alloc(4);\n      chainIdSrc.copy(chainIdBuf, 4 - chainIdSrc.length);\n      chainIdPrefix = (chainIdBuf.readUInt32BE(0) * 2).toString(16).slice(0, -2); // Drop the low byte, that comes from the ledger.\n    }\n\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize = offset + maxChunkSize > rawTx.length ? rawTx.length - offset : maxChunkSize;\n\n      if (rlpOffset != 0 && offset + chunkSize == rlpOffset) {\n        // Make sure that the chunk doesn't end right on the EIP 155 marker if set\n        chunkSize--;\n      }\n\n      let buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize);\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n\n    return (0, _utils.foreach)(toSend, (data, i) => this.transport.send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data).then(apduResponse => {\n      response = apduResponse;\n    })).then(() => {\n      const v = chainIdPrefix + response.slice(0, 1).toString(\"hex\");\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    }, e => {\n      throw remapTransactionRelatedErrors(e);\n    });\n  }\n  /**\n   */\n\n\n  getAppConfiguration() {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(response => {\n      let result = {};\n      result.arbitraryDataEnabled = response[0] & 0x01;\n      result.erc20ProvisioningNecessary = response[0] & 0x02;\n      result.starkEnabled = response[0] & 0x04;\n      result.starkv2Supported = response[0] & 0x08;\n      result.version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n      return result;\n    });\n  }\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\n  eth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n\n\n  signPersonalMessage(path, messageHex) {\n    let paths = (0, _utils.splitPath)(path);\n    let offset = 0;\n    let message = Buffer.from(messageHex, \"hex\");\n    let toSend = [];\n    let response;\n\n    while (offset !== message.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      let chunkSize = offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;\n      let buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize);\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(buffer, 1 + 4 * paths.length + 4, offset, offset + chunkSize);\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n\n    return (0, _utils.foreach)(toSend, (data, i) => this.transport.send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data).then(apduResponse => {\n      response = apduResponse;\n    })).then(() => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    });\n  }\n  /**\n  * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)\n  * @example\n  eth.signEIP712HashedMessage(\"44'/60'/0'/0/0\", Buffer.from(\"0101010101010101010101010101010101010101010101010101010101010101\").toString(\"hex\"), Buffer.from(\"0202020202020202020202020202020202020202020202020202020202020202\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n\n\n  signEIP712HashedMessage(path, domainSeparatorHex, hashStructMessageHex) {\n    const domainSeparator = hexBuffer(domainSeparatorHex);\n    const hashStruct = hexBuffer(hashStructMessageHex);\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 32 + 32, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    domainSeparator.copy(buffer, offset);\n    offset += 32;\n    hashStruct.copy(buffer, offset);\n    return this.transport.send(0xe0, 0x0c, 0x00, 0x00, buffer).then(response => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * get Stark public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return the Stark public key\n   */\n\n\n  starkGetPublicKey(path, boolDisplay) {\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xf0, 0x02, boolDisplay ? 0x01 : 0x00, 0x00, buffer).then(response => {\n      return response.slice(0, response.length - 2);\n    });\n  }\n  /**\n   * sign a Stark order\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantization quantization used for the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantization quantization used for the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  starkSignOrder(path, sourceTokenAddress, sourceQuantization, destinationTokenAddress, destinationQuantization, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 20 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(destinationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x01, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * sign a Stark order using the Starkex V2 protocol\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantizationType quantization type used for the source token\n   * @option sourceQuantization quantization used for the source token (not present for erc 721 or mintable erc 721)\n   * @option sourceMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantizationType quantization type used for the destination token\n   * @option destinationQuantization quantization used for the destination token (not present for erc 721 or mintable erc 721)\n   * @option destinationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  starkSignOrder_v2(path, sourceTokenAddress, sourceQuantizationType, sourceQuantization, sourceMintableBlobOrTokenId, destinationTokenAddress, destinationQuantizationType, destinationQuantization, destinationMintableBlobOrTokenId, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n\n    if (!(sourceQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkSignOrderv2 invalid source quantization type=\" + sourceQuantizationType);\n    }\n\n    if (!(destinationQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkSignOrderv2 invalid destination quantization type=\" + destinationQuantizationType);\n    }\n\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 1 + 20 + 32 + 32 + 1 + 20 + 32 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    buffer[offset] = starkQuantizationTypeMap[sourceQuantizationType];\n    offset++;\n\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (sourceQuantization) {\n      Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (sourceMintableBlobOrTokenId) {\n      Buffer.from(sourceMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n    buffer[offset] = starkQuantizationTypeMap[destinationQuantizationType];\n    offset++;\n\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (destinationQuantization) {\n      Buffer.from(destinationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (destinationMintableBlobOrTokenId) {\n      Buffer.from(destinationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x03, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * sign a Stark transfer\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantization quantization used for the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  starkSignTransfer(path, transferTokenAddress, transferQuantization, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp) {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 32 + 4 + 4 + 8 + 4 + 4, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(transferQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x02, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * sign a Stark transfer or conditional transfer using the Starkex V2 protocol\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantizationType quantization type used for the token to be transferred\n   * @option transferQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n   * @option transferMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @option conditionalTransferAddress onchain address of the condition for a conditional transfer\n   * @option conditionalTransferFact fact associated to the condition for a conditional transfer\n   * @return the signature\n   */\n\n\n  starkSignTransfer_v2(path, transferTokenAddress, transferQuantizationType, transferQuantization, transferMintableBlobOrTokenId, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp, conditionalTransferAddress, conditionalTransferFact) {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    const conditionalTransferAddressHex = maybeHexBuffer(conditionalTransferAddress);\n\n    if (!(transferQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkSignTransferv2 invalid quantization type=\" + transferQuantizationType);\n    }\n\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 1 + 20 + 32 + 32 + 32 + 4 + 4 + 8 + 4 + 4 + (conditionalTransferAddressHex ? 32 + 20 : 0), 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    buffer[offset] = starkQuantizationTypeMap[transferQuantizationType];\n    offset++;\n\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (transferQuantization) {\n      Buffer.from(transferQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (transferMintableBlobOrTokenId) {\n      Buffer.from(transferMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n\n    if (conditionalTransferAddressHex && conditionalTransferFact) {\n      offset += 4;\n      Buffer.from(conditionalTransferFact.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n      offset += 32;\n      conditionalTransferAddressHex.copy(buffer, offset);\n    }\n\n    return this.transport.send(0xf0, 0x04, conditionalTransferAddressHex ? 0x05 : 0x04, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantization quantization used for the token to be transferred\n   */\n\n\n  starkProvideQuantum(operationContract, operationQuantization) {\n    const operationContractHex = maybeHexBuffer(operationContract);\n    let buffer = Buffer.alloc(20 + 32, 0);\n\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, 0);\n    }\n\n    Buffer.from(operationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, 20);\n    return this.transport.send(0xf0, 0x08, 0x00, 0x00, buffer).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for ETH application versions not supporting Stark extensions\n        return false;\n      }\n\n      throw e;\n    });\n  }\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call using the Starkex V2 protocol\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantizationType quantization type of the token to be transferred\n   * @option operationQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n   * @option operationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) of the token to be transferred\n   */\n\n\n  starkProvideQuantum_v2(operationContract, operationQuantizationType, operationQuantization, operationMintableBlobOrTokenId) {\n    const operationContractHex = maybeHexBuffer(operationContract);\n\n    if (!(operationQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkProvideQuantumV2 invalid quantization type=\" + operationQuantizationType);\n    }\n\n    let buffer = Buffer.alloc(20 + 32 + 32, 0);\n    let offset = 0;\n\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (operationQuantization) {\n      Buffer.from(operationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (operationMintableBlobOrTokenId) {\n      Buffer.from(operationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    return this.transport.send(0xf0, 0x08, starkQuantizationTypeMap[operationQuantizationType], 0x00, buffer).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for ETH application versions not supporting Stark extensions\n        return false;\n      }\n\n      throw e;\n    });\n  }\n  /**\n   * sign the given hash over the Stark curve\n   * It is intended for speed of execution in case an unknown Stark model is pushed and should be avoided as much as possible.\n   * @param path a path in BIP 32 format\n   * @param hash hexadecimal hash to sign\n   * @return the signature\n   */\n\n\n  starkUnsafeSign(path, hash) {\n    const hashHex = hexBuffer(hash);\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 32);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    hashHex.copy(buffer, offset);\n    return this.transport.send(0xf0, 0x0a, 0x00, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * get an Ethereum 2 BLS-12 381 public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with a publicKey\n   * @example\n   * eth.eth2GetPublicKey(\"12381/3600/0/0\").then(o => o.publicKey)\n   */\n\n\n  eth2GetPublicKey(path, boolDisplay) {\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x0e, boolDisplay ? 0x01 : 0x00, 0x00, buffer).then(response => {\n      let result = {};\n      result.publicKey = response.slice(0, -2).toString(\"hex\");\n      return result;\n    });\n  }\n  /**\n   * Set the index of a Withdrawal key used as withdrawal credentials in an ETH 2 deposit contract call signature\n   *\n   * It shall be run before the ETH 2 deposit transaction is signed. If not called, the index is set to 0\n   *\n   * @param withdrawalIndex index path in the EIP 2334 path m/12381/3600/withdrawalIndex/0\n   * @return True if the method was executed successfully\n   */\n\n\n  eth2SetWithdrawalIndex(withdrawalIndex) {\n    let buffer = Buffer.alloc(4, 0);\n    buffer.writeUInt32BE(withdrawalIndex, 0);\n    return this.transport.send(0xe0, 0x10, 0x00, 0x00, buffer).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for ETH application versions not supporting ETH 2\n        return false;\n      }\n\n      throw e;\n    });\n  }\n\n}\n\nexports.default = Eth;\n//# sourceMappingURL=Eth.js.map","/*\n * Bitcoin BIP32 path helpers\n * (C) 2016 Alex Beregszaszi\n */\n\nconst HARDENED = 0x80000000\n\nvar BIPPath = function (path) {\n  if (!Array.isArray(path)) {\n    throw new Error('Input must be an Array')\n  }\n  if (path.length === 0) {\n    throw new Error('Path must contain at least one level')\n  }\n  for (var i = 0; i < path.length; i++) {\n    if (typeof path[i] !== 'number') {\n      throw new Error('Path element is not a number')\n    }\n  }\n  this.path = path\n}\n\nBIPPath.validatePathArray = function (path) {\n  try {\n    BIPPath.fromPathArray(path)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nBIPPath.validateString = function (text, reqRoot) {\n  try {\n    BIPPath.fromString(text, reqRoot)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nBIPPath.fromPathArray = function (path) {\n  return new BIPPath(path)\n}\n\nBIPPath.fromString = function (text, reqRoot) {\n  // skip the root\n  if (/^m\\//i.test(text)) {\n    text = text.slice(2)\n  } else if (reqRoot) {\n    throw new Error('Root element is required')\n  }\n\n  var path = text.split('/')\n  var ret = new Array(path.length)\n  for (var i = 0; i < path.length; i++) {\n    var tmp = /(\\d+)([hH\\']?)/.exec(path[i])\n    if (tmp === null) {\n      throw new Error('Invalid input')\n    }\n    ret[i] = parseInt(tmp[1], 10)\n\n    if (ret[i] >= HARDENED) {\n      throw new Error('Invalid child index')\n    }\n\n    if (tmp[2] === 'h' || tmp[2] === 'H' || tmp[2] === '\\'') {\n      ret[i] += HARDENED\n    } else if (tmp[2].length != 0) {\n      throw new Error('Invalid modifier')\n    }\n  }\n  return new BIPPath(ret)\n}\n\nBIPPath.prototype.toPathArray = function () {\n  return this.path\n}\n\nBIPPath.prototype.toString = function (noRoot, oldStyle) {\n  var ret = new Array(this.path.length)\n  for (var i = 0; i < this.path.length; i++) {\n    var tmp = this.path[i]\n    if (tmp & HARDENED) {\n      ret[i] = (tmp & ~HARDENED) + (oldStyle ? 'h' : '\\'')\n    } else {\n      ret[i] = tmp\n    }\n  }\n  return (noRoot ? '' : 'm/') + ret.join('/')\n}\n\nBIPPath.prototype.inspect = function () {\n  return 'BIPPath <' + this.toString() + '>'\n}\n\nmodule.exports = BIPPath\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _bip32Path = require(\"bip32-path\");\n\nvar _bip32Path2 = _interopRequireDefault(_bip32Path);\n\nvar _createHash = require(\"create-hash\");\n\nvar _createHash2 = _interopRequireDefault(_createHash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\n/**\n * Avalanche API\n *\n * @example\n * import Avalanche from \"@obsidiansystems/hw-app-avalanche\";\n * const avalanche = new Avalanche(transport);\n */\nclass Avalanche {\n\n  constructor(transport, scrambleKey = \"Avalanche\", logger = console.error) {\n    this.CLA = 0x80;\n    this.MAX_APDU_SIZE = 230;\n    this.MAX_HRP_LENGTH = 24;\n    this.INS_VERSION = 0x00;\n    this.INS_GET_WALLET_ID = 0x01;\n    this.INS_PROMPT_PUBLIC_KEY = 0x02;\n    this.INS_PROMPT_EXT_PUBLIC_KEY = 0x03;\n    this.INS_SIGN_HASH = 0x04;\n    this.INS_SIGN_TRANSACTION = 0x05;\n\n    this.transport = transport;\n    this.logger = logger;\n    if (scrambleKey) {\n      transport.decorateAppAPIMethods(this, [\"getAppConfiguration\", \"getWalletAddress\", \"getWalletExtendedPublicKey\", \"getWalletId\", \"signHash\", \"signTransaction\"], scrambleKey);\n    }\n  }\n\n  /**\n   * get Avalanche address for a given BIP-32 path.\n   *\n   * @param derivation_path a path in BIP 32 format\n   * @return a buffer with a public key, and TODO: should be address, not public key\n   * @example\n   * await avalanche.getWalletPublicKey(\"44'/9000'/0'/0/0\");\n   */\n  getWalletAddress(derivation_path, hrp = \"\") {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (hrp.length > _this.MAX_HRP_LENGTH) {\n        throw \"Maximum Bech32 'human readable part' length exceeded\";\n      }\n\n      const cla = _this.CLA;\n      const ins = _this.INS_PROMPT_PUBLIC_KEY;\n      const p1 = hrp.length;\n      const p2 = 0x00;\n      const data = Buffer.concat([Buffer.from(hrp, \"latin1\"), _this.encodeBip32Path(_bip32Path2.default.fromString(derivation_path))]);\n\n      const response = yield _this.transport.send(cla, ins, p1, p2, data);\n      return response.slice(0, -2);\n    })();\n  }\n\n  /**\n   * get extended public key for a given BIP-32 path.\n   *\n   * @param derivation_path a path in BIP-32 format\n   * @return an object with a buffer for the public key data and a buffer for the chain code\n   * @example\n   * await avalanche.getWalletExtendedPublicKey(\"44'/9000'/0'/0/0\");\n   */\n  getWalletExtendedPublicKey(derivation_path) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const cla = _this2.CLA;\n      const ins = _this2.INS_PROMPT_EXT_PUBLIC_KEY;\n      const p1 = 0x00;\n      const p2 = 0x00;\n      const data = _this2.encodeBip32Path(_bip32Path2.default.fromString(derivation_path));\n\n      const response = yield _this2.transport.send(cla, ins, p1, p2, data);\n      const publicKeyLength = response[0];\n      const chainCodeOffset = 2 + publicKeyLength;\n      const chainCodeLength = response[1 + publicKeyLength];\n      return {\n        public_key: response.slice(1, 1 + publicKeyLength),\n        chain_code: response.slice(chainCodeOffset, chainCodeOffset + chainCodeLength)\n      };\n    })();\n  }\n\n  /**\n   * Sign a hash with a given set of BIP-32 paths.\n   *\n   * @param derivationPathPrefix a BIP-32 path that will act as the prefix to all other signing paths.\n   * @param derivationPathSuffixes an array of BIP-32 path suffixes that will be\n   *                               appended to the prefix to form the final path for signing.\n   * @param hash 32-byte buffer containing the hash to sign\n   * @return a map of path suffixes (as strings) to signature buffers\n   * @example\n   * const signatures = await avalanche.signHash(\n   *   BIPPath.fromString(\"44'/9000'/0'\"),\n   *   [BIPPath.fromString(\"0/0\")],\n   *   Buffer.from(\"0000000000000000000000000000000000000000000000000000000000000000\", \"hex\"));\n   */\n  signHash(derivationPathPrefix, derivationPathSuffixes, hash) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (hash.length != 32) {\n        throw \"Hash buffer must be 32 bytes\";\n      }\n\n      const firstMessage = Buffer.concat([_this3.uInt8Buffer(derivationPathSuffixes.length), hash, _this3.encodeBip32Path(derivationPathPrefix)]);\n      const responseHash = yield _this3.transport.send(_this3.CLA, _this3.INS_SIGN_HASH, 0x00, 0x00, firstMessage);\n      if (!responseHash.slice(0, 32).equals(hash)) {\n        throw \"Ledger reported a hash that does not match the input hash!\";\n      }\n\n      return _this3._collectSignaturesFromSuffixes(derivationPathSuffixes, _this3.INS_SIGN_HASH, 0x01, 0x81);\n    })();\n  }\n\n  /**\n   * Sign a transaction with a given set of BIP-32 paths.\n   *\n   * @param derivationPathPrefix a BIP-32 path that will act as the prefix to all other signing paths.\n   * @param derivationPathSuffixes an array of BIP-32 path suffixes that will be\n   *                               appended to the prefix to form the final path for signing.\n   * @param txn binary of the transaction\n   * @return an object with a hash of the transaction and a map of path suffixes (as strings) to signature buffers\n   * @example\n   * const signatures = await avalanche.signTransaction(\n   *   BIPPath.fromString(\"44'/9000'/0'\"),\n   *   [BIPPath.fromString(\"0/0\")],\n   *   Buffer.from(\"...\", \"hex\"),\n   *   BIPPath.fromString(\"44'/9000'/0'/0'/0'\"));\n   * );\n   */\n  signTransaction(derivationPathPrefix, derivationPathSuffixes, txn, changePath) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n\n      const SIGN_TRANSACTION_SECTION_PREAMBLE = 0x00;\n      const SIGN_TRANSACTION_SECTION_PAYLOAD_CHUNK = 0x01;\n      const SIGN_TRANSACTION_SECTION_PAYLOAD_CHUNK_LAST = 0x81;\n      const SIGN_TRANSACTION_SECTION_SIGN_WITH_PATH = 0x02;\n      const SIGN_TRANSACTION_SECTION_SIGN_WITH_PATH_LAST = 0x82;\n\n      const preamble = Buffer.concat([_this4.uInt8Buffer(derivationPathSuffixes.length), _this4.encodeBip32Path(derivationPathPrefix)]);\n      if (changePath != null) {\n        const preamble_ = Buffer.concat([preamble, _this4.encodeBip32Path(changePath)]);\n        yield _this4.transport.send(_this4.CLA, _this4.INS_SIGN_TRANSACTION, SIGN_TRANSACTION_SECTION_PREAMBLE, 0x01, preamble_);\n      } else {\n        yield _this4.transport.send(_this4.CLA, _this4.INS_SIGN_TRANSACTION, SIGN_TRANSACTION_SECTION_PREAMBLE, 0x00, preamble);\n      }\n\n      let remainingData = txn.slice(0); // copy\n      let response;\n      while (remainingData.length > 0) {\n        const thisChunk = remainingData.slice(0, _this4.MAX_APDU_SIZE);\n        remainingData = remainingData.slice(_this4.MAX_APDU_SIZE);\n        response = yield _this4.transport.send(_this4.CLA, _this4.INS_SIGN_TRANSACTION, remainingData.length > 0 ? SIGN_TRANSACTION_SECTION_PAYLOAD_CHUNK : SIGN_TRANSACTION_SECTION_PAYLOAD_CHUNK_LAST, 0x00, thisChunk);\n      }\n\n      const responseHash = response.slice(0, 32);\n      const expectedHash = Buffer.from((0, _createHash2.default)('sha256').update(txn).digest());\n      if (!responseHash.equals(expectedHash)) {\n        throw \"Ledger reported a hash that does not match the expected transaction hash!\";\n      }\n\n      return {\n        hash: responseHash,\n        signatures: yield _this4._collectSignaturesFromSuffixes(derivationPathSuffixes, _this4.INS_SIGN_TRANSACTION, SIGN_TRANSACTION_SECTION_SIGN_WITH_PATH, SIGN_TRANSACTION_SECTION_SIGN_WITH_PATH_LAST)\n      };\n    })();\n  }\n\n  /**\n   * Get the version of the Avalanche app installed on the hardware device\n   *\n   * @return an object with a version\n   * @example\n   * console.log(await avalanche.getAppConfiguration());\n   *\n   * {\n   *   \"version\": \"1.0.3\",\n   *   \"commit\": \"abcdcefg\"\n   *   \"name\": \"Avalanche\"\n   * }\n   */\n  getAppConfiguration() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const data = yield _this5.transport.send(_this5.CLA, _this5.INS_VERSION, 0x00, 0x00);\n\n      const eatNBytes = function (input, n) {\n        const out = input.slice(0, n);\n        return [out, input.slice(n)];\n      };\n\n      const eatWhile = function (input, f) {\n        for (var i = 0; i < input.length; i++) {\n          if (!f(input[i])) {\n            return [input.slice(0, i), input.slice(i)];\n          }\n        }\n        return [input, \"\"];\n      };\n\n      const [versionData, rest1] = eatNBytes(data, 3);\n      const [commitData, rest2] = eatWhile(rest1, function (c) {\n        return c != 0;\n      });\n      const [nameData, rest3] = eatWhile(rest2.slice(1), function (c) {\n        return c != 0;\n      });\n      if (rest3.toString(\"hex\") != \"009000\") {\n        _this5.logger(\"WARNING: Response data does not exactly match expected format for VERSION instruction\");\n      }\n\n      return {\n        version: \"\" + versionData[0] + \".\" + versionData[1] + \".\" + versionData[2],\n        commit: commitData.toString(\"latin1\"),\n        name: nameData.toString(\"latin1\")\n      };\n    })();\n  }\n\n  /**\n   * Get the wallet identifier for the Ledger wallet\n   *\n   * @return a byte string\n   * @example\n   * console.log((await avalanche.getWalletId()).toString(\"hex\"));\n   *\n   * 79c46bc3\n   */\n  getWalletId() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this6.transport.send(_this6.CLA, _this6.INS_GET_WALLET_ID, 0x00, 0x00);\n      return result.slice(0, -2);\n    })();\n  }\n\n  _collectSignaturesFromSuffixes(suffixes, ins, p1NotDone, p1Done) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      let resultMap = new Map();\n      for (let ix = 0; ix < suffixes.length; ix++) {\n        const suffix = suffixes[ix];\n        _this7.logger(\"Signing with \" + suffix.toString(true));\n        const message = _this7.encodeBip32Path(suffix);\n        const isLastMessage = ix >= suffixes.length - 1;\n        const signatureData = yield _this7.transport.send(_this7.CLA, ins, isLastMessage ? p1Done : p1NotDone, 0x00, message);\n        resultMap.set(suffix.toString(true), signatureData.slice(0, -2));\n      };\n      return resultMap;\n    })();\n  }\n\n  uInt8Buffer(uint8) {\n    let buff = Buffer.alloc(1);\n    buff.writeUInt8(uint8);\n    return buff;\n  }\n\n  uInt32BEBuffer(uint32) {\n    let buff = Buffer.alloc(4);\n    buff.writeUInt32BE(uint32);\n    return buff;\n  }\n\n  encodeBip32Path(path) {\n    const pathArr = path.toPathArray();\n    return Buffer.concat([this.uInt8Buffer(pathArr.length)].concat(pathArr.map(this.uInt32BEBuffer)));\n  }\n}\nexports.default = Avalanche;\n//# sourceMappingURL=Avalanche.js.map","// @ts-ignore\n// import TransportU2F from '@ledgerhq/hw-transport-u2f';\n\nimport Eth from '@ledgerhq/hw-app-eth';\n// @ts-ignore\nimport AppAvax from '@obsidiansystems/hw-app-avalanche';\nimport EthereumjsCommon from '@ethereumjs/common';\nimport { importPublic, publicToAddress, bnToRlp, rlp, BN as EthBN } from 'ethereumjs-util';\nimport {\n    AVAX_ACCOUNT_PATH,\n    ETH_ACCOUNT_PATH,\n    LEDGER_ETH_ACCOUNT_PATH,\n    LEDGER_EXCHANGE_TIMEOUT,\n    MIN_EVM_SUPPORT_V,\n} from '@/Wallet/constants';\nimport HDKey from 'hdkey';\nimport { ChainAlias, ILedgerAppConfig, WalletNameType } from '@/Wallet/types';\nimport { Transaction, TxOptions } from '@ethereumjs/tx';\nimport {\n    UnsignedTx as AVMUnsignedTx,\n    Tx as AVMTx,\n    TransferableOperation,\n    OperationTx,\n    AVMConstants,\n    ImportTx as AVMImportTx,\n    SelectCredentialClass as AVMSelectCredentialClass,\n} from 'avalanche/dist/apis/avm';\nimport { Credential, SigIdx, Signature } from 'avalanche/dist/common';\nimport {\n    UnsignedTx as EVMUnsignedTx,\n    Tx as EVMTx,\n    ImportTx as EVMImportTx,\n    ExportTx as EVMExportTx,\n    EVMInput,\n    SelectCredentialClass as EVMSelectCredentialClass,\n    EVMConstants,\n} from 'avalanche/dist/apis/evm';\nimport {\n    UnsignedTx as PlatformUnsignedTx,\n    Tx as PlatformTx,\n    PlatformVMConstants,\n    ImportTx as PlatformImportTx,\n    SelectCredentialClass as PlatformSelectCredentialClass,\n} from 'avalanche/dist/apis/platformvm';\nimport { HDWalletAbstract } from '@/Wallet/HDWalletAbstract';\nimport EvmWalletReadonly from '@/Wallet/EvmWalletReadonly';\nimport { KeyPair as EVMKeyPair } from 'avalanche/dist/apis/evm/keychain';\nimport { activeNetwork, avalanche, web3 } from '@/Network/network';\nimport { Buffer, BN } from 'avalanche';\nimport { ChainIdType } from '@/types';\nimport { ParseableAvmTxEnum, ParseablePlatformEnum, ParseableEvmTxEnum } from '@/helpers/tx_helper';\nimport createHash from 'create-hash';\n//@ts-ignore\nimport bippath from 'bip32-path';\nimport { bintools } from '@/common';\n\nexport default class LedgerWallet extends HDWalletAbstract {\n    evmWallet: EvmWalletReadonly;\n    type: WalletNameType = 'ledger';\n    evmAccount: HDKey;\n    config: ILedgerAppConfig;\n\n    appAvax: AppAvax;\n    ethApp: Eth;\n\n    constructor(avaxAcct: HDKey, evmAcct: HDKey, avaxApp: AppAvax, ethApp: Eth, config: ILedgerAppConfig) {\n        super(avaxAcct);\n        this.evmAccount = evmAcct;\n        this.config = config;\n        this.appAvax = avaxApp;\n        this.ethApp = ethApp;\n\n        this.evmWallet = new EvmWalletReadonly(importPublic(evmAcct.publicKey));\n    }\n\n    /**\n     * Create a new ledger wallet instance from the given transport\n     * @param transport\n     */\n    static async fromTransport(transport: any) {\n        transport.setExchangeTimeout(LEDGER_EXCHANGE_TIMEOUT);\n        let app, eth;\n\n        try {\n            app = new AppAvax(transport, 'w0w');\n            eth = new Eth(transport, 'w0w');\n        } catch (e) {\n            throw new Error('Failed to create ledger instance from the given transport.');\n        }\n\n        let config = await app.getAppConfiguration();\n\n        if (!config) {\n            throw new Error(`Unable to connect ledger. You must use ledger version ${MIN_EVM_SUPPORT_V} or above.`);\n        }\n\n        if (config.version < MIN_EVM_SUPPORT_V) {\n            throw new Error(`Unable to connect ledger. You must use ledger version ${MIN_EVM_SUPPORT_V} or above.`);\n        }\n\n        return await LedgerWallet.fromApp(app, eth);\n    }\n\n    static async getAvaxAccount(app: AppAvax): Promise<HDKey> {\n        let res = await app.getWalletExtendedPublicKey(AVAX_ACCOUNT_PATH);\n        let hd = new HDKey();\n        hd.publicKey = res.public_key;\n        hd.chainCode = res.chain_code;\n\n        return hd;\n    }\n\n    static async getEvmAccount(eth: Eth): Promise<HDKey> {\n        let ethRes = await eth.getAddress(LEDGER_ETH_ACCOUNT_PATH, true, true);\n        let hdEth = new HDKey();\n        // @ts-ignore\n        hdEth.publicKey = Buffer.from(ethRes.publicKey, 'hex');\n        // @ts-ignore\n        hdEth.chainCode = Buffer.from(ethRes.chainCode, 'hex');\n\n        return hdEth;\n    }\n\n    static async fromApp(app: AppAvax, eth: Eth): Promise<LedgerWallet> {\n        try {\n            let avaxAccount = await LedgerWallet.getAvaxAccount(app);\n            let evmAccount = await LedgerWallet.getEvmAccount(eth);\n            let config = await app.getAppConfiguration();\n            return new LedgerWallet(avaxAccount, evmAccount, app, eth, config);\n        } catch (e) {\n            throw new Error('Unable to create ledger wallet instance from the given apps.');\n        }\n    }\n\n    getAddressC(): string {\n        return this.evmWallet.getAddress();\n    }\n\n    getEvmAddressBech(): string {\n        let keypair = new EVMKeyPair(avalanche.getHRP(), 'C');\n        let addr = keypair.addressFromPublicKey(Buffer.from(this.evmAccount.publicKey));\n        return bintools.addressToString(avalanche.getHRP(), 'C', addr);\n    }\n\n    async signEvm(tx: Transaction): Promise<Transaction> {\n        const rawUnsignedTx = rlp.encode([\n            bnToRlp(tx.nonce),\n            bnToRlp(tx.gasPrice),\n            bnToRlp(tx.gasLimit),\n            tx.to !== undefined ? tx.to.buf : Buffer.from([]),\n            bnToRlp(tx.value),\n            tx.data,\n            bnToRlp(tx.common.chainIdBN()),\n            Buffer.from([]),\n            Buffer.from([]),\n        ]);\n\n        const signature = await this.ethApp.signTransaction(LEDGER_ETH_ACCOUNT_PATH, rawUnsignedTx);\n\n        const signatureBN = {\n            v: new EthBN(signature.v, 16),\n            r: new EthBN(signature.r, 16),\n            s: new EthBN(signature.s, 16),\n        };\n\n        const chainId = await web3.eth.getChainId();\n        const networkId = await web3.eth.net.getId();\n\n        let common = EthereumjsCommon.forCustomChain('mainnet', { networkId, chainId }, 'istanbul');\n\n        const chainParams: TxOptions = {\n            common,\n        };\n\n        const signedTx = Transaction.fromTxData(\n            {\n                nonce: tx.nonce,\n                gasPrice: tx.gasPrice,\n                gasLimit: tx.gasLimit,\n                to: tx.to,\n                value: tx.value,\n                data: tx.data,\n                ...signatureBN,\n            },\n            chainParams\n        );\n        return signedTx;\n    }\n\n    // Returns an array of derivation paths that need to sign this transaction\n    // Used with signTransactionHash and signTransactionParsable\n    getTransactionPaths<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx>(\n        unsignedTx: UnsignedTx,\n        chainId: ChainIdType\n    ): { paths: string[]; isAvaxOnly: boolean } {\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n\n        let ins = tx.getIns();\n        let operations: TransferableOperation[] = [];\n\n        // Try to get operations, it will fail if there are none, ignore and continue\n        try {\n            operations = (tx as OperationTx).getOperations();\n        } catch (e) {\n            console.log('Failed to get tx operations.');\n        }\n\n        let items = ins;\n        if (\n            (txType === AVMConstants.IMPORTTX && chainId === 'X') ||\n            (txType === PlatformVMConstants.IMPORTTX && chainId === 'P')\n        ) {\n            items = ((tx as AVMImportTx) || PlatformImportTx).getImportInputs();\n        }\n\n        let hrp = avalanche.getHRP();\n        let paths: string[] = [];\n\n        let isAvaxOnly = true;\n        // Collect paths derivation paths for source addresses\n        for (let i = 0; i < items.length; i++) {\n            let item = items[i];\n\n            let assetId = bintools.cb58Encode(item.getAssetID());\n            // @ts-ignore\n            // if (assetId !== store.state.Assets.AVA_ASSET_ID) {\n            if (assetId !== activeNetwork.avaxID) {\n                isAvaxOnly = false;\n            }\n\n            let sigidxs: SigIdx[] = item.getInput().getSigIdxs();\n            let sources = sigidxs.map((sigidx) => sigidx.getSource());\n            let addrs: string[] = sources.map((source) => {\n                return bintools.addressToString(hrp, chainId, source);\n            });\n\n            for (let j = 0; j < addrs.length; j++) {\n                let srcAddr = addrs[j];\n                let pathStr = this.getPathFromAddress(srcAddr); // returns change/index\n\n                paths.push(pathStr);\n            }\n        }\n\n        // Do the Same for operational inputs, if there are any...\n        for (let i = 0; i < operations.length; i++) {\n            let op = operations[i];\n            let sigidxs: SigIdx[] = op.getOperation().getSigIdxs();\n            let sources = sigidxs.map((sigidx) => sigidx.getSource());\n            let addrs: string[] = sources.map((source) => {\n                return bintools.addressToString(hrp, chainId, source);\n            });\n\n            for (let j = 0; j < addrs.length; j++) {\n                let srcAddr = addrs[j];\n                let pathStr = this.getPathFromAddress(srcAddr); // returns change/index\n\n                paths.push(pathStr);\n            }\n        }\n\n        return { paths, isAvaxOnly };\n    }\n\n    getPathFromAddress(address: string) {\n        let externalAddrs = this.externalScan.getAllAddresses();\n        let internalAddrs = this.internalScan.getAllAddresses();\n        let platformAddrs = this.externalScan.getAllAddresses('P');\n\n        let extIndex = externalAddrs.indexOf(address);\n        let intIndex = internalAddrs.indexOf(address);\n        let platformIndex = platformAddrs.indexOf(address);\n\n        if (extIndex >= 0) {\n            return `0/${extIndex}`;\n        } else if (intIndex >= 0) {\n            return `1/${intIndex}`;\n        } else if (platformIndex >= 0) {\n            return `0/${platformIndex}`;\n        } else if (address[0] === 'C') {\n            return '0/0';\n        } else {\n            throw new Error('Unable to find source address.');\n        }\n    }\n\n    async signX(unsignedTx: AVMUnsignedTx): Promise<AVMTx> {\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n        let chainId: ChainIdType = 'X';\n\n        let parseableTxs = ParseableAvmTxEnum;\n        let { paths, isAvaxOnly } = this.getTransactionPaths<AVMUnsignedTx>(unsignedTx, chainId);\n\n        // If ledger doesnt support parsing, sign hash\n        let canLedgerParse = this.config.version >= '0.3.1';\n        let isParsableType = txType in parseableTxs && isAvaxOnly;\n\n        let signedTx;\n        if (canLedgerParse && isParsableType) {\n            signedTx = await this.signTransactionParsable<AVMUnsignedTx, AVMTx>(unsignedTx, paths, chainId);\n        } else {\n            signedTx = await this.signTransactionHash<AVMUnsignedTx, AVMTx>(unsignedTx, paths, chainId);\n        }\n\n        return signedTx;\n    }\n\n    getChangePath(chainId?: ChainAlias): string {\n        switch (chainId) {\n            case 'P':\n                return 'm/0';\n            case 'X':\n            default:\n                return 'm/1';\n        }\n    }\n\n    getChangeIndex(chainId?: ChainAlias): number {\n        switch (chainId) {\n            case 'P':\n                // return this.platformHelper.hdIndex\n                return this.externalScan.getIndex();\n            case 'X':\n            default:\n                // return this.internalHelper.hdIndex\n                return this.internalScan.getIndex();\n        }\n    }\n\n    getChangeBipPath<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx>(\n        unsignedTx: UnsignedTx,\n        chainId: ChainIdType\n    ) {\n        if (chainId === 'C') {\n            return null;\n        }\n\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n\n        const chainChangePath = this.getChangePath(chainId).split('m/')[1];\n        let changeIdx = this.getChangeIndex(chainId);\n        // If change and destination paths are the same\n        // it can cause ledger to not display the destination amt.\n        // Since platform helper does not have internal/external\n        // path for change (it uses the external index)\n        // there will be address collisions. So return null.\n        if (\n            txType === PlatformVMConstants.IMPORTTX ||\n            txType === PlatformVMConstants.EXPORTTX ||\n            txType === PlatformVMConstants.ADDVALIDATORTX ||\n            txType === PlatformVMConstants.ADDDELEGATORTX\n        ) {\n            return null;\n        }\n\n        // else if (txType === PlatformVMConstants.ADDVALIDATORTX || txType === PlatformVMConstants.ADDDELEGATORTX) {\n        // changeIdx = this.platformHelper.getFirstAvailableIndex()\n        // changeIdx = this.externalScan.getIndex();\n        // }\n\n        return bippath.fromString(`${AVAX_ACCOUNT_PATH}/${chainChangePath}/${changeIdx}`);\n    }\n\n    // Used for signing transactions that are parsable\n    async signTransactionParsable<\n        UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx,\n        SignedTx extends AVMTx | PlatformTx | EVMTx\n    >(unsignedTx: UnsignedTx, paths: string[], chainId: ChainIdType): Promise<SignedTx> {\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n        let parseableTxs = {\n            X: ParseableAvmTxEnum,\n            P: ParseablePlatformEnum,\n            C: ParseableEvmTxEnum,\n        }[chainId];\n\n        let title = `Sign ${parseableTxs[txType]}`;\n\n        let bip32Paths = this.pathsToUniqueBipPaths(paths);\n\n        const accountPath =\n            chainId === 'C' ? bippath.fromString(`${ETH_ACCOUNT_PATH}`) : bippath.fromString(`${AVAX_ACCOUNT_PATH}`);\n        let txbuff = unsignedTx.toBuffer();\n        let changePath = this.getChangeBipPath(unsignedTx, chainId);\n        // let messages = this.getTransactionMessages<UnsignedTx>(unsignedTx, chainId, changePath)\n\n        // try {\n        // store.commit('Ledger/openModal', {\n        //     title: title,\n        //     messages: messages,\n        //     info: null,\n        // })\n\n        let ledgerSignedTx = await this.appAvax.signTransaction(accountPath, bip32Paths, txbuff, changePath);\n\n        let sigMap = ledgerSignedTx.signatures;\n        let creds = this.getCredentials<UnsignedTx>(unsignedTx, paths, sigMap, chainId);\n\n        let signedTx;\n        switch (chainId) {\n            case 'X':\n                signedTx = new AVMTx(unsignedTx as AVMUnsignedTx, creds);\n                break;\n            case 'P':\n                signedTx = new PlatformTx(unsignedTx as PlatformUnsignedTx, creds);\n                break;\n            case 'C':\n                signedTx = new EVMTx(unsignedTx as EVMUnsignedTx, creds);\n                break;\n        }\n\n        return signedTx as SignedTx;\n        // } catch (e) {\n        // store.commit('Ledger/closeModal')\n        // console.error(e)\n        // throw e\n        // }\n    }\n\n    // Used for non parsable transactions.\n    // Ideally we wont use this function at all, but ledger is not ready yet.\n    async signTransactionHash<\n        UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx,\n        SignedTx extends AVMTx | PlatformTx | EVMTx\n    >(unsignedTx: UnsignedTx, paths: string[], chainId: ChainIdType): Promise<SignedTx> {\n        let txbuff = unsignedTx.toBuffer();\n        const msg: Buffer = Buffer.from(createHash('sha256').update(txbuff).digest());\n\n        // store.commit('Ledger/openModal', {\n        //     title: 'Sign Hash',\n        //     messages: [],\n        //     info: msg.toString('hex').toUpperCase(),\n        // })\n\n        let bip32Paths = this.pathsToUniqueBipPaths(paths);\n\n        // Sign the msg with ledger\n        const accountPath = bippath.fromString(`${AVAX_ACCOUNT_PATH}`);\n        let sigMap = await this.appAvax.signHash(accountPath, bip32Paths, msg);\n        // store.commit('Ledger/closeModal')\n\n        let creds: Credential[] = this.getCredentials<UnsignedTx>(unsignedTx, paths, sigMap, chainId);\n\n        let signedTx;\n        switch (chainId) {\n            case 'X':\n                signedTx = new AVMTx(unsignedTx as AVMUnsignedTx, creds);\n                break;\n            case 'P':\n                signedTx = new PlatformTx(unsignedTx as PlatformUnsignedTx, creds);\n                break;\n            case 'C':\n                signedTx = new EVMTx(unsignedTx as EVMUnsignedTx, creds);\n                break;\n        }\n\n        return signedTx as SignedTx;\n    }\n\n    pathsToUniqueBipPaths(paths: string[]) {\n        let uniquePaths = paths.filter((val: any, i: number) => {\n            return paths.indexOf(val) === i;\n        });\n\n        let bip32Paths = uniquePaths.map((path) => {\n            return bippath.fromString(path, false);\n        });\n\n        return bip32Paths;\n    }\n\n    getCredentials<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx>(\n        unsignedTx: UnsignedTx,\n        paths: string[],\n        sigMap: any,\n        chainId: ChainIdType\n    ): Credential[] {\n        let creds: Credential[] = [];\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n\n        // @ts-ignore\n        let ins = tx.getIns ? tx.getIns() : [];\n        let operations: TransferableOperation[] = [];\n        let evmInputs: EVMInput[] = [];\n\n        let items = ins;\n        if (\n            (txType === AVMConstants.IMPORTTX && chainId === 'X') ||\n            (txType === PlatformVMConstants.IMPORTTX && chainId === 'P') ||\n            (txType === EVMConstants.IMPORTTX && chainId === 'C')\n        ) {\n            items = ((tx as AVMImportTx) || PlatformImportTx || EVMImportTx).getImportInputs();\n        }\n\n        // Try to get operations, it will fail if there are none, ignore and continue\n        try {\n            operations = (tx as OperationTx).getOperations();\n        } catch (e) {\n            console.log('Failed to get tx operations.');\n        }\n\n        let CredentialClass;\n        if (chainId === 'X') {\n            CredentialClass = AVMSelectCredentialClass;\n        } else if (chainId === 'P') {\n            CredentialClass = PlatformSelectCredentialClass;\n        } else {\n            CredentialClass = EVMSelectCredentialClass;\n        }\n\n        // Try to get evm inputs, it will fail if there are none, ignore and continue\n        try {\n            evmInputs = (tx as EVMExportTx).getInputs();\n        } catch (e) {\n            console.log('Failed to get EVM inputs.');\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const sigidxs: SigIdx[] = items[i].getInput().getSigIdxs();\n            const cred: Credential = CredentialClass(items[i].getInput().getCredentialID());\n\n            for (let j = 0; j < sigidxs.length; j++) {\n                let pathIndex = i + j;\n                let pathStr = paths[pathIndex];\n\n                let sigRaw = sigMap.get(pathStr);\n                let sigBuff = Buffer.from(sigRaw);\n                const sig: Signature = new Signature();\n                sig.fromBuffer(sigBuff);\n                cred.addSignature(sig);\n            }\n            creds.push(cred);\n        }\n\n        for (let i = 0; i < operations.length; i++) {\n            let op = operations[i].getOperation();\n            const sigidxs: SigIdx[] = op.getSigIdxs();\n            const cred: Credential = CredentialClass(op.getCredentialID());\n\n            for (let j = 0; j < sigidxs.length; j++) {\n                let pathIndex = items.length + i + j;\n                let pathStr = paths[pathIndex];\n\n                let sigRaw = sigMap.get(pathStr);\n                let sigBuff = Buffer.from(sigRaw);\n                const sig: Signature = new Signature();\n                sig.fromBuffer(sigBuff);\n                cred.addSignature(sig);\n            }\n            creds.push(cred);\n        }\n\n        for (let i = 0; i < evmInputs.length; i++) {\n            let evmInput = evmInputs[i];\n            const sigidxs: SigIdx[] = evmInput.getSigIdxs();\n            const cred: Credential = CredentialClass(evmInput.getCredentialID());\n\n            for (let j = 0; j < sigidxs.length; j++) {\n                let pathIndex = items.length + i + j;\n                let pathStr = paths[pathIndex];\n\n                let sigRaw = sigMap.get(pathStr);\n                let sigBuff = Buffer.from(sigRaw);\n                const sig: Signature = new Signature();\n                sig.fromBuffer(sigBuff);\n                cred.addSignature(sig);\n            }\n            creds.push(cred);\n        }\n\n        return creds;\n    }\n\n    async signP(unsignedTx: PlatformUnsignedTx): Promise<PlatformTx> {\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n        let chainId: ChainIdType = 'P';\n        let parseableTxs = ParseablePlatformEnum;\n\n        let { paths, isAvaxOnly } = this.getTransactionPaths<PlatformUnsignedTx>(unsignedTx, chainId);\n        // If ledger doesnt support parsing, sign hash\n        let canLedgerParse = this.config.version >= '0.3.1';\n        let isParsableType = txType in parseableTxs && isAvaxOnly;\n\n        // TODO: Remove after ledger is fixed\n        // If UTXOS contain lockedStakeable funds always use sign hash\n        let txIns = unsignedTx.getTransaction().getIns();\n        for (let i = 0; i < txIns.length; i++) {\n            let typeID = txIns[i].getInput().getTypeID();\n            if (typeID === PlatformVMConstants.STAKEABLELOCKINID) {\n                canLedgerParse = false;\n                break;\n            }\n        }\n\n        let signedTx;\n        if (canLedgerParse && isParsableType) {\n            signedTx = await this.signTransactionParsable<PlatformUnsignedTx, PlatformTx>(unsignedTx, paths, chainId);\n        } else {\n            signedTx = await this.signTransactionHash<PlatformUnsignedTx, PlatformTx>(unsignedTx, paths, chainId);\n        }\n        // store.commit('Ledger/closeModal')\n        return signedTx;\n    }\n\n    async signC(unsignedTx: EVMUnsignedTx): Promise<EVMTx> {\n        // TODO: Might need to upgrade paths array to:\n        //  paths = Array(utxoSet.getAllUTXOs().length).fill('0/0'),\n        let tx = unsignedTx.getTransaction();\n        let typeId = tx.getTxType();\n\n        let paths = ['0/0'];\n        if (typeId === EVMConstants.EXPORTTX) {\n            let ins = (tx as EVMExportTx).getInputs();\n            paths = ins.map(() => '0/0');\n        } else if (typeId === EVMConstants.IMPORTTX) {\n            let ins = (tx as EVMImportTx).getImportInputs();\n            paths = ins.map(() => '0/0');\n        }\n\n        let txSigned = (await this.signTransactionParsable(unsignedTx, paths, 'C')) as EVMTx;\n        // store.commit('Ledger/closeModal')\n        return txSigned;\n    }\n}\n","import { HDWalletAbstract } from '@/Wallet/HDWalletAbstract';\nimport { UnsignedTx as EVMUnsignedTx, Tx as EVMTx } from 'avalanche/dist/apis/evm';\nimport { UnsignedTx as PlatformUnsignedTx, Tx as PlatformTx } from 'avalanche/dist/apis/platformvm';\nimport { UnsignedTx as AVMUnsignedTx, Tx as AVMTx } from 'avalanche/dist/apis/avm';\nimport { Transaction } from '@ethereumjs/tx';\nimport { WalletNameType } from '@/Wallet/types';\nimport EvmWallet from '@/Wallet/EvmWallet';\nimport EvmWalletReadonly from '@/Wallet/EvmWalletReadonly';\nimport HDKey from 'hdkey';\nimport { importPublic } from 'ethereumjs-util';\n\nexport default class PublicMnemonicWallet extends HDWalletAbstract {\n    /**\n     *\n     * @param xpubAVM of derivation path m/44'/9000'/0'\n     * @param xpubEVM of derivation path m/44'/60'/0'\n     */\n    constructor(xpubAVM: string, xpubEVM: string) {\n        let avmAcct = HDKey.fromExtendedKey(xpubAVM);\n        let evmAcct = HDKey.fromExtendedKey(xpubEVM).derive('m/0/0');\n        super(avmAcct);\n\n        this.type = 'xpub';\n\n        this.evmWallet = new EvmWalletReadonly(importPublic(evmAcct.publicKey));\n    }\n\n    evmWallet: EvmWallet | EvmWalletReadonly;\n    type: WalletNameType;\n\n    getAddressC(): string {\n        return this.evmWallet.getAddress();\n    }\n\n    getEvmAddressBech(): string {\n        return this.evmWallet.getAddressBech32();\n    }\n\n    //@ts-ignore\n    signC(tx: EVMUnsignedTx): Promise<EVMTx> {\n        throw new Error('Not supported.');\n    }\n\n    //@ts-ignore\n    signEvm(tx: Transaction): Promise<Transaction> {\n        throw new Error('Not supported.');\n    }\n    //@ts-ignore\n    signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\n        throw new Error('Not supported.');\n    }\n\n    //@ts-ignore\n    signX(tx: AVMUnsignedTx): Promise<AVMTx> {\n        throw new Error('Not supported.');\n    }\n}\n","import { Buffer } from 'buffer/';\nimport createHash from 'create-hash';\n\n/**\n * @ignore\n */\n\n/**\n * Helper utility for encryption and password hashing, browser-safe.\n * Encryption is using AES-GCM with a random public nonce.\n */\nexport default class CryptoHelpers {\n    protected ivSize = 12;\n\n    protected saltSize = 16;\n\n    protected tagLength = 128;\n\n    protected aesLength = 256;\n\n    public keygenIterations = 200000; //3.0, 2.0 uses 100000\n\n    /**\n     * Internal-intended function for cleaning passwords.\n     *\n     * @param password\n     * @param salt\n     */\n    _pwcleaner(password: string, slt: Buffer): Buffer {\n        const pw: Buffer = Buffer.from(password, 'utf8');\n        return this.sha256(Buffer.concat([pw, slt]));\n    }\n    /**\n     * Internal-intended function for producing an intermediate key.\n     *\n     * @param pwkey\n     */\n\n    async _keyMaterial(pwkey: Buffer): Promise<CryptoKey> {\n        return crypto.subtle.importKey('raw', new Uint8Array(pwkey), { name: 'PBKDF2' }, false, ['deriveKey']);\n    }\n\n    /**\n     * Internal-intended function for turning an intermediate key into a salted key.\n     *\n     * @param keyMaterial\n     * @param salt\n     */\n    async _deriveKey(keyMaterial: CryptoKey, salt: Buffer): Promise<CryptoKey> {\n        return crypto.subtle.deriveKey(\n            {\n                name: 'PBKDF2',\n                salt,\n                iterations: this.keygenIterations,\n                hash: 'SHA-256',\n            },\n            keyMaterial,\n            { name: 'AES-GCM', length: this.aesLength },\n            false,\n            ['encrypt', 'decrypt']\n        );\n    }\n\n    /**\n     * A SHA256 helper function.\n     *\n     * @param message The message to hash\n     *\n     * @returns A {@link https://github.com/feross/buffer|Buffer} containing the SHA256 hash of the message\n     */\n    sha256(message: string | Buffer): Buffer {\n        let buff: Buffer;\n        if (typeof message === 'string') {\n            buff = Buffer.from(message, 'utf8');\n        } else {\n            buff = Buffer.from(message);\n        }\n        return Buffer.from(createHash('sha256').update(buff).digest()); // ensures correct Buffer class is used\n    }\n\n    /**\n     * Generates a randomized {@link https://github.com/feross/buffer|Buffer} to be used as a salt\n     */\n    makeSalt(): Buffer {\n        const salt = Buffer.alloc(this.saltSize);\n        crypto.getRandomValues(salt);\n        return salt;\n    }\n\n    /**\n     * Produces a password-safe hash.\n     *\n     * @param password A string for the password\n     * @param salt An optional {@link https://github.com/feross/buffer|Buffer} containing a salt used in the password hash\n     *\n     * @returns An object containing the \"salt\" and the \"hash\" produced by this function, both as {@link https://github.com/feross/buffer|Buffer}.\n     */\n    async pwhash(password: string, salt: Buffer): Promise<{ salt: Buffer; hash: Buffer }> {\n        let slt: Buffer;\n        if (salt instanceof Buffer) {\n            slt = salt;\n            // @ts-ignore\n        } else if (salt instanceof Uint8Array && process.env.NODE_ENV === 'test') {\n            slt = salt;\n        } else {\n            slt = this.makeSalt();\n        }\n\n        const hash: Buffer = this._pwcleaner(password, this._pwcleaner(password, slt));\n        return { salt: slt, hash };\n    }\n\n    /**\n     * Encrypts plaintext with the provided password using AES-GCM.\n     *\n     * @param password A string for the password\n     * @param plaintext The plaintext to encrypt\n     * @param salt An optional {@link https://github.com/feross/buffer|Buffer} for the salt to use in the encryption process\n     *\n     * @returns An object containing the \"salt\", \"iv\", and \"ciphertext\", all as {@link https://github.com/feross/buffer|Buffer}.\n     */\n    async encrypt(\n        password: string,\n        plaintext: Buffer | string,\n        salt: Buffer | undefined = undefined\n    ): Promise<{ salt: Buffer; iv: Buffer; ciphertext: Buffer }> {\n        let slt: Buffer;\n        if (typeof salt !== 'undefined' && salt instanceof Buffer) {\n            slt = salt;\n        } else {\n            slt = this.makeSalt();\n        }\n\n        let pt: Buffer;\n        if (typeof plaintext !== 'undefined' && plaintext instanceof Buffer) {\n            pt = plaintext;\n        } else {\n            pt = Buffer.from(plaintext, 'utf8');\n        }\n        const pwkey: Buffer = this._pwcleaner(password, slt);\n        const keyMaterial: CryptoKey = await this._keyMaterial(pwkey);\n        const pkey: CryptoKey = await this._deriveKey(keyMaterial, slt);\n        const iv: Buffer = Buffer.from(crypto.getRandomValues(new Uint8Array(this.ivSize)));\n\n        const ciphertext: Buffer = Buffer.from(\n            await crypto.subtle.encrypt(\n                {\n                    name: 'AES-GCM',\n                    iv,\n                    additionalData: slt,\n                    tagLength: this.tagLength,\n                },\n                pkey,\n                pt\n            )\n        );\n\n        return {\n            salt: slt,\n            iv,\n            ciphertext,\n        };\n    }\n\n    /**\n     * Decrypts ciphertext with the provided password, iv, and salt.\n     *\n     * @param password A string for the password\n     * @param ciphertext A {@link https://github.com/feross/buffer|Buffer} for the ciphertext\n     * @param salt A {@link https://github.com/feross/buffer|Buffer} for the salt\n     * @param iv A {@link https://github.com/feross/buffer|Buffer} for the iv\n     */\n    async decrypt(password: string, ciphertext: Buffer, salt: Buffer, iv: Buffer): Promise<Buffer> {\n        const pwkey: Buffer = this._pwcleaner(password, salt);\n        const keyMaterial: CryptoKey = await this._keyMaterial(pwkey);\n        const pkey: CryptoKey = await this._deriveKey(keyMaterial, salt);\n\n        const pt: Buffer = Buffer.from(\n            await crypto.subtle.decrypt(\n                {\n                    name: 'AES-GCM',\n                    iv, // The initialization vector you used to encrypt\n                    additionalData: salt, // The addtionalData you used to encrypt (if any)\n                    tagLength: 128, // The tagLength you used to encrypt (if any)\n                },\n                pkey, // from generateKey or importKey above\n                ciphertext // ArrayBuffer of the data\n            )\n        );\n        return pt;\n    }\n\n    constructor() {}\n}\n","// Functions to manage import/export of keystore files\nimport {\n    AllKeyFileDecryptedTypes,\n    AllKeyFileTypes,\n    KeyFileDecryptedV2,\n    KeyFileDecryptedV3,\n    KeyFileDecryptedV4,\n    KeyFileDecryptedV5,\n    KeyFileDecryptedV6,\n    KeyFileKeyDecryptedV2,\n    KeyFileKeyDecryptedV3,\n    KeyFileKeyDecryptedV4,\n    KeyFileKeyDecryptedV5,\n    KeyFileKeyDecryptedV6,\n    KeyFileKeyV2,\n    KeyFileKeyV3,\n    KeyFileKeyV4,\n    KeyFileKeyV5,\n    KeyFileKeyV6,\n    KeyFileV2,\n    KeyFileV3,\n    KeyFileV4,\n    KeyFileV5,\n    KeyFileV6,\n    KeystoreFileKeyType,\n} from './types';\nimport { xChain } from '@/Network/network';\nimport { Buffer } from 'buffer/';\nimport MnemonicWallet from '@/Wallet/MnemonicWallet';\nimport Crypto from './Crypto';\nimport SingletonWallet from '@/Wallet/SingletonWallet';\nimport { AccessWalletMultipleInput } from './types';\n// import { keyToKeypair } from '@/helpers/helper'\nimport * as bip39 from 'bip39';\nimport { bintools } from '@/common';\n\nconst cryptoHelpers = new Crypto();\n\nconst KEYSTORE_VERSION = '6.0';\n\nconst ITERATIONS_V2 = 100000;\nconst ITERATIONS_V3 = 200000; // and any version above\n\nconst SUPPORTED_VERSION = ['2.0', '3.0', '4.0', '5.0', '6.0'];\n\ninterface IHash {\n    salt: Buffer;\n    hash: Buffer;\n}\n\ninterface PKCrypt {\n    salt: Buffer;\n    iv: Buffer;\n    ciphertext: Buffer;\n}\n\nasync function readV2(data: KeyFileV2, pass: string) {\n    const version: string = data.version;\n    cryptoHelpers.keygenIterations = ITERATIONS_V2;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n    let pass_hash: string = data.pass_hash;\n\n    let checkHashString: string;\n    let checkHash: Buffer = await cryptoHelpers._pwcleaner(pass, salt);\n    checkHashString = bintools.cb58Encode(checkHash);\n\n    if (checkHashString !== pass_hash) {\n        throw 'INVALID_PASS';\n    }\n\n    let keys: KeyFileKeyV2[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV2[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV2 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        let key_string = bintools.cb58Encode(key_decrypt);\n\n        keysDecrypt.push({\n            key: key_string,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: 0,\n        keys: keysDecrypt,\n    };\n}\nasync function readV3(data: KeyFileV3, pass: string) {\n    const version: string = data.version;\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n    let pass_hash: string = data.pass_hash;\n\n    let checkHashString: string;\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\n    checkHashString = bintools.cb58Encode(checkHash.hash);\n\n    if (checkHashString !== pass_hash) {\n        throw 'INVALID_PASS';\n    }\n\n    let keys: KeyFileKeyV3[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV3[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV3 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        let key_string = bintools.cb58Encode(key_decrypt);\n\n        keysDecrypt.push({\n            key: key_string,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: 0,\n        keys: keysDecrypt,\n    };\n}\nasync function readV4(data: KeyFileV4, pass: string): Promise<KeyFileDecryptedV5> {\n    const version = data.version;\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n    let pass_hash: string = data.pass_hash;\n\n    let checkHashString: string;\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\n    checkHashString = bintools.cb58Encode(checkHash.hash);\n\n    if (checkHashString !== pass_hash) {\n        throw 'INVALID_PASS';\n    }\n\n    let keys: KeyFileKeyV4[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV4[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV4 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        let key_string = bintools.cb58Encode(key_decrypt);\n\n        keysDecrypt.push({\n            key: key_string,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: 0,\n        keys: keysDecrypt,\n    };\n}\n\nasync function readV5(data: KeyFileV5, pass: string): Promise<KeyFileDecryptedV5> {\n    const version: string = data.version;\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n    let pass_hash = data.pass_hash;\n\n    let checkHashString: string;\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\n    checkHashString = bintools.cb58Encode(checkHash.hash);\n\n    if (checkHashString !== pass_hash) {\n        throw 'INVALID_PASS';\n    }\n\n    let keys: KeyFileKeyV5[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV5[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV5 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        let key_string = key_decrypt.toString();\n\n        keysDecrypt.push({\n            key: key_string,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: 0,\n        keys: keysDecrypt,\n    };\n}\n\nasync function readV6(data: KeyFileV6, pass: string): Promise<KeyFileDecryptedV6> {\n    const version: string = data.version;\n    const activeIndex = data.activeIndex;\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n\n    let keys: KeyFileKeyV6[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV6[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV6 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let type: KeystoreFileKeyType = key_data.type;\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer;\n        try {\n            key_decrypt = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        } catch (e) {\n            throw 'INVALID_PASS';\n        }\n\n        const key_string = key_decrypt.toString();\n\n        keysDecrypt.push({\n            key: key_string,\n            type: type,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: activeIndex || 0,\n        keys: keysDecrypt,\n    };\n}\n\n/**\n * Will decrypt and return the keys of the encrypted wallets in the given json file\n * @param data A JSON file of encrypted wallet keys\n * @param pass The password to decrypt the keys\n */\nasync function readKeyFile(data: AllKeyFileTypes, pass: string): Promise<AllKeyFileDecryptedTypes> {\n    switch (data.version) {\n        case '6.0':\n            return await readV6(data as KeyFileV6, pass);\n        case '5.0':\n            return await readV5(data as KeyFileV5, pass);\n        case '4.0':\n            return await readV4(data as KeyFileV4, pass);\n        case '3.0':\n            return await readV3(data as KeyFileV3, pass);\n        case '2.0':\n            return await readV2(data as KeyFileV2, pass);\n        default:\n            throw 'INVALID_VERSION';\n    }\n}\n\nfunction extractKeysV2(\n    file: KeyFileDecryptedV2 | KeyFileDecryptedV3 | KeyFileDecryptedV4\n): AccessWalletMultipleInput[] {\n    let chainID = xChain.getBlockchainAlias();\n    let keys = (file as KeyFileDecryptedV2 | KeyFileDecryptedV3 | KeyFileDecryptedV4).keys;\n\n    return keys.map((key) => {\n        // Private keys from the keystore file do not have the PrivateKey- prefix\n        let pk = 'PrivateKey-' + key.key;\n        // let keypair = keyToKeypair(pk, chainID)\n        let keypair = xChain.newKeyChain().importKey(pk);\n\n        let keyBuf = keypair.getPrivateKey();\n        let keyHex: string = keyBuf.toString('hex');\n        let paddedKeyHex = keyHex.padStart(64, '0');\n        let mnemonic: string = bip39.entropyToMnemonic(paddedKeyHex);\n\n        return {\n            key: mnemonic,\n            type: 'mnemonic',\n        };\n    });\n}\n\nfunction extractKeysV5(file: KeyFileDecryptedV5): AccessWalletMultipleInput[] {\n    return file.keys.map((key) => ({\n        key: key.key,\n        type: 'mnemonic',\n    }));\n}\n\nfunction extractKeysV6(file: KeyFileDecryptedV6): AccessWalletMultipleInput[] {\n    return file.keys.map((key) => ({\n        type: key.type,\n        key: key.key,\n    }));\n}\n\nfunction extractKeysFromDecryptedFile(file: AllKeyFileDecryptedTypes): AccessWalletMultipleInput[] {\n    switch (file.version) {\n        case '6.0':\n            return extractKeysV6(file as KeyFileDecryptedV6);\n        case '5.0':\n            return extractKeysV5(file as KeyFileDecryptedV5);\n        case '4.0':\n            return extractKeysV2(file as KeyFileDecryptedV4);\n        case '3.0':\n            return extractKeysV2(file as KeyFileDecryptedV3);\n        case '2.0':\n            return extractKeysV2(file as KeyFileDecryptedV2);\n        default:\n            throw 'INVALID_VERSION';\n    }\n}\n\n/**\n * Given an array of wallets, the active index, and a password, return an encrypted JSON object that is the keystore file\n * @param wallets An array of wallet to encrypt\n * @param pass Password used in encryption\n * @param activeIndex Index of the active wallet in the `wallets` array\n * @return Returns a JSON object that can later be decrypted with `readKeyfile` and the given password\n */\nasync function makeKeyfile(\n    wallets: (MnemonicWallet | SingletonWallet)[],\n    pass: string,\n    activeIndex: number\n): Promise<KeyFileV6> {\n    // 3.0 and above uses 200,000\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = await cryptoHelpers.makeSalt();\n\n    let keys: KeyFileKeyV6[] = [];\n\n    for (let i = 0; i < wallets.length; i++) {\n        let wallet = wallets[i];\n        let key;\n        let type: KeystoreFileKeyType;\n        if (wallet.type === 'singleton') {\n            key = (wallet as SingletonWallet).key;\n            type = 'singleton';\n        } else {\n            key = (wallet as MnemonicWallet).mnemonic;\n            type = 'mnemonic';\n        }\n        let pk_crypt: PKCrypt = await cryptoHelpers.encrypt(pass, key, salt);\n\n        let key_data: KeyFileKeyV6 = {\n            key: bintools.cb58Encode(pk_crypt.ciphertext),\n            iv: bintools.cb58Encode(pk_crypt.iv),\n            type: type,\n        };\n        keys.push(key_data);\n    }\n\n    let file_data: KeyFileV6 = {\n        version: KEYSTORE_VERSION,\n        salt: bintools.cb58Encode(salt),\n        activeIndex,\n        keys: keys,\n    };\n    return file_data;\n}\n\nexport default { readKeyFile, makeKeyfile, KEYSTORE_VERSION, extractKeysFromDecryptedFile };\n"],"names":["Defaults","global","this","require$$0","require$$1","BinTools","axios","Avalanche","Web3","url","URL","Sockette","PubSub","ethers","DOMPurify","BN","publicToAddress","EVMKeyPair","BufferAvalanche","privateToPublic","EVMKeyChain","Big","createHash","PayloadTypes","MinterSet","OutputOwners","EthereumjsCommon","tx","Transaction","AVMConstants","PlatformVMConstants","EVMConstants","Assets.getAssetDescription","AVMUTXOSet","PlatformUTXOSet","EventEmitter","Buffer","UnixNow","moment","getPreferredHRP","AVMKeyPair","bip39","HDKey","_errors","_utils","_rlp","_bip32Path","_createHash","importPublic","rlp","bnToRlp","EthBN","PlatformImportTx","bippath","AVMTx","PlatformTx","EVMTx","EVMImportTx","AVMSelectCredentialClass","PlatformSelectCredentialClass","EVMSelectCredentialClass","Signature","Crypto"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAEgB,OAAO,CAAC,IAAmB;IACvC,OAAO,GAAG,IAAI,CAAC,WAAW,MAAM,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,eAAe,CAAC;AAC9E,CAAC;SACe,OAAO,CAAC,IAAmB;IACvC,OAAO,GAAG,IAAI,CAAC,WAAW,MAAM,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,WAAW,CAAC;AAC1E,CAAC;SACe,OAAO,CAAC,IAAmB;IACvC,OAAO,GAAG,IAAI,CAAC,WAAW,MAAM,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,WAAW,CAAC;AAC1E;;ACTA;AAKO,MAAM,aAAa,GAAkB;IACxC,MAAM,EAAE,0BAA0B;IAClC,WAAW,EAAE,OAAO;IACpB,KAAK,EAAE,kBAAkB;IACzB,OAAO,EAAE,GAAG;IACZ,WAAW,EAAE,kCAAkC;IAC/C,eAAe,EAAE,+BAA+B;IAChD,SAAS,EAAE,CAAC;;IAEZ,QAAQ,EAAEA,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC;;IAElD,QAAQ,EAAEA,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC;;IAElD,QAAQ,EAAEA,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC;;IAElD,UAAU,EAAEA,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;;IAE/C,MAAM,EAAEA,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC;IAC/C,IAAI,MAAM;QACN,OAAO;YACH,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC;YAChB,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC;YAChB,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC;SACnB,CAAC;KACL;CACJ,CAAC;AAEK,MAAM,aAAa,GAAkB;IACxC,MAAM,EAAE,+BAA+B;IACvC,WAAW,EAAE,OAAO;IACpB,KAAK,EAAE,uBAAuB;IAC9B,OAAO,EAAE,GAAG;IACZ,WAAW,EAAE,uCAAuC;IACpD,eAAe,EAAE,oCAAoC;IACrD,SAAS,EAAE,CAAC;;IAEZ,QAAQ,EAAEA,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC;;IAElD,QAAQ,EAAEA,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC;;IAElD,QAAQ,EAAEA,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC;;IAElD,UAAU,EAAEA,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;;IAE/C,MAAM,EAAEA,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC;IAC/C,IAAI,MAAM;QACN,OAAO;YACH,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC;YAChB,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC;YAChB,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC;SACnB,CAAC;KACL;CACJ,CAAC;AAEK,MAAM,cAAc,GAAkB;IACzC,MAAM,EAAE,uBAAuB;IAC/B,WAAW,EAAE,MAAM;IACnB,KAAK,EAAE,WAAW;IAClB,OAAO,EAAE,IAAI;IACb,SAAS,EAAE,KAAK;;IAEhB,QAAQ,EAAEA,gBAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC;;IAEtD,QAAQ,EAAEA,gBAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC;;IAEtD,QAAQ,EAAEA,gBAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC;;IAEtD,UAAU,EAAEA,gBAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;;IAEnD,MAAM,EAAEA,gBAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC;IACnD,IAAI,MAAM;QACN,OAAO;YACH,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC;YAChB,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC;YAChB,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC;SACnB,CAAC;KACL;CACJ,CAAC;AAEF;AACO,MAAM,aAAa,GAAG,aAAa;;;;;;;;;;;;;;;;;;;;;ACrFzC,CAAC,SAAS,IAAI,EAAE;AACjB;AACA;AACA,CAAC,IAAI,WAAW,GAAiC,OAAO;AACxD,EAAE,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC;AAC/B,CAAC,IAAI,UAAU,GAAgC,MAAM;AACrD,EAAE,CAAC,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC;AAC7B,CAAC,IAAI,UAAU,GAAG,OAAOC,cAAM,IAAI,QAAQ,IAAIA,cAAM,CAAC;AACtD,CAAC;AACD,EAAE,UAAU,CAAC,MAAM,KAAK,UAAU;AAClC,EAAE,UAAU,CAAC,MAAM,KAAK,UAAU;AAClC,EAAE,UAAU,CAAC,IAAI,KAAK,UAAU;AAChC,GAAG;AACH,EAAE,IAAI,GAAG,UAAU,CAAC;AACpB,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,IAAI,QAAQ;AACb;AACA;AACA,CAAC,MAAM,GAAG,UAAU;AACpB;AACA;AACA,CAAC,IAAI,GAAG,EAAE;AACV,CAAC,IAAI,GAAG,CAAC;AACT,CAAC,IAAI,GAAG,EAAE;AACV,CAAC,IAAI,GAAG,EAAE;AACV,CAAC,IAAI,GAAG,GAAG;AACX,CAAC,WAAW,GAAG,EAAE;AACjB,CAAC,QAAQ,GAAG,GAAG;AACf,CAAC,SAAS,GAAG,GAAG;AAChB;AACA;AACA,CAAC,aAAa,GAAG,OAAO;AACxB,CAAC,aAAa,GAAG,cAAc;AAC/B,CAAC,eAAe,GAAG,2BAA2B;AAC9C;AACA;AACA,CAAC,MAAM,GAAG;AACV,EAAE,UAAU,EAAE,iDAAiD;AAC/D,EAAE,WAAW,EAAE,gDAAgD;AAC/D,EAAE,eAAe,EAAE,eAAe;AAClC,EAAE;AACF;AACA;AACA,CAAC,aAAa,GAAG,IAAI,GAAG,IAAI;AAC5B,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK;AACnB,CAAC,kBAAkB,GAAG,MAAM,CAAC,YAAY;AACzC;AACA;AACA,CAAC,GAAG,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,KAAK,CAAC,IAAI,EAAE;AACtB,EAAE,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;AACjC,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE;AACzB,EAAE,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;AAC5B,EAAE,IAAI,MAAM,GAAG,EAAE,CAAC;AAClB,EAAE,OAAO,MAAM,EAAE,EAAE;AACnB,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;AACtC,GAAG;AACH,EAAE,OAAO,MAAM,CAAC;AAChB,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE;AAChC,EAAE,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAChC,EAAE,IAAI,MAAM,GAAG,EAAE,CAAC;AAClB,EAAE,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AACxB;AACA;AACA,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AAC3B,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACrB,GAAG;AACH;AACA,EAAE,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;AACnD,EAAE,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACjC,EAAE,IAAI,OAAO,GAAG,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1C,EAAE,OAAO,MAAM,GAAG,OAAO,CAAC;AAC1B,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,UAAU,CAAC,MAAM,EAAE;AAC7B,EAAE,IAAI,MAAM,GAAG,EAAE;AACjB,MAAM,OAAO,GAAG,CAAC;AACjB,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM;AAC5B,MAAM,KAAK;AACX,MAAM,KAAK,CAAC;AACZ,EAAE,OAAO,OAAO,GAAG,MAAM,EAAE;AAC3B,GAAG,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC;AACxC,GAAG,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,IAAI,OAAO,GAAG,MAAM,EAAE;AAC/D;AACA,IAAI,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC;AACzC,IAAI,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK,MAAM,EAAE;AACpC,KAAK,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,KAAK,KAAK,EAAE,KAAK,KAAK,GAAG,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC;AACtE,KAAK,MAAM;AACX;AACA;AACA,KAAK,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACxB,KAAK,OAAO,EAAE,CAAC;AACf,KAAK;AACL,IAAI,MAAM;AACV,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACvB,IAAI;AACJ,GAAG;AACH,EAAE,OAAO,MAAM,CAAC;AAChB,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,UAAU,CAAC,KAAK,EAAE;AAC5B,EAAE,OAAO,GAAG,CAAC,KAAK,EAAE,SAAS,KAAK,EAAE;AACpC,GAAG,IAAI,MAAM,GAAG,EAAE,CAAC;AACnB,GAAG,IAAI,KAAK,GAAG,MAAM,EAAE;AACvB,IAAI,KAAK,IAAI,OAAO,CAAC;AACrB,IAAI,MAAM,IAAI,kBAAkB,CAAC,KAAK,KAAK,EAAE,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC;AAChE,IAAI,KAAK,GAAG,MAAM,GAAG,KAAK,GAAG,KAAK,CAAC;AACnC,IAAI;AACJ,GAAG,MAAM,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC;AACvC,GAAG,OAAO,MAAM,CAAC;AACjB,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACd,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,YAAY,CAAC,SAAS,EAAE;AAClC,EAAE,IAAI,SAAS,GAAG,EAAE,GAAG,EAAE,EAAE;AAC3B,GAAG,OAAO,SAAS,GAAG,EAAE,CAAC;AACzB,GAAG;AACH,EAAE,IAAI,SAAS,GAAG,EAAE,GAAG,EAAE,EAAE;AAC3B,GAAG,OAAO,SAAS,GAAG,EAAE,CAAC;AACzB,GAAG;AACH,EAAE,IAAI,SAAS,GAAG,EAAE,GAAG,EAAE,EAAE;AAC3B,GAAG,OAAO,SAAS,GAAG,EAAE,CAAC;AACzB,GAAG;AACH,EAAE,OAAO,IAAI,CAAC;AACd,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE;AACpC;AACA;AACA,EAAE,OAAO,KAAK,GAAG,EAAE,GAAG,EAAE,IAAI,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AAC7D,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE;AAC7C,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AACZ,EAAE,KAAK,GAAG,SAAS,GAAG,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC;AACvD,EAAE,KAAK,IAAI,KAAK,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC;AACpC,EAAE,8BAA8B,KAAK,GAAG,aAAa,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE;AAC9E,GAAG,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC;AACxC,GAAG;AACH,EAAE,OAAO,KAAK,CAAC,CAAC,GAAG,CAAC,aAAa,GAAG,CAAC,IAAI,KAAK,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;AACjE,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,MAAM,CAAC,KAAK,EAAE;AACxB;AACA,EAAE,IAAI,MAAM,GAAG,EAAE;AACjB,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM;AAChC,MAAM,GAAG;AACT,MAAM,CAAC,GAAG,CAAC;AACX,MAAM,CAAC,GAAG,QAAQ;AAClB,MAAM,IAAI,GAAG,WAAW;AACxB,MAAM,KAAK;AACX,MAAM,CAAC;AACP,MAAM,KAAK;AACX,MAAM,IAAI;AACV,MAAM,CAAC;AACP,MAAM,CAAC;AACP,MAAM,KAAK;AACX,MAAM,CAAC;AACP;AACA,MAAM,UAAU,CAAC;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AACvC,EAAE,IAAI,KAAK,GAAG,CAAC,EAAE;AACjB,GAAG,KAAK,GAAG,CAAC,CAAC;AACb,GAAG;AACH;AACA,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,EAAE,CAAC,EAAE;AAC9B;AACA,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;AACpC,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;AACvB,IAAI;AACJ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,GAAG;AACH;AACA;AACA;AACA;AACA,EAAE,KAAK,KAAK,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,WAAW,6BAA6B;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,KAAK,IAAI,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,sBAAsB,CAAC,IAAI,IAAI,EAAE;AAClE;AACA,IAAI,IAAI,KAAK,IAAI,WAAW,EAAE;AAC9B,KAAK,KAAK,CAAC,eAAe,CAAC,CAAC;AAC5B,KAAK;AACL;AACA,IAAI,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AACpD;AACA,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE;AAC1D,KAAK,KAAK,CAAC,UAAU,CAAC,CAAC;AACvB,KAAK;AACL;AACA,IAAI,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC;AACnB,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;AAChE;AACA,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE;AACnB,KAAK,MAAM;AACX,KAAK;AACL;AACA,IAAI,UAAU,GAAG,IAAI,GAAG,CAAC,CAAC;AAC1B,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC,EAAE;AACxC,KAAK,KAAK,CAAC,UAAU,CAAC,CAAC;AACvB,KAAK;AACL;AACA,IAAI,CAAC,IAAI,UAAU,CAAC;AACpB;AACA,IAAI;AACJ;AACA,GAAG,GAAG,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;AAC3B,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;AAC1C;AACA;AACA;AACA,GAAG,IAAI,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,EAAE;AACpC,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC;AACtB,IAAI;AACJ;AACA,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;AACvB,GAAG,CAAC,IAAI,GAAG,CAAC;AACZ;AACA;AACA,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5B;AACA,GAAG;AACH;AACA,EAAE,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC;AAC5B,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,MAAM,CAAC,KAAK,EAAE;AACxB,EAAE,IAAI,CAAC;AACP,MAAM,KAAK;AACX,MAAM,cAAc;AACpB,MAAM,WAAW;AACjB,MAAM,IAAI;AACV,MAAM,CAAC;AACP,MAAM,CAAC;AACP,MAAM,CAAC;AACP,MAAM,CAAC;AACP,MAAM,CAAC;AACP,MAAM,YAAY;AAClB,MAAM,MAAM,GAAG,EAAE;AACjB;AACA,MAAM,WAAW;AACjB;AACA,MAAM,qBAAqB;AAC3B,MAAM,UAAU;AAChB,MAAM,OAAO,CAAC;AACd;AACA;AACA,EAAE,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;AAC5B;AACA;AACA,EAAE,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7B;AACA;AACA,EAAE,CAAC,GAAG,QAAQ,CAAC;AACf,EAAE,KAAK,GAAG,CAAC,CAAC;AACZ,EAAE,IAAI,GAAG,WAAW,CAAC;AACrB;AACA;AACA,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,EAAE,CAAC,EAAE;AACpC,GAAG,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC3B,GAAG,IAAI,YAAY,GAAG,IAAI,EAAE;AAC5B,IAAI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC;AAClD,IAAI;AACJ,GAAG;AACH;AACA,EAAE,cAAc,GAAG,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,WAAW,EAAE;AACnB,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC1B,GAAG;AACH;AACA;AACA,EAAE,OAAO,cAAc,GAAG,WAAW,EAAE;AACvC;AACA;AACA;AACA,GAAG,KAAK,CAAC,GAAG,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,EAAE,CAAC,EAAE;AACjD,IAAI,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC5B,IAAI,IAAI,YAAY,IAAI,CAAC,IAAI,YAAY,GAAG,CAAC,EAAE;AAC/C,KAAK,CAAC,GAAG,YAAY,CAAC;AACtB,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA,GAAG,qBAAqB,GAAG,cAAc,GAAG,CAAC,CAAC;AAC9C,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,MAAM,GAAG,KAAK,IAAI,qBAAqB,CAAC,EAAE;AAChE,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC;AACtB,IAAI;AACJ;AACA,GAAG,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,qBAAqB,CAAC;AAC5C,GAAG,CAAC,GAAG,CAAC,CAAC;AACT;AACA,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,EAAE,CAAC,EAAE;AACrC,IAAI,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC5B;AACA,IAAI,IAAI,YAAY,GAAG,CAAC,IAAI,EAAE,KAAK,GAAG,MAAM,EAAE;AAC9C,KAAK,KAAK,CAAC,UAAU,CAAC,CAAC;AACvB,KAAK;AACL;AACA,IAAI,IAAI,YAAY,IAAI,CAAC,EAAE;AAC3B;AACA,KAAK,KAAK,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,IAAI,sBAAsB,CAAC,IAAI,IAAI,EAAE;AAC9D,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;AAClE,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE;AACjB,OAAO,MAAM;AACb,OAAO;AACP,MAAM,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AACtB,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,CAAC;AAC5B,MAAM,MAAM,CAAC,IAAI;AACjB,OAAO,kBAAkB,CAAC,YAAY,CAAC,CAAC,GAAG,OAAO,GAAG,UAAU,EAAE,CAAC,CAAC,CAAC;AACpE,OAAO,CAAC;AACR,MAAM,CAAC,GAAG,KAAK,CAAC,OAAO,GAAG,UAAU,CAAC,CAAC;AACtC,MAAM;AACN;AACA,KAAK,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,KAAK,IAAI,GAAG,KAAK,CAAC,KAAK,EAAE,qBAAqB,EAAE,cAAc,IAAI,WAAW,CAAC,CAAC;AAC/E,KAAK,KAAK,GAAG,CAAC,CAAC;AACf,KAAK,EAAE,cAAc,CAAC;AACtB,KAAK;AACL,IAAI;AACJ;AACA,GAAG,EAAE,KAAK,CAAC;AACX,GAAG,EAAE,CAAC,CAAC;AACP;AACA,GAAG;AACH,EAAE,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzB,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,SAAS,CAAC,KAAK,EAAE;AAC3B,EAAE,OAAO,SAAS,CAAC,KAAK,EAAE,SAAS,MAAM,EAAE;AAC3C,GAAG,OAAO,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC;AACpC,MAAM,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;AAC3C,MAAM,MAAM,CAAC;AACb,GAAG,CAAC,CAAC;AACL,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,OAAO,CAAC,KAAK,EAAE;AACzB,EAAE,OAAO,SAAS,CAAC,KAAK,EAAE,SAAS,MAAM,EAAE;AAC3C,GAAG,OAAO,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC;AACpC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC7B,MAAM,MAAM,CAAC;AACb,GAAG,CAAC,CAAC;AACL,EAAE;AACF;AACA;AACA;AACA;AACA,CAAC,QAAQ,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,EAAE,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM,EAAE;AACV,GAAG,QAAQ,EAAE,UAAU;AACvB,GAAG,QAAQ,EAAE,UAAU;AACvB,GAAG;AACH,EAAE,QAAQ,EAAE,MAAM;AAClB,EAAE,QAAQ,EAAE,MAAM;AAClB,EAAE,SAAS,EAAE,OAAO;AACpB,EAAE,WAAW,EAAE,SAAS;AACxB,EAAE,CAAC;AACH;AACA;AACA;AACA;AACA,CAQQ,IAAI,WAAW,IAAI,UAAU,EAAE;AACvC,EAAE,IAAI,MAAM,CAAC,OAAO,IAAI,WAAW,EAAE;AACrC,GAAG,UAAU,CAAC,OAAO,GAAG,QAAQ,CAAC;AACjC,GAAG,MAAM;AACT,GAAG,KAAK,GAAG,IAAI,QAAQ,EAAE;AACzB,IAAI,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,WAAW,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;AACvE,IAAI;AACJ,GAAG;AACH,EAAE,MAAM;AACR,EAAE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC3B,EAAE;AACF;AACA,CAAC,CAACC,cAAI,CAAC;;;AC/gBP,QAAc,GAAG;AACjB,EAAE,QAAQ,EAAE,SAAS,GAAG,EAAE;AAC1B,IAAI,OAAO,OAAO,GAAG,CAAC,KAAK,QAAQ,CAAC;AACpC,GAAG;AACH,EAAE,QAAQ,EAAE,SAAS,GAAG,EAAE;AAC1B,IAAI,OAAO,OAAO,GAAG,CAAC,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,CAAC;AACpD,GAAG;AACH,EAAE,MAAM,EAAE,SAAS,GAAG,EAAE;AACxB,IAAI,OAAO,GAAG,KAAK,IAAI,CAAC;AACxB,GAAG;AACH,EAAE,iBAAiB,EAAE,SAAS,GAAG,EAAE;AACnC,IAAI,OAAO,GAAG,IAAI,IAAI,CAAC;AACvB,GAAG;AACH,CAAC;;ACfD;AAsBA;AACA;AACA;AACA;AACA,SAAS,cAAc,CAAC,GAAG,EAAE,IAAI,EAAE;AACnC,EAAE,OAAO,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AACzD,CAAC;AACD;AACA,UAAc,GAAG,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE;AAChD,EAAE,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACnB,EAAE,EAAE,GAAG,EAAE,IAAI,GAAG,CAAC;AACjB,EAAE,IAAI,GAAG,GAAG,EAAE,CAAC;AACf;AACA,EAAE,IAAI,OAAO,EAAE,KAAK,QAAQ,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;AACjD,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH;AACA,EAAE,IAAI,MAAM,GAAG,KAAK,CAAC;AACrB,EAAE,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACrB;AACA,EAAE,IAAI,OAAO,GAAG,IAAI,CAAC;AACrB,EAAE,IAAI,OAAO,IAAI,OAAO,OAAO,CAAC,OAAO,KAAK,QAAQ,EAAE;AACtD,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;AAC9B,GAAG;AACH;AACA,EAAE,IAAI,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC;AACtB;AACA,EAAE,IAAI,OAAO,GAAG,CAAC,IAAI,GAAG,GAAG,OAAO,EAAE;AACpC,IAAI,GAAG,GAAG,OAAO,CAAC;AAClB,GAAG;AACH;AACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;AAChC,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC;AACxC,QAAQ,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;AAC3B,QAAQ,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;AACzB;AACA,IAAI,IAAI,GAAG,IAAI,CAAC,EAAE;AAClB,MAAM,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AAC9B,MAAM,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AAC/B,KAAK,MAAM;AACX,MAAM,IAAI,GAAG,CAAC,CAAC;AACf,MAAM,IAAI,GAAG,EAAE,CAAC;AAChB,KAAK;AACL;AACA,IAAI,CAAC,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;AACjC,IAAI,CAAC,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;AACjC;AACA,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE;AACjC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACjB,KAAK,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;AACtC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACrB,KAAK,MAAM;AACX,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3B,KAAK;AACL,GAAG;AACH;AACA,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;;AC/ED;AAsBA;AACA,IAAI,kBAAkB,GAAG,SAAS,CAAC,EAAE;AACrC,EAAE,QAAQ,OAAO,CAAC;AAClB,IAAI,KAAK,QAAQ;AACjB,MAAM,OAAO,CAAC,CAAC;AACf;AACA,IAAI,KAAK,SAAS;AAClB,MAAM,OAAO,CAAC,GAAG,MAAM,GAAG,OAAO,CAAC;AAClC;AACA,IAAI,KAAK,QAAQ;AACjB,MAAM,OAAO,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;AAClC;AACA,IAAI;AACJ,MAAM,OAAO,EAAE,CAAC;AAChB,GAAG;AACH,CAAC,CAAC;AACF;AACA,UAAc,GAAG,SAAS,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE;AAC9C,EAAE,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AACnB,EAAE,EAAE,GAAG,EAAE,IAAI,GAAG,CAAC;AACjB,EAAE,IAAI,GAAG,KAAK,IAAI,EAAE;AACpB,IAAI,GAAG,GAAG,SAAS,CAAC;AACpB,GAAG;AACH;AACA,EAAE,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AAC/B,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;AAC5C,MAAM,IAAI,EAAE,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;AAC9D,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;AACjC,QAAQ,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;AACtC,UAAU,OAAO,EAAE,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACrB,OAAO,MAAM;AACb,QAAQ,OAAO,EAAE,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,OAAO;AACP,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACjB;AACA,GAAG;AACH;AACA,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC;AACvB,EAAE,OAAO,kBAAkB,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE;AAC1D,SAAS,kBAAkB,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;AACrD,CAAC;;;AC9DD;AACA,cAAc,GAAG,aAAa,GAAGC,MAAmB,CAAC;AACrD,cAAc,GAAG,iBAAiB,GAAGC,MAAmB;;;;;;;ACuBxD,SAAa,GAAG,QAAQ,CAAC;AACzB,WAAe,GAAG,UAAU,CAAC;AAC7B,iBAAqB,GAAG,gBAAgB,CAAC;AACzC,UAAc,GAAG,SAAS,CAAC;AAC3B;AACA,SAAW,GAAG,GAAG,CAAC;AAClB;AACA,SAAS,GAAG,GAAG;AACf,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACvB,EAAE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACtB,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACnB,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACnB,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACnB,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACvB,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACnB,EAAE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACrB,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AACpB,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACvB,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACnB,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACnB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,IAAI,eAAe,GAAG,mBAAmB;AACzC,IAAI,WAAW,GAAG,UAAU;AAC5B;AACA;AACA,IAAI,iBAAiB,GAAG,oCAAoC;AAC5D;AACA;AACA;AACA,IAAI,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;AACxD;AACA;AACA,IAAI,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;AAC3D;AACA;AACA,IAAI,UAAU,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;AACtC;AACA;AACA;AACA;AACA,IAAI,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC;AAC/D,IAAI,eAAe,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AACrC,IAAI,cAAc,GAAG,GAAG;AACxB,IAAI,mBAAmB,GAAG,wBAAwB;AAClD,IAAI,iBAAiB,GAAG,8BAA8B;AACtD;AACA,IAAI,cAAc,GAAG;AACrB,MAAM,YAAY,EAAE,IAAI;AACxB,MAAM,aAAa,EAAE,IAAI;AACzB,KAAK;AACL;AACA,IAAI,gBAAgB,GAAG;AACvB,MAAM,YAAY,EAAE,IAAI;AACxB,MAAM,aAAa,EAAE,IAAI;AACzB,KAAK;AACL;AACA,IAAI,eAAe,GAAG;AACtB,MAAM,MAAM,EAAE,IAAI;AAClB,MAAM,OAAO,EAAE,IAAI;AACnB,MAAM,KAAK,EAAE,IAAI;AACjB,MAAM,QAAQ,EAAE,IAAI;AACpB,MAAM,MAAM,EAAE,IAAI;AAClB,MAAM,OAAO,EAAE,IAAI;AACnB,MAAM,QAAQ,EAAE,IAAI;AACpB,MAAM,MAAM,EAAE,IAAI;AAClB,MAAM,SAAS,EAAE,IAAI;AACrB,MAAM,OAAO,EAAE,IAAI;AACnB,KACwC,CAAC;AACzC;AACA,SAAS,QAAQ,CAAC,GAAG,EAAE,gBAAgB,EAAE,iBAAiB,EAAE;AAC5D,EAAE,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,GAAG,YAAY,GAAG,EAAE,OAAO,GAAG,CAAC;AAClE;AACA,EAAE,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC;AAClB,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,gBAAgB,EAAE,iBAAiB,CAAC,CAAC;AACpD,EAAE,OAAO,CAAC,CAAC;AACX,CAAC;AACD;AACA,GAAG,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,GAAG,EAAE,gBAAgB,EAAE,iBAAiB,EAAE;AACzE,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AAC3B,IAAI,MAAM,IAAI,SAAS,CAAC,wCAAwC,GAAG,OAAO,GAAG,CAAC,CAAC;AAC/E,GAAG;AACH;AACA;AACA;AACA;AACA,EAAE,IAAI,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC;AACnC,MAAM,QAAQ;AACd,UAAU,CAAC,UAAU,KAAK,CAAC,CAAC,IAAI,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG;AAC1E,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC;AAClC,MAAM,UAAU,GAAG,KAAK,CAAC;AACzB,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;AACjD,EAAE,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC9B;AACA,EAAE,IAAI,IAAI,GAAG,GAAG,CAAC;AACjB;AACA;AACA;AACA,EAAE,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;AACrB;AACA,EAAE,IAAI,CAAC,iBAAiB,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;AACzD;AACA,IAAI,IAAI,UAAU,GAAG,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClD,IAAI,IAAI,UAAU,EAAE;AACpB,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACvB,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACvB,MAAM,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;AACpC,MAAM,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE;AACzB,QAAQ,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;AACpC,QAAQ,IAAI,gBAAgB,EAAE;AAC9B,UAAU,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,SAAS,MAAM;AACf,UAAU,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC7C,SAAS;AACT,OAAO,MAAM,IAAI,gBAAgB,EAAE;AACnC,QAAQ,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACzB,QAAQ,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AACxB,OAAO;AACP,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK;AACL,GAAG;AACH;AACA,EAAE,IAAI,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACzC,EAAE,IAAI,KAAK,EAAE;AACb,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACrB,IAAI,IAAI,UAAU,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;AACzC,IAAI,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;AAC/B,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACrC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,iBAAiB,IAAI,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,EAAE;AACxE,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC;AAC7C,IAAI,IAAI,OAAO,IAAI,EAAE,KAAK,IAAI,gBAAgB,CAAC,KAAK,CAAC,CAAC,EAAE;AACxD,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC5B,MAAM,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AAC1B,KAAK;AACL,GAAG;AACH;AACA,EAAE,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;AAC9B,OAAO,OAAO,KAAK,KAAK,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC;AACrB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrD,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,KAAK,OAAO,KAAK,CAAC,CAAC,IAAI,GAAG,GAAG,OAAO,CAAC;AACzD,QAAQ,OAAO,GAAG,GAAG,CAAC;AACtB,KAAK;AACL;AACA;AACA;AACA,IAAI,IAAI,IAAI,EAAE,MAAM,CAAC;AACrB,IAAI,IAAI,OAAO,KAAK,CAAC,CAAC,EAAE;AACxB;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;AACrC,KAAK,MAAM;AACX;AACA;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC9C,KAAK;AACL;AACA;AACA;AACA,IAAI,IAAI,MAAM,KAAK,CAAC,CAAC,EAAE;AACvB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AACnC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACpC,MAAM,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;AAC3C,KAAK;AACL;AACA;AACA,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC;AACjB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAClD,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,KAAK,OAAO,KAAK,CAAC,CAAC,IAAI,GAAG,GAAG,OAAO,CAAC;AACzD,QAAQ,OAAO,GAAG,GAAG,CAAC;AACtB,KAAK;AACL;AACA,IAAI,IAAI,OAAO,KAAK,CAAC,CAAC;AACtB,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;AAC5B;AACA,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;AACvC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC/B;AACA;AACA,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;AACrB;AACA;AACA;AACA,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;AACxC;AACA;AACA;AACA,IAAI,IAAI,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG;AAC/C,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC;AACxD;AACA;AACA,IAAI,IAAI,CAAC,YAAY,EAAE;AACvB,MAAM,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAChD,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AACxD,QAAQ,IAAI,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AAChC,QAAQ,IAAI,CAAC,IAAI,EAAE,SAAS;AAC5B,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAE;AAC9C,UAAU,IAAI,OAAO,GAAG,EAAE,CAAC;AAC3B,UAAU,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AACvD,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE;AAC1C;AACA;AACA;AACA,cAAc,OAAO,IAAI,GAAG,CAAC;AAC7B,aAAa,MAAM;AACnB,cAAc,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;AACjC,aAAa;AACb,WAAW;AACX;AACA,UAAU,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAE;AACnD,YAAY,IAAI,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACnD,YAAY,IAAI,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACjD,YAAY,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;AACpD,YAAY,IAAI,GAAG,EAAE;AACrB,cAAc,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,cAAc,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,aAAa;AACb,YAAY,IAAI,OAAO,CAAC,MAAM,EAAE;AAChC,cAAc,IAAI,GAAG,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;AACpD,aAAa;AACb,YAAY,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACjD,YAAY,MAAM;AAClB,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,cAAc,EAAE;AAC/C,MAAM,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACzB,KAAK,MAAM;AACX;AACA,MAAM,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;AAClD,KAAK;AACL;AACA,IAAI,IAAI,CAAC,YAAY,EAAE;AACvB;AACA;AACA;AACA;AACA,MAAM,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACtD,KAAK;AACL;AACA,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;AAC7C,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;AAChC,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;AACtB,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC;AAC3B;AACA;AACA;AACA,IAAI,IAAI,YAAY,EAAE;AACtB,MAAM,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACxE,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;AAC3B,QAAQ,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;AAC1B,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,EAAE,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;AACnC;AACA;AACA;AACA;AACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AACvD,MAAM,IAAI,EAAE,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;AAC7B,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;AACjC,QAAQ,SAAS;AACjB,MAAM,IAAI,GAAG,GAAG,kBAAkB,CAAC,EAAE,CAAC,CAAC;AACvC,MAAM,IAAI,GAAG,KAAK,EAAE,EAAE;AACtB,QAAQ,GAAG,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;AACzB,OAAO;AACP,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACtC,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,EAAE,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AAC/B,EAAE,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE;AACnB;AACA,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAClC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AAC/B,GAAG;AACH,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AAC7B,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,EAAE;AACjB,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAClC,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AACrC,IAAI,IAAI,gBAAgB,EAAE;AAC1B,MAAM,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACjD,KAAK;AACL,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAC7B,GAAG,MAAM,IAAI,gBAAgB,EAAE;AAC/B;AACA,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACrB,IAAI,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AACpB,GAAG;AACH,EAAE,IAAI,IAAI,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACjC,EAAE,IAAI,eAAe,CAAC,UAAU,CAAC;AACjC,MAAM,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AACvC,IAAI,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;AACxB,GAAG;AACH;AACA;AACA,EAAE,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,EAAE;AACpC,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;AAChC,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;AAC9B,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;AACtB,GAAG;AACH;AACA;AACA,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AAC5B,EAAE,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AACF;AACA;AACA,SAAS,SAAS,CAAC,GAAG,EAAE;AACxB;AACA;AACA;AACA;AACA,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC9C,EAAE,IAAI,EAAE,GAAG,YAAY,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACnE,EAAE,OAAO,GAAG,CAAC,MAAM,EAAE,CAAC;AACtB,CAAC;AACD;AACA,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,WAAW;AAClC,EAAE,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAC7B,EAAE,IAAI,IAAI,EAAE;AACZ,IAAI,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;AACpC,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACrC,IAAI,IAAI,IAAI,GAAG,CAAC;AAChB,GAAG;AACH;AACA,EAAE,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE;AACpC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE;AACpC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,EAAE;AAC5B,MAAM,IAAI,GAAG,KAAK;AAClB,MAAM,KAAK,GAAG,EAAE,CAAC;AACjB;AACA,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE;AACjB,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AAC5B,GAAG,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;AAC5B,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACpD,QAAQ,IAAI,CAAC,QAAQ;AACrB,QAAQ,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC;AACnC,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;AACnB,MAAM,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;AAC9B,KAAK;AACL,GAAG;AACH;AACA,EAAE,IAAI,IAAI,CAAC,KAAK;AAChB,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;AAC/B,MAAM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE;AACtC,IAAI,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9C,GAAG;AACH;AACA,EAAE,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,KAAK,KAAK,KAAK,GAAG,GAAG,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;AAC7D;AACA,EAAE,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,QAAQ,IAAI,GAAG,CAAC;AAC/D;AACA;AACA;AACA,EAAE,IAAI,IAAI,CAAC,OAAO;AAClB,MAAM,CAAC,CAAC,QAAQ,IAAI,eAAe,CAAC,QAAQ,CAAC,KAAK,IAAI,KAAK,KAAK,EAAE;AAClE,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC;AAC/B,IAAI,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,QAAQ,GAAG,GAAG,GAAG,QAAQ,CAAC;AAC1E,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE;AACpB,IAAI,IAAI,GAAG,EAAE,CAAC;AACd,GAAG;AACH;AACA,EAAE,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;AACxD,EAAE,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;AAChE;AACA,EAAE,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,KAAK,EAAE;AACvD,IAAI,OAAO,kBAAkB,CAAC,KAAK,CAAC,CAAC;AACrC,GAAG,CAAC,CAAC;AACL,EAAE,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACtC;AACA,EAAE,OAAO,QAAQ,GAAG,IAAI,GAAG,QAAQ,GAAG,MAAM,GAAG,IAAI,CAAC;AACpD,CAAC,CAAC;AACF;AACA,SAAS,UAAU,CAAC,MAAM,EAAE,QAAQ,EAAE;AACtC,EAAE,OAAO,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACzD,CAAC;AACD;AACA,GAAG,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,QAAQ,EAAE;AAC3C,EAAE,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;AACtE,CAAC,CAAC;AACF;AACA,SAAS,gBAAgB,CAAC,MAAM,EAAE,QAAQ,EAAE;AAC5C,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,QAAQ,CAAC;AAC/B,EAAE,OAAO,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC/D,CAAC;AACD;AACA,GAAG,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,QAAQ,EAAE;AACjD,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;AAC/B,IAAI,IAAI,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;AACxB,IAAI,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AACrC,IAAI,QAAQ,GAAG,GAAG,CAAC;AACnB,GAAG;AACH;AACA,EAAE,IAAI,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;AACzB,EAAE,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,EAAE,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;AAC5C,IAAI,IAAI,IAAI,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;AACzB,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9B,GAAG;AACH;AACA;AACA;AACA,EAAE,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;AAC9B;AACA;AACA,EAAE,IAAI,QAAQ,CAAC,IAAI,KAAK,EAAE,EAAE;AAC5B,IAAI,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;AAClC,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG;AACH;AACA;AACA,EAAE,IAAI,QAAQ,CAAC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;AAC9C;AACA,IAAI,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACtC,IAAI,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;AAC9C,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;AAC3B,MAAM,IAAI,IAAI,KAAK,UAAU;AAC7B,QAAQ,MAAM,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;AACtC,KAAK;AACL;AACA;AACA,IAAI,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC;AACxC,QAAQ,MAAM,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;AAC7C,MAAM,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,QAAQ,GAAG,GAAG,CAAC;AAC1C,KAAK;AACL;AACA,IAAI,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;AAClC,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG;AACH;AACA,EAAE,IAAI,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;AAC7C,MAAM,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACvC,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC5C,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACxB,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AAChC,OAAO;AACP,MAAM,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;AACpC,MAAM,OAAO,MAAM,CAAC;AACpB,KAAK;AACL;AACA,IAAI,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;AACxC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;AAChE,MAAM,IAAI,OAAO,GAAG,CAAC,QAAQ,CAAC,QAAQ,IAAI,EAAE,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;AACzD,MAAM,OAAO,OAAO,CAAC,MAAM,IAAI,EAAE,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AACnE,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC;AAC7C,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,GAAG,EAAE,CAAC;AACrD,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AACjD,MAAM,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AAClD,MAAM,MAAM,CAAC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1C,KAAK,MAAM;AACX,MAAM,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;AAC1C,KAAK;AACL,IAAI,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;AACpC,IAAI,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;AAClC,IAAI,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,IAAI,EAAE,CAAC;AACtC,IAAI,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;AAChC,IAAI,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC;AACzD,IAAI,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;AAChC;AACA,IAAI,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,MAAM,EAAE;AAC1C,MAAM,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,IAAI,EAAE,CAAC;AACpC,MAAM,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;AAClC,MAAM,MAAM,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1B,KAAK;AACL,IAAI,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,QAAQ,CAAC,OAAO,CAAC;AACxD,IAAI,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;AAClC,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG;AACH;AACA,EAAE,IAAI,WAAW,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;AAC1E,MAAM,QAAQ;AACd,UAAU,QAAQ,CAAC,IAAI;AACvB,UAAU,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG;AAClE,OAAO;AACP,MAAM,UAAU,IAAI,QAAQ,IAAI,WAAW;AAC3C,qBAAqB,MAAM,CAAC,IAAI,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACvD,MAAM,aAAa,GAAG,UAAU;AAChC,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE;AACnE,MAAM,OAAO,GAAG,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE;AACvE,MAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,SAAS,EAAE;AACjB,IAAI,MAAM,CAAC,QAAQ,GAAG,EAAE,CAAC;AACzB,IAAI,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;AACvB,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;AACrB,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC;AACtD,WAAW,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACxC,KAAK;AACL,IAAI,MAAM,CAAC,IAAI,GAAG,EAAE,CAAC;AACrB,IAAI,IAAI,QAAQ,CAAC,QAAQ,EAAE;AAC3B,MAAM,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC/B,MAAM,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;AAC3B,MAAM,IAAI,QAAQ,CAAC,IAAI,EAAE;AACzB,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC;AAC1D,aAAa,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC5C,OAAO;AACP,MAAM,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;AAC3B,KAAK;AACL,IAAI,UAAU,GAAG,UAAU,KAAK,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;AACxE,GAAG;AACH;AACA,EAAE,IAAI,QAAQ,EAAE;AAChB;AACA,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,KAAK,EAAE;AACxD,kBAAkB,QAAQ,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;AAC9C,IAAI,MAAM,CAAC,QAAQ,GAAG,CAAC,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,KAAK,EAAE;AACpE,sBAAsB,QAAQ,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC1D,IAAI,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;AACpC,IAAI,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;AAClC,IAAI,OAAO,GAAG,OAAO,CAAC;AACtB;AACA,GAAG,MAAM,IAAI,OAAO,CAAC,MAAM,EAAE;AAC7B;AACA;AACA,IAAI,IAAI,CAAC,OAAO,EAAE,OAAO,GAAG,EAAE,CAAC;AAC/B,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;AAClB,IAAI,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACtC,IAAI,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;AACpC,IAAI,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;AAClC,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AACvD;AACA;AACA;AACA,IAAI,IAAI,SAAS,EAAE;AACnB,MAAM,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;AACtD;AACA;AACA;AACA,MAAM,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AAClE,uBAAuB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AACtD,MAAM,IAAI,UAAU,EAAE;AACtB,QAAQ,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;AACzC,QAAQ,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;AAC3D,OAAO;AACP,KAAK;AACL,IAAI,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;AACpC,IAAI,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;AAClC;AACA,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;AACtE,MAAM,MAAM,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,GAAG,EAAE;AAC3D,qBAAqB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;AACzD,KAAK;AACL,IAAI,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;AAClC,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG;AACH;AACA,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;AACvB;AACA;AACA,IAAI,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC3B;AACA,IAAI,IAAI,MAAM,CAAC,MAAM,EAAE;AACvB,MAAM,MAAM,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;AACxC,KAAK,MAAM;AACX,MAAM,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;AACzB,KAAK;AACL,IAAI,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;AAClC,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG;AACH;AACA;AACA;AACA;AACA,EAAE,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,EAAE,IAAI,gBAAgB;AACtB,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC;AACzD,OAAO,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,IAAI,CAAC,IAAI,IAAI,KAAK,EAAE,CAAC,CAAC;AACtD;AACA;AACA;AACA,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;AACb,EAAE,KAAK,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AAC5C,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AACtB,IAAI,IAAI,IAAI,KAAK,GAAG,EAAE;AACtB,MAAM,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3B,KAAK,MAAM,IAAI,IAAI,KAAK,IAAI,EAAE;AAC9B,MAAM,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3B,MAAM,EAAE,EAAE,CAAC;AACX,KAAK,MAAM,IAAI,EAAE,EAAE;AACnB,MAAM,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3B,MAAM,EAAE,EAAE,CAAC;AACX,KAAK;AACL,GAAG;AACH;AACA;AACA,EAAE,IAAI,CAAC,UAAU,IAAI,CAAC,aAAa,EAAE;AACrC,IAAI,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE;AACrB,MAAM,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC5B,KAAK;AACL,GAAG;AACH;AACA,EAAE,IAAI,UAAU,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE;AACrC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE;AACrD,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AACxB,GAAG;AACH;AACA,EAAE,IAAI,gBAAgB,KAAK,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE;AAClE,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACrB,GAAG;AACH;AACA,EAAE,IAAI,UAAU,GAAG,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE;AACpC,OAAO,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;AACnD;AACA;AACA,EAAE,IAAI,SAAS,EAAE;AACjB,IAAI,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,GAAG,UAAU,GAAG,EAAE;AACnD,oCAAoC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC;AAC1E;AACA;AACA;AACA,IAAI,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AAChE,qBAAqB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AACpD,IAAI,IAAI,UAAU,EAAE;AACpB,MAAM,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;AACvC,MAAM,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;AACzD,KAAK;AACL,GAAG;AACH;AACA,EAAE,UAAU,GAAG,UAAU,KAAK,MAAM,CAAC,IAAI,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7D;AACA,EAAE,IAAI,UAAU,IAAI,CAAC,UAAU,EAAE;AACjC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AACxB,GAAG;AACH;AACA,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;AACvB,IAAI,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC3B,IAAI,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;AACvB,GAAG,MAAM;AACT,IAAI,MAAM,CAAC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACxC,GAAG;AACH;AACA;AACA,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;AACpE,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,GAAG,EAAE;AACzD,mBAAmB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;AACvD,GAAG;AACH,EAAE,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC;AAC7C,EAAE,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,QAAQ,CAAC,OAAO,CAAC;AACtD,EAAE,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;AAChC,EAAE,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AACF;AACA,GAAG,CAAC,SAAS,CAAC,SAAS,GAAG,WAAW;AACrC,EAAE,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACvB,EAAE,IAAI,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpC,EAAE,IAAI,IAAI,EAAE;AACZ,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACnB,IAAI,IAAI,IAAI,KAAK,GAAG,EAAE;AACtB,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACjC,KAAK;AACL,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;AACrD,GAAG;AACH,EAAE,IAAI,IAAI,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACjC,CAAC;;;;;;;;;;ACztBM,MAAM,QAAQ,GAAGC,oBAAQ,CAAC,WAAW,EAAE;;;;;;;SCE9B,gBAAgB,CAAC,MAAqB;IAClD,IAAI,QAAQ,GAAG,MAAM,CAAC,WAAW,KAAK,MAAM,GAAG,IAAI,GAAG,KAAK,CAAC;IAC5D,OAAO,GAAG,QAAQ,MAAM,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,OAAO,kBAAkB,CAAC;AAC7E,CAAC;SAEe,kBAAkB,CAAC,MAAqB;IACpD,IAAI,QAAQ,GAAG,MAAM,CAAC,WAAW,KAAK,MAAM,GAAG,IAAI,GAAG,KAAK,CAAC;IAC5D,OAAO,GAAG,QAAQ,MAAM,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,OAAO,cAAc,CAAC;AACzE,CAAC;AAED;;;;SAIsB,mBAAmB,CAAC,GAAW;;;QAEjD,IAAI,GAAG,GAAG,MAAMC,yBAAK,CAAC,IAAI,CAAC,GAAG,GAAG,WAAW,EAAE;YAC1C,OAAO,EAAE,KAAK;YACd,EAAE,EAAE,CAAC;YACL,MAAM,EAAE,mBAAmB;SAC9B,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;KAC9C;CAAA;SAEe,uBAAuB,CAAC,MAAqB;IACzD,OAAO,IAAIC,qBAAS,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;AAC7F,CAAC;AACD;;;SAGgB,iBAAiB,CAAC,aAA4B;IAC1D,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE;QAC5B,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;KAC9E;IAED,OAAOD,yBAAK,CAAC,MAAM,CAAC;QAChB,OAAO,EAAE,aAAa,CAAC,WAAW;QAClC,eAAe,EAAE,KAAK;QACtB,OAAO,EAAE;YACL,cAAc,EAAE,kBAAkB;SACrC;KACJ,CAAC,CAAC;AACP,CAAC;AAED;;;;SAIsB,iBAAiB,CAAC,MAAqB;;QACzD,IAAI,QAAQ,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC;QAC/C,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QAEnD,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;;QAG9B,IAAI;YACA,MAAM,OAAO,CAAC,YAAY,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC;;SAEf;QAAC,OAAO,CAAC,EAAE,GAAE;QAEd,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;QAEpD,IAAI;YACA,MAAM,OAAO,CAAC,YAAY,EAAE,CAAC;SAChC;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACzC;QAED,OAAO,KAAK,CAAC;KAChB;;;ACxDM,MAAM,SAAS,GAAc,uBAAuB,CAAC,aAAa,CAAC,CAAC;AAEpE,MAAM,MAAM,GAAW,SAAS,CAAC,MAAM,EAAE,CAAC;AAC1C,MAAM,MAAM,GAAW,SAAS,CAAC,MAAM,EAAE,CAAC;AAC1C,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC;AACT,SAAS,CAAC,IAAI,GAAG;AAEjD,SAAS,kBAAkB,CAAC,GAAW,EAAE,WAAW,GAAG,KAAK;IACxD,OAAO,IAAIE,wBAAI,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,EAAE;QACxC,OAAO,EAAE,KAAK;QACd,eAAe,EAAE,WAAW;KAC/B,CAAC,CAAC;AACP,CAAC;AAED,MAAM,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC/B,MAAM,IAAI,GAAG,IAAIA,wBAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;AAExD,IAAI,YAAY,GAAyB,IAAI,CAAC;AAC9C,IAAI,aAAa,GAAkB,aAAa,CAAC;AAExD;;;SAGgB,aAAa;IACzB,OAAO,aAAa,CAAC,UAAU,CAAC;AACpC,CAAC;AAED;;;;SAIsB,kBAAkB,CAAC,MAAqB;;QAC1D,IAAI,WAAW,GAAG,MAAM,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAClD,aAAa,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;KACtC;CAAA;AAED;;;;;;SAMgB,aAAa,CAAC,IAAmB,EAAE,WAAW,GAAG,IAAI;IACjE,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACjE,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAEvC,IAAI,WAAW,EAAE;QACb,SAAS,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;KAC9D;SAAM;QACH,SAAS,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;KACpD;IAED,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC1C,MAAM,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;IAE/B,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC1C,MAAM,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;IAE/B,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC1C,MAAM,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;IAE/B,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAEnC,IAAI,IAAI,CAAC,WAAW,EAAE;QAClB,YAAY,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;KAC1C;SAAM;QACH,YAAY,GAAG,IAAI,CAAC;KACvB;IAED,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;IAC3B,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;IAE1D,aAAa,GAAG,IAAI,CAAC;AACzB,CAAC;AAED;;;;SAIsB,gBAAgB,CAACC,KAAW;;QAC9C,IAAI,MAAM,GAAGC,GAAG,CAAC,KAAK,CAACD,KAAG,CAAC,CAAC;QAC5B,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;QAE1B,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,QAAQ;YAAE,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;QAE1E,IAAI,CAAC,OAAO,EAAE;YACV,OAAO,GAAG,MAAM,CAAC,QAAQ,KAAK,OAAO,GAAG,IAAI,GAAG,KAAK,CAAC;SACxD;;QAGD,IAAI,KAAK,GAAG,MAAM,mBAAmB,CAACA,KAAG,CAAC,CAAC;QAC3C,IAAI,QAAQ,GAAwB,MAAM,CAAC,QAAQ,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;QAEnF,IAAI,UAAU,GAAG,IAAIF,cAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;;QAEpF,IAAI,aAAa,GAAG,IAAIC,wBAAI,CAAC,MAAM,CAAC,IAAI,GAAG,cAAc,CAAC,CAAC;QAE3D,IAAI,OAAO,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;QAChC,IAAI,IAAI,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC;QAE/B,IAAI,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,eAAe,GAAG,aAAa,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;QACrD,IAAI,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE9C,IAAI,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC,CAAC;QAE7F,IAAI,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,MAAM,GAAG,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAI,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAE3B,IAAI,MAAM,GAAkB;YACxB,MAAM,EAAEC,KAAG;YACX,WAAW,EAAE,QAAQ;YACrB,KAAK,EAAE,MAAM,CAAC,QAAQ;YACtB,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC;YAC1B,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,GAAG;YACb,QAAQ,EAAE,GAAG;YACb,QAAQ,EAAE,GAAG;YACb,MAAM,EAAE,MAAM;YACd,UAAU,EAAE,UAAU;YACtB,IAAI,MAAM;gBACN,OAAO;oBACH,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC;oBAChB,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC;oBAChB,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC;iBACnB,CAAC;aACL;SACJ,CAAC;QAEF,OAAO,MAAM,CAAC;KACjB;;;ACvJD,MAAM,mBAAmB,GAAG,IAAI,CAAC;MAEZ,oBAAoB;IAOrC,YAAY,KAAa;QANzB,gBAAW,GAAG,KAAK,CAAC;QAGpB,YAAO,GAAiB,EAAE,CAAC;QAIvB,IAAI,CAAC,YAAY,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACvD,IAAI,CAAC,MAAM,GAAG,IAAIE,4BAAQ,CAAC,KAAK,EAAE;YAC9B,MAAM,EAAE;gBACJ,IAAI,CAAC,MAAM,EAAE,CAAC;aACjB;YACD,OAAO,EAAE;gBACL,IAAI,CAAC,OAAO,EAAE,CAAC;aAClB;YACD,SAAS,EAAE;gBACP,IAAI,CAAC,SAAS,EAAE,CAAC;aACpB;YACD,OAAO,EAAE;gBACL,IAAI,CAAC,OAAO,EAAE,CAAC;aAClB;SACJ,CAAC,CAAC;KACN;;;;;IAMD,WAAW,CAAC,MAAkB;QAC1B,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC/B,OAAO;SACV;QACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE1B,MAAM,CAAC,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC/C,IAAI,CAAC,qBAAqB,EAAE,CAAC;KAChC;IAED,qBAAqB;QACjB,IAAI,CAAC,qBAAqB,EAAE,CAAC;KAChC;IAED,YAAY,CAAC,CAAa;QACtB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;YAC3B,OAAO;SACV;QAED,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;KAC9C;IAED,WAAW,CAAC,KAAa;QACrB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAEpB,IAAI,CAAC,MAAM,GAAG,IAAIA,4BAAQ,CAAC,KAAK,EAAE;YAC9B,MAAM,EAAE;gBACJ,IAAI,CAAC,MAAM,EAAE,CAAC;aACjB;YACD,OAAO,EAAE;gBACL,IAAI,CAAC,OAAO,EAAE,CAAC;aAClB;YACD,SAAS,EAAE;gBACP,IAAI,CAAC,SAAS,EAAE,CAAC;aACpB;YACD,OAAO,EAAE;gBACL,IAAI,CAAC,OAAO,EAAE,CAAC;aAClB;SACJ,CAAC,CAAC;KACN;;IAGD,WAAW;QACP,IAAI,MAAM,GAAG,IAAIC,kBAAM,EAAE,CAAC;QAC1B,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC3B;;;;;IAMD,qBAAqB;QACjB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnB,OAAO;SACV;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAE3B,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACnB,IAAI,aAAa,GAAG,CAAC,CAAC,qBAAqB,EAAE,CAAC;YAC9C,IAAI,QAAQ,GAAG,aAAa,CAAC,MAAM,CAAC;YACpC,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,GAAG,mBAAmB,CAAC,CAAC;YAC7D,IAAI,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC/C,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;SAC3B;QAED,IAAI,MAAM,GAAG,IAAIA,kBAAM,EAAE,CAAC;QAC1B,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;;QAIxB,MAAM,YAAY,GAAG,GAAG,CAAC;QACzB,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,OAAO,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE;YACzB,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,GAAG,YAAY,CAAC,CAAC;YACrD,IAAI,QAAQ,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC3B,KAAK,IAAI,YAAY,CAAC;SACzB;KACJ;IAEO,oBAAoB;QACxB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACnB,CAAC,CAAC,YAAY,EAAE,CAAC;SACpB,CAAC,CAAC;KACN;IAEO,MAAM;QACV,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,qBAAqB,EAAE,CAAC;KAChC;IAEO,SAAS;QACb,IAAI,CAAC,oBAAoB,EAAE,CAAC;KAC/B;IAEO,OAAO;QACX,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;KAC5B;IAEO,OAAO,MAAK;;;AC1IxB,MAAM,wBAAwB,GAAG,IAAI,CAAC;MAEjB,oBAAoB;IAKrC,YAAY,KAAa;QAFzB,YAAO,GAAiB,EAAE,CAAC;QAGvB,IAAI,QAAQ,GAAG,IAAIC,aAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAC7D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAI,CAAC,YAAY,EAAE,CAAC;KACvB;IAED,WAAW,CAAC,KAAa;QACrB,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,QAAQ,GAAG,IAAIA,aAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAC7D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAI,CAAC,YAAY,EAAE,CAAC;KACvB;IAED,WAAW,CAAC,MAAkB;QAC1B,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC/B,OAAO;SACV;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC7B;IAED,YAAY,CAAC,MAAkB;QAC3B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAChC,OAAO;SACV;QAED,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACzC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;KACjC;IAEK,iBAAiB;;YACnB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,GAAG,SAAQ,CAAC;YAC5C,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;SACjC;KAAA;IAEK,SAAS;;;YAEX,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC/B,IAAI,UAAU,GAAG,IAAIA,aAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpE,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;SAC9B;KAAA;IAEO,YAAY;QAChB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE7B,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,OAAO,EAAE,CAAC;SAClB,CAAC,CAAC;;QAGH,IAAI,aAAa,GAAG,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC;QAC/C,IAAI,cAAc,GAAG,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC;QAEjD,QAAQ,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAO;YACjC,IAAI,aAAa;gBAAE,aAAa,CAAC,EAAE,CAAC,CAAC;SACxC,CAAC;QAEF,QAAQ,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,EAAO;YAClC,IAAI,cAAc;gBAAE,cAAc,CAAC,EAAE,CAAC,CAAC;YAEvC,UAAU,CAAC;gBACP,IAAI,CAAC,SAAS,EAAE,CAAC;aACpB,EAAE,wBAAwB,CAAC,CAAC;SAChC,CAAC;KACL;IAEO,eAAe;QACnB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAC5C;IAEO,OAAO;;QAEX,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACnB,CAAC,CAAC,kBAAkB,EAAE,CAAC;SAC1B,CAAC,CAAC;KACN;;;MClFgB,iBAAiB;IAIlC,YAAY,WAAmB,EAAE,WAAmB;QAChD,IAAI,CAAC,WAAW,GAAG,IAAI,oBAAoB,CAAC,WAAW,CAAC,CAAC;QACzD,IAAI,CAAC,WAAW,GAAG,IAAI,oBAAoB,CAAC,WAAW,CAAC,CAAC;KAC5D;IAED,OAAO,iBAAiB;QACpB,OAAO,iBAAiB,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;KAC7D;IAED,OAAO,iBAAiB,CAAC,MAAqB;QAC1C,IAAI,GAAG,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,GAAG,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACnC,OAAO,IAAI,iBAAiB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;KAC1C;IAEM,YAAY,CAAC,WAAmB,EAAE,WAAmB;QACxD,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC1C,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;KAC7C;IAEM,UAAU,CAAC,MAAqB;QACnC,IAAI,GAAG,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,GAAG,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACnC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;KAC/B;IAEM,WAAW,CAAC,MAAkB;QACjC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;KACxC;IAEM,YAAY,CAAC,MAAkB;QAClC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACtC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;KACzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CE,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;AACrD,MAAM,eAAe,GAAG,IAAI,KAAK,CAAC,yBAAyB,CAAC;;MCO9C,UAAU;IAS3B,YAAY,IAAoB;QAC5B,IAAI,CAAC,IAAI,GAAGC,6BAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,MAAM,GAAGA,6BAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;QAGjB,IAAI,CAAC,QAAQ,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KACrE;IAED,MAAM;QACF,OAAO,IAAI,CAAC,IAAI,CAAC;KACpB;IAED,OAAa,OAAO,CAAC,OAAe;;;YAEhC,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;;YAG5D,IAAI,IAAI,GAAGA,6BAAS,CAAC,QAAQ,CAAC,MAAM,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;YACpE,IAAI,MAAM,GAAGA,6BAAS,CAAC,QAAQ,CAAC,MAAM,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;YACxE,IAAI,QAAQ,GAAG,QAAQ,CAAC,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;YAElE,IAAI,CAAC,aAAa,EAAE;gBAChB,MAAM,UAAU,CAAC;aACpB;YAED,OAAO;gBACH,IAAI;gBACJ,MAAM;gBACN,QAAQ;gBACR,OAAO;gBACP,OAAO,EAAE,aAAa,CAAC,UAAU;aACpC,CAAC;SACL;KAAA;IAEK,SAAS,CAAC,OAAe;;YAC3B,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;YAChE,OAAO,IAAIC,cAAE,CAAC,GAAG,CAAC,CAAC;SACtB;KAAA;;;ACvDE,IAAI,UAAU,GAAe,EAAE,CAAC;SAEvB,aAAa;IACzB,yBACO,UAAU,EACf;AACN,CAAC;AAED;;;SAGgB,cAAc;IAC1B,UAAU,GAAG,EAAE,CAAC;AACpB,CAAC;AAED;;;;AAIA,SAAe,aAAa,CAAC,OAAe;;QACxC,IAAI,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,QAAQ,EAAE;YACV,OAAO,QAAQ,CAAC;SACnB;QAED,IAAI;YACA,IAAI,IAAI,GAAmB,MAAM,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC7D,IAAI,KAAK,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;YAEjC,UAAU,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;YAC5B,OAAO,KAAK,CAAC;SAChB;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SACpD;KACJ;CAAA;SAkBqB,oBAAoB,CAAC,OAAe;;QACtD,IAAI;YACA,IAAI,IAAI,GAAmB,MAAM,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC7D,OAAO,IAAI,CAAC;SACf;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,kBAAkB,OAAO,kBAAkB,CAAC,CAAC;SAChE;KACJ;CAAA;SAEqB,aAAa,CAAC,OAAe;;QAC/C,IAAI,SAAS,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;QACpC,IAAI,SAAS,EAAE;YACX,OAAO,SAAS,CAAC;SACpB;aAAM;YACH,OAAO,MAAM,aAAa,CAAC,OAAO,CAAC,CAAC;SACvC;KACJ;;;SCjEe,UAAU,CAAC,IAAmB;IAC1C,aAAa,CAAC,IAAI,CAAC,CAAC;IACpB,cAAc,EAAE,CAAC;AACrB,CAAC;AAED;;;;SAIsB,eAAe,CAAC,IAAmB;;QACrD,MAAM,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC/B,cAAc,EAAE,CAAC;KACpB;CAAA;SAEe,aAAa,CAAC,aAA4B;IACtD,OAAO,aAAa,CAAC,SAAS,KAAK,aAAa,CAAC,SAAS,CAAC;AAC/D,CAAC;SAEe,gBAAgB,CAAC,aAA4B;IACzD,OAAO,aAAa,CAAC,SAAS,KAAK,aAAa,CAAC,SAAS,CAAC;AAC/D,CAAC;SAEe,cAAc,CAAC,aAA4B;IACvD,OAAO,aAAa,CAAC,SAAS,KAAK,cAAc,CAAC,SAAS,CAAC;AAChE,CAAC;AAED;AACA,UAAU,CAAC,aAAa,CAAC,CAAC;SAEV,cAAc;IAC1B,OAAO,aAAa,CAAC,MAAM,CAAC;AAChC,CAAC;SAEe,sBAAsB;IAClC,OAAO,aAAa,CAAC;AACzB;;;;;;;;;;;;;;;;ACpCA,IAAI,UAAU,GAAgB,EAAE,CAAC;SAEjB,uBAAuB,CAAC,OAAe;IACnD,IAAI,OAAO,UAAU,CAAC,OAAO,CAAC,KAAK,WAAW;QAAE,MAAM,IAAI,KAAK,CAAC,YAAY,OAAO,gBAAgB,CAAC,CAAC;IACrG,OAAO,UAAU,CAAC,OAAO,CAAC,CAAC;AAC/B,CAAC;AAED;;;;SAIsB,mBAAmB,CAAC,OAAe;;QACrD,IAAI,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;QAChC,IAAI,KAAK,EAAE;YACP,OAAO,KAAK,CAAC;SAChB;QAED,IAAI;YACA,IAAI,GAAG,GAAG,MAAM,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YACpD,IAAI,KAAK,mCACF,GAAG,KACN,OAAO,EAAE,OAAO,EAChB,IAAI,EAAED,6BAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAClC,MAAM,EAAEA,6BAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,GACzC,CAAC;YAEF,UAAU,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;YAC5B,OAAO,KAAK,CAAC;SAChB;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,SAAS,OAAO,kBAAkB,CAAC,CAAC;SACvD;KACJ;;;;;;;;;;;;;ACpCD;AACA;AACA;AAEO,MAAM,gBAAgB,GAAW,MAAM,CAAC;AACxC,MAAM,iBAAiB,GAAW,SAAS,gBAAgB,MAAM,CAAC;AAClE,MAAM,gBAAgB,GAAW,cAAc,CAAC;AAChD,MAAM,uBAAuB,GAAG,gBAAgB,GAAG,MAAM,CAAC;AAE1D,MAAM,WAAW,GAAW,EAAE,CAAC;AAC/B,MAAM,SAAS,GAAW,EAAE,CAAC;AAC7B,MAAM,UAAU,GAAW,SAAS,GAAG,WAAW,CAAC;AAEnD,MAAM,uBAAuB,GAAG,KAAM,CAAC;AACvC,MAAM,iBAAiB,GAAG,OAAO;;MCPnB,iBAAiB;IAKlC,YAAY,SAAiB;QAJ7B,YAAO,GAAG,IAAIC,cAAE,CAAC,CAAC,CAAC,CAAC;QAKhB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,GAAGC,8BAAe,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACpE;IAED,UAAU;QACN,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;IAED,UAAU;QACN,OAAOH,aAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAChD;IAED,gBAAgB;QACZ,IAAI,OAAO,GAAG,IAAII,gBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC;QACtD,IAAI,IAAI,GAAG,OAAO,CAAC,oBAAoB,CAACC,kBAAe,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAC9E,OAAO,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;KAClE;IAEK,aAAa;;YACf,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAClD,IAAI,CAAC,OAAO,GAAG,IAAIH,cAAE,CAAC,GAAG,CAAC,CAAC;YAC3B,OAAO,IAAI,CAAC,OAAO,CAAC;SACvB;KAAA;;;MCtBgB,SAAU,SAAQ,iBAAiB;IAGpD,YAAY,GAAW;QACnB,IAAI,MAAM,GAAGI,8BAAe,CAAC,GAAG,CAAC,CAAC;QAClC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEd,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;KACzB;IAEO,iBAAiB;QACrB,OAAO,aAAa,GAAG,QAAQ,CAAC,UAAU,CAACD,kBAAe,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;KACrF;IAED,WAAW;QACP,IAAI,QAAQ,GAAG,IAAIE,YAAW,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC;QACxD,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAC7C,OAAO,QAAQ,CAAC;KACnB;IAED,UAAU;QACN,IAAI,QAAQ,GAAG,IAAIA,YAAW,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC;QACxD,OAAO,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;KACvD;IAED,OAAO,CAAC,EAAe;QACnB,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACnC;IAED,KAAK,CAAC,EAAiB;QACnB,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;KACtC;IAED,gBAAgB;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KAC1C;;;AC5CE,MAAM,eAAe,GAAG,CAAC,OAAe;IAC3C,OAAO,gBAAgB,CAAC,OAAO,CAAC,IAAI,gBAAgB,CAAC,OAAO,CAAC,IAAI,kBAAkB,CAAC,OAAO,CAAC,CAAC;AACjG,CAAC,CAAC;SAEc,gBAAgB,CAAC,OAAe;IAC5C,IAAI;QACA,IAAI,IAAI,GAAG,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QAC/C,IAAI,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QACxB,OAAO,IAAI,CAAC;KACf;IAAC,OAAO,KAAK,EAAE;QACZ,OAAO,KAAK,CAAC;KAChB;AACL,CAAC;SAEe,gBAAgB,CAAC,OAAe;IAC5C,IAAI;QACA,IAAI,IAAI,GAAG,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QAC/C,IAAI,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QACxB,OAAO,IAAI,CAAC;KACf;IAAC,OAAO,KAAK,EAAE;QACZ,OAAO,KAAK,CAAC;KAChB;AACL,CAAC;SAEe,kBAAkB,CAAC,OAAe;IAC9C,OAAOZ,wBAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACzC,CAAC;AAED;;;;SAIgB,aAAa,CAAC,OAAe;IACzC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;QAC3B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC9C;IACD,OAAO,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC;AAED;;;;SAIgB,eAAe,CAAC,OAAe;IAC3C,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;QAC3B,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;KACvC;IAED,IAAIA,wBAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;QAC/B,OAAO,GAAG,CAAC;KACd;SAAM;QACH,OAAO,OAAO,CAAC,CAAC,CAAgB,CAAC;KACpC;AACL;;;;;;;;;;;;AClCAa,uBAAG,CAAC,SAAS,CAAC,cAAc,GAAG,UAAU,UAAkB,CAAC;IACxD,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACrC,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChC,IAAI,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IAE1D,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACpB,OAAO,QAAQ,CAAC;KACnB;SAAM;QACH,IAAI,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;QAG5B,IAAI,QAAQ,GAAG,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC5D,OAAO,QAAQ,KAAK,GAAG,EAAE;YACrB,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAClE,QAAQ,GAAG,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAC3D;QAED,IAAI,OAAO,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO;YAAE,OAAO,QAAQ,CAAC;QAC9B,OAAO,GAAG,QAAQ,IAAI,OAAO,EAAE,CAAC;KACnC;AACL,CAAC,CAAC;AAEF;;;;SAIgB,OAAO,CAAC,GAAO,EAAE,YAAY,GAAG,CAAC;IAC7C,OAAO,IAAIA,uBAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC;AACnE,CAAC;AAED;;;;;SAKgB,QAAQ,CAAC,MAAU;IAC/B,IAAI,IAAI,GAAG,IAAIN,cAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAIA,cAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC5B,CAAC;SAEe,QAAQ,CAAC,MAAU;IAC/B,IAAI,IAAI,GAAG,IAAIA,cAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAIA,cAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC5B,CAAC;SAEe,QAAQ,CAAC,MAAU;IAC/B,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC5B,CAAC;SAEe,YAAY,CAAC,GAAO;IAChC,OAAO,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAC3B,CAAC;SAEe,YAAY,CAAC,GAAO;IAChC,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;AAC7B,CAAC;SAEe,YAAY,CAAC,GAAO;IAChC,OAAO,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AAC5B,CAAC;AAED;;;;;;;;;;;;SAYgB,SAAS,CAAC,GAAO;IAC7B,OAAO,gBAAgB,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AACrC,CAAC;AAED;;;;;SAKgB,SAAS,CAAC,GAAO;IAC7B,OAAO,gBAAgB,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AACpC,CAAC;AAED;;;;;SAKgB,SAAS,CAAC,GAAO;IAC7B,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;AAC1B,CAAC;AAED;;;;;SAKgB,UAAU,CAAC,GAAoB,EAAE,QAAgB;IAC7D,IAAI,MAAM,GAAGM,uBAAG,CAAC,GAAG,CAAC,CAAC;IACtB,IAAI,IAAI,GAAGA,uBAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACjC,IAAI,KAAK,GAAG,IAAIN,cAAE,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,OAAO,KAAK,CAAC;AACjB,CAAC;SAEe,eAAe,CAAC,GAAoB;IAChD,OAAO,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAC9B,CAAC;SAEe,eAAe,CAAC,GAAoB;IAChD,OAAO,eAAe,CAAC,GAAG,CAAC,CAAC;AAChC,CAAC;SAEe,eAAe,CAAC,GAAoB;IAChD,OAAO,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AAC/B,CAAC;AAED;;;;;;;;;;;;;SAagB,gBAAgB,CAAC,GAAO,EAAE,QAAQ,GAAG,CAAC;IAClD,IAAI,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IACpC,OAAO,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAC/C,CAAC;SAEe,iBAAiB,CAAC,MAAW,EAAE,WAAmB,CAAC;IAC/D,IAAI,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACxC,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChC,IAAI,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IAE1D,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACpB,OAAO,QAAQ,CAAC;KACnB;SAAM;QACH,IAAI,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;QAG5B,IAAI,QAAQ,GAAG,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC5D,OAAO,QAAQ,KAAK,GAAG,EAAE;YACrB,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAClE,QAAQ,GAAG,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAC3D;QAED,IAAI,OAAO,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO;YAAE,OAAO,QAAQ,CAAC;QAC9B,OAAO,GAAG,QAAQ,IAAI,OAAO,EAAE,CAAC;KACnC;AACL,CAAC;AAED,MAAM,aAAa,GAAG,iFAAiF,CAAC;AAExG;;;;;;;;SAQsB,YAAY;;QAC9B,MAAM,GAAG,GAAG,MAAMT,yBAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC3C,OAAO,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC;KACtC;CAAA;AAED;;;;;;SAMgB,cAAc,CAAC,OAAe;IAC1C,OAAO,eAAe,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC;AAC7C,CAAC;SAEe,aAAa,CAAC,MAAc;IACxC,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACvC,IAAI,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9B,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACtC,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,kCAAkC,OAAO,GAAG,MAAM,EAAE,EAAE,MAAM,CAAC,CAAC;IACvF,OAAOgB,8BAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;AACxD,CAAC;SAEqB,OAAO,CAAC,IAAY,EAAE,QAAQ,GAAG,EAAE;;QACrD,IAAI,QAAQ,IAAI,CAAC,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;SAC9B;QACD,IAAI,IAA2B,CAAC;QAEhC,IAAI;YACA,IAAI,IAAI,MAAM,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAA0B,CAAC;SACpE;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;SACxD;QAED,IAAI,MAAqB,CAAC;QAC1B,IAAI,MAAM,CAAC;QACX,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC1B,MAAM,GAAG,IAAqB,CAAC;SAClC;aAAM;YACH,MAAM,GAAG,IAAI,CAAC,MAAuB,CAAC;YACtC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;SACxB;QAED,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,YAAY,EAAE;YACjD,OAAO,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO;gBAC7B,UAAU,CAAC;oBACP,OAAO,CAAC,MAAM,OAAO,CAAC,IAAI,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC9C,CAAA,EAAE,IAAI,CAAC,CAAC;aACZ,CAAC,CAAC;;SAEN;aAAM,IAAI,MAAM,KAAK,UAAU,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;SAC3B;aAAM,IAAI,MAAM,KAAK,UAAU,EAAE;YAC9B,OAAO,IAAI,CAAC;SACf;QAED,OAAO,IAAI,CAAC;KACf;CAAA;SAEqB,OAAO,CAAC,IAAY,EAAE,QAAQ,GAAG,EAAE;;QACrD,IAAI,QAAQ,IAAI,CAAC,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;SAC9B;QACD,IAAI,IAAgC,CAAC;QAErC,IAAI;YACA,IAAI,IAAI,MAAM,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAA+B,CAAC;SACzE;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;SACxD;QAED,IAAI,MAA0B,CAAC;QAC/B,IAAI,MAAM,CAAC;QACX,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC1B,MAAM,GAAG,IAA0B,CAAC;SACvC;aAAM;YACH,MAAM,GAAG,IAAI,CAAC,MAA4B,CAAC;YAC3C,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;SACxB;QAED,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,YAAY,EAAE;YACjD,OAAO,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO;gBAC7B,UAAU,CAAC;oBACP,OAAO,CAAC,MAAM,OAAO,CAAC,IAAI,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC9C,CAAA,EAAE,IAAI,CAAC,CAAC;aACZ,CAAC,CAAC;;SAEN;aAAM,IAAI,MAAM,KAAK,SAAS,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;SAC3B;aAAM,IAAI,MAAM,KAAK,WAAW,EAAE;YAC/B,OAAO,IAAI,CAAC;SACf;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SAC3C;KACJ;CAAA;SAEqB,SAAS,CAAC,MAAc,EAAE,QAAQ,GAAG,EAAE;;QACzD,IAAI,QAAQ,IAAI,CAAC,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;SAC9B;QAED,IAAI,OAAO,CAAC;QAEZ,IAAI;YACA,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;SAC1D;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACzD;QAED,IAAI,CAAC,OAAO,EAAE;YACV,OAAO,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO;gBAC7B,UAAU,CAAC;oBACP,OAAO,CAAC,MAAM,SAAS,CAAC,MAAM,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClD,CAAA,EAAE,IAAI,CAAC,CAAC;aACZ,CAAC,CAAC;SACN;aAAM;YACH,IAAI,OAAO,CAAC,MAAM,EAAE;gBAChB,OAAO,MAAM,CAAC;aACjB;iBAAM;gBACH,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;aAC5C;SACJ;KACJ;CAAA;SAEqB,OAAO,CAAC,IAAY,EAAE,QAAQ,GAAG,EAAE;;QACrD,IAAI,QAAQ,IAAI,CAAC,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;SAC9B;QAED,IAAI,IAA8B,CAAC;QACnC,IAAI;YACA,IAAI,IAAI,MAAM,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAA6B,CAAC;SAC7E;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;SACxD;QAED,IAAI,MAAwB,CAAC;QAC7B,IAAI,MAAM,CAAC;QACX,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC1B,MAAM,GAAG,IAAwB,CAAC;SACrC;aAAM;YACH,MAAM,GAAG,IAAI,CAAC,MAA0B,CAAC;YACzC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;SACxB;QAED,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,YAAY,EAAE;YACjD,OAAO,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO;gBAC7B,UAAU,CAAC;oBACP,OAAO,CAAC,MAAM,OAAO,CAAC,IAAI,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC9C,CAAA,EAAE,IAAI,CAAC,CAAC;aACZ,CAAC,CAAC;;SAEN;aAAM,IAAI,MAAM,KAAK,SAAS,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;SAC3B;aAAM,IAAI,MAAM,KAAK,UAAU,EAAE;YAC9B,OAAO,IAAI,CAAC;SACf;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SAC3C;KACJ;CAAA;AAED,IAAI,YAAY,GAAGC,oBAAY,CAAC,WAAW,EAAE,CAAC;SAE9B,eAAe,CAAC,UAAkB;IAC9C,IAAI,OAAO,GAAGL,kBAAe,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IACzD,OAAO,GAAGA,kBAAe,CAAC,MAAM,CAAC,CAAC,IAAIA,kBAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IAEzF,IAAI,MAAM,GAAG,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC7C,IAAI,EAAE,GAAoB,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC3D,IAAI,WAAW,GAAgB,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAE/D,OAAO,WAAW,CAAC;AACvB,CAAC;AAED;;;SAGgB,SAAS;IACrB,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;AAC7B,CAAC;AAED;;;SAGgB,SAAS;IACrB,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;AAC7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SCjWsB,sBAAsB,CACxC,IAAY,EACZ,MAAc,EACd,QAAgB,EAChB,SAAmB,EACnB,UAAkB,EAClB,UAAkB,EAClB,OAAgB;;QAEhB,IAAI,aAAa,GAAG,SAAS,CAAC;QAC9B,IAAI,aAAa,GAAG,UAAU,CAAC;QAC/B,IAAI,aAAa,GAAG,UAAU,CAAC;QAE/B,MAAM,UAAU,GAAgB,EAAE,CAAC;;QAGnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;YAC/B,MAAM,SAAS,GAAc,IAAIM,aAAS,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;YAC/D,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC9B;QAED,IAAI,UAAU,GAAkB,MAAM,MAAM,CAAC,qBAAqB,CAC9D,OAAO,EACP,aAAa,EACb,CAAC,aAAa,CAAC,EACf,UAAU,EACV,IAAI,EACJ,MAAM,CACT,CAAC;QACF,OAAO,UAAU,CAAC;KACrB;CAAA;SAEqB,cAAc,CAChC,QAAiB,EACjB,OAAoB,EACpB,QAAgB,EAChB,YAAoB,EACpB,aAAqB,EACrB,aAAuB,EACvB,OAAgB;;QAEhB,IAAI,OAAO,GAAG,QAAQ,CAAC,YAAY,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;QACvD,IAAI,MAAM,GAAG,EAAE,CAAC;QAEhB,IAAI,eAAe,GAAG,aAAa,CAAC;QAEpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;YAC/B,IAAI,KAAK,GAAG,IAAIC,qBAAY,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtB;QAED,IAAI,OAAO,GAAI,QAAQ,CAAC,SAAS,EAAoB,CAAC,UAAU,EAAE,CAAC;QAEnE,IAAI,MAAM,GAAG,MAAM,MAAM,CAAC,oBAAoB,CAC1C,OAAO,EACP,MAAM,EACN,eAAe,EACf,CAAC,aAAa,CAAC,EACf,QAAQ,CAAC,SAAS,EAAE,EACpB,OAAO,EACP,OAAO,CACV,CAAC;QACF,OAAO,MAAM,CAAC;KACjB;CAAA;SAEqB,yBAAyB,CAC3C,gBAAoC,EACpC,OAAmB,EACnB,aAAuB,EACvB,SAAiB,EACjB,MAAU;AACV,mBAA2B;;QAE3B,IAAI,kBAAkB,CAAC;QACvB,QAAQ,gBAAgB;YACpB,KAAK,GAAG;gBACJ,kBAAkB,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;gBAC9C,MAAM;YACV,KAAK,GAAG;gBACJ,kBAAkB,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;gBAC9C,MAAM;SACb;QAED,OAAO,MAAM,MAAM,CAAC,aAAa,CAAC,OAAqB,EAAE,MAAM,EAAE,kBAAkB,EAAE,CAAC,SAAS,CAAC,EAAE,aAAa,EAAE;YAC7G,mBAAmB;SACtB,CAAC,CAAC;KACN;CAAA;SAEqB,8BAA8B,CAChD,OAAwB,EACxB,aAAuB,EACvB,SAAiB,EACjB,MAAU;AACV,mBAA2B;;QAE3B,IAAI,kBAAkB,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;QAElD,OAAO,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,kBAAkB,EAAE,CAAC,SAAS,CAAC,EAAE,aAAa,EAAE;YAC/F,mBAAmB;SACtB,CAAC,CAAC;KACN;CAAA;SAEqB,yBAAyB,CAC3C,aAAuB,EACvB,SAAiB,EACjB,MAAU;AACV,eAAuB;;QAEvB,IAAI,kBAAkB,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;QAElD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,MAAM,cAAc,GAAW,MAAM,MAAM,CAAC,cAAc,EAAE,CAAC;QAC7D,MAAM,cAAc,GAAW,QAAQ,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QAEnE,IAAI,cAAc,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QAEtC,OAAO,MAAM,MAAM,CAAC,aAAa,CAC7B,MAAM,EACN,cAAc,EACd,kBAAkB,EAClB,cAAc,EACd,eAAe,EACf,CAAC,SAAS,CAAC,EACX,KAAK,CACR,CAAC;KACL;CAAA;SAEqB,wBAAwB,CAC1C,IAAY,EACZ,EAAU,EACV,MAAU;AACV,QAAY,EACZ,QAAgB;;QAEhB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;QAC5C,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7C,MAAM,WAAW,GAAG;YAChB,MAAM,EAAEC,oCAAgB,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,UAAU,CAAC;SACzF,CAAC;QAEF,MAAMC,IAAE,GAAGC,cAAW,CAAC,UAAU,CAC7B;YACI,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;YACzC,QAAQ,EAAE,QAAQ;YAClB,EAAE,EAAE,EAAE;YACN,KAAK,EAAE,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;YACpC,IAAI,EAAE,IAAI;SACb,EACD,WAAW,CACd,CAAC;QACF,OAAOD,IAAE,CAAC;KACb;CAAA;SAEqB,gBAAgB,CAClC,IAAY,EACZ,QAAY,EACZ,QAAgB,EAChB,IAAa,EACb,EAAW,EACX,KAAc,EACd,KAAc;;QAEd,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YAC9B,KAAK,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;SACpD;QAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;QAC5C,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QAE7C,MAAM,WAAW,GAAG;YAChB,MAAM,EAAED,oCAAgB,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,UAAU,CAAC;SACzF,CAAC;QAEF,IAAI,WAAW,GAAG,KAAK,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;QAElD,IAAIC,IAAE,GAAGC,cAAW,CAAC,UAAU,CAC3B;YACI,KAAK;YACL,QAAQ,EAAE,WAAW;YACrB,QAAQ;YACR,KAAK;YACL,EAAE;YACF,IAAI;SACP,EACD,WAAW,CACd,CAAC;QACF,OAAOD,IAAE,CAAC;KACb;CAAA;SAEqB,uBAAuB,CACzC,IAAY,EACZ,EAAU,EACV,MAAU;AACV,QAAY,EACZ,QAAgB,EAChB,eAAuB;;;QAGvB,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;QAClE,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QAE7D,IAAI,IAAI,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;QAE/B,IAAI,EAAE,GAAG,MAAM,gBAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;QAEjF,OAAO,EAAE,CAAC;KACb;CAAA;SAEqB,wBAAwB,CAC1C,IAAY,EACZ,EAAU,EACV,QAAY,EACZ,QAAgB,EAChB,aAAqB,EACrB,OAAe;;QAEf,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;QAC5C,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7C,MAAM,WAAW,GAAG;YAChB,MAAM,EAAED,oCAAgB,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,UAAU,CAAC;SACzF,CAAC;;QAEF,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACrE,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;QAEjE,IAAIC,IAAE,GAAGC,cAAW,CAAC,UAAU,CAC3B;YACI,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;YAClC,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,KAAK;YACZ,EAAE,EAAE,aAAa;YACjB,IAAI,EAAE,OAAO,CAAC,SAAS,EAAE;SAC5B,EACD,WAAW,CACd,CAAC;QACF,OAAOD,IAAE,CAAC;KACb;CAAA;SAEqB,gBAAgB,CAAC,aAAqB,EAAE,IAAY,EAAE,EAAU,EAAE,KAAS;;;QAE7F,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACpE,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAChE,OAAO,MAAM,OAAO,CAAC,WAAW,CAAC;YAC7B,IAAI,EAAE,IAAI;SACb,CAAC,CAAC;KACN;CAAA;AAED;;;;;;SAMsB,eAAe,CAAC,IAAY,EAAE,EAAU,EAAE,MAAU,EAAE,QAAY;;QACpF,IAAI;YACA,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC;gBAC9B,IAAI;gBACJ,EAAE;gBACF,QAAQ,EAAE,KAAK,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACzC,KAAK,EAAE,KAAK,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;aACvC,CAAC,CAAC;SACN;QAAC,OAAO,CAAC,EAAE;;;YAGR,OAAO,KAAK,CAAC;SAChB;KACJ;CAAA;AAED,IAAY,aAMX;AAND,WAAY,aAAa;IACrB,6CAAgBE,gBAAY,CAAC,MAAM,iBAAA,CAAA;IACnC,sCAASA,gBAAY,CAAC,aAAa,UAAA,CAAA;IACnC,2CAAcA,gBAAY,CAAC,WAAW,eAAA,CAAA;IACtC,wCAAWA,gBAAY,CAAC,QAAQ,YAAA,CAAA;IAChC,wCAAWA,gBAAY,CAAC,QAAQ,YAAA,CAAA;AACpC,CAAC,EANW,aAAa,KAAb,aAAa,QAMxB;AAED,IAAY,kBAWX;AAXD,WAAY,kBAAkB;IAC1B,uDAAgBC,8BAAmB,CAAC,MAAM,iBAAA,CAAA;IAC1C,yDAAkBA,8BAAmB,CAAC,cAAc,mBAAA,CAAA;IACpD,yDAAkBA,8BAAmB,CAAC,cAAc,mBAAA,CAAA;IACpD,kDAAWA,8BAAmB,CAAC,QAAQ,YAAA,CAAA;IACvC,kDAAWA,8BAAmB,CAAC,QAAQ,YAAA,CAAA;IACvC,gEAAyBA,8BAAmB,CAAC,oBAAoB,0BAAA,CAAA;IACjE,wDAAiBA,8BAAmB,CAAC,aAAa,kBAAA,CAAA;IAClD,yDAAkBA,8BAAmB,CAAC,cAAc,mBAAA,CAAA;IACpD,wDAAiBA,8BAAmB,CAAC,aAAa,kBAAA,CAAA;IAClD,4DAAqBA,8BAAmB,CAAC,iBAAiB,sBAAA,CAAA;AAC9D,CAAC,EAXW,kBAAkB,KAAlB,kBAAkB,QAW7B;AAED;AACA,IAAY,kBAIX;AAJD,WAAY,kBAAkB;IAC1B,uDAAgBD,gBAAY,CAAC,MAAM,iBAAA,CAAA;IACnC,kDAAWA,gBAAY,CAAC,QAAQ,YAAA,CAAA;IAChC,kDAAWA,gBAAY,CAAC,QAAQ,YAAA,CAAA;AACpC,CAAC,EAJW,kBAAkB,KAAlB,kBAAkB,QAI7B;AAED,IAAY,qBAMX;AAND,WAAY,qBAAqB;IAC7B,6DAAgBC,8BAAmB,CAAC,MAAM,iBAAA,CAAA;IAC1C,+DAAkBA,8BAAmB,CAAC,cAAc,mBAAA,CAAA;IACpD,+DAAkBA,8BAAmB,CAAC,cAAc,mBAAA,CAAA;IACpD,wDAAWA,8BAAmB,CAAC,QAAQ,YAAA,CAAA;IACvC,wDAAWA,8BAAmB,CAAC,QAAQ,YAAA,CAAA;AAC3C,CAAC,EANW,qBAAqB,KAArB,qBAAqB,QAMhC;AAED,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC1B,kDAAWC,gBAAY,CAAC,QAAQ,YAAA,CAAA;IAChC,kDAAWA,gBAAY,CAAC,QAAQ,YAAA,CAAA;AACpC,CAAC,EAHW,kBAAkB,KAAlB,kBAAkB;;;;;;;;;;;;;;;;;;;;;;ACzU9B;;;;;SAKsB,iBAAiB,CAAC,KAAe,EAAE,OAA2B;;QAChF,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QACvC,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEpC,IAAI,OAAO,CAAC;QACZ,IAAI,OAAO,KAAK,GAAG,EAAE;YACjB,OAAO,GAAG,CAAC,MAAM,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,eAAe,EAAE,CAAC,EAAE,KAAK,CAAC;SAChF;aAAM;YACH,OAAO,GAAG,CAAC,MAAM,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,eAAe,EAAE,CAAC,EAAE,KAAK,CAAC;SAChF;QAED,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,MAAM,OAAO,GAAG,MAAM,iBAAiB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC5D,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SACpC;QACD,OAAO,OAAO,CAAC;KAClB;CAAA;AAED;SACsB,sBAAsB,CAAC,KAAe;;QACxD,IAAI,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QACrC,IAAI,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAElC,IAAI,OAAO,GAAG,CAAC,MAAM,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,eAAe,EAAE,CAAC,EAAE,KAAK,CAAC;QACjF,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;;YAEtB,IAAI,OAAO,GAAG,MAAM,sBAAsB,CAAC,SAAS,CAAC,CAAC;;YAEtD,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SACpC;QACD,OAAO,OAAO,CAAC;KAClB;CAAA;AAED;SACsB,iBAAiB,CAAC,KAAe;;QACnD,IAAI,KAAK,CAAC,MAAM,GAAG,IAAI,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;SACxE;QAED,IAAI,MAAM,GAAe,CAAC,MAAM,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,eAAe,EAAE,CAAC,EAAE,KAAK,CAAC;QACxF,OAAO,MAAM,CAAC;KACjB;CAAA;SAEqB,oBAAoB,CAAC,KAAe;;QACtD,IAAI,KAAK,CAAC,MAAM,IAAI,GAAG,EAAE;YACrB,IAAI,IAAI,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACxC,OAAO,IAAI,CAAC;SACf;aAAM;;YAEH,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAChC,IAAI,cAAc,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAEtC,IAAI,SAAS,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC7C,IAAI,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC;YAClC,IAAI,UAAU,GAAG,SAAS,CAAC,aAAa,CAAC;YAEzC,IAAI,IAAI,GAAG,MAAM,oBAAoB,CAAC,cAAc,CAAC,CAAC;YACtD,OAAO;gBACH,MAAM,EAAE,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;gBACnC,aAAa,EAAE,CAAC,GAAG,UAAU,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC;aACxD,CAAC;SACL;KACJ;CAAA;SAEqB,cAAc,CAAC,KAAe;;QAChD,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,EAAE;YACtB,IAAI,KAAK,GAAG,MAAM,0BAA0B,CAAC,KAAK,CAAC,CAAC;YACpD,OAAO,KAAK,CAAC;SAChB;aAAM;;YAEH,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACjC,IAAI,cAAc,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAEvC,IAAI,MAAM,GAAG,MAAM,0BAA0B,CAAC,KAAK,CAAC,CAAC;YACrD,OAAO,MAAM,CAAC,KAAK,CAAC,MAAM,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC;SAC7D;KACJ;CAAA;SAEqB,0BAA0B,CAAC,KAAe,EAAE,QAAc;;QAC5E,IAAI,KAAK,CAAC,MAAM,GAAG,IAAI;YAAE,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;QAChF,IAAI,QAAQ,CAAC;QACb,IAAI,CAAC,QAAQ,EAAE;YACX,QAAQ,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SAC3C;aAAM;YACH,QAAQ,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;SACnE;QAED,IAAI,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC;QACjB,OAAO,CAAC,WAAW,GAAG;QAClC,IAAI,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC;QACrC,IAAI,GAAG,GAAG,QAAQ,CAAC,UAAU,CAAC;QAE9B,IAAI,GAAG,IAAI,IAAI,EAAE;YACb,IAAI,QAAQ,GAAG,MAAM,0BAA0B,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;YACrE,OAAO,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;SAClC;QACD,OAAO,OAAO,CAAC;KAClB;CAAA;AAED;SACsB,mBAAmB,CAAC,KAAe;;QACrD,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,EAAE;YACtB,IAAI,MAAM,GAAG,MAAM,+BAA+B,CAAC,KAAK,CAAC,CAAC;YAC1D,OAAO,MAAM,CAAC;SACjB;aAAM;;YAEH,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACjC,IAAI,cAAc,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAEvC,IAAI,MAAM,GAAG,MAAM,+BAA+B,CAAC,KAAK,CAAC,CAAC;YAE1D,OAAO,MAAM,CAAC,KAAK,CAAC,MAAM,mBAAmB,CAAC,cAAc,CAAC,CAAC,CAAC;SAClE;KACJ;CAAA;SAEqB,+BAA+B,CAAC,KAAe,EAAE,QAAc;;QACjF,IAAI,QAAQ,CAAC;QACb,IAAI,CAAC,QAAQ,EAAE;YACX,QAAQ,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SAC3C;aAAM;YACH,QAAQ,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;SACnE;QAED,IAAI,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC7B,IAAI,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC;QACrC,IAAI,GAAG,GAAG,QAAQ,CAAC,UAAU,CAAC;QAE9B,IAAI,GAAG,IAAI,IAAI,EAAE;YACb,IAAI,QAAQ,GAAG,MAAM,+BAA+B,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;YAC1E,OAAO,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;SAClC;QAED,OAAO,OAAO,CAAC;KAClB;;;;;;;;;;;;;;;ACjJD;AAsBA;AACA,IAAI,CAAC,GAAG,OAAO,OAAO,KAAK,QAAQ,GAAG,OAAO,GAAG,KAAI;AACpD,IAAI,YAAY,GAAG,CAAC,IAAI,OAAO,CAAC,CAAC,KAAK,KAAK,UAAU;AACrD,IAAI,CAAC,CAAC,KAAK;AACX,IAAI,SAAS,YAAY,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;AAClD,IAAI,OAAO,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;AACjE,IAAG;AACH;AACA,IAAI,eAAc;AAClB,IAAI,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK,UAAU,EAAE;AAC1C,EAAE,cAAc,GAAG,CAAC,CAAC,QAAO;AAC5B,CAAC,MAAM,IAAI,MAAM,CAAC,qBAAqB,EAAE;AACzC,EAAE,cAAc,GAAG,SAAS,cAAc,CAAC,MAAM,EAAE;AACnD,IAAI,OAAO,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC;AAC7C,OAAO,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC;AACpD,GAAG,CAAC;AACJ,CAAC,MAAM;AACP,EAAE,cAAc,GAAG,SAAS,cAAc,CAAC,MAAM,EAAE;AACnD,IAAI,OAAO,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;AAC9C,GAAG,CAAC;AACJ,CAAC;AACD;AACA,SAAS,kBAAkB,CAAC,OAAO,EAAE;AACrC,EAAE,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACrD,CAAC;AACD;AACA,IAAI,WAAW,GAAG,MAAM,CAAC,KAAK,IAAI,SAAS,WAAW,CAAC,KAAK,EAAE;AAC9D,EAAE,OAAO,KAAK,KAAK,KAAK,CAAC;AACzB,EAAC;AACD;AACA,SAAS,YAAY,GAAG;AACxB,EAAE,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC;AACD,UAAc,GAAG,YAAY,CAAC;AAC9B,UAAmB,GAAG,IAAI,CAAC;AAC3B;AACA;AACA,YAAY,CAAC,YAAY,GAAG,YAAY,CAAC;AACzC;AACA,YAAY,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,CAAC;AAC3C,YAAY,CAAC,SAAS,CAAC,YAAY,GAAG,CAAC,CAAC;AACxC,YAAY,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,CAAC;AACjD;AACA;AACA;AACA,IAAI,mBAAmB,GAAG,EAAE,CAAC;AAC7B;AACA,SAAS,aAAa,CAAC,QAAQ,EAAE;AACjC,EAAE,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;AACtC,IAAI,MAAM,IAAI,SAAS,CAAC,kEAAkE,GAAG,OAAO,QAAQ,CAAC,CAAC;AAC9G,GAAG;AACH,CAAC;AACD;AACA,MAAM,CAAC,cAAc,CAAC,YAAY,EAAE,qBAAqB,EAAE;AAC3D,EAAE,UAAU,EAAE,IAAI;AAClB,EAAE,GAAG,EAAE,WAAW;AAClB,IAAI,OAAO,mBAAmB,CAAC;AAC/B,GAAG;AACH,EAAE,GAAG,EAAE,SAAS,GAAG,EAAE;AACrB,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,GAAG,CAAC,IAAI,WAAW,CAAC,GAAG,CAAC,EAAE;AAChE,MAAM,MAAM,IAAI,UAAU,CAAC,iGAAiG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAC1I,KAAK;AACL,IAAI,mBAAmB,GAAG,GAAG,CAAC;AAC9B,GAAG;AACH,CAAC,CAAC,CAAC;AACH;AACA,YAAY,CAAC,IAAI,GAAG,WAAW;AAC/B;AACA,EAAE,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS;AAChC,MAAM,IAAI,CAAC,OAAO,KAAK,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE;AAC5D,IAAI,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACvC,IAAI,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;AAC1B,GAAG;AACH;AACA,EAAE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,IAAI,SAAS,CAAC;AACvD,CAAC,CAAC;AACF;AACA;AACA;AACA,YAAY,CAAC,SAAS,CAAC,eAAe,GAAG,SAAS,eAAe,CAAC,CAAC,EAAE;AACrE,EAAE,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,EAAE;AACxD,IAAI,MAAM,IAAI,UAAU,CAAC,+EAA+E,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AACpH,GAAG;AACH,EAAE,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;AACzB,EAAE,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AACF;AACA,SAAS,gBAAgB,CAAC,IAAI,EAAE;AAChC,EAAE,IAAI,IAAI,CAAC,aAAa,KAAK,SAAS;AACtC,IAAI,OAAO,YAAY,CAAC,mBAAmB,CAAC;AAC5C,EAAE,OAAO,IAAI,CAAC,aAAa,CAAC;AAC5B,CAAC;AACD;AACA,YAAY,CAAC,SAAS,CAAC,eAAe,GAAG,SAAS,eAAe,GAAG;AACpE,EAAE,OAAO,gBAAgB,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC,CAAC;AACF;AACA,YAAY,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,IAAI,CAAC,IAAI,EAAE;AAClD,EAAE,IAAI,IAAI,GAAG,EAAE,CAAC;AAChB,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,EAAE,IAAI,OAAO,IAAI,IAAI,KAAK,OAAO,CAAC,CAAC;AACnC;AACA,EAAE,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;AAC5B,EAAE,IAAI,MAAM,KAAK,SAAS;AAC1B,IAAI,OAAO,IAAI,OAAO,IAAI,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC;AACtD,OAAO,IAAI,CAAC,OAAO;AACnB,IAAI,OAAO,KAAK,CAAC;AACjB;AACA;AACA,EAAE,IAAI,OAAO,EAAE;AACf,IAAI,IAAI,EAAE,CAAC;AACX,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC;AACvB,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACnB,IAAI,IAAI,EAAE,YAAY,KAAK,EAAE;AAC7B;AACA;AACA,MAAM,MAAM,EAAE,CAAC;AACf,KAAK;AACL;AACA,IAAI,IAAI,GAAG,GAAG,IAAI,KAAK,CAAC,kBAAkB,IAAI,EAAE,GAAG,IAAI,GAAG,EAAE,CAAC,OAAO,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;AAClF,IAAI,GAAG,CAAC,OAAO,GAAG,EAAE,CAAC;AACrB,IAAI,MAAM,GAAG,CAAC;AACd,GAAG;AACH;AACA,EAAE,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AAC7B;AACA,EAAE,IAAI,OAAO,KAAK,SAAS;AAC3B,IAAI,OAAO,KAAK,CAAC;AACjB;AACA,EAAE,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;AACrC,IAAI,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AACtC,GAAG,MAAM;AACT,IAAI,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;AAC7B,IAAI,IAAI,SAAS,GAAG,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;AAC7C,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC;AAChC,MAAM,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAC7C,GAAG;AACH;AACA,EAAE,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AACF;AACA,SAAS,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE;AACvD,EAAE,IAAI,CAAC,CAAC;AACR,EAAE,IAAI,MAAM,CAAC;AACb,EAAE,IAAI,QAAQ,CAAC;AACf;AACA,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC1B;AACA,EAAE,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC;AAC1B,EAAE,IAAI,MAAM,KAAK,SAAS,EAAE;AAC5B,IAAI,MAAM,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAClD,IAAI,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC;AAC5B,GAAG,MAAM;AACT;AACA;AACA,IAAI,IAAI,MAAM,CAAC,WAAW,KAAK,SAAS,EAAE;AAC1C,MAAM,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI;AACrC,kBAAkB,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAC;AACpE;AACA;AACA;AACA,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC;AAC9B,KAAK;AACL,IAAI,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AAC5B,GAAG;AACH;AACA,EAAE,IAAI,QAAQ,KAAK,SAAS,EAAE;AAC9B;AACA,IAAI,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;AACvC,IAAI,EAAE,MAAM,CAAC,YAAY,CAAC;AAC1B,GAAG,MAAM;AACT,IAAI,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;AACxC;AACA,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC;AAC7B,QAAQ,OAAO,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC9D;AACA,KAAK,MAAM,IAAI,OAAO,EAAE;AACxB,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,KAAK,MAAM;AACX,MAAM,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC9B,KAAK;AACL;AACA;AACA,IAAI,CAAC,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;AACjC,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;AAC1D,MAAM,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;AAC7B;AACA;AACA,MAAM,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,8CAA8C;AACtE,0BAA0B,QAAQ,CAAC,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,aAAa;AAC9E,0BAA0B,0CAA0C;AACpE,0BAA0B,gBAAgB,CAAC,CAAC;AAC5C,MAAM,CAAC,CAAC,IAAI,GAAG,6BAA6B,CAAC;AAC7C,MAAM,CAAC,CAAC,OAAO,GAAG,MAAM,CAAC;AACzB,MAAM,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;AACpB,MAAM,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC;AAChC,MAAM,kBAAkB,CAAC,CAAC,CAAC,CAAC;AAC5B,KAAK;AACL,GAAG;AACH;AACA,EAAE,OAAO,MAAM,CAAC;AAChB,CAAC;AACD;AACA,YAAY,CAAC,SAAS,CAAC,WAAW,GAAG,SAAS,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE;AAC1E,EAAE,OAAO,YAAY,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;AACnD,CAAC,CAAC;AACF;AACA,YAAY,CAAC,SAAS,CAAC,EAAE,GAAG,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC;AAC/D;AACA,YAAY,CAAC,SAAS,CAAC,eAAe;AACtC,IAAI,SAAS,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE;AAC7C,MAAM,OAAO,YAAY,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;AACtD,KAAK,CAAC;AACN;AACA,SAAS,WAAW,GAAG;AACvB,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;AACnB,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AACvD,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AACtB,IAAI,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC;AAC9B,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7C,IAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AACvD,GAAG;AACH,CAAC;AACD;AACA,SAAS,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE;AAC3C,EAAE,IAAI,KAAK,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;AAClG,EAAE,IAAI,OAAO,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACxC,EAAE,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC9B,EAAE,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC;AACzB,EAAE,OAAO,OAAO,CAAC;AACjB,CAAC;AACD;AACA,YAAY,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE;AAC5D,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC1B,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;AACjD,EAAE,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AACF;AACA,YAAY,CAAC,SAAS,CAAC,mBAAmB;AAC1C,IAAI,SAAS,mBAAmB,CAAC,IAAI,EAAE,QAAQ,EAAE;AACjD,MAAM,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC9B,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;AAClE,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK,CAAC;AACN;AACA;AACA,YAAY,CAAC,SAAS,CAAC,cAAc;AACrC,IAAI,SAAS,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;AAC5C,MAAM,IAAI,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAE,gBAAgB,CAAC;AACtD;AACA,MAAM,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC9B;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;AAC5B,MAAM,IAAI,MAAM,KAAK,SAAS;AAC9B,QAAQ,OAAO,IAAI,CAAC;AACpB;AACA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AAC1B,MAAM,IAAI,IAAI,KAAK,SAAS;AAC5B,QAAQ,OAAO,IAAI,CAAC;AACpB;AACA,MAAM,IAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,QAAQ,KAAK,QAAQ,EAAE;AAC3D,QAAQ,IAAI,EAAE,IAAI,CAAC,YAAY,KAAK,CAAC;AACrC,UAAU,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC7C,aAAa;AACb,UAAU,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;AAC9B,UAAU,IAAI,MAAM,CAAC,cAAc;AACnC,YAAY,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,CAAC;AACzE,SAAS;AACT,OAAO,MAAM,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;AAC7C,QAAQ,QAAQ,GAAG,CAAC,CAAC,CAAC;AACtB;AACA,QAAQ,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AAC/C,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,QAAQ,EAAE;AACrE,YAAY,gBAAgB,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;AAChD,YAAY,QAAQ,GAAG,CAAC,CAAC;AACzB,YAAY,MAAM;AAClB,WAAW;AACX,SAAS;AACT;AACA,QAAQ,IAAI,QAAQ,GAAG,CAAC;AACxB,UAAU,OAAO,IAAI,CAAC;AACtB;AACA,QAAQ,IAAI,QAAQ,KAAK,CAAC;AAC1B,UAAU,IAAI,CAAC,KAAK,EAAE,CAAC;AACvB,aAAa;AACb,UAAU,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACpC,SAAS;AACT;AACA,QAAQ,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;AAC7B,UAAU,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACjC;AACA,QAAQ,IAAI,MAAM,CAAC,cAAc,KAAK,SAAS;AAC/C,UAAU,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,EAAE,gBAAgB,IAAI,QAAQ,CAAC,CAAC;AAC1E,OAAO;AACP;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK,CAAC;AACN;AACA,YAAY,CAAC,SAAS,CAAC,GAAG,GAAG,YAAY,CAAC,SAAS,CAAC,cAAc,CAAC;AACnE;AACA,YAAY,CAAC,SAAS,CAAC,kBAAkB;AACzC,IAAI,SAAS,kBAAkB,CAAC,IAAI,EAAE;AACtC,MAAM,IAAI,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;AAC/B;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;AAC5B,MAAM,IAAI,MAAM,KAAK,SAAS;AAC9B,QAAQ,OAAO,IAAI,CAAC;AACpB;AACA;AACA,MAAM,IAAI,MAAM,CAAC,cAAc,KAAK,SAAS,EAAE;AAC/C,QAAQ,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;AACpC,UAAU,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC7C,UAAU,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;AAChC,SAAS,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;AAC/C,UAAU,IAAI,EAAE,IAAI,CAAC,YAAY,KAAK,CAAC;AACvC,YAAY,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC/C;AACA,YAAY,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;AAChC,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC;AACpB,OAAO;AACP;AACA;AACA,MAAM,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;AAClC,QAAQ,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACvC,QAAQ,IAAI,GAAG,CAAC;AAChB,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AAC1C,UAAU,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACxB,UAAU,IAAI,GAAG,KAAK,gBAAgB,EAAE,SAAS;AACjD,UAAU,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;AACvC,SAAS;AACT,QAAQ,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;AAClD,QAAQ,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC3C,QAAQ,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;AAC9B,QAAQ,OAAO,IAAI,CAAC;AACpB,OAAO;AACP;AACA,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AAC/B;AACA,MAAM,IAAI,OAAO,SAAS,KAAK,UAAU,EAAE;AAC3C,QAAQ,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC7C,OAAO,MAAM,IAAI,SAAS,KAAK,SAAS,EAAE;AAC1C;AACA,QAAQ,KAAK,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AACpD,UAAU,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,SAAS;AACT,OAAO;AACP;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK,CAAC;AACN;AACA,SAAS,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE;AAC1C,EAAE,IAAI,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC;AAC9B;AACA,EAAE,IAAI,MAAM,KAAK,SAAS;AAC1B,IAAI,OAAO,EAAE,CAAC;AACd;AACA,EAAE,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AAChC,EAAE,IAAI,UAAU,KAAK,SAAS;AAC9B,IAAI,OAAO,EAAE,CAAC;AACd;AACA,EAAE,IAAI,OAAO,UAAU,KAAK,UAAU;AACtC,IAAI,OAAO,MAAM,GAAG,CAAC,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AACvE;AACA,EAAE,OAAO,MAAM;AACf,IAAI,eAAe,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;AAC5E,CAAC;AACD;AACA,YAAY,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,SAAS,CAAC,IAAI,EAAE;AAC5D,EAAE,OAAO,UAAU,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AACtC,CAAC,CAAC;AACF;AACA,YAAY,CAAC,SAAS,CAAC,YAAY,GAAG,SAAS,YAAY,CAAC,IAAI,EAAE;AAClE,EAAE,OAAO,UAAU,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;AACvC,CAAC,CAAC;AACF;AACA,YAAY,CAAC,aAAa,GAAG,SAAS,OAAO,EAAE,IAAI,EAAE;AACrD,EAAE,IAAI,OAAO,OAAO,CAAC,aAAa,KAAK,UAAU,EAAE;AACnD,IAAI,OAAO,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AACvC,GAAG,MAAM;AACT,IAAI,OAAO,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC7C,GAAG;AACH,CAAC,CAAC;AACF;AACA,YAAY,CAAC,SAAS,CAAC,aAAa,GAAG,aAAa,CAAC;AACrD,SAAS,aAAa,CAAC,IAAI,EAAE;AAC7B,EAAE,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;AAC5B;AACA,EAAE,IAAI,MAAM,KAAK,SAAS,EAAE;AAC5B,IAAI,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AAClC;AACA,IAAI,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE;AAC1C,MAAM,OAAO,CAAC,CAAC;AACf,KAAK,MAAM,IAAI,UAAU,KAAK,SAAS,EAAE;AACzC,MAAM,OAAO,UAAU,CAAC,MAAM,CAAC;AAC/B,KAAK;AACL,GAAG;AACH;AACA,EAAE,OAAO,CAAC,CAAC;AACX,CAAC;AACD;AACA,YAAY,CAAC,SAAS,CAAC,UAAU,GAAG,SAAS,UAAU,GAAG;AAC1D,EAAE,OAAO,IAAI,CAAC,YAAY,GAAG,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;AACnE,CAAC,CAAC;AACF;AACA,SAAS,UAAU,CAAC,GAAG,EAAE,CAAC,EAAE;AAC5B,EAAE,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;AAC1B,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;AAC5B,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACrB,EAAE,OAAO,IAAI,CAAC;AACd,CAAC;AACD;AACA,SAAS,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE;AAChC,EAAE,OAAO,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE;AACzC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;AAClC,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;AACb,CAAC;AACD;AACA,SAAS,eAAe,CAAC,GAAG,EAAE;AAC9B,EAAE,IAAI,GAAG,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AAClC,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACvC,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;AACvC,GAAG;AACH,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACA,SAAS,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE;AAC7B,EAAE,OAAO,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM,EAAE;AAChD,IAAI,SAAS,aAAa,CAAC,GAAG,EAAE;AAChC,MAAM,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAC7C,MAAM,MAAM,CAAC,GAAG,CAAC,CAAC;AAClB,KAAK;AACL;AACA,IAAI,SAAS,QAAQ,GAAG;AACxB,MAAM,IAAI,OAAO,OAAO,CAAC,cAAc,KAAK,UAAU,EAAE;AACxD,QAAQ,OAAO,CAAC,cAAc,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;AACvD,OAAO;AACP,MAAM,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;AACxC,KACA;AACA,IAAI,8BAA8B,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAC5E,IAAI,IAAI,IAAI,KAAK,OAAO,EAAE;AAC1B,MAAM,6BAA6B,CAAC,OAAO,EAAE,aAAa,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAC5E,KAAK;AACL,GAAG,CAAC,CAAC;AACL,CAAC;AACD;AACA,SAAS,6BAA6B,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;AAChE,EAAE,IAAI,OAAO,OAAO,CAAC,EAAE,KAAK,UAAU,EAAE;AACxC,IAAI,8BAA8B,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AACrE,GAAG;AACH,CAAC;AACD;AACA,SAAS,8BAA8B,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE;AACxE,EAAE,IAAI,OAAO,OAAO,CAAC,EAAE,KAAK,UAAU,EAAE;AACxC,IAAI,IAAI,KAAK,CAAC,IAAI,EAAE;AACpB,MAAM,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACnC,KAAK,MAAM;AACX,MAAM,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACjC,KAAK;AACL,GAAG,MAAM,IAAI,OAAO,OAAO,CAAC,gBAAgB,KAAK,UAAU,EAAE;AAC7D;AACA;AACA,IAAI,OAAO,CAAC,gBAAgB,CAAC,IAAI,EAAE,SAAS,YAAY,CAAC,GAAG,EAAE;AAC9D;AACA;AACA,MAAM,IAAI,KAAK,CAAC,IAAI,EAAE;AACtB,QAAQ,OAAO,CAAC,mBAAmB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;AACxD,OAAO;AACP,MAAM,QAAQ,CAAC,GAAG,CAAC,CAAC;AACpB,KAAK,CAAC,CAAC;AACP,GAAG,MAAM;AACT,IAAI,MAAM,IAAI,SAAS,CAAC,qEAAqE,GAAG,OAAO,OAAO,CAAC,CAAC;AAChH,GAAG;AACH;;;ACrdA;;;;SAIsB,oBAAoB,CAAC,IAAY;;QACnD,IAAI,CAAC,YAAY,EAAE;YACf,MAAM,eAAe,CAAC;SACzB;QAED,IAAI,QAAQ,GAAG,4BAA4B,IAAI,EAAE,CAAC;QAClD,IAAI,IAAI,GAA0B,CAAC,MAAM,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC;QAEvF,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;YACX,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YAClC,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YAElC,OAAO,KAAK,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;SAC5C,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;KACf;CAAA;SAEqB,iBAAiB,CACnC,KAAe,EACf,KAAK,GAAG,EAAE,EACV,OAAe,EACf,OAAgB;;QAEhB,IAAI,CAAC,YAAY,EAAE;YACf,MAAM,eAAe,CAAC;SACzB;QAED,MAAM,SAAS,GAAG,IAAI,CAAC;QACvB,IAAI,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;QAC1C,IAAI,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAEvC,IAAI,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI;YAC9B,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SAC7B,CAAC,CAAC;QAEH,IAAI,OAAO,GAAG,iBAAiB,CAAC;QAEhC,IAAI,GAAG,GAAG;YACN,OAAO,EAAE,QAAQ;YACjB,IAAI,EAAE,CAAC,gBAAgB,CAAC;YACxB,YAAY,EAAE,CAAC,GAAG,CAAC;YACnB,OAAO,EAAE,CAAC,OAAO,CAAC;YAClB,cAAc,EAAE,CAAC,OAAO,CAAC;SAC5B,CAAC;QAEF,IAAI,KAAK,GAAG,CAAC,EAAE;;YAEX,GAAG,CAAC,KAAK,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;SAClC;QAED,IAAI,OAAO,EAAE;;YAET,GAAG,CAAC,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;SAC3B;QAED,IAAI,GAAG,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QAChD,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;QAChC,IAAI,IAAI,GAAuB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;QAE7C,IAAI,GAAG,KAAK,IAAI;YAAE,GAAG,GAAG,EAAE,CAAC;;QAG3B,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;YAChB,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/C,IAAI,OAAO,GAAG,MAAM,iBAAiB,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YAC1E,GAAG,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC;SACxB;;;QAID,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,IAAI,OAAO,GAAG,MAAM,iBAAiB,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;YACjE,GAAG,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC;SACxB;QAED,OAAO,GAAG,CAAC;KACd;CAAA;SAEqB,qBAAqB,CACvC,EAAoB,EACpB,WAAqB,EACrB,UAAkB;;QAElB,IAAI,GAAG,CAAC;QAER,IAAI,gBAAgB,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAErE,QAAQ,EAAE,CAAC,IAAI;YACX,KAAK,QAAQ,CAAC;YACd,KAAK,YAAY;gBACb,GAAG,GAAG,gBAAgB,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;gBAC7C,MAAM;YACV,KAAK,QAAQ,CAAC;YACd,KAAK,YAAY,CAAC;YAClB,KAAK,kBAAkB;gBACnB,GAAG,GAAG,gBAAgB,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;gBAC7C,MAAM;YACV,KAAK,eAAe;gBAChB,GAAG,GAAG,mBAAmB,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;gBAChD,MAAM;YACV,KAAK,eAAe;gBAChB,GAAG,GAAG,mBAAmB,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;gBAChD,MAAM;YACV,KAAK,kBAAkB;gBACnB,GAAG,GAAG,iBAAiB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;gBACxC,MAAM;YACV,KAAK,WAAW,CAAC;YACjB,KAAK,MAAM;gBACP,GAAG,GAAG,MAAM,gBAAgB,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;gBACnD,MAAM;YACV;gBACI,MAAM,IAAI,KAAK,CAAC,0CAA0C,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;SAC7E;QACD,OAAO,GAAG,CAAC;KACd;CAAA;SAEe,wBAAwB,CAAC,EAAuB,EAAE,aAAqB;IACnF,IAAI,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,aAAa,CAAC,WAAW,EAAE,CAAC;IAEzE,IAAI,GAAG,GAAG,IAAIhB,cAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;IAC3B,IAAI,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;IAC9B,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IAElC,IAAI,QAAQ,GAAG,IAAIA,cAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;IACnC,IAAI,QAAQ,GAAG,IAAIA,cAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;IACnC,IAAI,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAEnC,OAAO;QACH,EAAE,EAAE,EAAE,CAAC,IAAI;QACX,GAAG,EAAE,KAAK;QACV,IAAI,EAAE,EAAE;QACR,IAAI,EAAE,EAAE,CAAC,IAAI;QACb,KAAK,EAAE,EAAE,CAAC,KAAK;QACf,QAAQ;QACR,IAAI,EAAE,iBAAiB;QACvB,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,QAAQ;QACrB,QAAQ,EAAE,EAAE,CAAC,QAAQ;QACrB,QAAQ,EAAE,EAAE,CAAC,QAAQ;QACrB,IAAI,EAAE,EAAE,CAAC,QAAQ;QACjB,EAAE,EAAE,EAAE,CAAC,MAAM;QACb,SAAS,EAAE,IAAI;KAClB,CAAC;AACN,CAAC;AAED,SAAS,cAAc,CAAC,EAAU;IAC9B,IAAI,EAAE,KAAK,aAAa,CAAC,QAAQ,EAAE;QAC/B,OAAO,GAAG,CAAC;KACd;SAAM,IAAI,EAAE,KAAK,aAAa,CAAC,QAAQ,EAAE;QACtC,OAAO,GAAG,CAAC;KACd;SAAM,IAAI,EAAE,KAAK,aAAa,CAAC,QAAQ,EAAE;QACtC,OAAO,GAAG,CAAC;KACd;IACD,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;AACzC,CAAC;AAED;AACA;AACA,SAAS,oBAAoB,CAAC,EAAoB;IAC9C,IAAI,SAAS,GAAG,EAAE,CAAC,OAAO,CAAC;IAC3B,IAAI,IAAI,GAAG,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC;IAE5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAClC,IAAI,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;QAEpC,IAAI,UAAU,KAAK,SAAS;YAAE,OAAO,UAAU,CAAC;KACnD;IACD,OAAO,SAAS,CAAC;AACrB,CAAC;AAED;AACA;AACA,SAAS,eAAe,CAAC,EAAoB;IACzC,IAAI,SAAS,GAAG,EAAE,CAAC,OAAO,CAAC;IAC3B,IAAI,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC;IAEpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACjC,IAAI,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC;QACxC,IAAI,SAAS,KAAK,SAAS;YAAE,OAAO,SAAS,CAAC;KACjD;IACD,OAAO,SAAS,CAAC;AACrB,CAAC;AAED,SAAS,aAAa,CAAC,UAAoB,EAAE,MAAY;IACrD,IAAI,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;IAChC,IAAI,CAAC,QAAQ;QAAE,OAAO,KAAK,CAAC;IAE5B,IAAI,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI;QAChC,OAAO,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACpC,CAAC,CAAC;IAEH,OAAO,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;AAC/B,CAAC;AAED,SAAS,cAAc,CAAC,SAAiB,EAAE,MAAY;IACnD,IAAI,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC;IACjC,IAAI,CAAC,QAAQ;QAAE,OAAO,KAAK,CAAC;IAC5B,OAAO,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AACxC,CAAC;AAED;;;;;;;;AAQA,SAAS,wBAAwB,CAC7B,KAAa,EACb,SAAmB,EACnB,OAAe,EACf,OAAe,EACf,OAAO,GAAG,KAAK;IAEf,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI;QAC3B,IACI,OAAO,KAAK,IAAI,CAAC,OAAO;YACxB,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC;YAC9B,OAAO,KAAK,IAAI,CAAC,OAAO;YACxB,IAAI,CAAC,KAAK,KAAK,OAAO,EACxB;YACE,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;KAChB,CAAC,CAAC;IAEH,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI;QAC9B,OAAO,GAAG,CAAC,GAAG,CAAC,IAAIA,cAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;KACvC,EAAE,IAAIA,cAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAEd,OAAO,GAAG,CAAC;AACf,CAAC;AAED,SAAS,sBAAsB,CAAC,KAAa,EAAE,SAAmB,EAAE,OAAe;IAC/E,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI;QAC7B,IACI,IAAI,CAAC,UAAU,KAAKc,gBAAY,CAAC,eAAe;YAChD,IAAI,CAAC,OAAO,KAAK,OAAO;YACxB,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,EAChC;YACE,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;KAChB,CAAC,CAAC;IAEH,IAAI,GAAG,GAA6B,EAAE,CAAC;IACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,IAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACvB,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAE3B,IAAI,OAAO,CAAC;QACZ,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,aAAa,GAAG,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAClD,OAAO,GAAG,aAAa,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC;SACnD;QAED,IAAI,GAAG,CAAC,OAAO,CAAC,EAAE;YACd,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;SACzB;aAAM;YACH,GAAG,CAAC,OAAO,CAAC,GAAG;gBACX,OAAO,EAAE,OAAO,IAAI,EAAE;gBACtB,MAAM,EAAE,CAAC;aACZ,CAAC;SACL;KACJ;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAED;;;;;;;;AAQA,SAAS,2BAA2B,CAChC,KAAa,EACb,OAAe,EACf,OAAe,EACf,OAAe,EACf,OAAO,GAAG,KAAK;IAEf,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI;QAC3B,IACI,OAAO,KAAK,IAAI,CAAC,OAAO;YACxB,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC;YAC7B,OAAO,KAAK,IAAI,CAAC,OAAO;YACxB,IAAI,CAAC,KAAK,KAAK,OAAO,EACxB;YACE,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;KAChB,CAAC,CAAC;IAEH,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI;QAC9B,OAAO,GAAG,CAAC,GAAG,CAAC,IAAId,cAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;KACvC,EAAE,IAAIA,cAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAEd,OAAO,GAAG,CAAC;AACf,CAAC;AAED,SAAS,gBAAgB,CAAC,EAAoB,EAAE,SAAmB;IAC/D,IAAI,WAAW,GAAG,eAAe,CAAC,EAAE,CAAC,CAAC;IACtC,IAAI,cAAc,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC;IACjD,IAAI,YAAY,GAAG,cAAc,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;IAE9C,IAAI,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;IAElC,IAAI,IAAI,GAAG,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC;IAC5B,IAAI,MAAM,GAAG,wBAAwB,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC;IAE3E,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IAClC,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;IAE5B,IAAI,GAAG,GAAyB;QAC5B,EAAE,EAAE,EAAE,CAAC,EAAE;QACT,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC;QACxB,MAAM,EAAE,cAAc;QACtB,WAAW,EAAE,YAAY;QACzB,MAAM,EAAE,MAAM;QACd,WAAW,EAAE,SAAS,CAAC,MAAM,CAAC;QAC9B,SAAS,EAAE,IAAI;QACf,IAAI,EAAE,QAAQ;QACd,GAAG,EAAE,GAAG;KACX,CAAC;IAEF,OAAO,GAAG,CAAC;AACf,CAAC;AAED,SAAS,gBAAgB,CAAC,EAAoB,EAAE,SAAmB;IAC/D,IAAI,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC;IACvB,IAAI,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;IAC3C,IAAI,cAAc,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC;IAEjD,IAAI,gBAAgB,GAAG,oBAAoB,CAAC,EAAE,CAAC,CAAC;IAChD,IAAI,YAAY,GAAG,cAAc,CAAC,gBAAgB,CAAC,CAAC;IAEpD,IAAI,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;IAElC,IAAI,IAAI,GAAG,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC;IAC5B,IAAI,MAAM,GAAG,wBAAwB,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;;IAGjF,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IAClC,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;IAE5B,IAAI,GAAG,GAAyB;QAC5B,EAAE,EAAE,EAAE,CAAC,EAAE;QACT,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC;QACxB,MAAM,EAAE,cAAc;QACtB,WAAW,EAAE,YAAY;QACzB,MAAM,EAAE,MAAM;QACd,WAAW,EAAE,SAAS,CAAC,MAAM,CAAC;QAC9B,SAAS,EAAE,IAAI;QACf,IAAI,EAAE,QAAQ;QACd,GAAG,EAAE,GAAG;KACX,CAAC;IAEF,OAAO,GAAG,CAAC;AACf,CAAC;AAED,SAAS,mBAAmB,CAAC,EAAoB,EAAE,UAAoB;IACnE,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IAElC,IAAI,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC;IACtC,IAAI,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;IAElC,IAAI,IAAI,GAAG,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC;IAC5B,IAAI,QAAQ,GAAG,wBAAwB,CAAC,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IAElF,OAAO;QACH,EAAE,EAAE,EAAE,CAAC,EAAE;QACT,MAAM,EAAE,EAAE,CAAC,eAAe;QAC1B,UAAU,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,cAAc,GAAG,IAAI,CAAC;QAC9C,QAAQ,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,YAAY,GAAG,IAAI,CAAC;QAC1C,SAAS,EAAE,IAAI;QACf,IAAI,EAAE,eAAe;QACrB,GAAG,EAAE,IAAIA,cAAE,CAAC,CAAC,CAAC;QACd,MAAM,EAAE,QAAQ;QAChB,WAAW,EAAE,SAAS,CAAC,QAAQ,CAAC;QAChC,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC;QACxB,UAAU,EAAE,EAAE,CAAC,QAAQ;KAC1B,CAAC;AACN,CAAC;AAED;AACA,SAAS,iBAAiB,CAAC,EAAoB,EAAE,SAAiB;IAC9D,IAAI,WAAW,GAAG,eAAe,CAAC,EAAE,CAAC,CAAC;IACtC,IAAI,cAAc,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC;IACjD,IAAI,YAAY,GAAG,cAAc,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;IAE9C,IAAI,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;IAElC,IAAI,IAAI,GAAG,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC;IAC5B,IAAI,MAAM,GAAG,2BAA2B,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC;IAE9E,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IAClC,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;IAE5B,IAAI,GAAG,GAAyB;QAC5B,EAAE,EAAE,EAAE,CAAC,EAAE;QACT,MAAM,EAAE,cAAc;QACtB,WAAW,EAAE,YAAY;QACzB,MAAM,EAAE,MAAM;QACd,WAAW,EAAE,SAAS,CAAC,MAAM,CAAC;QAC9B,SAAS,EAAE,IAAI;QACf,IAAI,EAAE,QAAQ;QACd,GAAG,EAAE,GAAG;QACR,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC;KAC3B,CAAC;IAEF,OAAO,GAAG,CAAC;AACf,CAAC;AAED,SAAe,gBAAgB,CAAC,EAAoB,EAAE,UAAoB;;;QAEtE,IAAI,MAAM,GAAG,oBAAoB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;QAClD,IAAI,SAAS,GAAG,kBAAkB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;;QAGnD,IAAI,KAAK,GAAG,mBAAmB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;QAChD,IAAI,QAAQ,GAAG,iBAAiB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;;;QAKjD,IAAI,QAAQ,GAAiC,EAAE,CAAC;QAChD,IAAI,YAAY,GAA+B,EAAE,CAAC;;QAGlD,KAAK,IAAI,OAAO,IAAI,KAAK,EAAE;YACvB,IAAI,SAAS,GAAG,gBAAgB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YAC9C,IAAI,SAAS,GAAG,MAAMiB,mBAA0B,CAAC,OAAO,CAAC,CAAC;YAC1D,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;YAC3B,QAAQ,CAAC,OAAO,CAAC,GAAG;gBAChB,MAAM,EAAE,KAAK;gBACb,WAAW,EAAE,gBAAgB,CAAC,KAAK,EAAE,SAAS,CAAC,YAAY,CAAC;gBAC5D,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,SAAS;aACnB,CAAC;SACL;;QAGD,KAAK,IAAI,OAAO,IAAI,QAAQ,EAAE;YAC1B,IAAI,SAAS,GAAG,gBAAgB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YAC9C,IAAI,SAAS,GAAG,MAAMA,mBAA0B,CAAC,OAAO,CAAC,CAAC;YAC1D,IAAI,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC/B,YAAY,CAAC,OAAO,CAAC,GAAG;gBACpB,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,SAAS;aACnB,CAAC;SACL;;QAGD,IAAI,IAAI,GAA6B,EAAE,CAAC;QACxC,IAAI,QAAQ,GAA2B,EAAE,CAAC;;QAG1C,KAAK,IAAI,OAAO,IAAI,MAAM,EAAE;YACxB,IAAI,OAAO,GAAG,kBAAkB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YAC9C,IAAI,SAAS,GAAG,MAAMA,mBAA0B,CAAC,OAAO,CAAC,CAAC;YAC1D,IAAI,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;YAE5B,IAAI,CAAC,OAAO,CAAC,GAAG;gBACZ,MAAM,EAAE,KAAK;gBACb,WAAW,EAAE,gBAAgB,CAAC,KAAK,EAAE,SAAS,CAAC,YAAY,CAAC;gBAC5D,EAAE,EAAE,OAAO;gBACX,KAAK,EAAE,SAAS;aACnB,CAAC;SACL;;QAGD,KAAK,IAAI,OAAO,IAAI,SAAS,EAAE;YAC3B,IAAI,SAAS,GAAG,gBAAgB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YAC9C,IAAI,SAAS,GAAG,MAAMA,mBAA0B,CAAC,OAAO,CAAC,CAAC;YAC1D,IAAI,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;YAChC,QAAQ,CAAC,OAAO,CAAC,GAAG;gBAChB,MAAM,EAAE,MAAM;gBACd,EAAE,EAAE,SAAS;gBACb,KAAK,EAAE,SAAS;aACnB,CAAC;SACL;QAED,OAAO;YACH,EAAE,EAAE,EAAE,CAAC,EAAE;YACT,GAAG,EAAE,MAAM,CAAC,QAAQ,EAAE;YACtB,IAAI,EAAE,aAAa;YACnB,SAAS,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC;YACjC,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC;YACxB,MAAM,EAAE;gBACJ,IAAI;gBACJ,QAAQ;aACX;YACD,IAAI,EAAE;gBACF,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,YAAY;aACzB;SACJ,CAAC;KACL;CAAA;AAED,SAAS,kBAAkB,CAAC,EAAoB,EAAE,UAAoB;IAClE,IAAI,OAAO,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC;IACrD,IAAI,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI;QAC/B,OAAO,IAAI,CAAC,UAAU,KAAKH,gBAAY,CAAC,eAAe,CAAC;KAC3D,CAAC,CAAC;IAEH,IAAI,GAAG,GAA8B,EAAE,CAAC;IACxC,KAAK,IAAI,OAAO,IAAI,EAAE,CAAC,WAAW,EAAE;QAChC,IAAI,MAAM,GAAG,sBAAsB,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;;QAGnE,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC;YAAE,SAAS;QAE/C,GAAG,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;KACzB;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAED,SAAS,iBAAiB,CAAC,EAAoB,EAAE,UAAoB;IACjE,IAAI,IAAI,GAAG,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC;IAC5B,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI;QAC5B,OAAO,IAAI,CAAC,UAAU,KAAKA,gBAAY,CAAC,eAAe,CAAC;KAC3D,CAAC,CAAC;IACH,IAAI,GAAG,GAAkC,EAAE,CAAC;IAE5C,KAAK,IAAI,OAAO,IAAI,EAAE,CAAC,WAAW,EAAE;QAChC,IAAI,MAAM,GAAG,sBAAsB,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;;QAEnE,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC;YAAE,SAAS;QAE/C,GAAG,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;KACzB;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAED,SAAS,oBAAoB,CAAC,EAAoB,EAAE,UAAoB;IACpE,IAAI,OAAO,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC;IACrD,IAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI;QACjC,OAAO,IAAI,CAAC,UAAU,KAAKA,gBAAY,CAAC,gBAAgB,CAAC;KAC5D,CAAC,CAAC;IAEH,IAAI,OAAO,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;IACvC,IAAI,GAAG,GAAgC,EAAE,CAAC;IAC1C,KAAK,IAAI,OAAO,IAAI,EAAE,CAAC,WAAW,EAAE;QAChC,IAAI,GAAG,GAAG,wBAAwB,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAC7E,IAAI,GAAG,CAAC,MAAM,EAAE;YAAE,SAAS;QAC3B,GAAG,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC;KACtB;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAED,SAAS,mBAAmB,CAAC,EAAoB,EAAE,UAAoB;IACnE,IAAI,OAAO,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;IACvC,IAAI,IAAI,GAAG,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC;IAC5B,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI;QAC9B,OAAO,IAAI,CAAC,UAAU,KAAKA,gBAAY,CAAC,gBAAgB,CAAC;KAC5D,CAAC,CAAC;IAEH,IAAI,GAAG,GAAoC,EAAE,CAAC;IAC9C,KAAK,IAAI,OAAO,IAAI,EAAE,CAAC,YAAY,EAAE;QACjC,IAAI,GAAG,GAAG,wBAAwB,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAC7E,IAAI,GAAG,CAAC,MAAM,EAAE;YAAE,SAAS;QAC3B,GAAG,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC;KACtB;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAED;AACA,SAAS,gBAAgB,CAAC,EAAoB,EAAE,OAAe;IAC3D,IAAI,OAAO,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC;IACrD,IAAI,GAAG,GAAa,EAAE,CAAC;IACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,IAAI,IAAI,CAAC,SAAS,EAAE;YAC5C,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;SAC/B;KACJ;;IAED,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;QACtB,OAAO,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAClC,CAAC,CAAC;AACP,CAAC;AAED;AACA,SAAS,kBAAkB,CAAC,EAAoB,EAAE,OAAe;IAC7D,IAAI,GAAG,GAAa,EAAE,CAAC;IACvB,IAAI,IAAI,GAAG,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC;IAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAClC,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACnB,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,IAAI,IAAI,CAAC,SAAS,EAAE;YAC5C,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;SAC/B;KACJ;;IAED,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;QACtB,OAAO,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAClC,CAAC,CAAC;AACP,CAAC;AAED,SAAS,SAAS,CAAC,GAAW;IAC1B,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;;IAG5D,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,GAAG,KAAK,UAAU;QAAE,OAAO,EAAE,CAAC;IACtD,OAAO,QAAQ,CAAC;AACpB;;MC3nBa,aAAa;IAKtB,YAAY,OAAW,EAAE,KAAkB,EAAE,UAA2B,EAAE,EAAE,QAA8B,IAAI;QAC1G,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACtB;;IAGD,6BAA6B;;QAEzB,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3B,OAAO,IAAI,CAAC,OAAO,CAAC;SACvB;QAED,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAE5B,IAAI,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI;;;YAGnC,IAAI,aAAa,GAAG,IAAI,CAAC,6BAA6B,EAAE,CAAC;YACzD,aAAa,GAAG,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAChD,IAAI,IAAI,GAAG,IAAId,cAAE,CAAC,CAAC,CAAC,CAAC;YACrB,OAAOA,cAAE,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;SACtC,CAAC,CAAC;QAEH,IAAI,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,OAAO;YACtC,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SAC5B,EAAE,IAAIA,cAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAEd,OAAO,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAChC;;;;;IAMD,eAAe,CAAC,EAAgB;QAC5B,QAAQ,IAAI,CAAC,KAAK;YACd,KAAK,GAAG;gBACJ,IAAI,EAAE,KAAK,GAAG,EAAE;oBACZ,OAAO,YAAY,CAAC;iBACvB;qBAAM;oBACH,OAAO,YAAY,CAAC;iBACvB;YACL,KAAK,GAAG;gBACJ,OAAO,YAAY,CAAC;YACxB,KAAK,GAAG;gBACJ,OAAO,YAAY,CAAC;SAC3B;KACJ;;;;;IAMD,eAAe,CAAC,IAAkB;QAC9B,QAAQ,IAAI,CAAC,KAAK;YACd,KAAK,GAAG;gBACJ,IAAI,IAAI,KAAK,GAAG,EAAE;oBACd,OAAO,YAAY,CAAC;iBACvB;qBAAM;oBACH,OAAO,YAAY,CAAC;iBACvB;YACL,KAAK,GAAG;gBACJ,OAAO,YAAY,CAAC;YACxB,KAAK,GAAG;gBACJ,OAAO,YAAY,CAAC;SAC3B;KACJ;IAED,aAAa,CAAC,MAAU;;QACpB,OAAO;YACH,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,MAAA,IAAI,CAAC,KAAK,0CAAE,KAAK,CAAC;YAC/C,MAAM,EAAE,MAAM;SACjB,CAAC;KACL;IAED,aAAa,CAAC,IAAkB;QAC5B,OAAO;YACH,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;SACrC,CAAC;KACL;;;;;;;IAQD,wBAAwB,CAAC,MAAU;;;QAG/B,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,IAAIA,cAAE,CAAC,CAAC,CAAC,CAAC,EAAE;YACnD,OAAO,EAAE,CAAC;SACb;QAED,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAC5B,IAAI,eAAe,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;;QAInC,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtD,IAAI,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;YAC/D,OAAO,CAAC,EAAE,CAAC,CAAC;SACf;;;QAKD,IAAI,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;QAIzC,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;;YAE3B,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,mBAAmB,GAAG,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YACzD,IAAI,GAAG,GAAG,MAAM,CAAC,wBAAwB,CAAC,mBAAmB,CAAC,CAAC;YAC/D,IAAI,EAAE,GAAG,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YACzC,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAChD,OAAO,CAAC,GAAG,GAAG,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;SACjC;aAAM;YACH,IAAI,YAAY,GAAG,EAAE,CAAC;YACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC1C,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,IAAI,GAAG,CAAC,CAAC,6BAA6B,EAAE,CAAC;gBAC7C,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;gBACxC,IAAI,mBAAmB,GAAG,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;gBAEzD,IAAI,SAAS,GAAGA,cAAE,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;gBAC3C,IAAI,MAAM,GAAGA,cAAE,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;gBAElD,IAAI,SAAS,CAAC,GAAG,CAAC,IAAIA,cAAE,CAAC,CAAC,CAAC,CAAC;oBAAE,SAAS;gBAEvC,IAAI,IAAI,GAAG,CAAC,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC;gBAC9C,IAAI,GAAG,GAAG,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;gBACrC,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;gBAC3C,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;gBAC3B,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACvB,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAE5B,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;aACxC;;YAGD,IAAI,SAAS,CAAC,EAAE,CAAC,IAAIA,cAAE,CAAC,CAAC,CAAC,CAAC,EAAE;gBACzB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;aAClD;YAED,OAAO,YAAY,CAAC;SACvB;KACJ;IAED,SAAS,CAAC,IAAmB;QACzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC3B;IAED,QAAQ,CAAC,IAAmB;QACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACrB;;;SC3JW,eAAe,CAAC,IAAQ,EAAE,IAAQ,EAAE,IAAQ;IACxD,IAAI,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACzC,IAAI,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACzC,IAAI,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAEzC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACvB,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAEvB,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACtB,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACtB,OAAO,KAAK,CAAC;AACjB,CAAC;SAEe,eAAe,CAAC,IAAQ,EAAE,IAAQ,EAAE,IAAQ;IACxD,IAAI,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACzC,IAAI,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACzC,IAAI,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAEzC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACvB,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAEvB,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACtB,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAEtB,OAAO,KAAK,CAAC;AACjB,CAAC;SAEe,eAAe,CAAC,IAAQ,EAAE,IAAQ,EAAE,IAAQ;IACxD,IAAI,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACzC,IAAI,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACzC,IAAI,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAEzC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACvB,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAEvB,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACtB,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAEtB,OAAO,KAAK,CAAC;AACjB,CAAC;SAoBe,mBAAmB,CAAC,IAAQ,EAAE,IAAQ,EAAE,IAAQ,EAAE,YAAgB;IAC9E,IAAI,SAAS,GAAG,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAElD,IAAI,SAAS,CAAC,6BAA6B,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,EAAE;QAC5D,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;KACzC;IAED,OAAO,SAAS,CAAC,wBAAwB,CAAC,YAAY,CAAC,CAAC;AAC5D,CAAC;SAEe,mBAAmB,CAAC,IAAQ,EAAE,IAAQ,EAAE,IAAQ,EAAE,YAAgB;IAC9E,IAAI,SAAS,GAAG,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAElD,IAAI,SAAS,CAAC,6BAA6B,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,EAAE;QAC5D,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;KACzC;IAED,OAAO,SAAS,CAAC,wBAAwB,CAAC,YAAY,CAAC,CAAC;AAC5D,CAAC;SAEe,mBAAmB,CAAC,IAAQ,EAAE,IAAQ,EAAE,IAAQ,EAAE,YAAgB;IAC9E,IAAI,SAAS,GAAG,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAElD,IAAI,SAAS,CAAC,6BAA6B,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,EAAE;QAC5D,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;KACzC;IAED,OAAO,SAAS,CAAC,wBAAwB,CAAC,YAAY,CAAC,CAAC;AAC5D;;MCjBsB,cAAc;IAApC;;;;QAOW,WAAM,GAAe,IAAIkB,WAAU,EAAE,CAAC;;;;QAKtC,WAAM,GAAoB,IAAIC,kBAAe,EAAE,CAAC;QAEhD,aAAQ,GAAmB,EAAE,CAAC;QA4B3B,YAAO,GAAiB,IAAIC,MAAY,EAAE,CAAC;KA+8BxD;;;;;IAn9BU,cAAc;QACjB,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;KAC7B;IAIM,EAAE,CAAC,KAAsB,EAAE,QAAkC;QAChE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;KACpC;IAEM,GAAG,CAAC,KAAsB,EAAE,QAAkC;QACjE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;KACrC;IAES,IAAI,CAAC,KAAsB,EAAE,IAA0B;QAC7D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KAClC;IAES,iBAAiB;QACvB,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACxB,CAAC,EAAE,IAAI,CAAC,WAAW,EAAE;YACrB,OAAO,EAAE,IAAI,CAAC,iBAAiB,EAAE;YACjC,CAAC,EAAE,IAAI,CAAC,WAAW,EAAE;SACxB,CAAC,CAAC;KACN;IAES,kBAAkB;QACxB,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC/C;IAES,kBAAkB;QACxB,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;KACxD;IAES,kBAAkB;QACxB,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;KACxD;;;;;;;IAQK,SAAS,CAAC,EAAU,EAAE,MAAU,EAAE,IAAa;;YACjD,IAAI,CAAC,aAAa;gBAAE,MAAM,UAAU,CAAC;YAErC,IAAI,QAAQ,GAAG,IAAI,GAAGC,kBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;YAEpD,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACpC,IAAI,aAAa,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC7C,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;YAE1B,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,WAAW,CAC7B,OAAO,EACP,MAAM,EACN,aAAa,CAAC,MAAM,EACpB,CAAC,EAAE,CAAC,EACJ,KAAK,EACL,CAAC,aAAa,CAAC,EACf,QAAQ,CACX,CAAC;YACF,IAAI,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACpC,IAAI,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1C,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;;YAGpB,IAAI,CAAC,YAAY,EAAE,CAAC;YAEpB,OAAO,IAAI,CAAC;SACf;KAAA;;;;;;;;;;IAWK,SAAS,CAAC,EAAU,EAAE,MAAU,EAAE,QAAY,EAAE,QAAgB;;YAClE,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAClC,IAAI,EAAE,GAAG,MAAM,wBAAwB,CAAC,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAClF,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YACrC,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC;SACf;KAAA;;;;;;;IAQK,OAAO,CAAC,OAAe,EAAE,MAAU,EAAE,EAAU;;YACjD,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAC/B,IAAI,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxC,IAAI,UAAU,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAE1C,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;YAC3F,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAClC,IAAI,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACxC,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;YAEpB,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,OAAO,IAAI,CAAC;SACf;KAAA;;;;;;;;;IAUK,SAAS,CAAC,EAAU,EAAE,MAAU,EAAE,QAAY,EAAE,QAAgB,EAAE,eAAuB;;YAC3F,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAClC,IAAI,KAAK,GAAG,MAAM,aAAa,CAAC,eAAe,CAAC,CAAC;YACjD,IAAI,MAAM,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC7C,IAAI,EAAE,GAAG,MAAM,uBAAuB,CAAC,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC;YAClG,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;;;;YAKvC,UAAU,CAAC;gBACP,IAAI,MAAM,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;gBAC7C,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;oBACpB,IAAI,CAAC,kBAAkB,EAAE,CAAC;iBAC7B;aACJ,CAAA,EAAE,IAAI,CAAC,CAAC;YAET,OAAO,MAAM,CAAC;SACjB;KAAA;;;;;;;IAQK,gBAAgB,CAAC,eAAuB,EAAE,EAAU,EAAE,MAAU;;YAClE,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAC9B,OAAO,MAAM,gBAAgB,CAAC,eAAe,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;SACpE;KAAA;;;;;;IAOK,oBAAoB,CAAC,EAAU,EAAE,MAAU,EAAE,QAAY;;YAC3D,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAC9B,OAAO,MAAM,eAAe,CAAC,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;SAC5D;KAAA;;;;;;;;;;IAWK,eAAe,CAAC,QAAY,EAAE,QAAgB,EAAE,IAAa,EAAE,EAAW,EAAE,KAAc,EAAE,KAAc;;YAC5G,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAC9B,IAAI,EAAE,GAAG,MAAM,gBAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YAClF,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;SACpC;KAAA;;;;;;IAOM,4BAA4B,CAAC,SAAsB;QACtD,OAAO,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,6BAA6B,EAAE,CAAC;KAC9E;;;;;;IAOO,mBAAmB,CAAC,KAAkB;QAC1C,IAAI,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;QAC3C,IAAI,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;QAC3C,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;QAE5C,QAAQ,KAAK;YACT,KAAK,GAAG;gBACJ,OAAO,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC7C,KAAK,GAAG;gBACJ,OAAO,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC7C,KAAK,GAAG;gBACJ,OAAO,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;SAChD;KACJ;;;;;;IAOM,qBAAqB,CAAC,KAAkB,EAAE,MAAU;;QAEvD,IAAI,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,6BAA6B,EAAE,CAAC;QAC7E,OAAO,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;KAC7B;;;;;;IAOM,yBAAyB,CAAC,KAAkB,EAAE,MAAU;QAC3D,IAAI,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;QAC3C,IAAI,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;QAC3C,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;QAE5C,QAAQ,KAAK;YACT,KAAK,GAAG;gBACJ,OAAO,mBAAmB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;YACzD,KAAK,GAAG;gBACJ,OAAO,mBAAmB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;YACzD,KAAK,GAAG;gBACJ,OAAO,mBAAmB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;SAC5D;KACJ;;;;;IAMK,UAAU,CAAC,EAAe;;YAC5B,IAAI,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACtC,IAAI,KAAK,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACjD,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;YAC9D,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC;YACpC,OAAO,MAAM,SAAS,CAAC,MAAM,CAAC,CAAC;SAClC;KAAA;;;;IAKK,kBAAkB;;YACpB,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;YACzC,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;YAElD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;gBACpB,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC7B;YAED,OAAO,MAAM,CAAC;SACjB;KAAA;;;;;;;IAQY,YAAY;;YACrB,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;;YAE1C,IAAI,CAAC,MAAM,GAAG,MAAM,cAAc,CAAC,SAAS,CAAC,CAAC;YAE9C,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAClC,IAAI,CAAC,cAAc,EAAE,CAAC;YAEtB,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;KAAA;;;;IAKM,SAAS;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;KACtB;;;;;;IAOY,YAAY;;YACrB,IAAI,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxC,IAAI,CAAC,MAAM,GAAG,MAAM,mBAAmB,CAAC,SAAS,CAAC,CAAC;YAEnD,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAE1B,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;KAAA;;;;IAKM,SAAS;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;KACtB;;;;IAKY,QAAQ;;YACjB,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACpC,OAAO,MAAM,oBAAoB,CAAC,KAAK,CAAC,CAAC;SAC5C;KAAA;;;;;IAMY,eAAe,CAAC,SAAmB;;YAC5C,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YACpC,IAAI,UAAU,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9D,IAAI,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAE3C,IAAI,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;YACtE,IAAI,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAE/C,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;gBACvB,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACtB,IAAI,OAAO,GAAiB;oBACxB,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,YAAY,EAAE,KAAK,CAAC,QAAQ;oBAC5B,aAAa,EAAE,gBAAgB,CAAC,GAAG,EAAE,KAAK,CAAC,QAAQ,CAAC;oBACpD,OAAO,EAAE,GAAG;oBACZ,IAAI,EAAE,KAAK,CAAC,IAAI;oBAChB,MAAM,EAAE,KAAK,CAAC,MAAM;iBACvB,CAAC;gBACF,OAAO,OAAO,CAAC;aAClB,CAAC,CAAC;SACN;KAAA;IAEa,oBAAoB;;YAC9B,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;YAEtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,WAAW,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpC,IAAI,OAAO,GAAG,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;gBAC/C,MAAM,mBAAmB,CAAC,OAAO,CAAC,CAAC;aACtC;SACJ;KAAA;;;;;;;;;IAUa,cAAc;;YACxB,IAAI,CAAC,aAAa;gBAAE,MAAM,UAAU,CAAC;YACrC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;YAEtC,IAAI,OAAO,GAAGC,eAAO,EAAE,CAAC;YAExB,IAAI,GAAG,GAAmB,EAAE,CAAC;YAE7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;gBAC3B,IAAI,IAAI,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;gBAE7B,IAAI,IAAI,IAAIR,gBAAY,CAAC,gBAAgB;oBAAE,SAAS;gBAEpD,IAAI,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;gBACjC,IAAI,MAAM,GAAI,GAAoB,CAAC,SAAS,EAAE,CAAC;gBAC/C,IAAI,WAAW,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;gBACpC,IAAI,OAAO,GAAG,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;gBAE/C,IAAI,KAAK,GAAkB,GAAG,CAAC,OAAO,CAAC,CAAC;gBAExC,IAAI,CAAC,KAAK,EAAE;oBACR,IAAI,SAAS,GAAG,MAAM,mBAAmB,CAAC,OAAO,CAAC,CAAC;oBACnD,KAAK,GAAG,EAAE,MAAM,EAAE,IAAId,cAAE,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAIA,cAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;iBACvE;gBAED,IAAI,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;;oBAEvB,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;iBAC/C;qBAAM;;oBAEH,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;iBAC3C;gBAED,GAAG,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;aACxB;;YAGD,IAAI,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;YAClC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACd,IAAI,SAAS,GAAG,MAAM,mBAAmB,CAAC,MAAM,CAAC,CAAC;gBAClD,GAAG,CAAC,MAAM,CAAC,GAAG;oBACV,MAAM,EAAE,IAAIA,cAAE,CAAC,CAAC,CAAC;oBACjB,QAAQ,EAAE,IAAIA,cAAE,CAAC,CAAC,CAAC;oBACnB,IAAI,EAAE,SAAS;iBAClB,CAAC;aACL;YAED,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;;YAGpB,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,OAAO,GAAG,CAAC;SACd;KAAA;IAEM,WAAW;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC;KACxB;;;;;IAMM,cAAc;QACjB,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC/B,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC/B,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAE/B,OAAO;YACH,CAAC;YACD,CAAC;YACD,CAAC;SACJ,CAAC;KACL;;;;;;IAOM,eAAe;QAClB,IAAI,CAAC,aAAa,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC5C;QACD,QACI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI;YACnC,QAAQ,EAAE,IAAIA,cAAE,CAAC,CAAC,CAAC;YACnB,MAAM,EAAE,IAAIA,cAAE,CAAC,CAAC,CAAC;SACpB,EACH;KACL;IAEM,eAAe;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;KACtC;;;;;;IAOM,eAAe;QAClB,IAAI,QAAQ,GAAG,IAAIA,cAAE,CAAC,CAAC,CAAC,CAAC;QACzB,IAAI,MAAM,GAAG,IAAIA,cAAE,CAAC,CAAC,CAAC,CAAC;QACvB,IAAI,eAAe,GAAG,IAAIA,cAAE,CAAC,CAAC,CAAC,CAAC;QAEhC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QACtC,IAAI,OAAO,GAAGsB,eAAO,EAAE,CAAC;QAExB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAC3B,IAAI,IAAI,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;YAE7B,IAAI,MAAM,GAAI,GAAoB,CAAC,SAAS,EAAE,CAAC;YAE/C,IAAI,IAAI,KAAKP,8BAAmB,CAAC,kBAAkB,EAAE;gBACjD,IAAI,QAAQ,GAAI,GAAwB,CAAC,oBAAoB,EAAE,CAAC;gBAChE,IAAI,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;oBACvB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACzB;qBAAM;oBACH,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;iBACjD;aACJ;iBAAM;gBACH,IAAI,QAAQ,GAAI,GAAoB,CAAC,WAAW,EAAE,CAAC;gBACnD,IAAI,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;oBACvB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACzB;qBAAM;oBACH,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACvB;aACJ;SACJ;QAED,OAAO;YACH,QAAQ;YACR,MAAM;YACN,eAAe,EAAE,eAAe;SACnC,CAAC;KACL;;;;;;;;;IAUK,YAAY,CAAC,GAAO;;YACtB,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YAC5B,IAAI,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAE1B,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;YAC1B,IAAI,eAAe,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAEzC,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YACrC,IAAI,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAExC,IAAI,GAAG,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;YAEnC,IAAI,QAAQ,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,EAAE,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;YAE7G,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACpC,IAAI,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACpC,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;YAEpB,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;YAE1B,OAAO,IAAI,CAAC;SACf;KAAA;;;;;;;;;IAUK,YAAY,CAAC,GAAO;;YACtB,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YAC5B,IAAI,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAE1B,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YACjC,IAAI,QAAQ,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAExC,IAAI,aAAa,GAAG,CAAC,OAAO,CAAC,CAAC;YAC9B,IAAI,eAAe,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAEzC,IAAI,QAAQ,GAAG,MAAM,yBAAyB,CAAC,aAAa,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;YAEjG,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAEpC,IAAI,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAEpC,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;YAEpB,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC;SACf;KAAA;;;;;;;;;;IAWK,YAAY,CAAC,GAAO,EAAE,gBAAoC;;YAC5D,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YAC5B,IAAI,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAE1B,IAAI,eAAe,CAAC;YACpB,IAAI,gBAAgB,KAAK,GAAG,EAAE;gBAC1B,eAAe,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;aACxC;iBAAM;;gBAEH,eAAe,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC9C;YAED,IAAI,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC5C,IAAI,aAAa,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC7C,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;YACxB,IAAI,QAAQ,IAAI,MAAM,yBAAyB,CAC3C,gBAAgB,EAChB,KAAK,EACL,aAAa,EACb,eAAe,EACf,MAAM,EACN,aAAa,CAChB,CAAkB,CAAC;YAEpB,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAEpC,IAAI,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACpC,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;;YAGpB,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;YAE1B,OAAO,IAAI,CAAC;SACf;KAAA;IAEK,eAAe,CAAC,OAA2B;;YAC7C,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACpC,IAAI,MAAM,GAAG,MAAM,iBAAiB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YACrD,OAAO,MAAM,CAAC;SACjB;KAAA;IAEK,eAAe;;YACjB,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACpC,OAAO,MAAM,sBAAsB,CAAC,KAAK,CAAC,CAAC;SAC9C;KAAA;;;;;IAMK,OAAO,CAAC,OAA2B;;YACrC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YAEpD,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;gBACpC,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;aACzC;YAED,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAEjC,IAAI,GAAG,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC;YAC7B,IAAI,SAAS,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;YAE/F,IAAI,SAAS,GAAG,SAAS,CAAC;YAC1B,IAAI,UAAU,GAAG,SAAS,CAAC;YAE3B,IAAI,aAAa,CAAC;YAClB,IAAI,OAAO,KAAK,GAAG,EAAE;gBACjB,aAAa,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;aAC5C;iBAAM;gBACH,aAAa,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;aAC5C;;YAGD,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE;gBACpG,OAAO;aACV,CAAC,CAAC;YAEH,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YACxC,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAEtC,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;;YAGpB,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;YAE1B,OAAO,IAAI,CAAC;SACf;KAAA;IAEK,OAAO,CAAC,SAAkB;;YAC5B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAE7C,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;gBACpC,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;aACzC;;YAGD,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAErC,IAAI,GAAG,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC;YAC7B,IAAI,SAAS,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;;YAG/F,IAAI,UAAU,GAAG,SAAS,CAAC;YAE3B,IAAI,CAAC,SAAS,EAAE;gBACZ,SAAS,GAAG,WAAW,CAAC;aAC3B;YAED,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,aAAa,CACzC,OAAO,EACP,UAAU,EACV,MAAM,CAAC,eAAe,EAAE,EACxB,CAAC,SAAS,CAAC,EACX,UAAU,EACV,CAAC,WAAW,CAAC,EACb,SAAS,EACT,SAAS,CACZ,CAAC;YACF,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YACxC,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAEtC,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;YAEpB,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;YAE1B,OAAO,IAAI,CAAC;SACf;KAAA;IAEK,OAAO;;YACT,IAAI,QAAQ,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAExC,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC;YAC/E,MAAM,OAAO,GAAe,YAAY,CAAC,KAAK,CAAC;YAE/C,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;gBACpC,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;aACzC;YAED,IAAI,SAAS,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YACnC,IAAI,cAAc,GAAG,CAAC,QAAQ,CAAC,CAAC;YAChC,IAAI,aAAa,GAAG,cAAc,CAAC;YACnC,IAAI,WAAW,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;YAE3C,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,SAAS,EAAE,cAAc,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;YAC9G,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YACtC,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAElC,MAAM,OAAO,CAAC,EAAE,CAAC,CAAC;YAElB,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAEhC,OAAO,EAAE,CAAC;SACb;KAAA;IAEK,eAAe,CAAC,IAAY,EAAE,MAAc,EAAE,QAAgB;;YAChE,IAAI,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC5C,IAAI,aAAa,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAE7C,IAAI,aAAa,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAEvC,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;YAE1B,IAAI,UAAU,GAAG,MAAM,sBAAsB,CACzC,IAAI,EACJ,MAAM,EACN,QAAQ,EACR,aAAa,EACb,aAAa,EACb,aAAa,EACb,OAAO,CACV,CAAC;YAEF,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC1C,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC1C,OAAO,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;SAC9B;KAAA;IAEK,OAAO,CAAC,QAAiB,EAAE,OAAoB,EAAE,QAAgB;;YACnE,IAAI,YAAY,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YACtC,IAAI,aAAa,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAE7C,IAAI,eAAe,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAE9C,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;YAC1B,IAAI,EAAE,GAAG,MAAM,cAAc,CACzB,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,YAAY,EACZ,aAAa,EACb,eAAe,EACf,OAAO,CACV,CAAC;YACF,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAClC,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC1C,OAAO,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;SAC9B;KAAA;;;;;;;;;;;;;;IAeK,QAAQ,CACV,MAAc,EACd,GAAO,EACP,KAAW,EACX,GAAS,EACT,aAAqB,EACrB,aAAsB,EACtB,KAAsB;;YAEtB,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;;YAG1B,IAAI,KAAK,EAAE;gBACP,OAAO,GAAG,IAAII,kBAAe,EAAE,CAAC;gBAChC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aAC3B;YAED,IAAI,eAAe,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;;YAG9C,IAAI,WAAW,GAAG,GAAG,CAAC;;YAGtB,IAAI,CAAC,aAAa,EAAE;gBAChB,aAAa,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;aACtC;;YAGD,IAAI,aAAa,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAEvC,IAAI,eAAe,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;;YAGzC,IAAI,SAAS,GAAG,IAAInB,cAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;YAC3D,IAAI,OAAO,GAAG,IAAIA,cAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;YAEvD,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,mBAAmB,CAC/C,OAAO,EACP,CAAC,eAAe,CAAC,EACjB,eAAe;YACf,CAAC,aAAa,CAAC;YACf,MAAM,EACN,SAAS,EACT,OAAO,EACP,WAAW,EACX,CAAC,aAAa,CAAC,EACf,aAAa,CAChB,CAAC;YAEF,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YACtC,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACtC,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;YAEpB,IAAI,CAAC,YAAY,EAAE,CAAC;YAEpB,OAAO,IAAI,CAAC;SACf;KAAA;IAEK,QAAQ,CACV,MAAc,EACd,GAAO,EACP,KAAW,EACX,GAAS,EACT,aAAsB,EACtB,KAAsB;;YAEtB,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;YAC1B,IAAI,eAAe,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAE9C,IAAI,WAAW,GAAG,GAAG,CAAC;;YAGtB,IAAI,KAAK,EAAE;gBACP,OAAO,GAAG,IAAImB,kBAAe,EAAE,CAAC;gBAChC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aAC3B;;YAGD,IAAI,CAAC,aAAa,EAAE;gBAChB,aAAa,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;aACtC;YAED,IAAI,eAAe,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;;YAGzC,IAAI,aAAa,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;;YAGvC,IAAI,SAAS,GAAG,IAAInB,cAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;YAC3D,IAAI,OAAO,GAAG,IAAIA,cAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;YAEvD,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,mBAAmB,CAC/C,OAAO,EACP,CAAC,eAAe,CAAC,EACjB,eAAe,EACf,CAAC,aAAa,CAAC,EACf,MAAM,EACN,SAAS,EACT,OAAO,EACP,WAAW,EACX,CAAC,aAAa,CAAC;aAClB,CAAC;YAEF,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YACxC,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACtC,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;YAEpB,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,OAAO,IAAI,CAAC;SACf;KAAA;;;;;IAMY,gBAAgB,CAAC,EAAe;;YACzC,QAAQ,EAAE,CAAC,MAAM;gBACb,KAAK,YAAY;oBACb,IAAI,CAAC,EAAE,CAAC,MAAM;wBAAE,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;oBACjF,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBACnD,KAAK,YAAY;oBACb,OAAO,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;gBAChC,KAAK,YAAY;oBACb,IAAI,CAAC,EAAE,CAAC,MAAM;wBAAE,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;oBACjF,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBACnD,KAAK,YAAY;oBACb,OAAO,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;gBAChC,KAAK,YAAY;oBACb,IAAI,CAAC,EAAE,CAAC,MAAM;wBAAE,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;oBACjF,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;gBAC9C,KAAK,YAAY;oBACb,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACnC,KAAK,YAAY;oBACb,IAAI,CAAC,EAAE,CAAC,MAAM;wBAAE,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;oBACjF,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;gBAC9C,KAAK,YAAY;oBACb,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACnC;oBACI,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;aAChD;SACJ;KAAA;IAEK,WAAW,CAAC,KAAK,GAAG,CAAC;;YACvB,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACpC,OAAO,MAAM,iBAAiB,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC;SAC1E;KAAA;IAEK,WAAW,CAAC,KAAK,GAAG,CAAC;;YACvB,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACpC,OAAO,MAAM,iBAAiB,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC;SAC1E;KAAA;IAEK,WAAW,CAAC,KAAK,GAAG,CAAC;;YACvB,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;YACvC,OAAO,MAAM,iBAAiB,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC;SAC1E;KAAA;IAEK,aAAa;;YACf,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAC9B,OAAO,MAAM,oBAAoB,CAAC,IAAI,CAAC,CAAC;SAC3C;KAAA;IAEK,UAAU,CAAC,QAAgB,CAAC;;YAC9B,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACzC,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACzC,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAEzC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAErC,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAExC,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACpC,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;;;YAI/B,IAAI,SAAS,GAAG,EAAE,CAAC;YACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpC,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAI;oBACA,IAAI,OAAO,GAAG,MAAM,qBAAqB,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;oBAC5D,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC3B;gBAAC,OAAO,GAAG,EAAE;oBACV,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBACtB;aACJ;;YAGD,IAAI,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,wBAAwB,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;;YAGxE,IAAI,SAAS,GAAG,CAAC,GAAG,SAAS,EAAE,GAAG,SAAS,CAAC,CAAC;YAC7C,IAAI,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,MAAMuB,0BAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,QAAQ,CAACA,0BAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;YAGvG,IAAI,KAAK,GAAG,CAAC,EAAE;gBACX,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;aACpC;YACD,OAAO,SAAS,CAAC;SACpB;KAAA;;;AChjCL;AACA,SAAe,gBAAgB,CAAC,KAAe;;QAC3C,IAAI,CAAC,YAAY,EAAE;YACf,MAAM,eAAe,CAAC;SACzB;;QAGD,IAAI,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI;YAC1B,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SAC7B,CAAC,CAAC;QAEH,IAAI,OAAO,GAAG,mBAAmB,CAAC;QAElC,IAAI,GAAG,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE;YACvC,OAAO,EAAE,QAAQ;YACjB,YAAY,EAAE,CAAC,GAAG,CAAC;SACtB,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC;KACjC;;;ACvBD;MACqB,SAAS;IAQ1B,YAAY,UAAiB,EAAE,UAAU,GAAG,IAAI;QAPtC,UAAK,GAAG,CAAC,CAAC;QACV,iBAAY,GAAiB,EAAE,CAAC;QAChC,cAAS,GAAc,EAAE,CAAC;QAC1B,cAAS,GAAc,EAAE,CAAC;QAKhC,IAAI,CAAC,UAAU,GAAG,UAAU,GAAG,GAAG,GAAG,GAAG,CAAC;QACzC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;KAChC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;IAEM,SAAS;QACZ,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;KACvB;IAEM,WAAW;QACd,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;KACnD;IAEM,WAAW;QACd,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;KACnD;IAEM,eAAe,CAAC,UAAuB,GAAG;QAC7C,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACtB,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,EAAE;YAC5B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;SACnD;QACD,OAAO,KAAK,CAAC;KAChB;IAED,mBAAmB,CAAC,KAAa,EAAE,GAAW;QAC1C,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC9B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;SACxC;QACD,OAAO,GAAG,CAAC;KACd;IAED,YAAY;QACR,IAAI,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAClC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACxB;QACD,OAAO,QAAQ,CAAC;KACnB;IAED,YAAY;QACR,IAAI,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAClC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACxB;QACD,OAAO,QAAQ,CAAC;KACnB;IAED,eAAe,CAAC,KAAa;QACzB,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,KAAK;YAAE,OAAO,KAAK,CAAC;QAExB,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE7C,IAAI,KAAK,GAAW,IAAIF,kBAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAE7C,IAAI,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QACpC,IAAI,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAExC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;QAChC,OAAO,OAAO,CAAC;KAClB;IAED,eAAe,CAAC,KAAa;QACzB,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,KAAK;YAAE,OAAO,KAAK,CAAC;QAExB,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE7C,IAAI,KAAK,GAAW,IAAIA,kBAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAE7C,IAAI,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QACpC,IAAI,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAExC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;QAEhC,OAAO,OAAO,CAAC;KAClB;IAEO,gBAAgB,CAAC,KAAa;QAClC,IAAI,GAAU,CAAC;QACf,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;YAC1B,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;SAClC;aAAM;YACH,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,UAAU,IAAI,KAAK,EAAE,CAAU,CAAC;YACvE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;SAClC;QACD,OAAO,GAAG,CAAC;KACd;IAEO,kBAAkB,CAAC,KAAa,EAAE,UAAuB,GAAG;QAChE,IAAI,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAEvC,IAAI,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,aAAa,GAAGA,kBAAM,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAElD,IAAI,GAAG,GAAGG,uBAAe,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC;QAEpD,IAAI,OAAO,GAAG,IAAIC,kBAAU,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QAC3C,IAAI,OAAO,GAAG,OAAO,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;QAC1D,IAAI,IAAI,GAAG,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAE3D,OAAO,IAAI,CAAC;KACf;;IAGY,UAAU,CAAC,UAAU,GAAG,CAAC;;YAClC,IAAI,CAAC,aAAa;gBAAE,MAAM,UAAU,CAAC;YAErC,IAAI,KAAK,CAAC;YACV,IAAI,aAAa,CAAC,WAAW,EAAE;gBAC3B,KAAK,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;aAC7D;iBAAM;gBACH,KAAK,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;aACzD;YACD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,OAAO,KAAK,CAAC;SAChB;KAAA;;;IAIa,0BAA0B,CAAC,UAAU,GAAG,CAAC;;YACnD,IAAI,IAAI,GAAG,GAAG,CAAC;YAEf,IAAI,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,UAAU,GAAG,IAAI,CAAC,CAAC;YACpE,IAAI,UAAU,GAAG,MAAM,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAE/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;gBACjD,IAAI,OAAO,GAAW,CAAC,CAAC;gBAExB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;oBAClC,IAAI,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC;oBACtB,IAAI,QAAQ,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;oBAEhC,IAAI,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrC,IAAI,MAAM,GAAa,UAAU,CAAC,OAAO,CAAC,CAAC;oBAE3C,IAAI,CAAC,MAAM,EAAE;;wBAET,OAAO,EAAE,CAAC;qBACb;yBAAM;wBACH,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBACV,MAAM;qBACT;iBACJ;;gBAGD,IAAI,OAAO,KAAK,WAAW,EAAE;oBACzB,OAAO,UAAU,GAAG,CAAC,CAAC;iBACzB;aACJ;YAED,OAAO,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,IAAI,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC;SACnF;KAAA;;;IAIa,sBAAsB,CAAC,KAAK,GAAG,CAAC;;YAC1C,IAAI,MAAM,GAAa,EAAE,CAAC;YAC1B,IAAI,MAAM,GAAa,EAAE,CAAC;;YAG1B,KAAK,IAAI,CAAC,GAAW,KAAK,EAAE,CAAC,GAAG,KAAK,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;gBACpD,IAAI,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;gBAC/C,IAAI,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;gBAC/C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACtB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACzB;YAED,IAAI,QAAQ,GAAG,CAAC,MAAM,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC;YACrD,IAAI,QAAQ,GAAG,CAAC,MAAM,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC;;YAGrD,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;gBAC1D,IAAI,OAAO,GAAW,CAAC,CAAC;gBACxB,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;oBAC1C,IAAI,SAAS,GAAW,CAAC,GAAG,CAAC,CAAC;oBAC9B,IAAI,IAAI,GAAW,MAAM,CAAC,SAAS,CAAC,CAAC;oBACrC,IAAI,OAAO,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;oBAC/C,IAAI,UAAU,GAAa,QAAQ,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC1D,IAAI,UAAU,GAAa,QAAQ,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC1D,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;wBACpD,OAAO,EAAE,CAAC;qBACb;yBAAM;;wBAEH,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBACV,MAAM;qBACT;iBACJ;;gBAGD,IAAI,OAAO,KAAK,WAAW,EAAE;oBACzB,IAAI,WAAW,GAAG,KAAK,GAAG,CAAC,CAAC;oBAC5B,OAAO,WAAW,CAAC;iBACtB;aACJ;YACD,OAAO,MAAM,IAAI,CAAC,sBAAsB,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC;SAChE;KAAA;;;MCvOiB,gBAAiB,SAAQ,cAAc;IAKzD,YAAsB,UAAiB;QACnC,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,YAAY,GAAG,IAAI,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACpD,IAAI,CAAC,YAAY,GAAG,IAAI,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACrD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;KAChC;;;;IAKM,gBAAgB;QACnB,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;KACvC;;;;IAKM,gBAAgB;QACnB,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;KACvC;;;;;IAMM,WAAW;QACd,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;KAC1C;;;;;IAMM,iBAAiB;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;KAC1C;;;;IAKM,WAAW;QACd,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;KAC1C;;;;IAKM,qBAAqB;QACxB,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;KACjD;;;;IAKM,qBAAqB;QACxB,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;KACjD;;;;IAKM,gBAAgB;QACnB,OAAO,CAAC,GAAG,IAAI,CAAC,qBAAqB,EAAE,EAAE,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC;KAC7E;IAEM,qBAAqB;QACxB,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;KACjD;;;;IAKM,gBAAgB;QACnB,OAAO,IAAI,CAAC,qBAAqB,EAAE,CAAC;KACvC;;;;;;;IAQY,cAAc,CAAC,aAAa,GAAG,CAAC,EAAE,aAAa,GAAG,CAAC;;YAC5D,IAAI,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YACjE,IAAI,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YAEjE,IAAI,OAAO,GAAG;gBACV,QAAQ,EAAE,QAAQ;gBAClB,QAAQ,EAAE,QAAQ;aACrB,CAAC;YAEF,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAE1B,OAAO,OAAO,CAAC;SAClB;KAAA;;;;;IAMS,WAAW,CAAC,OAAuB;QACzC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;KAClC;IAEY,YAAY;;;;;YACrB,IAAI,MAAM,GAAG,MAAM,OAAM,YAAY,WAAE,CAAC;;YAGxC,IAAI,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;YACtC,IAAI,YAAY,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI;gBAClC,OAAO,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;aAClE,CAAC,CAAC;YAEH,IAAI,aAAa,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YACvC,IAAI,aAAa,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAE7C,IAAI,YAAY,GAAG,KAAK,CAAC;;YAEzB,IAAI,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;gBACtC,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACzB,YAAY,GAAG,IAAI,CAAC;aACvB;;YAGD,IAAI,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;gBACtC,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACzB,YAAY,GAAG,IAAI,CAAC;aACvB;YAED,IAAI,YAAY;gBAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAE3C,OAAO,MAAM,CAAC;SACjB;KAAA;IAEO,iBAAiB;QACrB,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC;KACjC;IAEO,iBAAiB;QACrB,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC;KACjC;IAEY,YAAY;;;;;YACrB,IAAI,MAAM,GAAG,MAAM,OAAM,YAAY,WAAE,CAAC;;YAGxC,IAAI,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;YACtC,IAAI,YAAY,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI;gBAClC,OAAO,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;aAClE,CAAC,CAAC;YAEH,IAAI,aAAa,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;;YAGvC,IAAI,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;gBACtC,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACzB,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC5B;YAED,OAAO,MAAM,CAAC;SACjB;KAAA;IAEM,0BAA0B,CAAC,KAAa;QAC3C,IAAI,KAAK,GAAG,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;KACtE;IAEM,0BAA0B,CAAC,KAAa;QAC3C,IAAI,KAAK,GAAG,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;KACtE;IAEM,0BAA0B,CAAC,KAAa;QAC3C,IAAI,KAAK,GAAG,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;KACtE;;;MCzKgB,cAAe,SAAQ,gBAAgB;IAOxD,YAAY,QAAgB;QACxB,IAAI,IAAI,GAAsBC,gBAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QACjE,IAAI,WAAW,GAAUC,yBAAK,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACpD,IAAI,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QAEvD,KAAK,CAAC,UAAU,CAAC,CAAC;QAElB,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;QACvB,IAAI,CAACD,gBAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;SAC/C;QAED,IAAI,aAAa,GAAG,WAAW,CAAC,MAAM,CAAC,gBAAgB,GAAG,MAAM,CAAC,CAAC;QAClE,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,MAAM,GAAG,aAAa,CAAC,UAAU,CAAC;QACtC,IAAI,SAAS,GAAG,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC;QAEtC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC9B;;;;;;IAOM,iBAAiB;QACpB,IAAI,OAAO,GAAG,IAAIxB,WAAU,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC;QACtD,IAAI,IAAI,GAAG,OAAO,CAAC,oBAAoB,CAACmB,kBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;QACnF,OAAO,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;KAClE;;;;IAKM,mBAAmB;QACtB,OAAO,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;KAC5C;;;;;IAMD,OAAO,MAAM;QACT,MAAM,QAAQ,GAAGK,gBAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC7C,OAAO,cAAc,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;KAChD;;;;IAKD,OAAO,sBAAsB;QACzB,OAAOA,gBAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;KACtC;;;;;IAMD,OAAO,YAAY,CAAC,QAAgB;QAChC,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC;KACvC;;;;;IAMK,OAAO,CAAC,EAAe;;YACzB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;SACrC;KAAA;;;;;IAMK,KAAK,CAAC,EAAiB;;YACzB,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;SACvC;KAAA;;;;;IAMK,KAAK,CAAC,EAAsB;;YAC9B,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;SACvC;KAAA;;;;;;;IAQK,KAAK,CAAC,EAAiB;;YACzB,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;SACnC;KAAA;;;;;IAMO,YAAY;QAChB,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;QAChD,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;QAChD,OAAO,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;KACnC;;;;;IAMO,YAAY;QAChB,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;KAC3C;;;;;;IAOM,WAAW;QACd,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;KACtC;;IAGD,WAAW,CAAC,MAAc,EAAE,KAAa;QACrC,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,KAAK,CAAe,CAAC;QACjE,IAAI,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;;QAGnC,IAAI,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACvC,IAAI,UAAU,GAAGL,kBAAM,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC/C,IAAI,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAElC,OAAO,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;KACtC;;;MCpJgB,eAAgB,SAAQ,cAAc;;;;;IAUvD,YAAY,UAAkB;QAC1B,KAAK,EAAE,CAAC;QAVZ,SAAI,GAAmB,WAAW,CAAC;QACnC,QAAG,GAAG,EAAE,CAAC;QAWL,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC;;QAGtB,IAAI,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QAErB,IAAI,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAE7C,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,CAAC;KAChD;IAED,OAAO,cAAc,CAAC,GAAW;QAC7B,OAAO,IAAI,eAAe,CAAC,GAAG,CAAC,CAAC;KACnC;IAED,OAAO,UAAU,CAAC,GAAW;QACzB,IAAI,OAAO,GAAG,QAAQ,CAAC,UAAU,CAAClB,kBAAe,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;QACpE,IAAI,SAAS,GAAG,cAAc,OAAO,EAAE,CAAC;QACxC,OAAO,IAAI,eAAe,CAAC,SAAS,CAAC,CAAC;KACzC;IAEO,YAAY;QAChB,IAAI,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QACpC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,OAAO,QAAQ,CAAC;KACnB;IAEO,YAAY;QAChB,IAAI,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QACpC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7B,OAAO,QAAQ,CAAC;KACnB;;;;IAKM,mBAAmB;QACtB,OAAO,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;KAC5C;IAED,WAAW;QACP,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;KACtC;IAED,WAAW;QACP,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACnC,OAAO,QAAQ,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,CAAC;KAC1C;IAED,WAAW;QACP,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACnC,OAAO,QAAQ,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,CAAC;KAC1C;IAED,gBAAgB;QACZ,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;KAC/B;IAED,gBAAgB;QACZ,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;KAC/B;IAED,iBAAiB;QACb,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;KAC7B;IAED,iBAAiB;QACb,IAAI,OAAO,GAAG,IAAID,WAAU,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC;QACtD,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChC,OAAO,OAAO,CAAC,gBAAgB,EAAE,CAAC;KACrC;IAED,qBAAqB;QACjB,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;KAC/B;IAED,qBAAqB;QACjB,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;KAC/B;IAED,qBAAqB;QACjB,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;KAC/B;IAEK,KAAK,CAAC,EAAc;;YACtB,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;SACnC;KAAA;IAEK,OAAO,CAAC,EAAe;;YACzB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;SACrC;KAAA;IAEK,KAAK,CAAC,EAAsB;;YAC9B,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;SACvC;KAAA;IAEK,KAAK,CAAC,EAAiB;;YACzB,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;SACvC;KAAA;;;;AC/HL;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE;AAC7C,EAAE,KAAK,EAAE,IAAI;AACb,CAAC,CAAC,CAAC;AACH,aAAa,GAAG,KAAK,CAAC;AACtB,iBAAiB,GAAG,SAAS,CAAC;AAC9B,kBAAkB,GAAG,UAAU,CAAC;AAChC,eAAe,GAAG,OAAO,CAAC;AAC1B,YAAY,GAAG,IAAI,CAAC;AACpB,kBAAkB,GAAG,UAAU,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,KAAK,GAAG;AACjB,EAAE,IAAI,OAAO,EAAE,MAAM,CAAC;AACtB,EAAE,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,OAAO,EAAE;AACxD,IAAI,OAAO,GAAG,OAAO,CAAC;AACtB,IAAI,MAAM,GAAG,OAAO,CAAC;AACrB,GAAG,CAAC,CAAC;AACL,EAAE,IAAI,CAAC,OAAO,IAAI,CAAC,MAAM,EAAE,MAAM,eAAe,CAAC;AACjD;AACA,EAAE,OAAO;AACT,IAAI,OAAO;AACX,IAAI,OAAO;AACX,IAAI,MAAM;AACV,GAAG,CAAC;AACJ,CAAC;AACD;AACA;AACA,SAAS,SAAS,CAAC,IAAI,EAAE;AACzB,EAAE,IAAI,MAAM,GAAG,EAAE,CAAC;AAClB,EAAE,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACnC,EAAE,UAAU,CAAC,OAAO,CAAC,OAAO,IAAI;AAChC,IAAI,IAAI,MAAM,GAAG,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AACvC;AACA,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE;AACvB,MAAM,OAAO;AACb,KAAK;AACL;AACA,IAAI,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;AACnE,MAAM,MAAM,IAAI,UAAU,CAAC;AAC3B,KAAK;AACL;AACA,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACxB,GAAG,CAAC,CAAC;AACL,EAAE,OAAO,MAAM,CAAC;AAChB,CAAC;AACD;AACA;AACA,SAAS,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE;AAC9B,EAAE,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;AACvE,CAAC;AACD;AACA,SAAS,OAAO,CAAC,GAAG,EAAE,QAAQ,EAAE;AAChC,EAAE,SAAS,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;AACzC,IAAI,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE;AAC/B,MAAM,OAAO,MAAM,CAAC;AACpB,KAAK,MAAM,OAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACpE,MAAM,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACvB,MAAM,OAAO,OAAO,CAAC,KAAK,GAAG,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;AAC/C,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA,EAAE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAAM,OAAO,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;AAC3D,CAAC;AACD;AACA,SAAS,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE;AACnC,EAAE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAAM;AACtC,IAAI,IAAI,SAAS,EAAE;AACnB,MAAM,OAAO,QAAQ,EAAE,CAAC;AACxB,KAAK;AACL,GAAG,CAAC,CAAC;AACL,CAAC;AACD;AACA,SAAS,UAAU,CAAC,SAAS,EAAE,QAAQ,EAAE;AACzC,EAAE,SAAS,OAAO,CAAC,MAAM,EAAE;AAC3B,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE;AACtB,MAAM,OAAO,MAAM,CAAC;AACpB,KAAK,MAAM;AACX,MAAM,OAAO,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,IAAI;AACpC,QAAQ,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACzB,QAAQ,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC;AAC/B,OAAO,CAAC,CAAC;AACT,KAAK;AACL,GAAG;AACH;AACA,EAAE,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC3C,CAAC;;;;;;;;;;;;;ACrGD;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D;AACA;AACA;AACA;AACA;AACA,IAAI,YAAY,GAAG,EAAE,CAAC;AACtB,IAAI,aAAa,GAAG,EAAE,CAAC;AACvB,IAAI,0BAA0B,GAAG,UAAU,IAAI,EAAE,YAAY,EAAE;AAC/D,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;AACvC,CAAC,CAAC;AACF,IAAI,sBAAsB,GAAG,UAAU,IAAI,EAAE;AAC7C,IAAI,IAAI,CAAC,GAAG,SAAS,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE;AAClD,QAAQ,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACpC,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACzB,QAAQ,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC;AACvC,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;AACvC,KAAK,CAAC;AACN,IAAI,CAAC,CAAC,SAAS,GAAG,IAAI,KAAK,EAAE,CAAC;AAC9B,IAAI,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC3B,IAAI,OAAO,CAAC,CAAC;AACb,CAAC,CAAC;AACF;AACA,IAAI,gBAAgB,GAAG,UAAU,MAAM,EAAE;AACzC,IAAI,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,EAAE;AAC9C,QAAQ,IAAI;AACZ;AACA,YAAY,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACjD,YAAY,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,IAAI,EAAE;AACzC,gBAAgB,MAAM,GAAG,GAAG,CAAC;AAC7B,aAAa;AACb,SAAS;AACT,QAAQ,OAAO,CAAC,EAAE;AAClB;AACA,SAAS;AACT,QAAQ,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC;AAC3B,QAAQ,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;AAC7C,YAAY,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC;AACrC,YAAY,IAAI,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;AAC5C,YAAY,IAAI,GAAG,EAAE;AACrB,gBAAgB,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;AACpC,aAAa;AACb,iBAAiB;AACjB,gBAAgB,IAAI,WAAW,GAAG,MAAM,KAAK,OAAO,GAAG,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;AACpF,gBAAgB,IAAI,CAAC,WAAW,EAAE;AAClC,oBAAoB,OAAO,CAAC,IAAI,CAAC,kCAAkC,GAAG,MAAM,GAAG,GAAG,CAAC,CAAC;AACpF,oBAAoB,WAAW,GAAG,sBAAsB,CAAC,MAAM,CAAC,CAAC;AACjE,iBAAiB;AACjB,gBAAgB,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AAC7D,gBAAgB,IAAI;AACpB,oBAAoB,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE;AAC7C,wBAAwB,IAAI,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;AACzD,4BAA4B,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AACvD,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB,gBAAgB,OAAO,CAAC,EAAE;AAC1B;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,aAAa;AACb,YAAY,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAC9C,SAAS;AACT,QAAQ,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,iBAAiB,EAAE;AACrD,YAAY,KAAK,CAAC,iBAAiB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;AAC7D,SAAS;AACT,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AACL,IAAI,OAAO,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC;AACF;AACA,IAAI,cAAc,GAAG,UAAU,KAAK,EAAE;AACtC,IAAI,IAAI,CAAC,KAAK;AACd,QAAQ,OAAO,KAAK,CAAC;AACrB,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AACnC,QAAQ,OAAO,eAAe,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAC1C,KAAK;AACL,IAAI,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;AACrC,QAAQ,OAAO,aAAa,IAAI,KAAK,CAAC,IAAI,IAAI,WAAW,CAAC,GAAG,GAAG,CAAC;AACjE,KAAK;AACL,IAAI,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AACF;AACA,SAAS,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE;AACrC,IAAI,IAAI,EAAE,GAAG,EAAE,CAAC;AAChB,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpB,IAAI,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;AACnE,QAAQ,IAAI,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;AACzB,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AAC9B,QAAQ,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;AACzC,YAAY,SAAS;AACrB,SAAS;AACT,QAAQ,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AACjD,YAAY,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AAC5B,YAAY,SAAS;AACrB,SAAS;AACT,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;AAC5C,YAAY,EAAE,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,YAAY,SAAS;AACrB,SAAS;AACT,QAAQ,EAAE,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;AAC/B,KAAK;AACL,IAAI,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;AACvC,QAAQ,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AAC5B,KAAK;AACL,IAAI,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAE;AAC1C,QAAQ,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAClC,KAAK;AACL,IAAI,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAE;AACxC,QAAQ,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AAC9B,KAAK;AACL,IAAI,OAAO,EAAE,CAAC;AACd,CAAC;AACD;AACA,IAAI,wBAAwB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;AAC7E,IAAI,mBAAmB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;AACxE,IAAI,cAAc,GAAG,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;AAC9D,IAAI,iBAAiB,GAAG,sBAAsB,CAAC,mBAAmB,CAAC,CAAC;AACpE,IAAI,eAAe,GAAG,sBAAsB,CAAC,iBAAiB,CAAC,CAAC;AAChE,IAAI,cAAc,GAAG,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;AAC9D,IAAI,oBAAoB,GAAG,sBAAsB,CAAC,sBAAsB,CAAC,CAAC;AAC1E,IAAI,oBAAoB,GAAG,sBAAsB,CAAC,sBAAsB,CAAC,CAAC;AAC1E,IAAI,2BAA2B,GAAG,sBAAsB,CAAC,6BAA6B,CAAC,CAAC;AACxF,IAAI,6BAA6B,GAAG,sBAAsB,CAAC,+BAA+B,CAAC,CAAC;AAC5F,IAAI,qBAAqB,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;AACvE,IAAI,yBAAyB,GAAG,sBAAsB,CAAC,2BAA2B,CAAC,CAAC;AACpF,IAAI,2BAA2B,GAAG,sBAAsB,CAAC,6BAA6B,CAAC,CAAC;AACxF,IAAI,mBAAmB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;AACxE,IAAI,YAAY,GAAG,sBAAsB,CAAC,cAAc,CAAC,CAAC;AAC1D,IAAI,iBAAiB,GAAG,sBAAsB,CAAC,mBAAmB,CAAC,CAAC;AACpE,IAAI,gBAAgB,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;AAClE,IAAI,wBAAwB,GAAG,sBAAsB,CAAC,0BAA0B,CAAC,CAAC;AAClF,IAAI,kBAAkB,GAAG,sBAAsB,CAAC,oBAAoB,CAAC,CAAC;AACtE,IAAI,iCAAiC,GAAG,sBAAsB,CAAC,mCAAmC,CAAC,CAAC;AACpG,IAAI,kBAAkB,GAAG,sBAAsB,CAAC,eAAe,CAAC,CAAC;AACjE,IAAI,8BAA8B,GAAG,sBAAsB,CAAC,gCAAgC,CAAC,CAAC;AAC9F,IAAI,mBAAmB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;AACxE,IAAI,qBAAqB,GAAG,sBAAsB,CAAC,uBAAuB,CAAC,CAAC;AAC5E,IAAI,aAAa,GAAG,sBAAsB,CAAC,eAAe,CAAC,CAAC;AAC5D,IAAI,aAAa,GAAG,sBAAsB,CAAC,eAAe,CAAC,CAAC;AAC5D,IAAI,cAAc,GAAG,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;AAC9D,IAAI,4CAA4C,GAAG,sBAAsB,CAAC,8CAA8C,CAAC,CAAC;AAC1H,IAAI,uBAAuB,GAAG,sBAAsB,CAAC,yBAAyB,CAAC,CAAC;AAChF,IAAI,UAAU,GAAG,sBAAsB,CAAC,YAAY,CAAC,CAAC;AACtD,IAAI,cAAc,GAAG,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;AAC9D,IAAI,yBAAyB,GAAG,sBAAsB,CAAC,2BAA2B,CAAC,CAAC;AACpF,IAAI,qBAAqB,GAAG,sBAAsB,CAAC,uBAAuB,CAAC,CAAC;AAC5E,IAAI,+BAA+B,GAAG,sBAAsB,CAAC,4BAA4B,CAAC,CAAC;AAC3F,IAAI,wBAAwB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;AAC7E,IAAI,4BAA4B,GAAG,sBAAsB,CAAC,8BAA8B,CAAC,CAAC;AAC1F,IAAI,8BAA8B,GAAG,sBAAsB,CAAC,gCAAgC,CAAC,CAAC;AAC9F,IAAI,wBAAwB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;AAC7E,IAAI,kCAAkC,GAAG,sBAAsB,CAAC,+BAA+B,CAAC,CAAC;AACjG,IAAI,0BAA0B,GAAG,sBAAsB,CAAC,uBAAuB,CAAC,CAAC;AACjF,IAAI,sBAAsB,GAAG,sBAAsB,CAAC,wBAAwB,CAAC,CAAC;AAC9E,IAAI,WAAW,GAAG,sBAAsB,CAAC,aAAa,CAAC,CAAC;AACxD,IAAI,gBAAgB,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;AAClE,IAAI,gBAAgB,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;AAClE,IAAI,0BAA0B,GAAG,sBAAsB,CAAC,4BAA4B,CAAC,CAAC;AACtF,IAAI,+BAA+B,GAAG,sBAAsB,CAAC,iCAAiC,CAAC,CAAC;AAChG,IAAI,yBAAyB,GAAG,sBAAsB,CAAC,2BAA2B,CAAC,CAAC;AACpF,IAAI,4CAA4C,GAAG,sBAAsB,CAAC,8CAA8C,CAAC,CAAC;AAC1H,IAAI,gBAAgB,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;AAClE,IAAI,YAAY,GAAG,sBAAsB,CAAC,cAAc,CAAC,CAAC;AAC1D,IAAI,yBAAyB,GAAG,sBAAsB,CAAC,2BAA2B,CAAC,CAAC;AACpF,IAAI,mBAAmB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;AACxE,IAAI,uBAAuB,GAAG,sBAAsB,CAAC,oBAAoB,CAAC,CAAC;AAC3E,IAAI,sBAAsB,GAAG,sBAAsB,CAAC,mBAAmB,CAAC,CAAC;AACzE,IAAI,2BAA2B,GAAG,sBAAsB,CAAC,6BAA6B,CAAC,CAAC;AACxF,IAAI,qBAAqB,GAAG,sBAAsB,CAAC,uBAAuB,CAAC,CAAC;AAC5E,IAAI,aAAa,GAAG,sBAAsB,CAAC,eAAe,CAAC,CAAC;AAC5D,IAAI,oBAAoB,GAAG,sBAAsB,CAAC,sBAAsB,CAAC,CAAC;AAC1E,IAAI,wBAAwB,GAAG,sBAAsB,CAAC,0BAA0B,CAAC,CAAC;AAClF,IAAI,iBAAiB,GAAG,sBAAsB,CAAC,mBAAmB,CAAC,CAAC;AACpE,IAAI,wCAAwC,GAAG,sBAAsB,CAAC,0CAA0C,CAAC,CAAC;AAClH,IAAI,qCAAqC,GAAG,sBAAsB,CAAC,uCAAuC,CAAC,CAAC;AAC5G,IAAI,mBAAmB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;AACxE,IAAI,mBAAmB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;AACxE,IAAI,kBAAkB,GAAG,sBAAsB,CAAC,oBAAoB,CAAC,CAAC;AACtE,IAAI,aAAa,GAAG,sBAAsB,CAAC,eAAe,CAAC,CAAC;AAC5D,IAAI,2BAA2B,GAAG,sBAAsB,CAAC,6BAA6B,CAAC,CAAC;AACxF,IAAI,kBAAkB,GAAG,sBAAsB,CAAC,oBAAoB,CAAC,CAAC;AACtE,IAAI,yBAAyB,GAAG,sBAAsB,CAAC,2BAA2B,CAAC,CAAC;AACpF,IAAI,uBAAuB,GAAG,sBAAsB,CAAC,yBAAyB,CAAC,CAAC;AAChF,IAAI,mBAAmB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;AACxE,IAAI,0BAA0B,GAAG,sBAAsB,CAAC,4BAA4B,CAAC,CAAC;AACtF,IAAI,8BAA8B,GAAG,sBAAsB,CAAC,gCAAgC,CAAC,CAAC;AAC9F,IAAI,sBAAsB,GAAG,sBAAsB,CAAC,wBAAwB,CAAC,CAAC;AAC9E,IAAI,8BAA8B,GAAG,sBAAsB,CAAC,gCAAgC,CAAC,CAAC;AAC9F,IAAI,qBAAqB,GAAG,sBAAsB,CAAC,uBAAuB,CAAC,CAAC;AAC5E,IAAI,wBAAwB,GAAG,sBAAsB,CAAC,0BAA0B,CAAC,CAAC;AAClF,IAAI,yBAAyB,GAAG,sBAAsB,CAAC,2BAA2B,CAAC,CAAC;AACpF,IAAI,qBAAqB,GAAG,sBAAsB,CAAC,uBAAuB,CAAC,CAAC;AAC5E,IAAI,mBAAmB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;AACxE,IAAI,gBAAgB,GAAG,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;AAClE,IAAI,cAAc,GAAG,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;AAC9D,IAAI,YAAY,GAAG,sBAAsB,CAAC,cAAc,CAAC,CAAC;AAC1D,IAAI,WAAW,GAAG,sBAAsB,CAAC,aAAa,CAAC,CAAC;AACxD,IAAI,UAAU,GAAG,sBAAsB,CAAC,YAAY,CAAC,CAAC;AACtD,IAAI,SAAS,GAAG,sBAAsB,CAAC,WAAW,CAAC,CAAC;AACpD,IAAI,aAAa,GAAG,sBAAsB,CAAC,eAAe,CAAC,CAAC;AAC5D,IAAI,kBAAkB,GAAG,sBAAsB,CAAC,oBAAoB,CAAC,CAAC;AACtE,IAAI,YAAY,GAAG,sBAAsB,CAAC,cAAc,CAAC,CAAC;AAC1D,IAAI,YAAY,GAAG,sBAAsB,CAAC,cAAc,CAAC,CAAC;AAC1D,IAAI,2BAA2B,GAAG,sBAAsB,CAAC,6BAA6B,CAAC,CAAC;AACxF;AACA,IAAI,aAAa,GAAG,sBAAsB,CAAC,eAAe,CAAC,CAAC;AAC5D,IAAI,eAAe,GAAG,sBAAsB,CAAC,iBAAiB,CAAC,CAAC;AAChE,IAAI,UAAU,GAAG,sBAAsB,CAAC,YAAY,CAAC,CAAC;AACtD;AACA;AACA;AACA;AACA,SAAS,cAAc,CAAC,OAAO,EAAE,EAAE,EAAE;AACrC,IAAI,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC;AACjC,IAAI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AAC3B,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;AACnC,IAAI,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;AACjB,CAAC;AACD,cAAc,CAAC,SAAS,GAAG,IAAI,KAAK,EAAE,CAAC;AACvC,0BAA0B,CAAC,gBAAgB,EAAE,UAAU,CAAC,EAAE,EAAE,OAAO,IAAI,cAAc,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAC3G,IAAI,WAAW,GAAG;AAClB,IAAI,sBAAsB,EAAE,MAAM;AAClC,IAAI,gBAAgB,EAAE,MAAM;AAC5B,IAAI,0BAA0B,EAAE,MAAM;AACtC,IAAI,mCAAmC,EAAE,MAAM;AAC/C,IAAI,6BAA6B,EAAE,MAAM;AACzC,IAAI,+BAA+B,EAAE,MAAM;AAC3C,IAAI,cAAc,EAAE,MAAM;AAC1B,IAAI,uBAAuB,EAAE,MAAM;AACnC,IAAI,yBAAyB,EAAE,MAAM;AACrC,IAAI,mBAAmB,EAAE,MAAM;AAC/B,IAAI,eAAe,EAAE,MAAM;AAC3B,IAAI,iBAAiB,EAAE,MAAM;AAC7B,IAAI,iBAAiB,EAAE,MAAM;AAC7B,IAAI,iBAAiB,EAAE,MAAM;AAC7B,IAAI,EAAE,EAAE,MAAM;AACd,IAAI,cAAc,EAAE,MAAM;AAC1B,IAAI,cAAc,EAAE,MAAM;AAC1B,IAAI,cAAc,EAAE,MAAM;AAC1B,IAAI,cAAc,EAAE,MAAM;AAC1B,IAAI,iBAAiB,EAAE,MAAM;AAC7B,IAAI,uBAAuB,EAAE,MAAM;AACnC,IAAI,WAAW,EAAE,MAAM;AACvB,IAAI,oBAAoB,EAAE,MAAM;AAChC,IAAI,8BAA8B,EAAE,MAAM;AAC1C,IAAI,gCAAgC,EAAE,MAAM;AAC5C,IAAI,0BAA0B,EAAE,MAAM;AACtC,IAAI,YAAY,EAAE,MAAM;AACxB,IAAI,iBAAiB,EAAE,MAAM;AAC7B,IAAI,cAAc,EAAE,MAAM;AAC1B,IAAI,SAAS,EAAE,MAAM;AACrB,IAAI,MAAM,EAAE,MAAM;AAClB,CAAC,CAAC;AACF,SAAS,mBAAmB,CAAC,IAAI,EAAE;AACnC,IAAI,QAAQ,IAAI;AAChB;AACA,QAAQ,KAAK,MAAM;AACnB,YAAY,OAAO,kBAAkB,CAAC;AACtC,QAAQ,KAAK,MAAM;AACnB,YAAY,OAAO,4BAA4B,CAAC;AAChD,QAAQ,KAAK,MAAM;AACnB,YAAY,OAAO,sEAAsE,CAAC;AAC1F,QAAQ,KAAK,MAAM;AACnB,YAAY,OAAO,sDAAsD,CAAC;AAC1E,QAAQ,KAAK,MAAM;AACnB,YAAY,OAAO,uBAAuB,CAAC;AAC3C,QAAQ,KAAK,MAAM;AACnB,YAAY,OAAO,4BAA4B,CAAC;AAChD,KAAK;AACL,IAAI,IAAI,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI,MAAM,EAAE;AAC1C,QAAQ,OAAO,+BAA+B,CAAC;AAC/C,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,SAAS,oBAAoB,CAAC,UAAU,EAAE;AAC1C,IAAI,IAAI,CAAC,IAAI,GAAG,sBAAsB,CAAC;AACvC,IAAI,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,OAAO,WAAW,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,EAAE,CAAC;AAC1G,QAAQ,eAAe,CAAC;AACxB,IAAI,IAAI,IAAI,GAAG,mBAAmB,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC;AAC7D,IAAI,IAAI,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAChD,IAAI,IAAI,CAAC,OAAO,GAAG,iBAAiB,GAAG,IAAI,GAAG,MAAM,GAAG,aAAa,GAAG,GAAG,CAAC;AAC3E,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;AACnC,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AACjC,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AACjC,CAAC;AACD,oBAAoB,CAAC,SAAS,GAAG,IAAI,KAAK,EAAE,CAAC;AAC7C,0BAA0B,CAAC,sBAAsB,EAAE,UAAU,CAAC,EAAE,EAAE,OAAO,IAAI,oBAAoB,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;AACpH;AACA,gCAAgC,GAAG,wBAAwB,CAAC;AAC5D,2BAA2B,GAAG,mBAAmB,CAAC;AAClD,sBAAsB,GAAG,cAAc,CAAC;AACxC,yBAAyB,GAAG,iBAAiB,CAAC;AAC9C,uBAAuB,GAAG,eAAe,CAAC;AAC1C,sBAAsB,GAAG,cAAc,CAAC;AACxC,sBAAsB,GAAG,cAAc,CAAC;AACxC,4BAA4B,GAAG,oBAAoB,CAAC;AACpD,4BAA4B,GAAG,oBAAoB,CAAC;AACpD,kBAAkB,GAAG,UAAU,CAAC;AAChC,uBAAuB,GAAG,eAAe,CAAC;AAC1C,mCAAmC,GAAG,2BAA2B,CAAC;AAClE,qCAAqC,GAAG,6BAA6B,CAAC;AACtE,oBAAoB,GAAG,YAAY,CAAC;AACpC,2BAA2B,GAAG,mBAAmB,CAAC;AAClD,yBAAyB,GAAG,iBAAiB,CAAC;AAC9C,6BAA6B,GAAG,qBAAqB,CAAC;AACtD,iCAAiC,GAAG,yBAAyB,CAAC;AAC9D,mCAAmC,GAAG,2BAA2B,CAAC;AAClE,6BAA6B,GAAG,qBAAqB,CAAC;AACtD,wBAAwB,GAAG,gBAAgB,CAAC;AAC5C,gCAAgC,GAAG,wBAAwB,CAAC;AAC5D,0BAA0B,GAAG,kBAAkB,CAAC;AAChD,yCAAyC,GAAG,iCAAiC,CAAC;AAC9E,wBAAwB,GAAG,gBAAgB,CAAC;AAC5C,0BAA0B,GAAG,kBAAkB,CAAC;AAChD,sCAAsC,GAAG,8BAA8B,CAAC;AACxE,2BAA2B,GAAG,mBAAmB,CAAC;AAClD,oBAAoB,GAAG,YAAY,CAAC;AACpC,mBAAmB,GAAG,WAAW,CAAC;AAClC,kBAAkB,GAAG,UAAU,CAAC;AAChC,6BAA6B,GAAG,qBAAqB,CAAC;AACtD,mCAAmC,GAAG,2BAA2B,CAAC;AAClE,2BAA2B,GAAG,mBAAmB,CAAC;AAClD,0BAA0B,GAAG,kBAAkB,CAAC;AAChD,qBAAqB,GAAG,aAAa,CAAC;AACtC,sBAAsB,GAAG,cAAc,CAAC;AACxC,oDAAoD,GAAG,4CAA4C,CAAC;AACpG,qBAAqB,GAAG,aAAa,CAAC;AACtC,+BAA+B,GAAG,uBAAuB,CAAC;AAC1D,oBAAoB,GAAG,YAAY,CAAC;AACpC,oBAAoB,GAAG,YAAY,CAAC;AACpC,sBAAsB,GAAG,cAAc,CAAC;AACxC,iCAAiC,GAAG,yBAAyB,CAAC;AAC9D,6BAA6B,GAAG,qBAAqB,CAAC;AACtD,gCAAgC,GAAG,wBAAwB,CAAC;AAC5D,uCAAuC,GAAG,+BAA+B,CAAC;AAC1E,oCAAoC,GAAG,4BAA4B,CAAC;AACpE,sCAAsC,GAAG,8BAA8B,CAAC;AACxE,gCAAgC,GAAG,wBAAwB,CAAC;AAC5D,gCAAgC,GAAG,wBAAwB,CAAC;AAC5D,0CAA0C,GAAG,kCAAkC,CAAC;AAChF,kCAAkC,GAAG,0BAA0B,CAAC;AAChE,8BAA8B,GAAG,sBAAsB,CAAC;AACxD,mBAAmB,GAAG,WAAW,CAAC;AAClC,wBAAwB,GAAG,gBAAgB,CAAC;AAC5C,wBAAwB,GAAG,gBAAgB,CAAC;AAC5C,qBAAqB,GAAG,aAAa,CAAC;AACtC,wBAAwB,GAAG,gBAAgB,CAAC;AAC5C,oDAAoD,GAAG,4CAA4C,CAAC;AACpG,uCAAuC,GAAG,+BAA+B,CAAC;AAC1E,kCAAkC,GAAG,0BAA0B,CAAC;AAChE,oBAAoB,GAAG,YAAY,CAAC;AACpC,iCAAiC,GAAG,yBAAyB,CAAC;AAC9D,iCAAiC,GAAG,yBAAyB,CAAC;AAC9D,qBAAqB,GAAG,aAAa,CAAC;AACtC,8BAA8B,GAAG,sBAAsB,CAAC;AACxD,+BAA+B,GAAG,uBAAuB,CAAC;AAC1D,yBAAyB,GAAG,iBAAiB,CAAC;AAC9C,mCAAmC,GAAG,2BAA2B,CAAC;AAClE,6BAA6B,GAAG,qBAAqB,CAAC;AACtD,mBAAmB,GAAG,WAAW,CAAC;AAClC,iBAAiB,GAAG,SAAS,CAAC;AAC9B,qBAAqB,GAAG,aAAa,CAAC;AACtC,sBAAsB,GAAG,cAAc,CAAC;AACxC,sCAAsC,GAAG,8BAA8B,CAAC;AACxE,kCAAkC,GAAG,0BAA0B,CAAC;AAChE,8BAA8B,GAAG,sBAAsB,CAAC;AACxD,4BAA4B,GAAG,oBAAoB,CAAC;AACpD,sCAAsC,GAAG,8BAA8B,CAAC;AACxE,gDAAgD,GAAG,wCAAwC,CAAC;AAC5F,6CAA6C,GAAG,qCAAqC,CAAC;AACtF,4BAA4B,GAAG,oBAAoB,CAAC;AACpD,kBAAkB,GAAG,UAAU,CAAC;AAChC,2BAA2B,GAAG,mBAAmB,CAAC;AAClD,2BAA2B,GAAG,mBAAmB,CAAC;AAClD,0BAA0B,GAAG,kBAAkB,CAAC;AAChD,qBAAqB,GAAG,aAAa,CAAC;AACtC,0BAA0B,GAAG,kBAAkB,CAAC;AAChD,+BAA+B,GAAG,uBAAuB,CAAC;AAC1D,mCAAmC,GAAG,2BAA2B,CAAC;AAClE,iCAAiC,GAAG,yBAAyB,CAAC;AAC9D,2BAA2B,GAAG,mBAAmB,CAAC;AAClD,gCAAgC,GAAG,wBAAwB,CAAC;AAC5D,iCAAiC,GAAG,yBAAyB,CAAC;AAC9D,2BAA2B,GAAG,mBAAmB,CAAC;AAClD,6BAA6B,GAAG,qBAAqB,CAAC;AACtD,kCAAkC,GAAG,0BAA0B,CAAC;AAChE,8BAA8B,GAAG,sBAAsB,CAAC;AACxD,wBAAwB,GAAG,gBAAgB,CAAC;AAC5C,2BAA2B,GAAG,mBAAmB,CAAC;AAClD,sBAAsB,GAAG,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3YvC;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE;AAC7C,EAAE,KAAK,EAAE,IAAI;AACb,CAAC,CAAC,CAAC;AACH,eAAe,GAAG,KAAK,CAAC,CAAC;AACzB;AACgC;AAChC;AAC0C;AAC1C;AACyC;AACzC;AAC0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,wBAAwB,GAAG;AACjC,EAAE,GAAG,EAAE,CAAC;AACR,EAAE,KAAK,EAAE,CAAC;AACV,EAAE,MAAM,EAAE,CAAC;AACX,EAAE,aAAa,EAAE,CAAC;AAClB,EAAE,cAAc,EAAE,CAAC;AACnB,CAAC,CAAC;AACF;AACA,SAAS,SAAS,CAAC,GAAG,EAAE;AACxB,EAAE,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;AACvE,CAAC;AACD;AACA,SAAS,cAAc,CAAC,GAAG,EAAE;AAC7B,EAAE,IAAI,CAAC,GAAG,EAAE,OAAO,IAAI,CAAC;AACxB,EAAE,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;AACxB,CAAC;AACD;AACA,MAAM,6BAA6B,GAAG,CAAC,IAAI;AAC3C,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,KAAK,MAAM,EAAE;AACpC,IAAI,OAAO,IAAI0B,SAAO,CAAC,8BAA8B,CAAC,0DAA0D,CAAC,CAAC;AAClH,GAAG;AACH;AACA,EAAE,OAAO,CAAC,CAAC;AACX,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,GAAG,CAAC;AACV,EAAE,WAAW,CAAC,SAAS,EAAE,WAAW,GAAG,KAAK,EAAE;AAC9C,IAAI,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC;AAC5B,IAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC/B,IAAI,SAAS,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC,YAAY,EAAE,8BAA8B,EAAE,iBAAiB,EAAE,qBAAqB,EAAE,qBAAqB,EAAE,yBAAyB,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,sBAAsB,EAAE,qBAAqB,EAAE,wBAAwB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,wBAAwB,CAAC,EAAE,WAAW,CAAC,CAAC;AAC9Z,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,UAAU,CAAC,IAAI,EAAE,WAAW,EAAE,aAAa,EAAE;AAC/C,IAAI,IAAI,KAAK,GAAG,IAAIC,KAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC5C,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACpD,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,KAAK;AACtC,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AACnD,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,WAAW,GAAG,IAAI,GAAG,IAAI,EAAE,aAAa,GAAG,IAAI,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI;AAC5H,MAAM,IAAI,MAAM,GAAG,EAAE,CAAC;AACtB,MAAM,IAAI,eAAe,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACxC,MAAM,IAAI,aAAa,GAAG,QAAQ,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC;AACxD,MAAM,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAChF,MAAM,MAAM,CAAC,OAAO,GAAG,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,eAAe,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,GAAG,CAAC,GAAG,aAAa,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AACjI;AACA,MAAM,IAAI,aAAa,EAAE;AACzB,QAAQ,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,eAAe,GAAG,CAAC,GAAG,aAAa,EAAE,CAAC,GAAG,eAAe,GAAG,CAAC,GAAG,aAAa,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACjJ,OAAO;AACP;AACA,MAAM,OAAO,MAAM,CAAC;AACpB,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,4BAA4B,CAAC;AAC/B,IAAI,IAAI;AACR,GAAG,EAAE;AACL,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI;AACnF,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,KAAK,MAAM,EAAE;AACxC;AACA;AACA,QAAQ,OAAO,KAAK,CAAC;AACrB,OAAO;AACP;AACA,MAAM,MAAM,CAAC,CAAC;AACd,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE;AAClC,IAAI,IAAI,KAAK,GAAG,IAAIA,KAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC5C,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;AACnB,IAAI,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAC7C,IAAI,IAAI,MAAM,GAAG,EAAE,CAAC;AACpB,IAAI,IAAI,QAAQ,CAAC;AACjB;AACA,IAAI,IAAI,KAAK,GAAG,IAAIC,uBAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACxC,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC;AACtB,IAAI,IAAI,aAAa,GAAG,EAAE,CAAC;AAC3B;AACA,IAAI,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AAC1B,MAAM,IAAI,MAAM,GAAG,IAAIA,uBAAI,CAAC,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACrD,MAAM,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAClC,MAAM,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACzC,MAAM,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;AACzD,MAAM,aAAa,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACjF,KAAK;AACL;AACA,IAAI,OAAO,MAAM,KAAK,KAAK,CAAC,MAAM,EAAE;AACpC,MAAM,IAAI,YAAY,GAAG,MAAM,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,CAAC;AACzE,MAAM,IAAI,SAAS,GAAG,MAAM,GAAG,YAAY,GAAG,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,GAAG,MAAM,GAAG,YAAY,CAAC;AAClG;AACA,MAAM,IAAI,SAAS,IAAI,CAAC,IAAI,MAAM,GAAG,SAAS,IAAI,SAAS,EAAE;AAC7D;AACA,QAAQ,SAAS,EAAE,CAAC;AACpB,OAAO;AACP;AACA,MAAM,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,GAAG,SAAS,CAAC,CAAC;AAC7F;AACA,MAAM,IAAI,MAAM,KAAK,CAAC,EAAE;AACxB,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AACjC,QAAQ,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,KAAK;AAC1C,UAAU,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AACvD,SAAS,CAAC,CAAC;AACX,QAAQ,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,SAAS,CAAC,CAAC;AAC7E,OAAO,MAAM;AACb,QAAQ,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,GAAG,SAAS,CAAC,CAAC;AAC1D,OAAO;AACP;AACA,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC1B,MAAM,MAAM,IAAI,SAAS,CAAC;AAC1B,KAAK;AACL;AACA,IAAI,OAAO,IAAID,KAAM,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI;AAC5I,MAAM,QAAQ,GAAG,YAAY,CAAC;AAC9B,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM;AACnB,MAAM,MAAM,CAAC,GAAG,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACrE,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC1D,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpE,MAAM,OAAO;AACb,QAAQ,CAAC;AACT,QAAQ,CAAC;AACT,QAAQ,CAAC;AACT,OAAO,CAAC;AACR,KAAK,EAAE,CAAC,IAAI;AACZ,MAAM,MAAM,6BAA6B,CAAC,CAAC,CAAC,CAAC;AAC7C,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA,EAAE,mBAAmB,GAAG;AACxB,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI;AACxE,MAAM,IAAI,MAAM,GAAG,EAAE,CAAC;AACtB,MAAM,MAAM,CAAC,oBAAoB,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AACvD,MAAM,MAAM,CAAC,0BAA0B,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AAC7D,MAAM,MAAM,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AAC/C,MAAM,MAAM,CAAC,gBAAgB,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AACnD,MAAM,MAAM,CAAC,OAAO,GAAG,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AAChF,MAAM,OAAO,MAAM,CAAC;AACpB,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,mBAAmB,CAAC,IAAI,EAAE,UAAU,EAAE;AACxC,IAAI,IAAI,KAAK,GAAG,IAAIA,KAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC5C,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;AACnB,IAAI,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;AACjD,IAAI,IAAI,MAAM,GAAG,EAAE,CAAC;AACpB,IAAI,IAAI,QAAQ,CAAC;AACjB;AACA,IAAI,OAAO,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE;AACtC,MAAM,IAAI,YAAY,GAAG,MAAM,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;AAC7E,MAAM,IAAI,SAAS,GAAG,MAAM,GAAG,YAAY,GAAG,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,GAAG,MAAM,GAAG,YAAY,CAAC;AACtG,MAAM,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,SAAS,GAAG,SAAS,CAAC,CAAC;AACjG;AACA,MAAM,IAAI,MAAM,KAAK,CAAC,EAAE;AACxB,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AACjC,QAAQ,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,KAAK;AAC1C,UAAU,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AACvD,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;AACnE,QAAQ,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,EAAE,MAAM,GAAG,SAAS,CAAC,CAAC;AACnF,OAAO,MAAM;AACb,QAAQ,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,GAAG,SAAS,CAAC,CAAC;AAC5D,OAAO;AACP;AACA,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC1B,MAAM,MAAM,IAAI,SAAS,CAAC;AAC1B,KAAK;AACL;AACA,IAAI,OAAO,IAAIA,KAAM,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI;AAC5I,MAAM,QAAQ,GAAG,YAAY,CAAC;AAC9B,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM;AACnB,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC5B,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC1D,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpE,MAAM,OAAO;AACb,QAAQ,CAAC;AACT,QAAQ,CAAC;AACT,QAAQ,CAAC;AACT,OAAO,CAAC;AACR,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,uBAAuB,CAAC,IAAI,EAAE,kBAAkB,EAAE,oBAAoB,EAAE;AAC1E,IAAI,MAAM,eAAe,GAAG,SAAS,CAAC,kBAAkB,CAAC,CAAC;AAC1D,IAAI,MAAM,UAAU,GAAG,SAAS,CAAC,oBAAoB,CAAC,CAAC;AACvD,IAAI,IAAI,KAAK,GAAG,IAAIA,KAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC5C,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;AACjE,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;AACnB,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,KAAK;AACtC,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AACnD,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAClC,IAAI,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACzC,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACpC,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI;AAChF,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC5B,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC1D,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpE,MAAM,OAAO;AACb,QAAQ,CAAC;AACT,QAAQ,CAAC;AACT,QAAQ,CAAC;AACT,OAAO,CAAC;AACR,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,iBAAiB,CAAC,IAAI,EAAE,WAAW,EAAE;AACvC,IAAI,IAAI,KAAK,GAAG,IAAIA,KAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC5C,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACpD,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,KAAK;AACtC,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AACnD,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,WAAW,GAAG,IAAI,GAAG,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI;AACrG,MAAM,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACpD,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,cAAc,CAAC,IAAI,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,uBAAuB,EAAE,uBAAuB,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE;AACzL,IAAI,MAAM,qBAAqB,GAAG,cAAc,CAAC,kBAAkB,CAAC,CAAC;AACrE,IAAI,MAAM,0BAA0B,GAAG,cAAc,CAAC,uBAAuB,CAAC,CAAC;AAC/E,IAAI,IAAI,KAAK,GAAG,IAAIA,KAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC5C,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AACnG,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;AACnB,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,KAAK;AACtC,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AACnD,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAClC;AACA,IAAI,IAAI,qBAAqB,EAAE;AAC/B,MAAM,qBAAqB,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACjD,KAAK;AACL;AACA,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB,IAAI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC/F,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB;AACA,IAAI,IAAI,0BAA0B,EAAE;AACpC,MAAM,0BAA0B,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACtD,KAAK;AACL;AACA,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB,IAAI,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACpG,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB,IAAI,MAAM,CAAC,aAAa,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;AAC9C,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,aAAa,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;AACnD,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACvF,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACtF,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACxC,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,aAAa,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AAC5C,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI;AAChF,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC1D,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpE,MAAM,OAAO;AACb,QAAQ,CAAC;AACT,QAAQ,CAAC;AACT,OAAO,CAAC;AACR,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,iBAAiB,CAAC,IAAI,EAAE,kBAAkB,EAAE,sBAAsB,EAAE,kBAAkB,EAAE,2BAA2B,EAAE,uBAAuB,EAAE,2BAA2B,EAAE,uBAAuB,EAAE,gCAAgC,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE;AAChT,IAAI,MAAM,qBAAqB,GAAG,cAAc,CAAC,kBAAkB,CAAC,CAAC;AACrE,IAAI,MAAM,0BAA0B,GAAG,cAAc,CAAC,uBAAuB,CAAC,CAAC;AAC/E;AACA,IAAI,IAAI,EAAE,sBAAsB,IAAI,wBAAwB,CAAC,EAAE;AAC/D,MAAM,MAAM,IAAI,KAAK,CAAC,wDAAwD,GAAG,sBAAsB,CAAC,CAAC;AACzG,KAAK;AACL;AACA,IAAI,IAAI,EAAE,2BAA2B,IAAI,wBAAwB,CAAC,EAAE;AACpE,MAAM,MAAM,IAAI,KAAK,CAAC,6DAA6D,GAAG,2BAA2B,CAAC,CAAC;AACnH,KAAK;AACL;AACA,IAAI,IAAI,KAAK,GAAG,IAAIA,KAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC5C,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AACrH,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;AACnB,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,KAAK;AACtC,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AACnD,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAClC,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,wBAAwB,CAAC,sBAAsB,CAAC,CAAC;AACtE,IAAI,MAAM,EAAE,CAAC;AACb;AACA,IAAI,IAAI,qBAAqB,EAAE;AAC/B,MAAM,qBAAqB,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACjD,KAAK;AACL;AACA,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB;AACA,IAAI,IAAI,kBAAkB,EAAE;AAC5B,MAAM,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACjG,KAAK;AACL;AACA,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB;AACA,IAAI,IAAI,2BAA2B,EAAE;AACrC,MAAM,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC1G,KAAK;AACL;AACA,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,wBAAwB,CAAC,2BAA2B,CAAC,CAAC;AAC3E,IAAI,MAAM,EAAE,CAAC;AACb;AACA,IAAI,IAAI,0BAA0B,EAAE;AACpC,MAAM,0BAA0B,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACtD,KAAK;AACL;AACA,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB;AACA,IAAI,IAAI,uBAAuB,EAAE;AACjC,MAAM,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACtG,KAAK;AACL;AACA,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB;AACA,IAAI,IAAI,gCAAgC,EAAE;AAC1C,MAAM,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC/G,KAAK;AACL;AACA,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB,IAAI,MAAM,CAAC,aAAa,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;AAC9C,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,aAAa,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;AACnD,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACvF,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACtF,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACxC,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,aAAa,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AAC5C,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI;AAChF,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC1D,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpE,MAAM,OAAO;AACb,QAAQ,CAAC;AACT,QAAQ,CAAC;AACT,OAAO,CAAC;AACR,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,iBAAiB,CAAC,IAAI,EAAE,oBAAoB,EAAE,oBAAoB,EAAE,eAAe,EAAE,WAAW,EAAE,gBAAgB,EAAE,cAAc,EAAE,KAAK,EAAE,SAAS,EAAE;AACxJ,IAAI,MAAM,uBAAuB,GAAG,cAAc,CAAC,oBAAoB,CAAC,CAAC;AACzE,IAAI,MAAM,kBAAkB,GAAG,SAAS,CAAC,eAAe,CAAC,CAAC;AAC1D,IAAI,IAAI,KAAK,GAAG,IAAIA,KAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC5C,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1F,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;AACnB,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,KAAK;AACtC,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AACnD,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAClC;AACA,IAAI,IAAI,uBAAuB,EAAE;AACjC,MAAM,uBAAuB,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACnD,KAAK;AACL;AACA,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB,IAAI,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACjG,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB,IAAI,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC5C,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB,IAAI,MAAM,CAAC,aAAa,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;AAC9C,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,aAAa,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;AACnD,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC3F,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACxC,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,aAAa,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AAC5C,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI;AAChF,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC1D,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpE,MAAM,OAAO;AACb,QAAQ,CAAC;AACT,QAAQ,CAAC;AACT,OAAO,CAAC;AACR,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,oBAAoB,CAAC,IAAI,EAAE,oBAAoB,EAAE,wBAAwB,EAAE,oBAAoB,EAAE,6BAA6B,EAAE,eAAe,EAAE,WAAW,EAAE,gBAAgB,EAAE,cAAc,EAAE,KAAK,EAAE,SAAS,EAAE,0BAA0B,EAAE,uBAAuB,EAAE;AACzQ,IAAI,MAAM,uBAAuB,GAAG,cAAc,CAAC,oBAAoB,CAAC,CAAC;AACzE,IAAI,MAAM,kBAAkB,GAAG,SAAS,CAAC,eAAe,CAAC,CAAC;AAC1D,IAAI,MAAM,6BAA6B,GAAG,cAAc,CAAC,0BAA0B,CAAC,CAAC;AACrF;AACA,IAAI,IAAI,EAAE,wBAAwB,IAAI,wBAAwB,CAAC,EAAE;AACjE,MAAM,MAAM,IAAI,KAAK,CAAC,oDAAoD,GAAG,wBAAwB,CAAC,CAAC;AACvG,KAAK;AACL;AACA,IAAI,IAAI,KAAK,GAAG,IAAIA,KAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC5C,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,6BAA6B,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACnJ,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;AACnB,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,KAAK;AACtC,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AACnD,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAClC,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,wBAAwB,CAAC,wBAAwB,CAAC,CAAC;AACxE,IAAI,MAAM,EAAE,CAAC;AACb;AACA,IAAI,IAAI,uBAAuB,EAAE;AACjC,MAAM,uBAAuB,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACnD,KAAK;AACL;AACA,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB;AACA,IAAI,IAAI,oBAAoB,EAAE;AAC9B,MAAM,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACnG,KAAK;AACL;AACA,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB;AACA,IAAI,IAAI,6BAA6B,EAAE;AACvC,MAAM,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC5G,KAAK;AACL;AACA,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB,IAAI,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC5C,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB,IAAI,MAAM,CAAC,aAAa,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;AAC9C,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,aAAa,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;AACnD,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC3F,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACxC,IAAI,MAAM,IAAI,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,aAAa,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AAC5C;AACA,IAAI,IAAI,6BAA6B,IAAI,uBAAuB,EAAE;AAClE,MAAM,MAAM,IAAI,CAAC,CAAC;AAClB,MAAM,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACtG,MAAM,MAAM,IAAI,EAAE,CAAC;AACnB,MAAM,6BAA6B,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACzD,KAAK;AACL;AACA,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,6BAA6B,GAAG,IAAI,GAAG,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI;AACvH,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC1D,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpE,MAAM,OAAO;AACb,QAAQ,CAAC;AACT,QAAQ,CAAC;AACT,OAAO,CAAC;AACR,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,mBAAmB,CAAC,iBAAiB,EAAE,qBAAqB,EAAE;AAChE,IAAI,MAAM,oBAAoB,GAAG,cAAc,CAAC,iBAAiB,CAAC,CAAC;AACnE,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;AAC1C;AACA,IAAI,IAAI,oBAAoB,EAAE;AAC9B,MAAM,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAC3C,KAAK;AACL;AACA,IAAI,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AAC9F,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI;AACrF,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,KAAK,MAAM,EAAE;AACxC;AACA,QAAQ,OAAO,KAAK,CAAC;AACrB,OAAO;AACP;AACA,MAAM,MAAM,CAAC,CAAC;AACd,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,sBAAsB,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,qBAAqB,EAAE,8BAA8B,EAAE;AAC9H,IAAI,MAAM,oBAAoB,GAAG,cAAc,CAAC,iBAAiB,CAAC,CAAC;AACnE;AACA,IAAI,IAAI,EAAE,yBAAyB,IAAI,wBAAwB,CAAC,EAAE;AAClE,MAAM,MAAM,IAAI,KAAK,CAAC,sDAAsD,GAAG,yBAAyB,CAAC,CAAC;AAC1G,KAAK;AACL;AACA,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;AAC/C,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;AACnB;AACA,IAAI,IAAI,oBAAoB,EAAE;AAC9B,MAAM,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAChD,KAAK;AACL;AACA,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB;AACA,IAAI,IAAI,qBAAqB,EAAE;AAC/B,MAAM,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACpG,KAAK;AACL;AACA,IAAI,MAAM,IAAI,EAAE,CAAC;AACjB;AACA,IAAI,IAAI,8BAA8B,EAAE;AACxC,MAAM,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAC7G,KAAK;AACL;AACA,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,wBAAwB,CAAC,yBAAyB,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI;AACpI,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,KAAK,MAAM,EAAE;AACxC;AACA,QAAQ,OAAO,KAAK,CAAC;AACrB,OAAO;AACP;AACA,MAAM,MAAM,CAAC,CAAC;AACd,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE;AAC9B,IAAI,MAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;AACpC,IAAI,IAAI,KAAK,GAAG,IAAIA,KAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC5C,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;AACzD,IAAI,IAAI,MAAM,GAAG,CAAC,CAAC;AACnB,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,KAAK;AACtC,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AACnD,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAClC,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACjC,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI;AAChF,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC1D,MAAM,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpE,MAAM,OAAO;AACb,QAAQ,CAAC;AACT,QAAQ,CAAC;AACT,OAAO,CAAC;AACR,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gBAAgB,CAAC,IAAI,EAAE,WAAW,EAAE;AACtC,IAAI,IAAI,KAAK,GAAG,IAAIA,KAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC5C,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACpD,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,KAAK;AACtC,MAAM,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AACnD,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,WAAW,GAAG,IAAI,GAAG,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI;AACrG,MAAM,IAAI,MAAM,GAAG,EAAE,CAAC;AACtB,MAAM,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC/D,MAAM,OAAO,MAAM,CAAC;AACpB,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,sBAAsB,CAAC,eAAe,EAAE;AAC1C,IAAI,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACpC,IAAI,MAAM,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;AAC7C,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI;AACrF,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,KAAK,MAAM,EAAE;AACxC;AACA,QAAQ,OAAO,KAAK,CAAC;AACrB,OAAO;AACP;AACA,MAAM,MAAM,CAAC,CAAC;AACd,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA,CAAC;AACD;AACA,eAAe,GAAG,GAAG,CAAC;;;;;;AC9wBtB;AACA;AACA;AACA;AACA;AACA,MAAM,QAAQ,GAAG,WAAU;AAC3B;AACA,IAAI,OAAO,GAAG,UAAU,IAAI,EAAE;AAC9B,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AAC5B,IAAI,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC;AAC7C,GAAG;AACH,EAAE,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;AACzB,IAAI,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC;AAC3D,GAAG;AACH,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxC,IAAI,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;AACrC,MAAM,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC;AACrD,KAAK;AACL,GAAG;AACH,EAAE,IAAI,CAAC,IAAI,GAAG,KAAI;AAClB,EAAC;AACD;AACA,OAAO,CAAC,iBAAiB,GAAG,UAAU,IAAI,EAAE;AAC5C,EAAE,IAAI;AACN,IAAI,OAAO,CAAC,aAAa,CAAC,IAAI,EAAC;AAC/B,IAAI,OAAO,IAAI;AACf,GAAG,CAAC,OAAO,CAAC,EAAE;AACd,IAAI,OAAO,KAAK;AAChB,GAAG;AACH,EAAC;AACD;AACA,OAAO,CAAC,cAAc,GAAG,UAAU,IAAI,EAAE,OAAO,EAAE;AAClD,EAAE,IAAI;AACN,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,EAAC;AACrC,IAAI,OAAO,IAAI;AACf,GAAG,CAAC,OAAO,CAAC,EAAE;AACd,IAAI,OAAO,KAAK;AAChB,GAAG;AACH,EAAC;AACD;AACA,OAAO,CAAC,aAAa,GAAG,UAAU,IAAI,EAAE;AACxC,EAAE,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC;AAC1B,EAAC;AACD;AACA,OAAO,CAAC,UAAU,GAAG,UAAU,IAAI,EAAE,OAAO,EAAE;AAC9C;AACA,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAC;AACxB,GAAG,MAAM,IAAI,OAAO,EAAE;AACtB,IAAI,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC;AAC/C,GAAG;AACH;AACA,EAAE,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAC;AAC5B,EAAE,IAAI,GAAG,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,EAAC;AAClC,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxC,IAAI,IAAI,GAAG,GAAG,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC;AAC5C,IAAI,IAAI,GAAG,KAAK,IAAI,EAAE;AACtB,MAAM,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC;AACtC,KAAK;AACL,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAC;AACjC;AACA,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;AAC5B,MAAM,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC;AAC5C,KAAK;AACL;AACA,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;AAC7D,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,SAAQ;AACxB,KAAK,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;AACnC,MAAM,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC;AACzC,KAAK;AACL,GAAG;AACH,EAAE,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC;AACzB,EAAC;AACD;AACA,OAAO,CAAC,SAAS,CAAC,WAAW,GAAG,YAAY;AAC5C,EAAE,OAAO,IAAI,CAAC,IAAI;AAClB,EAAC;AACD;AACA,OAAO,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAU,MAAM,EAAE,QAAQ,EAAE;AACzD,EAAE,IAAI,GAAG,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAC;AACvC,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC7C,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,EAAC;AAC1B,IAAI,IAAI,GAAG,GAAG,QAAQ,EAAE;AACxB,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,QAAQ,KAAK,QAAQ,GAAG,GAAG,GAAG,IAAI,EAAC;AAC1D,KAAK,MAAM;AACX,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,IAAG;AAClB,KAAK;AACL,GAAG;AACH,EAAE,OAAO,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;AAC7C,EAAC;AACD;AACA,OAAO,CAAC,SAAS,CAAC,OAAO,GAAG,YAAY;AACxC,EAAE,OAAO,WAAW,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,GAAG;AAC5C,EAAC;AACD;AACA,aAAc,GAAG;;;AC9FjB;AACA,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE;AAC7C,EAAE,KAAK,EAAE,IAAI;AACb,CAAC,CAAC,CAAC;AACH;AACuC;AACvC;AACA,IAAI,WAAW,GAAG,sBAAsB,CAACE,SAAU,CAAC,CAAC;AACrD;AACyC;AACzC;AACA,IAAI,YAAY,GAAG,sBAAsB,CAACC,8BAAW,CAAC,CAAC;AACvD;AACA,SAAS,sBAAsB,CAAC,GAAG,EAAE,EAAE,OAAO,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,GAAG,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE;AAC/F;AACA,SAAS,iBAAiB,CAAC,EAAE,EAAE,EAAE,OAAO,YAAY,EAAE,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM,EAAE,EAAE,SAAS,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,KAAK,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,EAAE,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,EAAE,EAAE,UAAU,GAAG,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE;AAC1c;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,SAAS,CAAC;AAChB;AACA,EAAE,WAAW,CAAC,SAAS,EAAE,WAAW,GAAG,WAAW,EAAE,MAAM,GAAG,OAAO,CAAC,KAAK,EAAE;AAC5E,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;AACpB,IAAI,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;AAC7B,IAAI,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;AAC7B,IAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAC5B,IAAI,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;AAClC,IAAI,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;AACtC,IAAI,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;AAC1C,IAAI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAC9B,IAAI,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;AACrC;AACA,IAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC/B,IAAI,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACzB,IAAI,IAAI,WAAW,EAAE;AACrB,MAAM,SAAS,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC,qBAAqB,EAAE,kBAAkB,EAAE,4BAA4B,EAAE,aAAa,EAAE,UAAU,EAAE,iBAAiB,CAAC,EAAE,WAAW,CAAC,CAAC;AAClL,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gBAAgB,CAAC,eAAe,EAAE,GAAG,GAAG,EAAE,EAAE;AAC9C,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC;AACrB;AACA,IAAI,OAAO,iBAAiB,CAAC,aAAa;AAC1C,MAAM,IAAI,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,cAAc,EAAE;AAC7C,QAAQ,MAAM,sDAAsD,CAAC;AACrE,OAAO;AACP;AACA,MAAM,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;AAC5B,MAAM,MAAM,GAAG,GAAG,KAAK,CAAC,qBAAqB,CAAC;AAC9C,MAAM,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;AAC5B,MAAM,MAAM,EAAE,GAAG,IAAI,CAAC;AACtB,MAAM,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAE,KAAK,CAAC,eAAe,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;AACvI;AACA,MAAM,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;AAC1E,MAAM,OAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACnC,KAAK,CAAC,EAAE,CAAC;AACT,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,0BAA0B,CAAC,eAAe,EAAE;AAC9C,IAAI,IAAI,MAAM,GAAG,IAAI,CAAC;AACtB;AACA,IAAI,OAAO,iBAAiB,CAAC,aAAa;AAC1C,MAAM,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;AAC7B,MAAM,MAAM,GAAG,GAAG,MAAM,CAAC,yBAAyB,CAAC;AACnD,MAAM,MAAM,EAAE,GAAG,IAAI,CAAC;AACtB,MAAM,MAAM,EAAE,GAAG,IAAI,CAAC;AACtB,MAAM,MAAM,IAAI,GAAG,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;AAC3F;AACA,MAAM,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;AAC3E,MAAM,MAAM,eAAe,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC1C,MAAM,MAAM,eAAe,GAAG,CAAC,GAAG,eAAe,CAAC;AAClD,MAAM,MAAM,eAAe,GAAG,QAAQ,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC;AAC5D,MAAM,OAAO;AACb,QAAQ,UAAU,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC;AAC1D,QAAQ,UAAU,EAAE,QAAQ,CAAC,KAAK,CAAC,eAAe,EAAE,eAAe,GAAG,eAAe,CAAC;AACtF,OAAO,CAAC;AACR,KAAK,CAAC,EAAE,CAAC;AACT,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,QAAQ,CAAC,oBAAoB,EAAE,sBAAsB,EAAE,IAAI,EAAE;AAC/D,IAAI,IAAI,MAAM,GAAG,IAAI,CAAC;AACtB;AACA,IAAI,OAAO,iBAAiB,CAAC,aAAa;AAC1C,MAAM,IAAI,IAAI,CAAC,MAAM,IAAI,EAAE,EAAE;AAC7B,QAAQ,MAAM,8BAA8B,CAAC;AAC7C,OAAO;AACP;AACA,MAAM,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;AAClJ,MAAM,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,aAAa,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;AACnH,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;AACnD,QAAQ,MAAM,4DAA4D,CAAC;AAC3E,OAAO;AACP;AACA,MAAM,OAAO,MAAM,CAAC,8BAA8B,CAAC,sBAAsB,EAAE,MAAM,CAAC,aAAa,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAC7G,KAAK,CAAC,EAAE,CAAC;AACT,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,eAAe,CAAC,oBAAoB,EAAE,sBAAsB,EAAE,GAAG,EAAE,UAAU,EAAE;AACjF,IAAI,IAAI,MAAM,GAAG,IAAI,CAAC;AACtB;AACA,IAAI,OAAO,iBAAiB,CAAC,aAAa;AAC1C;AACA,MAAM,MAAM,iCAAiC,GAAG,IAAI,CAAC;AACrD,MAAM,MAAM,sCAAsC,GAAG,IAAI,CAAC;AAC1D,MAAM,MAAM,2CAA2C,GAAG,IAAI,CAAC;AAC/D,MAAM,MAAM,uCAAuC,GAAG,IAAI,CAAC;AAC3D,MAAM,MAAM,4CAA4C,GAAG,IAAI,CAAC;AAChE;AACA,MAAM,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;AACxI,MAAM,IAAI,UAAU,IAAI,IAAI,EAAE;AAC9B,QAAQ,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACxF,QAAQ,MAAM,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,oBAAoB,EAAE,iCAAiC,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;AACjI,OAAO,MAAM;AACb,QAAQ,MAAM,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,oBAAoB,EAAE,iCAAiC,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;AAChI,OAAO;AACP;AACA,MAAM,IAAI,aAAa,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACvC,MAAM,IAAI,QAAQ,CAAC;AACnB,MAAM,OAAO,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;AACvC,QAAQ,MAAM,SAAS,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC;AACvE,QAAQ,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AAClE,QAAQ,QAAQ,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,oBAAoB,EAAE,aAAa,CAAC,MAAM,GAAG,CAAC,GAAG,sCAAsC,GAAG,2CAA2C,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;AAC1N,OAAO;AACP;AACA,MAAM,MAAM,YAAY,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACjD,MAAM,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;AACjG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE;AAC9C,QAAQ,MAAM,2EAA2E,CAAC;AAC1F,OAAO;AACP;AACA,MAAM,OAAO;AACb,QAAQ,IAAI,EAAE,YAAY;AAC1B,QAAQ,UAAU,EAAE,MAAM,MAAM,CAAC,8BAA8B,CAAC,sBAAsB,EAAE,MAAM,CAAC,oBAAoB,EAAE,uCAAuC,EAAE,4CAA4C,CAAC;AAC3M,OAAO,CAAC;AACR,KAAK,CAAC,EAAE,CAAC;AACT,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,mBAAmB,GAAG;AACxB,IAAI,IAAI,MAAM,GAAG,IAAI,CAAC;AACtB;AACA,IAAI,OAAO,iBAAiB,CAAC,aAAa;AAC1C,MAAM,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAC3F;AACA,MAAM,MAAM,SAAS,GAAG,UAAU,KAAK,EAAE,CAAC,EAAE;AAC5C,QAAQ,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACtC,QAAQ,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,OAAO,CAAC;AACR;AACA,MAAM,MAAM,QAAQ,GAAG,UAAU,KAAK,EAAE,CAAC,EAAE;AAC3C,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/C,UAAU,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;AAC5B,YAAY,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,WAAW;AACX,SAAS;AACT,QAAQ,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAC3B,OAAO,CAAC;AACR;AACA,MAAM,MAAM,CAAC,WAAW,EAAE,KAAK,CAAC,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACtD,MAAM,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,EAAE;AAC/D,QAAQ,OAAO,CAAC,IAAI,CAAC,CAAC;AACtB,OAAO,CAAC,CAAC;AACT,MAAM,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE;AACtE,QAAQ,OAAO,CAAC,IAAI,CAAC,CAAC;AACtB,OAAO,CAAC,CAAC;AACT,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,QAAQ,EAAE;AAC7C,QAAQ,MAAM,CAAC,MAAM,CAAC,uFAAuF,CAAC,CAAC;AAC/G,OAAO;AACP;AACA,MAAM,OAAO;AACb,QAAQ,OAAO,EAAE,EAAE,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,WAAW,CAAC,CAAC,CAAC;AAClF,QAAQ,MAAM,EAAE,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAC7C,QAAQ,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACzC,OAAO,CAAC;AACR,KAAK,CAAC,EAAE,CAAC;AACT,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,GAAG;AAChB,IAAI,IAAI,MAAM,GAAG,IAAI,CAAC;AACtB;AACA,IAAI,OAAO,iBAAiB,CAAC,aAAa;AAC1C,MAAM,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,iBAAiB,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AACnG,MAAM,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACjC,KAAK,CAAC,EAAE,CAAC;AACT,GAAG;AACH;AACA,EAAE,8BAA8B,CAAC,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,EAAE;AACnE,IAAI,IAAI,MAAM,GAAG,IAAI,CAAC;AACtB;AACA,IAAI,OAAO,iBAAiB,CAAC,aAAa;AAC1C,MAAM,IAAI,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;AAChC,MAAM,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;AACnD,QAAQ,MAAM,MAAM,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;AACpC,QAAQ,MAAM,CAAC,MAAM,CAAC,eAAe,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;AAC/D,QAAQ,MAAM,OAAO,GAAG,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;AACvD,QAAQ,MAAM,aAAa,GAAG,EAAE,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;AACxD,QAAQ,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,aAAa,GAAG,MAAM,GAAG,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AAC9H,QAAQ,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,OACA,MAAM,OAAO,SAAS,CAAC;AACvB,KAAK,CAAC,EAAE,CAAC;AACT,GAAG;AACH;AACA,EAAE,WAAW,CAAC,KAAK,EAAE;AACrB,IAAI,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC/B,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAC3B,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH;AACA,EAAE,cAAc,CAAC,MAAM,EAAE;AACzB,IAAI,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC/B,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;AAC/B,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH;AACA,EAAE,eAAe,CAAC,IAAI,EAAE;AACxB,IAAI,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;AACvC,IAAI,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;AACtG,GAAG;AACH,CAAC;AACD,eAAe,GAAG,SAAS,CAAC;;;;;;ACrS5B;MAwDqB,YAAa,SAAQ,gBAAgB;IAStD,YAAY,QAAe,EAAE,OAAc,EAAE,OAAgB,EAAE,MAAW,EAAE,MAAwB;QAChG,KAAK,CAAC,QAAQ,CAAC,CAAC;QARpB,SAAI,GAAmB,QAAQ,CAAC;QAS5B,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,SAAS,GAAG,IAAI,iBAAiB,CAACC,2BAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;KAC3E;;;;;IAMD,OAAa,aAAa,CAAC,SAAc;;YACrC,SAAS,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,CAAC;YACtD,IAAI,GAAG,EAAE,GAAG,CAAC;YAEb,IAAI;gBACA,GAAG,GAAG,IAAI,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;gBACpC,GAAG,GAAG,IAAI,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aACnC;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;aACjF;YAED,IAAI,MAAM,GAAG,MAAM,GAAG,CAAC,mBAAmB,EAAE,CAAC;YAE7C,IAAI,CAAC,MAAM,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,yDAAyD,iBAAiB,YAAY,CAAC,CAAC;aAC3G;YAED,IAAI,MAAM,CAAC,OAAO,GAAG,iBAAiB,EAAE;gBACpC,MAAM,IAAI,KAAK,CAAC,yDAAyD,iBAAiB,YAAY,CAAC,CAAC;aAC3G;YAED,OAAO,MAAM,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SAC/C;KAAA;IAED,OAAa,cAAc,CAAC,GAAY;;YACpC,IAAI,GAAG,GAAG,MAAM,GAAG,CAAC,0BAA0B,CAAC,iBAAiB,CAAC,CAAC;YAClE,IAAI,EAAE,GAAG,IAAIN,yBAAK,EAAE,CAAC;YACrB,EAAE,CAAC,SAAS,GAAG,GAAG,CAAC,UAAU,CAAC;YAC9B,EAAE,CAAC,SAAS,GAAG,GAAG,CAAC,UAAU,CAAC;YAE9B,OAAO,EAAE,CAAC;SACb;KAAA;IAED,OAAa,aAAa,CAAC,GAAQ;;YAC/B,IAAI,MAAM,GAAG,MAAM,GAAG,CAAC,UAAU,CAAC,uBAAuB,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACvE,IAAI,KAAK,GAAG,IAAIA,yBAAK,EAAE,CAAC;;YAExB,KAAK,CAAC,SAAS,GAAGN,kBAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;;YAEvD,KAAK,CAAC,SAAS,GAAGA,kBAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAEvD,OAAO,KAAK,CAAC;SAChB;KAAA;IAED,OAAa,OAAO,CAAC,GAAY,EAAE,GAAQ;;YACvC,IAAI;gBACA,IAAI,WAAW,GAAG,MAAM,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;gBACzD,IAAI,UAAU,GAAG,MAAM,YAAY,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gBACvD,IAAI,MAAM,GAAG,MAAM,GAAG,CAAC,mBAAmB,EAAE,CAAC;gBAC7C,OAAO,IAAI,YAAY,CAAC,WAAW,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;aACtE;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;aACnF;SACJ;KAAA;IAED,WAAW;QACP,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;KACtC;IAED,iBAAiB;QACb,IAAI,OAAO,GAAG,IAAInB,gBAAU,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC;QACtD,IAAI,IAAI,GAAG,OAAO,CAAC,oBAAoB,CAACmB,kBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;QAChF,OAAO,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;KAClE;IAEK,OAAO,CAACT,IAAe;;YACzB,MAAM,aAAa,GAAGsB,kBAAG,CAAC,MAAM,CAAC;gBAC7BC,sBAAO,CAACvB,IAAE,CAAC,KAAK,CAAC;gBACjBuB,sBAAO,CAACvB,IAAE,CAAC,QAAQ,CAAC;gBACpBuB,sBAAO,CAACvB,IAAE,CAAC,QAAQ,CAAC;gBACpBA,IAAE,CAAC,EAAE,KAAK,SAAS,GAAGA,IAAE,CAAC,EAAE,CAAC,GAAG,GAAGS,kBAAM,CAAC,IAAI,CAAC,EAAE,CAAC;gBACjDc,sBAAO,CAACvB,IAAE,CAAC,KAAK,CAAC;gBACjBA,IAAE,CAAC,IAAI;gBACPuB,sBAAO,CAACvB,IAAE,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;gBAC9BS,kBAAM,CAAC,IAAI,CAAC,EAAE,CAAC;gBACfA,kBAAM,CAAC,IAAI,CAAC,EAAE,CAAC;aAClB,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,uBAAuB,EAAE,aAAa,CAAC,CAAC;YAE5F,MAAM,WAAW,GAAG;gBAChB,CAAC,EAAE,IAAIe,iBAAK,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;gBAC7B,CAAC,EAAE,IAAIA,iBAAK,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;gBAC7B,CAAC,EAAE,IAAIA,iBAAK,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;aAChC,CAAC;YAEF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;YAC5C,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;YAE7C,IAAI,MAAM,GAAGzB,oCAAgB,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,UAAU,CAAC,CAAC;YAE5F,MAAM,WAAW,GAAc;gBAC3B,MAAM;aACT,CAAC;YAEF,MAAM,QAAQ,GAAGE,cAAW,CAAC,UAAU,iBAE/B,KAAK,EAAED,IAAE,CAAC,KAAK,EACf,QAAQ,EAAEA,IAAE,CAAC,QAAQ,EACrB,QAAQ,EAAEA,IAAE,CAAC,QAAQ,EACrB,EAAE,EAAEA,IAAE,CAAC,EAAE,EACT,KAAK,EAAEA,IAAE,CAAC,KAAK,EACf,IAAI,EAAEA,IAAE,CAAC,IAAI,IACV,WAAW,GAElB,WAAW,CACd,CAAC;YACF,OAAO,QAAQ,CAAC;SACnB;KAAA;;;IAID,mBAAmB,CACf,UAAsB,EACtB,OAAoB;QAEpB,IAAI,EAAE,GAAG,UAAU,CAAC,cAAc,EAAE,CAAC;QACrC,IAAI,MAAM,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;QAE5B,IAAI,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC;QACtB,IAAI,UAAU,GAA4B,EAAE,CAAC;;QAG7C,IAAI;YACA,UAAU,GAAI,EAAkB,CAAC,aAAa,EAAE,CAAC;SACpD;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;SAC/C;QAED,IAAI,KAAK,GAAG,GAAG,CAAC;QAChB,IACI,CAAC,MAAM,KAAKE,gBAAY,CAAC,QAAQ,IAAI,OAAO,KAAK,GAAG;aACnD,MAAM,KAAKC,8BAAmB,CAAC,QAAQ,IAAI,OAAO,KAAK,GAAG,CAAC,EAC9D;YACE,KAAK,GAAG,CAAE,EAAkB,IAAIsB,mBAAgB,EAAE,eAAe,EAAE,CAAC;SACvE;QAED,IAAI,GAAG,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC;QAC7B,IAAI,KAAK,GAAa,EAAE,CAAC;QAEzB,IAAI,UAAU,GAAG,IAAI,CAAC;;QAEtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAEpB,IAAI,OAAO,GAAG,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;;;YAGrD,IAAI,OAAO,KAAK,aAAa,CAAC,MAAM,EAAE;gBAClC,UAAU,GAAG,KAAK,CAAC;aACtB;YAED,IAAI,OAAO,GAAa,IAAI,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;YACrD,IAAI,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;YAC1D,IAAI,KAAK,GAAa,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM;gBACrC,OAAO,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;aACzD,CAAC,CAAC;YAEH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAI,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;gBAE/C,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACvB;SACJ;;QAGD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,IAAI,EAAE,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,OAAO,GAAa,EAAE,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;YACvD,IAAI,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;YAC1D,IAAI,KAAK,GAAa,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM;gBACrC,OAAO,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;aACzD,CAAC,CAAC;YAEH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAI,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;gBAE/C,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACvB;SACJ;QAED,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC;KAChC;IAED,kBAAkB,CAAC,OAAe;QAC9B,IAAI,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,CAAC;QACxD,IAAI,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,CAAC;QACxD,IAAI,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAE3D,IAAI,QAAQ,GAAG,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9C,IAAI,QAAQ,GAAG,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9C,IAAI,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAEnD,IAAI,QAAQ,IAAI,CAAC,EAAE;YACf,OAAO,KAAK,QAAQ,EAAE,CAAC;SAC1B;aAAM,IAAI,QAAQ,IAAI,CAAC,EAAE;YACtB,OAAO,KAAK,QAAQ,EAAE,CAAC;SAC1B;aAAM,IAAI,aAAa,IAAI,CAAC,EAAE;YAC3B,OAAO,KAAK,aAAa,EAAE,CAAC;SAC/B;aAAM,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAC3B,OAAO,KAAK,CAAC;SAChB;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;SACrD;KACJ;IAEK,KAAK,CAAC,UAAyB;;YACjC,IAAI,EAAE,GAAG,UAAU,CAAC,cAAc,EAAE,CAAC;YACrC,IAAI,MAAM,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;YAC5B,IAAI,OAAO,GAAgB,GAAG,CAAC;YAE/B,IAAI,YAAY,GAAG,kBAAkB,CAAC;YACtC,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAgB,UAAU,EAAE,OAAO,CAAC,CAAC;;YAGzF,IAAI,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,OAAO,CAAC;YACpD,IAAI,cAAc,GAAG,MAAM,IAAI,YAAY,IAAI,UAAU,CAAC;YAE1D,IAAI,QAAQ,CAAC;YACb,IAAI,cAAc,IAAI,cAAc,EAAE;gBAClC,QAAQ,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAuB,UAAU,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;aACnG;iBAAM;gBACH,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAuB,UAAU,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;aAC/F;YAED,OAAO,QAAQ,CAAC;SACnB;KAAA;IAED,aAAa,CAAC,OAAoB;QAC9B,QAAQ,OAAO;YACX,KAAK,GAAG;gBACJ,OAAO,KAAK,CAAC;YACjB,KAAK,GAAG,CAAC;YACT;gBACI,OAAO,KAAK,CAAC;SACpB;KACJ;IAED,cAAc,CAAC,OAAoB;QAC/B,QAAQ,OAAO;YACX,KAAK,GAAG;;gBAEJ,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;YACxC,KAAK,GAAG,CAAC;YACT;;gBAEI,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;SAC3C;KACJ;IAED,gBAAgB,CACZ,UAAsB,EACtB,OAAoB;QAEpB,IAAI,OAAO,KAAK,GAAG,EAAE;YACjB,OAAO,IAAI,CAAC;SACf;QAED,IAAI,EAAE,GAAG,UAAU,CAAC,cAAc,EAAE,CAAC;QACrC,IAAI,MAAM,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;QAE5B,MAAM,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,IAAI,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;;;;;;QAM7C,IACI,MAAM,KAAKtB,8BAAmB,CAAC,QAAQ;YACvC,MAAM,KAAKA,8BAAmB,CAAC,QAAQ;YACvC,MAAM,KAAKA,8BAAmB,CAAC,cAAc;YAC7C,MAAM,KAAKA,8BAAmB,CAAC,cAAc,EAC/C;YACE,OAAO,IAAI,CAAC;SACf;;;;;QAOD,OAAOuB,SAAO,CAAC,UAAU,CAAC,GAAG,iBAAiB,IAAI,eAAe,IAAI,SAAS,EAAE,CAAC,CAAC;KACrF;;IAGK,uBAAuB,CAG3B,UAAsB,EAAE,KAAe,EAAE,OAAoB;;YAC3D,IAAI,EAAE,GAAG,UAAU,CAAC,cAAc,EAAE,CAAC;YACrC,IAAI,MAAM,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;YAC5B,IAAI,YAAY,GAAG;gBACf,CAAC,EAAE,kBAAkB;gBACrB,CAAC,EAAE,qBAAqB;gBACxB,CAAC,EAAE,kBAAkB;aACxB,CAAC,OAAO,CAAC,CAAC;YAEC,QAAQ,YAAY,CAAC,MAAM,CAAC,GAAG;YAE3C,IAAI,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;YAEnD,MAAM,WAAW,GACb,OAAO,KAAK,GAAG,GAAGA,SAAO,CAAC,UAAU,CAAC,GAAG,gBAAgB,EAAE,CAAC,GAAGA,SAAO,CAAC,UAAU,CAAC,GAAG,iBAAiB,EAAE,CAAC,CAAC;YAC7G,IAAI,MAAM,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;YACnC,IAAI,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;;;;;;;;YAU5D,IAAI,cAAc,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;YAErG,IAAI,MAAM,GAAG,cAAc,CAAC,UAAU,CAAC;YACvC,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,CAAa,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YAEhF,IAAI,QAAQ,CAAC;YACb,QAAQ,OAAO;gBACX,KAAK,GAAG;oBACJ,QAAQ,GAAG,IAAIC,MAAK,CAAC,UAA2B,EAAE,KAAK,CAAC,CAAC;oBACzD,MAAM;gBACV,KAAK,GAAG;oBACJ,QAAQ,GAAG,IAAIC,aAAU,CAAC,UAAgC,EAAE,KAAK,CAAC,CAAC;oBACnE,MAAM;gBACV,KAAK,GAAG;oBACJ,QAAQ,GAAG,IAAIC,MAAK,CAAC,UAA2B,EAAE,KAAK,CAAC,CAAC;oBACzD,MAAM;aACb;YAED,OAAO,QAAoB,CAAC;;;;;;SAM/B;KAAA;;;IAIK,mBAAmB,CAGvB,UAAsB,EAAE,KAAe,EAAE,OAAoB;;YAC3D,IAAI,MAAM,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,GAAG,GAAWpB,kBAAM,CAAC,IAAI,CAACd,8BAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;;;;;;YAQ9E,IAAI,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;;YAGnD,MAAM,WAAW,GAAG+B,SAAO,CAAC,UAAU,CAAC,GAAG,iBAAiB,EAAE,CAAC,CAAC;YAC/D,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC;;YAGvE,IAAI,KAAK,GAAiB,IAAI,CAAC,cAAc,CAAa,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YAE9F,IAAI,QAAQ,CAAC;YACb,QAAQ,OAAO;gBACX,KAAK,GAAG;oBACJ,QAAQ,GAAG,IAAIC,MAAK,CAAC,UAA2B,EAAE,KAAK,CAAC,CAAC;oBACzD,MAAM;gBACV,KAAK,GAAG;oBACJ,QAAQ,GAAG,IAAIC,aAAU,CAAC,UAAgC,EAAE,KAAK,CAAC,CAAC;oBACnE,MAAM;gBACV,KAAK,GAAG;oBACJ,QAAQ,GAAG,IAAIC,MAAK,CAAC,UAA2B,EAAE,KAAK,CAAC,CAAC;oBACzD,MAAM;aACb;YAED,OAAO,QAAoB,CAAC;SAC/B;KAAA;IAED,qBAAqB,CAAC,KAAe;QACjC,IAAI,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,CAAS;YAC/C,OAAO,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SACnC,CAAC,CAAC;QAEH,IAAI,UAAU,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI;YAClC,OAAOH,SAAO,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SAC1C,CAAC,CAAC;QAEH,OAAO,UAAU,CAAC;KACrB;IAED,cAAc,CACV,UAAsB,EACtB,KAAe,EACf,MAAW,EACX,OAAoB;QAEpB,IAAI,KAAK,GAAiB,EAAE,CAAC;QAC7B,IAAI,EAAE,GAAG,UAAU,CAAC,cAAc,EAAE,CAAC;QACrC,IAAI,MAAM,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;;QAG5B,IAAI,GAAG,GAAG,EAAE,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;QACvC,IAAI,UAAU,GAA4B,EAAE,CAAC;QAC7C,IAAI,SAAS,GAAe,EAAE,CAAC;QAE/B,IAAI,KAAK,GAAG,GAAG,CAAC;QAChB,IACI,CAAC,MAAM,KAAKxB,gBAAY,CAAC,QAAQ,IAAI,OAAO,KAAK,GAAG;aACnD,MAAM,KAAKC,8BAAmB,CAAC,QAAQ,IAAI,OAAO,KAAK,GAAG,CAAC;aAC3D,MAAM,KAAKC,gBAAY,CAAC,QAAQ,IAAI,OAAO,KAAK,GAAG,CAAC,EACvD;YACE,KAAK,GAAG,CAAE,EAAkB,IAAIqB,mBAAgB,IAAIK,YAAW,EAAE,eAAe,EAAE,CAAC;SACtF;;QAGD,IAAI;YACA,UAAU,GAAI,EAAkB,CAAC,aAAa,EAAE,CAAC;SACpD;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;SAC/C;QAED,IAAI,eAAe,CAAC;QACpB,IAAI,OAAO,KAAK,GAAG,EAAE;YACjB,eAAe,GAAGC,yBAAwB,CAAC;SAC9C;aAAM,IAAI,OAAO,KAAK,GAAG,EAAE;YACxB,eAAe,GAAGC,gCAA6B,CAAC;SACnD;aAAM;YACH,eAAe,GAAGC,yBAAwB,CAAC;SAC9C;;QAGD,IAAI;YACA,SAAS,GAAI,EAAkB,CAAC,SAAS,EAAE,CAAC;SAC/C;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;SAC5C;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,MAAM,OAAO,GAAa,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;YAC3D,MAAM,IAAI,GAAe,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,eAAe,EAAE,CAAC,CAAC;YAEhF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACrC,IAAI,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC;gBACtB,IAAI,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;gBAE/B,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACjC,IAAI,OAAO,GAAGxB,kBAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAClC,MAAM,GAAG,GAAc,IAAIyB,kBAAS,EAAE,CAAC;gBACvC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBACxB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;aAC1B;YACD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACpB;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,IAAI,EAAE,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;YACtC,MAAM,OAAO,GAAa,EAAE,CAAC,UAAU,EAAE,CAAC;YAC1C,MAAM,IAAI,GAAe,eAAe,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,CAAC;YAE/D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACrC,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;gBACrC,IAAI,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;gBAE/B,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACjC,IAAI,OAAO,GAAGzB,kBAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAClC,MAAM,GAAG,GAAc,IAAIyB,kBAAS,EAAE,CAAC;gBACvC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBACxB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;aAC1B;YACD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACpB;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,OAAO,GAAa,QAAQ,CAAC,UAAU,EAAE,CAAC;YAChD,MAAM,IAAI,GAAe,eAAe,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC,CAAC;YAErE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACrC,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;gBACrC,IAAI,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;gBAE/B,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACjC,IAAI,OAAO,GAAGzB,kBAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAClC,MAAM,GAAG,GAAc,IAAIyB,kBAAS,EAAE,CAAC;gBACvC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBACxB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;aAC1B;YACD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACpB;QAED,OAAO,KAAK,CAAC;KAChB;IAEK,KAAK,CAAC,UAA8B;;YACtC,IAAI,EAAE,GAAG,UAAU,CAAC,cAAc,EAAE,CAAC;YACrC,IAAI,MAAM,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;YAC5B,IAAI,OAAO,GAAgB,GAAG,CAAC;YAC/B,IAAI,YAAY,GAAG,qBAAqB,CAAC;YAEzC,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAqB,UAAU,EAAE,OAAO,CAAC,CAAC;;YAE9F,IAAI,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,OAAO,CAAC;YACpD,IAAI,cAAc,GAAG,MAAM,IAAI,YAAY,IAAI,UAAU,CAAC;;;YAI1D,IAAI,KAAK,GAAG,UAAU,CAAC,cAAc,EAAE,CAAC,MAAM,EAAE,CAAC;YACjD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;gBAC7C,IAAI,MAAM,KAAK/B,8BAAmB,CAAC,iBAAiB,EAAE;oBAClD,cAAc,GAAG,KAAK,CAAC;oBACvB,MAAM;iBACT;aACJ;YAED,IAAI,QAAQ,CAAC;YACb,IAAI,cAAc,IAAI,cAAc,EAAE;gBAClC,QAAQ,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAiC,UAAU,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;aAC7G;iBAAM;gBACH,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAiC,UAAU,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;aACzG;;YAED,OAAO,QAAQ,CAAC;SACnB;KAAA;IAEK,KAAK,CAAC,UAAyB;;;;YAGjC,IAAI,EAAE,GAAG,UAAU,CAAC,cAAc,EAAE,CAAC;YACrC,IAAI,MAAM,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;YAE5B,IAAI,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;YACpB,IAAI,MAAM,KAAKC,gBAAY,CAAC,QAAQ,EAAE;gBAClC,IAAI,GAAG,GAAI,EAAkB,CAAC,SAAS,EAAE,CAAC;gBAC1C,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC;aAChC;iBAAM,IAAI,MAAM,KAAKA,gBAAY,CAAC,QAAQ,EAAE;gBACzC,IAAI,GAAG,GAAI,EAAkB,CAAC,eAAe,EAAE,CAAC;gBAChD,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC;aAChC;YAED,IAAI,QAAQ,IAAI,MAAM,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,KAAK,EAAE,GAAG,CAAC,CAAU,CAAC;;YAErF,OAAO,QAAQ,CAAC;SACnB;KAAA;;;MCxmBgB,oBAAqB,SAAQ,gBAAgB;;;;;;IAM9D,YAAY,OAAe,EAAE,OAAe;QACxC,IAAI,OAAO,GAAGW,yBAAK,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC7C,IAAI,OAAO,GAAGA,yBAAK,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC7D,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;QAEnB,IAAI,CAAC,SAAS,GAAG,IAAI,iBAAiB,CAACM,2BAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;KAC3E;IAKD,WAAW;QACP,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;KACtC;IAED,iBAAiB;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;KAC5C;;IAGD,KAAK,CAAC,EAAiB;QACnB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;KACrC;;IAGD,OAAO,CAAC,EAAe;QACnB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;KACrC;;IAED,KAAK,CAAC,EAAsB;QACxB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;KACrC;;IAGD,KAAK,CAAC,EAAiB;QACnB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;KACrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDL;;;AAIA;;;;MAIqB,aAAa;IAqL9B;QApLU,WAAM,GAAG,EAAE,CAAC;QAEZ,aAAQ,GAAG,EAAE,CAAC;QAEd,cAAS,GAAG,GAAG,CAAC;QAEhB,cAAS,GAAG,GAAG,CAAC;QAEnB,qBAAgB,GAAG,MAAM,CAAC;KA4KjB;;;;;;;IApKhB,UAAU,CAAC,QAAgB,EAAE,GAAW;QACpC,MAAM,EAAE,GAAWZ,QAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC,MAAM,CAACA,QAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;KAChD;;;;;;IAOK,YAAY,CAAC,KAAa;;YAC5B,OAAO,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;SAC1G;KAAA;;;;;;;IAQK,UAAU,CAAC,WAAsB,EAAE,IAAY;;YACjD,OAAO,MAAM,CAAC,MAAM,CAAC,SAAS,CAC1B;gBACI,IAAI,EAAE,QAAQ;gBACd,IAAI;gBACJ,UAAU,EAAE,IAAI,CAAC,gBAAgB;gBACjC,IAAI,EAAE,SAAS;aAClB,EACD,WAAW,EACX,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,EAC3C,KAAK,EACL,CAAC,SAAS,EAAE,SAAS,CAAC,CACzB,CAAC;SACL;KAAA;;;;;;;;IASD,MAAM,CAAC,OAAwB;QAC3B,IAAI,IAAY,CAAC;QACjB,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC7B,IAAI,GAAGA,QAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACvC;aAAM;YACH,IAAI,GAAGA,QAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC/B;QACD,OAAOA,QAAM,CAAC,IAAI,CAACd,8BAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;KAClE;;;;IAKD,QAAQ;QACJ,MAAM,IAAI,GAAGc,QAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC;KACf;;;;;;;;;IAUK,MAAM,CAAC,QAAgB,EAAE,IAAY;;YACvC,IAAI,GAAW,CAAC;YAChB,IAAI,IAAI,YAAYA,QAAM,EAAE;gBACxB,GAAG,GAAG,IAAI,CAAC;;aAEd;iBAAM,IAAI,IAAI,YAAY,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE;gBACtE,GAAG,GAAG,IAAI,CAAC;aACd;iBAAM;gBACH,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;aACzB;YAED,MAAM,IAAI,GAAW,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;YAC/E,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;SAC9B;KAAA;;;;;;;;;;IAWK,OAAO,CACT,QAAgB,EAChB,SAA0B,EAC1B,OAA2B,SAAS;;YAEpC,IAAI,GAAW,CAAC;YAChB,IAAI,OAAO,IAAI,KAAK,WAAW,IAAI,IAAI,YAAYA,QAAM,EAAE;gBACvD,GAAG,GAAG,IAAI,CAAC;aACd;iBAAM;gBACH,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;aACzB;YAED,IAAI,EAAU,CAAC;YACf,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,YAAYA,QAAM,EAAE;gBACjE,EAAE,GAAG,SAAS,CAAC;aAClB;iBAAM;gBACH,EAAE,GAAGA,QAAM,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;aACvC;YACD,MAAM,KAAK,GAAW,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YACrD,MAAM,WAAW,GAAc,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC9D,MAAM,IAAI,GAAc,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;YAChE,MAAM,EAAE,GAAWA,QAAM,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAEpF,MAAM,UAAU,GAAWA,QAAM,CAAC,IAAI,CAClC,MAAM,MAAM,CAAC,MAAM,CAAC,OAAO,CACvB;gBACI,IAAI,EAAE,SAAS;gBACf,EAAE;gBACF,cAAc,EAAE,GAAG;gBACnB,SAAS,EAAE,IAAI,CAAC,SAAS;aAC5B,EACD,IAAI,EACJ,EAAE,CACL,CACJ,CAAC;YAEF,OAAO;gBACH,IAAI,EAAE,GAAG;gBACT,EAAE;gBACF,UAAU;aACb,CAAC;SACL;KAAA;;;;;;;;;IAUK,OAAO,CAAC,QAAgB,EAAE,UAAkB,EAAE,IAAY,EAAE,EAAU;;YACxE,MAAM,KAAK,GAAW,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACtD,MAAM,WAAW,GAAc,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC9D,MAAM,IAAI,GAAc,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YAEjE,MAAM,EAAE,GAAWA,QAAM,CAAC,IAAI,CAC1B,MAAM,MAAM,CAAC,MAAM,CAAC,OAAO,CACvB;gBACI,IAAI,EAAE,SAAS;gBACf,EAAE;gBACF,cAAc,EAAE,IAAI;gBACpB,SAAS,EAAE,GAAG;aACjB,EACD,IAAI;YACJ,UAAU;aACb,CACJ,CAAC;YACF,OAAO,EAAE,CAAC;SACb;KAAA;;;AC1JL,MAAM,aAAa,GAAG,IAAI0B,aAAM,EAAE,CAAC;AAEnC,MAAM,gBAAgB,GAAG,KAAK,CAAC;AAE/B,MAAM,aAAa,GAAG,MAAM,CAAC;AAC7B,MAAM,aAAa,GAAG,MAAM,CAAC;AAe7B,SAAe,MAAM,CAAC,IAAe,EAAE,IAAY;;QAC/C,MAAM,OAAO,GAAW,IAAI,CAAC,OAAO,CAAC;QACrC,aAAa,CAAC,gBAAgB,GAAG,aAAa,CAAC;QAE/C,IAAI,IAAI,GAAW,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClD,IAAI,SAAS,GAAW,IAAI,CAAC,SAAS,CAAC;QAEvC,IAAI,eAAuB,CAAC;QAC5B,IAAI,SAAS,GAAW,MAAM,aAAa,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACnE,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAEjD,IAAI,eAAe,KAAK,SAAS,EAAE;YAC/B,MAAM,cAAc,CAAC;SACxB;QAED,IAAI,IAAI,GAAmB,IAAI,CAAC,IAAI,CAAC;QACrC,IAAI,WAAW,GAA4B,EAAE,CAAC;QAE9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,QAAQ,GAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;YAErC,IAAI,GAAG,GAAW,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACpD,IAAI,KAAK,GAAW,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAErD,IAAI,WAAW,GAAW,MAAM,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAC9E,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YAElD,WAAW,CAAC,IAAI,CAAC;gBACb,GAAG,EAAE,UAAU;aAClB,CAAC,CAAC;SACN;QAED,OAAO;YACH,OAAO;YACP,WAAW,EAAE,CAAC;YACd,IAAI,EAAE,WAAW;SACpB,CAAC;KACL;CAAA;AACD,SAAe,MAAM,CAAC,IAAe,EAAE,IAAY;;QAC/C,MAAM,OAAO,GAAW,IAAI,CAAC,OAAO,CAAC;QACrC,aAAa,CAAC,gBAAgB,GAAG,aAAa,CAAC;QAE/C,IAAI,IAAI,GAAW,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClD,IAAI,SAAS,GAAW,IAAI,CAAC,SAAS,CAAC;QAEvC,IAAI,eAAuB,CAAC;QAC5B,IAAI,SAAS,GAAU,MAAM,aAAa,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC9D,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEtD,IAAI,eAAe,KAAK,SAAS,EAAE;YAC/B,MAAM,cAAc,CAAC;SACxB;QAED,IAAI,IAAI,GAAmB,IAAI,CAAC,IAAI,CAAC;QACrC,IAAI,WAAW,GAA4B,EAAE,CAAC;QAE9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,QAAQ,GAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;YAErC,IAAI,GAAG,GAAW,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACpD,IAAI,KAAK,GAAW,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAErD,IAAI,WAAW,GAAW,MAAM,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAC9E,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YAElD,WAAW,CAAC,IAAI,CAAC;gBACb,GAAG,EAAE,UAAU;aAClB,CAAC,CAAC;SACN;QAED,OAAO;YACH,OAAO;YACP,WAAW,EAAE,CAAC;YACd,IAAI,EAAE,WAAW;SACpB,CAAC;KACL;CAAA;AACD,SAAe,MAAM,CAAC,IAAe,EAAE,IAAY;;QAC/C,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,aAAa,CAAC,gBAAgB,GAAG,aAAa,CAAC;QAE/C,IAAI,IAAI,GAAW,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClD,IAAI,SAAS,GAAW,IAAI,CAAC,SAAS,CAAC;QAEvC,IAAI,eAAuB,CAAC;QAC5B,IAAI,SAAS,GAAU,MAAM,aAAa,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC9D,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEtD,IAAI,eAAe,KAAK,SAAS,EAAE;YAC/B,MAAM,cAAc,CAAC;SACxB;QAED,IAAI,IAAI,GAAmB,IAAI,CAAC,IAAI,CAAC;QACrC,IAAI,WAAW,GAA4B,EAAE,CAAC;QAE9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,QAAQ,GAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;YAErC,IAAI,GAAG,GAAW,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACpD,IAAI,KAAK,GAAW,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAErD,IAAI,WAAW,GAAW,MAAM,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAC9E,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YAElD,WAAW,CAAC,IAAI,CAAC;gBACb,GAAG,EAAE,UAAU;aAClB,CAAC,CAAC;SACN;QAED,OAAO;YACH,OAAO;YACP,WAAW,EAAE,CAAC;YACd,IAAI,EAAE,WAAW;SACpB,CAAC;KACL;CAAA;AAED,SAAe,MAAM,CAAC,IAAe,EAAE,IAAY;;QAC/C,MAAM,OAAO,GAAW,IAAI,CAAC,OAAO,CAAC;QACrC,aAAa,CAAC,gBAAgB,GAAG,aAAa,CAAC;QAE/C,IAAI,IAAI,GAAW,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClD,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAE/B,IAAI,eAAuB,CAAC;QAC5B,IAAI,SAAS,GAAU,MAAM,aAAa,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC9D,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEtD,IAAI,eAAe,KAAK,SAAS,EAAE;YAC/B,MAAM,cAAc,CAAC;SACxB;QAED,IAAI,IAAI,GAAmB,IAAI,CAAC,IAAI,CAAC;QACrC,IAAI,WAAW,GAA4B,EAAE,CAAC;QAE9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,QAAQ,GAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;YAErC,IAAI,GAAG,GAAW,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACpD,IAAI,KAAK,GAAW,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAErD,IAAI,WAAW,GAAW,MAAM,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAC9E,IAAI,UAAU,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC;YAExC,WAAW,CAAC,IAAI,CAAC;gBACb,GAAG,EAAE,UAAU;aAClB,CAAC,CAAC;SACN;QAED,OAAO;YACH,OAAO;YACP,WAAW,EAAE,CAAC;YACd,IAAI,EAAE,WAAW;SACpB,CAAC;KACL;CAAA;AAED,SAAe,MAAM,CAAC,IAAe,EAAE,IAAY;;QAC/C,MAAM,OAAO,GAAW,IAAI,CAAC,OAAO,CAAC;QACrC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACrC,aAAa,CAAC,gBAAgB,GAAG,aAAa,CAAC;QAE/C,IAAI,IAAI,GAAW,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAElD,IAAI,IAAI,GAAmB,IAAI,CAAC,IAAI,CAAC;QACrC,IAAI,WAAW,GAA4B,EAAE,CAAC;QAE9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,QAAQ,GAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;YAErC,IAAI,GAAG,GAAW,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACpD,IAAI,IAAI,GAAwB,QAAQ,CAAC,IAAI,CAAC;YAC9C,IAAI,KAAK,GAAW,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAErD,IAAI,WAAmB,CAAC;YACxB,IAAI;gBACA,WAAW,GAAG,MAAM,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;aACrE;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,cAAc,CAAC;aACxB;YAED,MAAM,UAAU,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC;YAE1C,WAAW,CAAC,IAAI,CAAC;gBACb,GAAG,EAAE,UAAU;gBACf,IAAI,EAAE,IAAI;aACb,CAAC,CAAC;SACN;QAED,OAAO;YACH,OAAO;YACP,WAAW,EAAE,WAAW,IAAI,CAAC;YAC7B,IAAI,EAAE,WAAW;SACpB,CAAC;KACL;CAAA;AAED;;;;;AAKA,SAAe,WAAW,CAAC,IAAqB,EAAE,IAAY;;QAC1D,QAAQ,IAAI,CAAC,OAAO;YAChB,KAAK,KAAK;gBACN,OAAO,MAAM,MAAM,CAAC,IAAiB,EAAE,IAAI,CAAC,CAAC;YACjD,KAAK,KAAK;gBACN,OAAO,MAAM,MAAM,CAAC,IAAiB,EAAE,IAAI,CAAC,CAAC;YACjD,KAAK,KAAK;gBACN,OAAO,MAAM,MAAM,CAAC,IAAiB,EAAE,IAAI,CAAC,CAAC;YACjD,KAAK,KAAK;gBACN,OAAO,MAAM,MAAM,CAAC,IAAiB,EAAE,IAAI,CAAC,CAAC;YACjD,KAAK,KAAK;gBACN,OAAO,MAAM,MAAM,CAAC,IAAiB,EAAE,IAAI,CAAC,CAAC;YACjD;gBACI,MAAM,iBAAiB,CAAC;SAC/B;KACJ;CAAA;AAED,SAAS,aAAa,CAClB,IAAkE;IAEpD,MAAM,CAAC,kBAAkB,GAAG;IAC1C,IAAI,IAAI,GAAI,IAAqE,CAAC,IAAI,CAAC;IAEvF,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG;;QAEhB,IAAI,EAAE,GAAG,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC;;QAEjC,IAAI,OAAO,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QAEjD,IAAI,MAAM,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;QACrC,IAAI,MAAM,GAAW,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QAC5C,IAAI,QAAQ,GAAWrB,gBAAK,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QAE7D,OAAO;YACH,GAAG,EAAE,QAAQ;YACb,IAAI,EAAE,UAAU;SACnB,CAAC;KACL,CAAC,CAAC;AACP,CAAC;AAED,SAAS,aAAa,CAAC,IAAwB;IAC3C,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;QAC3B,GAAG,EAAE,GAAG,CAAC,GAAG;QACZ,IAAI,EAAE,UAAU;KACnB,CAAC,CAAC,CAAC;AACR,CAAC;AAED,SAAS,aAAa,CAAC,IAAwB;IAC3C,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;QAC3B,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,GAAG,EAAE,GAAG,CAAC,GAAG;KACf,CAAC,CAAC,CAAC;AACR,CAAC;AAED,SAAS,4BAA4B,CAAC,IAA8B;IAChE,QAAQ,IAAI,CAAC,OAAO;QAChB,KAAK,KAAK;YACN,OAAO,aAAa,CAAC,IAA0B,CAAC,CAAC;QACrD,KAAK,KAAK;YACN,OAAO,aAAa,CAAC,IAA0B,CAAC,CAAC;QACrD,KAAK,KAAK;YACN,OAAO,aAAa,CAAC,IAA0B,CAAC,CAAC;QACrD,KAAK,KAAK;YACN,OAAO,aAAa,CAAC,IAA0B,CAAC,CAAC;QACrD,KAAK,KAAK;YACN,OAAO,aAAa,CAAC,IAA0B,CAAC,CAAC;QACrD;YACI,MAAM,iBAAiB,CAAC;KAC/B;AACL,CAAC;AAED;;;;;;;AAOA,SAAe,WAAW,CACtB,OAA6C,EAC7C,IAAY,EACZ,WAAmB;;;QAGnB,aAAa,CAAC,gBAAgB,GAAG,aAAa,CAAC;QAE/C,IAAI,IAAI,GAAW,MAAM,aAAa,CAAC,QAAQ,EAAE,CAAC;QAElD,IAAI,IAAI,GAAmB,EAAE,CAAC;QAE9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,IAAI,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,GAAG,CAAC;YACR,IAAI,IAAyB,CAAC;YAC9B,IAAI,MAAM,CAAC,IAAI,KAAK,WAAW,EAAE;gBAC7B,GAAG,GAAI,MAA0B,CAAC,GAAG,CAAC;gBACtC,IAAI,GAAG,WAAW,CAAC;aACtB;iBAAM;gBACH,GAAG,GAAI,MAAyB,CAAC,QAAQ,CAAC;gBAC1C,IAAI,GAAG,UAAU,CAAC;aACrB;YACD,IAAI,QAAQ,GAAY,MAAM,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;YAErE,IAAI,QAAQ,GAAiB;gBACzB,GAAG,EAAE,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC;gBAC7C,EAAE,EAAE,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACpC,IAAI,EAAE,IAAI;aACb,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACvB;QAED,IAAI,SAAS,GAAc;YACvB,OAAO,EAAE,gBAAgB;YACzB,IAAI,EAAE,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC;YAC/B,WAAW;YACX,IAAI,EAAE,IAAI;SACb,CAAC;QACF,OAAO,SAAS,CAAC;KACpB;CAAA;AAED,eAAe,EAAE,WAAW,EAAE,WAAW,EAAE,gBAAgB,EAAE,4BAA4B,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
\ No newline at end of file
+{ "version": 3, "file": "index.js", "sources": ["../src/Network/helpers/rpcFromConfig.ts", "../src/Network/constants.ts", "../node_modules/url/node_modules/punycode/punycode.js", "../node_modules/url/util.js", "../node_modules/querystring/decode.js", "../node_modules/querystring/encode.js", "../node_modules/querystring/index.js", "../node_modules/url/url.js", "../src/common.ts", "../src/helpers/network_helper.ts", "../src/Network/network.ts", "../src/Network/providers/AVMWebSocketProvider.ts", "../src/Network/providers/EVMWebSocketProvider.ts", "../src/Network/providers/WebsocketProvider.ts", "../src/errors.ts", "../src/Asset/Erc20Token.ts", "../src/Asset/Erc20.ts", "../src/Network/index.ts", "../src/Asset/Assets.ts", "../src/Wallet/constants.ts", "../src/Wallet/EvmWalletReadonly.ts", "../src/Wallet/EvmWallet.ts", "../src/helpers/address_helper.ts", "../src/utils/utils.ts", "../src/helpers/tx_helper.ts", "../src/helpers/utxo_helper.ts", "../node_modules/events/events.js", "../src/History/history.ts", "../src/helpers/UniversalNode.ts", "../src/helpers/universal_tx_helper.ts", "../src/Wallet/Wallet.ts", "../src/Explorer/Explorer.ts", "../src/Wallet/HdScanner.ts", "../src/Wallet/HDWalletAbstract.ts", "../src/Wallet/MnemonicWallet.ts", "../src/Wallet/SingletonWallet.ts", "../node_modules/@ledgerhq/hw-app-eth/lib/utils.js", "../node_modules/@ledgerhq/errors/dist/index.cjs.js", "../node_modules/@ledgerhq/hw-app-eth/lib/Eth.js", "../node_modules/bip32-path/index.js", "../node_modules/@obsidiansystems/hw-app-avalanche/lib/Avalanche.js", "../src/Wallet/LedgerWallet.ts", "../src/Wallet/PublicMnemonicWallet.ts", "../src/Keystore/Crypto.ts", "../src/Keystore/keystore.ts"], "sourcesContent": ["import { NetworkConfig } from '../types';\n\nexport function getRpcC(conf: NetworkConfig) {\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/C/rpc`;\n}\nexport function getRpcX(conf: NetworkConfig) {\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/X`;\n}\nexport function getRpcP(conf: NetworkConfig) {\n    return `${conf.apiProtocol}://${conf.apiIp}:${conf.apiPort}/ext/bc/P`;\n}\n", "import { NetworkConfig } from './types';\n// import { AVMConstants } from 'avalanche/dist/apis/avm';\n// import Avalanche, { AvalancheCore } from 'avalanche';\nimport { Defaults } from 'avalanche/dist/utils';\nimport { getRpcC, getRpcP, getRpcX } from './helpers/rpcFromConfig';\n\nexport const MainnetConfig: NetworkConfig = {\n    rawUrl: 'https://api.djtx.network',\n    apiProtocol: 'https',\n    apiIp: 'api.djtx.network',\n    apiPort: 443,\n    explorerURL: 'https://explorerapi.djtx.network',\n    explorerSiteURL: 'https://explorer.djtx.network',\n    networkID: 1,\n    // @ts-ignore\n    xChainID: Defaults.network[1]['X']['blockchainID'],\n    // @ts-ignore\n    pChainID: Defaults.network[1]['P']['blockchainID'],\n    // @ts-ignore\n    cChainID: Defaults.network[1]['C']['blockchainID'],\n    // @ts-ignore\n    evmChainID: Defaults.network[1]['C']['chainID'],\n    // @ts-ignore\n    djtxID: Defaults.network[1]['X']['djtxAssetID'],\n    get rpcUrl() {\n        return {\n            c: getRpcC(this),\n            p: getRpcP(this),\n            x: getRpcX(this),\n        };\n    },\n};\n\nexport const TestnetConfig: NetworkConfig = {\n    rawUrl: 'https://api.djtx-test.network',\n    apiProtocol: 'https',\n    apiIp: 'api.djtx-test.network',\n    apiPort: 443,\n    explorerURL: 'https://explorerapi.djtx-test.network',\n    explorerSiteURL: 'https://explorer.djtx-test.network',\n    networkID: 5,\n    // @ts-ignore\n    xChainID: Defaults.network[5]['X']['blockchainID'],\n    // @ts-ignore\n    pChainID: Defaults.network[5]['P']['blockchainID'],\n    // @ts-ignore\n    cChainID: Defaults.network[5]['C']['blockchainID'],\n    // @ts-ignore\n    evmChainID: Defaults.network[5]['C']['chainID'],\n    // @ts-ignore\n    djtxID: Defaults.network[5]['X']['djtxAssetID'],\n    get rpcUrl() {\n        return {\n            c: getRpcC(this),\n            p: getRpcP(this),\n            x: getRpcX(this),\n        };\n    },\n};\n\nexport const LocalnetConfig: NetworkConfig = {\n    rawUrl: 'http://localhost:9650',\n    apiProtocol: 'http',\n    apiIp: 'localhost',\n    apiPort: 9650,\n    networkID: 12345,\n    // @ts-ignore\n    xChainID: Defaults.network[12345]['X']['blockchainID'],\n    // @ts-ignore\n    pChainID: Defaults.network[12345]['P']['blockchainID'],\n    // @ts-ignore\n    cChainID: Defaults.network[12345]['C']['blockchainID'],\n    // @ts-ignore\n    evmChainID: Defaults.network[12345]['C']['chainID'],\n    // @ts-ignore\n    djtxID: Defaults.network[12345]['X']['djtxAssetID'],\n    get rpcUrl() {\n        return {\n            c: getRpcC(this),\n            p: getRpcP(this),\n            x: getRpcX(this),\n        };\n    },\n};\n\n// Default network connection\nexport const DefaultConfig = MainnetConfig;\n", "/*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n", "'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n", "'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n", "import { BinTools } from 'avalanche';\n\nexport const bintools = BinTools.getInstance();\n", "import { NetworkConfig } from '@/Network/types';\nimport axios from 'axios';\nimport { Avalanche } from 'avalanche';\n\nexport function wsUrlFromConfigX(config: NetworkConfig): string {\n    let protocol = config.apiProtocol === 'http' ? 'ws' : 'wss';\n    return `${protocol}://${config.apiIp}:${config.apiPort}/ext/bc/X/events`;\n}\n\nexport function wsUrlFromConfigEVM(config: NetworkConfig): string {\n    let protocol = config.apiProtocol === 'http' ? 'ws' : 'wss';\n    return `${protocol}://${config.apiIp}:${config.apiPort}/ext/bc/C/ws`;\n}\n\n/**\n * Given the base url of an Avalanche API, requests the Network ID\n * @param url The base url for the Avalanche API\n */\nexport async function getNetworkIdFromURL(url: string): Promise<number> {\n    // TODO: Not be the best to assume /ext/info but Avalanchejs complicates things\n    let res = await axios.post(url + '/ext/info', {\n        jsonrpc: '2.0',\n        id: 1,\n        method: 'info.getNetworkID',\n    });\n    return parseInt(res.data.result.networkID);\n}\n\nexport function createAvalancheProvider(config: NetworkConfig) {\n    return new Avalanche(config.apiIp, config.apiPort, config.apiProtocol, config.networkID);\n}\n/**\n * Given a network configuration returns an Axios instance connected to the explorer\n */\nexport function createExplorerApi(networkConfig: NetworkConfig) {\n    if (!networkConfig.explorerURL) {\n        throw new Error('Network configuration does not specify an explorer API.');\n    }\n\n    return axios.create({\n        baseURL: networkConfig.explorerURL,\n        withCredentials: false,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    });\n}\n\n/**\n * Checks if the given network accepts credentials.\n * This must be true to use cookies.\n */\nexport async function canUseCredentials(config: NetworkConfig): Promise<boolean> {\n    let provider = createAvalancheProvider(config);\n    provider.setRequestConfig('withCredentials', true);\n\n    let infoApi = provider.Info();\n\n    // Make a dummy request with credentials\n    try {\n        await infoApi.getNetworkID();\n        return true;\n        // eslint-disable-next-line\n    } catch (e) {}\n\n    provider.setRequestConfig('withCredentials', false);\n\n    try {\n        await infoApi.getNetworkID();\n    } catch (e) {\n        throw new Error('Unable to connect.');\n    }\n\n    return false;\n}\n", "import { Avalanche } from 'avalanche/dist';\nimport { AVMAPI } from 'avalanche/dist/apis/avm';\nimport { InfoAPI } from 'avalanche/dist/apis/info';\nimport { EVMAPI } from 'avalanche/dist/apis/evm';\nimport Web3 from 'web3';\nimport { DefaultConfig } from './constants';\nimport { NetworkConfig, NetworkConfigRpc, NetworkProtocolType } from './types';\nimport { AxiosInstance } from 'axios';\nimport { getRpcC, getRpcP, getRpcX } from './helpers/rpcFromConfig';\nimport URL from 'url';\nimport { bintools } from '@/common';\nimport {\n    canUseCredentials,\n    createAvalancheProvider,\n    createExplorerApi,\n    getNetworkIdFromURL,\n} from '@/helpers/network_helper';\n\nexport const avalanche: Avalanche = createAvalancheProvider(DefaultConfig);\n\nexport const xChain: AVMAPI = avalanche.XChain();\nexport const cChain: EVMAPI = avalanche.CChain();\nexport const pChain = avalanche.PChain();\nexport const infoApi: InfoAPI = avalanche.Info();\n\nfunction getProviderFromUrl(url: string, credentials = false) {\n    return new Web3.providers.HttpProvider(url, {\n        timeout: 20000,\n        withCredentials: credentials,\n    });\n}\n\nconst rpcUrl = getRpcC(DefaultConfig);\nexport const web3 = new Web3(getProviderFromUrl(rpcUrl, true));\n\nexport let explorer_api: AxiosInstance | null = null;\nexport let activeNetwork: NetworkConfig = DefaultConfig;\n\n/**\n * Returns the evm chain ID of the active network\n */\nexport function getEvmChainID(): number {\n    return activeNetwork.evmChainID;\n}\n\n/**\n * Similar to `setRpcNetwork`, but checks if credentials can be used with the api.\n * @param config\n */\nexport async function setRpcNetworkAsync(config: NetworkConfig): Promise<void> {\n    let credentials = await canUseCredentials(config);\n    setRpcNetwork(config, credentials);\n}\n\n/**\n * Changes the connected network of the SDK.\n * This is a synchronous call that does not do any network requests.\n * @param conf\n * @param credentials\n */\nexport function setRpcNetwork(conf: NetworkConfig, credentials = true): void {\n    avalanche.setAddress(conf.apiIp, conf.apiPort, conf.apiProtocol);\n    avalanche.setNetworkID(conf.networkID);\n\n    if (credentials) {\n        avalanche.setRequestConfig('withCredentials', credentials);\n    } else {\n        avalanche.removeRequestConfig('withCredentials');\n    }\n\n    xChain.refreshBlockchainID(conf.xChainID);\n    xChain.setBlockchainAlias('X');\n\n    pChain.refreshBlockchainID(conf.pChainID);\n    pChain.setBlockchainAlias('P');\n\n    cChain.refreshBlockchainID(conf.cChainID);\n    cChain.setBlockchainAlias('C');\n\n    xChain.setDJTXAssetID(conf.djtxID);\n    pChain.setDJTXAssetID(conf.djtxID);\n    cChain.setDJTXAssetID(conf.djtxID);\n\n    if (conf.explorerURL) {\n        explorer_api = createExplorerApi(conf);\n    } else {\n        explorer_api = null;\n    }\n\n    let rpcUrl = getRpcC(conf);\n    web3.setProvider(getProviderFromUrl(rpcUrl, credentials));\n\n    activeNetwork = conf;\n}\n\n/**\n * Given the base url for an Avalanche API, returns a NetworkConfig object.\n * @param url A string including protocol, base domain, and ports (if any). Ex: `http://localhost:9650`\n */\nexport async function getConfigFromUrl(url: string): Promise<NetworkConfig> {\n    let urlObj = URL.parse(url);\n    let portStr = urlObj.port;\n\n    if (!urlObj.hostname || !urlObj.protocol) throw new Error('Invalid url.');\n\n    if (!portStr) {\n        portStr = urlObj.protocol === 'http:' ? '80' : '443';\n    }\n\n    // get network ID\n    let netID = await getNetworkIdFromURL(url);\n    let protocol: NetworkProtocolType = urlObj.protocol === 'http:' ? 'http' : 'https';\n\n    let connection = new Avalanche(urlObj.hostname, parseInt(portStr), protocol, netID);\n    // TODO: Use a helper for this\n    let connectionEvm = new Web3(urlObj.href + 'ext/bc/C/rpc');\n\n    let infoApi = connection.Info();\n    let xApi = connection.XChain();\n\n    let fetchIdX = infoApi.getBlockchainID('X');\n    let fetchIdP = infoApi.getBlockchainID('P');\n    let fetchIdC = infoApi.getBlockchainID('C');\n    let fetchEvmChainID = connectionEvm.eth.getChainId();\n    let fetchDjtxId = await xApi.getDJTXAssetID();\n\n    let values = await Promise.all([fetchIdX, fetchIdP, fetchIdC, fetchDjtxId, fetchEvmChainID]);\n\n    let idX = values[0];\n    let idP = values[1];\n    let idC = values[2];\n    let djtxId = bintools.cb58Encode(values[3]);\n    let evmChainId = values[4];\n\n    let config: NetworkConfig = {\n        rawUrl: url,\n        apiProtocol: protocol,\n        apiIp: urlObj.hostname,\n        apiPort: parseInt(portStr),\n        networkID: netID,\n        xChainID: idX,\n        pChainID: idP,\n        cChainID: idC,\n        djtxID: djtxId,\n        evmChainID: evmChainId,\n        get rpcUrl(): NetworkConfigRpc {\n            return {\n                c: getRpcC(this),\n                p: getRpcP(this),\n                x: getRpcX(this),\n            };\n        },\n    };\n\n    return config;\n}\n", "import Sockette from 'sockette';\nimport { PubSub } from 'avalanche';\nimport { WalletType } from '@/Wallet/types';\n\nconst FILTER_ADDRESS_SIZE = 1000;\n\nexport default class AVMWebSocketProvider {\n    isConnected = false;\n    socket: Sockette;\n\n    wallets: WalletType[] = [];\n    boundHandler: any;\n\n    constructor(wsUrl: string) {\n        this.boundHandler = () => this.onWalletAddressChange();\n        this.socket = new Sockette(wsUrl, {\n            onopen: () => {\n                this.onOpen();\n            },\n            onclose: () => {\n                this.onClose();\n            },\n            onmessage: () => {\n                this.onMessage();\n            },\n            onerror: () => {\n                this.onError();\n            },\n        });\n    }\n\n    /**\n     * Starts watching for transactions on this wallet.\n     * @param wallet The wallet instance to track\n     */\n    trackWallet(wallet: WalletType): void {\n        if (this.wallets.includes(wallet)) {\n            return;\n        }\n        this.wallets.push(wallet);\n\n        wallet.on('addressChanged', this.boundHandler);\n        this.updateFilterAddresses();\n    }\n\n    onWalletAddressChange(): void {\n        this.updateFilterAddresses();\n    }\n\n    removeWallet(w: WalletType): void {\n        if (!this.wallets.includes(w)) {\n            return;\n        }\n\n        let index = this.wallets.indexOf(w);\n        this.wallets.splice(index, 1);\n        w.off('addressChanged', this.boundHandler);\n    }\n\n    setEndpoint(wsUrl: string): void {\n        this.socket.close();\n\n        this.socket = new Sockette(wsUrl, {\n            onopen: () => {\n                this.onOpen();\n            },\n            onclose: () => {\n                this.onClose();\n            },\n            onmessage: () => {\n                this.onMessage();\n            },\n            onerror: () => {\n                this.onError();\n            },\n        });\n    }\n\n    // Clears the filter listening to X chain transactions\n    clearFilter(): void {\n        let pubsub = new PubSub();\n        let bloom = pubsub.newBloom(FILTER_ADDRESS_SIZE);\n        this.socket.send(bloom);\n    }\n\n    /**\n     * Creates a bloom filter from the addresses of the tracked wallets and subscribes to\n     * transactions on the node.\n     */\n    updateFilterAddresses(): void {\n        if (!this.isConnected) {\n            return;\n        }\n\n        let wallets = this.wallets;\n\n        let addrs = [];\n        for (let i = 0; i < wallets.length; i++) {\n            let w = wallets[i];\n            let externalAddrs = w.getExternalAddressesX();\n            let addrsLen = externalAddrs.length;\n            let startIndex = Math.max(0, addrsLen - FILTER_ADDRESS_SIZE);\n            let addAddrs = externalAddrs.slice(startIndex);\n            addrs.push(...addAddrs);\n        }\n\n        let pubsub = new PubSub();\n        let bloom = pubsub.newBloom(FILTER_ADDRESS_SIZE);\n        this.socket.send(bloom);\n\n        // Divide addresses by 100 and send multiple messages\n        // There is a max msg size ~10kb\n        const GROUP_AMOUNT = 100;\n        let index = 0;\n        while (index < addrs.length) {\n            let chunk = addrs.slice(index, index + GROUP_AMOUNT);\n            let addAddrs = pubsub.addAddresses(chunk);\n            this.socket.send(addAddrs);\n            index += GROUP_AMOUNT;\n        }\n    }\n\n    private updateWalletBalanceX() {\n        this.wallets.forEach((w) => {\n            w.updateUtxosX();\n        });\n    }\n\n    private onOpen() {\n        this.isConnected = true;\n        this.updateFilterAddresses();\n    }\n\n    private onMessage() {\n        this.updateWalletBalanceX();\n    }\n\n    private onClose() {\n        this.isConnected = false;\n    }\n\n    private onError() {}\n}\n", "import { ethers } from 'ethers';\nimport { WalletType } from '@/Wallet/types';\n\nconst SOCKET_RECONNECT_TIMEOUT = 1000;\n\nexport default class EVMWebSocketProvider {\n    provider: ethers.providers.WebSocketProvider;\n    wsUrl: string;\n    wallets: WalletType[] = [];\n\n    constructor(wsUrl: string) {\n        let provider = new ethers.providers.WebSocketProvider(wsUrl);\n        this.provider = provider;\n        this.wsUrl = wsUrl;\n\n        this.addListeners();\n    }\n\n    setEndpoint(wsUrl: string): void {\n        this.destroyConnection();\n        let provider = new ethers.providers.WebSocketProvider(wsUrl);\n        this.provider = provider;\n        this.wsUrl = wsUrl;\n\n        this.addListeners();\n    }\n\n    trackWallet(wallet: WalletType): void {\n        if (this.wallets.includes(wallet)) {\n            return;\n        }\n\n        this.wallets.push(wallet);\n    }\n\n    removeWallet(wallet: WalletType): void {\n        if (!this.wallets.includes(wallet)) {\n            return;\n        }\n\n        let index = this.wallets.indexOf(wallet);\n        this.wallets.splice(index, 1);\n    }\n\n    async destroyConnection(): Promise<void> {\n        this.provider._websocket.onclose = () => {};\n        await this.provider.destroy();\n    }\n\n    async reconnect(): Promise<void> {\n        // Clear the current onclose handler so that we dont attempt a reconnection\n        await this.destroyConnection();\n        let wsProvider = new ethers.providers.WebSocketProvider(this.wsUrl);\n        this.provider = wsProvider;\n    }\n\n    private addListeners() {\n        let provider = this.provider;\n\n        provider.on('block', () => {\n            this.onBlock();\n        });\n\n        // Save default function so we can keep calling it\n        let defaultOnOpen = provider._websocket.onopen;\n        let defaultOnClose = provider._websocket.onclose;\n\n        provider._websocket.onopen = (ev: any) => {\n            if (defaultOnOpen) defaultOnOpen(ev);\n        };\n\n        provider._websocket.onclose = (ev: any) => {\n            if (defaultOnClose) defaultOnClose(ev);\n\n            setTimeout(() => {\n                this.reconnect();\n            }, SOCKET_RECONNECT_TIMEOUT);\n        };\n    }\n\n    private removeListeners() {\n        this.provider.off('block', this.onBlock);\n    }\n\n    private onBlock() {\n        // Update wallet balances\n        this.wallets.forEach((w) => {\n            w.updateDjtxBalanceC();\n        });\n    }\n}\n", "import AVMWebSocketProvider from '@/Network/providers/AVMWebSocketProvider';\nimport EVMWebSocketProvider from '@/Network/providers/EVMWebSocketProvider';\nimport { WalletType } from '@/Wallet/types';\nimport { NetworkConfig } from '@/Network/types';\nimport { wsUrlFromConfigEVM, wsUrlFromConfigX } from '@/helpers/network_helper';\nimport { activeNetwork } from '@/Network/network';\n\nexport default class WebsocketProvider {\n    avmProvider: AVMWebSocketProvider;\n    evmProvider: EVMWebSocketProvider;\n\n    constructor(avmEndpoint: string, evmEndpoint: string) {\n        this.avmProvider = new AVMWebSocketProvider(avmEndpoint);\n        this.evmProvider = new EVMWebSocketProvider(evmEndpoint);\n    }\n\n    static fromActiveNetwork(): WebsocketProvider {\n        return WebsocketProvider.fromNetworkConfig(activeNetwork);\n    }\n\n    static fromNetworkConfig(config: NetworkConfig): WebsocketProvider {\n        let evm = wsUrlFromConfigEVM(config);\n        let avm = wsUrlFromConfigX(config);\n        return new WebsocketProvider(avm, evm);\n    }\n\n    public setEndpoints(avmEndpoint: string, evmEndpoint: string): void {\n        this.avmProvider.setEndpoint(avmEndpoint);\n        this.evmProvider.setEndpoint(evmEndpoint);\n    }\n\n    public setNetwork(config: NetworkConfig): void {\n        let evm = wsUrlFromConfigEVM(config);\n        let avm = wsUrlFromConfigX(config);\n        this.setEndpoints(avm, evm);\n    }\n\n    public trackWallet(wallet: WalletType): void {\n        this.avmProvider.trackWallet(wallet);\n        this.evmProvider.trackWallet(wallet);\n    }\n\n    public removeWallet(wallet: WalletType): void {\n        this.avmProvider.removeWallet(wallet);\n        this.evmProvider.removeWallet(wallet);\n    }\n}\n", "export const NO_NETWORK = new Error('No network selected.');\nexport const NO_EXPLORER_API = new Error('Explorer API not found.');\n", "import { activeNetwork, web3 } from '@/Network/network';\nimport ERC20Abi from '@openzeppelin/contracts/build/contracts/ERC20.json';\nimport { Erc20TokenData } from '@/Asset/types';\nimport { NO_NETWORK } from '@/errors';\nimport { BN } from 'avalanche';\nimport { Contract } from 'web3-eth-contract';\nimport DOMPurify from 'dompurify';\n\nexport default class Erc20Token {\n    contract: Contract;\n    address: string;\n    name: string;\n    symbol: string;\n    decimals: number;\n    chainId: number;\n    data: Erc20TokenData;\n\n    constructor(data: Erc20TokenData) {\n        this.name = DOMPurify.sanitize(data.name);\n        this.symbol = DOMPurify.sanitize(data.symbol);\n        this.address = data.address;\n        this.decimals = data.decimals;\n        this.chainId = data.chainId;\n        this.data = data;\n\n        //@ts-ignore\n        this.contract = new web3.eth.Contract(ERC20Abi.abi, data.address);\n    }\n\n    toData(): Erc20TokenData {\n        return this.data;\n    }\n\n    static async getData(address: string): Promise<Erc20TokenData> {\n        //@ts-ignore\n        let contract = new web3.eth.Contract(ERC20Abi.abi, address);\n\n        // Purify the values for XSS protection\n        let name = DOMPurify.sanitize(await contract.methods.name().call());\n        let symbol = DOMPurify.sanitize(await contract.methods.symbol().call());\n        let decimals = parseInt(await contract.methods.decimals().call());\n\n        if (!activeNetwork) {\n            throw NO_NETWORK;\n        }\n\n        return {\n            name,\n            symbol,\n            decimals,\n            address,\n            chainId: activeNetwork.evmChainID,\n        };\n    }\n\n    async balanceOf(address: string): Promise<BN> {\n        let bal = await this.contract.methods.balanceOf(address).call();\n        return new BN(bal);\n    }\n}\n", "import { Erc20Store, Erc20TokenData } from '@/Asset/types';\nimport Erc20Token from '@/Asset/Erc20Token';\n\nexport let erc20Cache: Erc20Store = {};\n\nexport function getErc20Cache(): Erc20Store {\n    return {\n        ...erc20Cache,\n    };\n}\n\n/**\n * Clears the internal erc20 cache.\n */\nexport function bustErc20Cache() {\n    erc20Cache = {};\n}\n\n/**\n * Fetches ERC20 data from the given contract address and adds the token to the given store.\n * @param address ERC20 Contract address\n */\nasync function addErc20Token(address: string): Promise<Erc20Token> {\n    let existing = erc20Cache[address];\n    if (existing) {\n        return existing;\n    }\n\n    try {\n        let data: Erc20TokenData = await Erc20Token.getData(address);\n        let token = new Erc20Token(data);\n\n        erc20Cache[address] = token;\n        return token;\n    } catch (e) {\n        throw new Error('Unable to add ERC20 contract.');\n    }\n}\n\n/**\n * Initates and caches an erc20 token from the given data.\n * @param data Information such as name, symbol, and address about the ERC20 token.\n */\nexport function addErc20TokenFromData(data: Erc20TokenData): Erc20Token {\n    let address = data.address;\n    let existing = erc20Cache[address];\n    if (existing) {\n        return existing;\n    }\n\n    let token = new Erc20Token(data);\n    erc20Cache[address] = token;\n    return token;\n}\n\nexport async function getContractDataErc20(address: string): Promise<Erc20TokenData> {\n    try {\n        let data: Erc20TokenData = await Erc20Token.getData(address);\n        return data;\n    } catch (e) {\n        throw new Error(`ERC20 contract ${address} does not exist.`);\n    }\n}\n\nexport async function getErc20Token(address: string): Promise<Erc20Token> {\n    let storeItem = erc20Cache[address];\n    if (storeItem) {\n        return storeItem;\n    } else {\n        return await addErc20Token(address);\n    }\n}\n", "import { NetworkConfig } from './types';\nimport { MainnetConfig, TestnetConfig, LocalnetConfig } from '@/Network/constants';\nimport { activeNetwork, setRpcNetwork, getEvmChainID, getConfigFromUrl, setRpcNetworkAsync } from '@/Network/network';\nimport WebsocketProvider from '@/Network/providers/WebsocketProvider';\nimport { bustErc20Cache } from '@/Asset/Erc20';\n\nexport function setNetwork(conf: NetworkConfig) {\n    setRpcNetwork(conf);\n    bustErc20Cache();\n}\n\n/**\n * Unlike `setNetwork` this function will fail if the network is not available.\n * @param conf\n */\nexport async function setNetworkAsync(conf: NetworkConfig) {\n    await setRpcNetworkAsync(conf);\n    bustErc20Cache();\n}\n\nexport function isFujiNetwork(activeNetwork: NetworkConfig) {\n    return activeNetwork.networkID === TestnetConfig.networkID;\n}\n\nexport function isMainnetNetwork(activeNetwork: NetworkConfig) {\n    return activeNetwork.networkID === MainnetConfig.networkID;\n}\n\nexport function isLocalNetwork(activeNetwork: NetworkConfig) {\n    return activeNetwork.networkID === LocalnetConfig.networkID;\n}\n\n// Default connection is Mainnet\nsetNetwork(MainnetConfig);\n\nexport function getDjtxAssetID() {\n    return activeNetwork.djtxID;\n}\n\nexport function getActiveNetworkConfig() {\n    return activeNetwork;\n}\n\nexport { WebsocketProvider, getEvmChainID, getConfigFromUrl };\n\nexport { NetworkConfig } from './types';\n", "import { xChain } from '@/Network/network';\n\nimport { iAssetCache, iAssetDescriptionClean } from '@/Asset/types';\nimport DOMPurify from 'dompurify';\n\nlet assetCache: iAssetCache = {};\n\nexport function getAssetDescriptionSync(assetId: string): iAssetDescriptionClean {\n    if (typeof assetCache[assetId] === 'undefined') throw new Error(`Asset ID ${assetId} is not known.`);\n    return assetCache[assetId];\n}\n\n/**\n * Uses the node api to get meta data given an asset ID. Saves the result to cache.\n * @param assetId\n */\nexport async function getAssetDescription(assetId: string): Promise<iAssetDescriptionClean> {\n    let cache = assetCache[assetId];\n    if (cache) {\n        return cache;\n    }\n\n    try {\n        let res = await xChain.getAssetDescription(assetId);\n        let clean: iAssetDescriptionClean = {\n            ...res,\n            assetID: assetId,\n            name: DOMPurify.sanitize(res.name),\n            symbol: DOMPurify.sanitize(res.symbol),\n        };\n\n        assetCache[assetId] = clean;\n        return clean;\n    } catch (e) {\n        throw new Error(`Asset ${assetId} does not exist.`);\n    }\n}\n", "// HD WALLET\n// Accounts are not used and the account index is fixed to 0\n// m / purpose' / coin_type' / account' / change / address_index\n\nexport const DJTX_TOKEN_INDEX: string = '9000';\nexport const DJTX_ACCOUNT_PATH: string = `m/44'/${DJTX_TOKEN_INDEX}'/0'`; // Change and index left out\nexport const ETH_ACCOUNT_PATH: string = `m/44'/60'/0'`;\nexport const LEDGER_ETH_ACCOUNT_PATH = ETH_ACCOUNT_PATH + '/0/0';\n\nexport const INDEX_RANGE: number = 20; // a gap of at least 20 indexes is needed to claim an index unused\nexport const SCAN_SIZE: number = 70; // the total number of utxos to look at initially to calculate last index\nexport const SCAN_RANGE: number = SCAN_SIZE - INDEX_RANGE; // How many items are actually scanned\n\nexport const LEDGER_EXCHANGE_TIMEOUT = 90_000;\nexport const MIN_EVM_SUPPORT_V = '0.5.3';\n", "import { BN, Buffer as BufferAvalanche } from 'avalanche';\nimport { avalanche, web3 } from '@/Network/network';\nimport { publicToAddress, importPublic } from 'ethereumjs-util';\nimport { ethers } from 'ethers';\nimport { KeyPair as EVMKeyPair } from 'avalanche/dist/apis/evm/keychain';\nimport { bintools } from '@/common';\n\nexport default class EvmWalletReadonly {\n    balance = new BN(0);\n    address: string;\n    publicKey: Buffer;\n\n    constructor(publicKey: Buffer) {\n        this.publicKey = publicKey;\n        this.address = '0x' + publicToAddress(publicKey).toString('hex');\n    }\n\n    getBalance(): BN {\n        return this.balance;\n    }\n\n    getAddress(): string {\n        return ethers.utils.getAddress(this.address);\n    }\n\n    getAddressBech32(): string {\n        let keypair = new EVMKeyPair(avalanche.getHRP(), 'C');\n        let addr = keypair.addressFromPublicKey(BufferAvalanche.from(this.publicKey));\n        return bintools.addressToString(avalanche.getHRP(), 'C', addr);\n    }\n\n    async updateBalance() {\n        let bal = await web3.eth.getBalance(this.address);\n        this.balance = new BN(bal);\n        return this.balance;\n    }\n}\n", "import { Buffer as BufferAvalanche } from 'avalanche';\nimport { privateToPublic } from 'ethereumjs-util';\nimport { Transaction } from '@ethereumjs/tx';\nimport { avalanche } from '@/Network/network';\nimport {\n    KeyChain as EVMKeyChain,\n    KeyPair as EVMKeyPair,\n    UnsignedTx as EVMUnsignedTx,\n    Tx as EVMTx,\n} from 'avalanche/dist/apis/evm';\nimport EvmWalletReadonly from '@/Wallet/EvmWalletReadonly';\nimport { bintools } from '@/common';\n\nexport default class EvmWallet extends EvmWalletReadonly {\n    private privateKey: Buffer;\n\n    constructor(key: Buffer) {\n        let pubKey = privateToPublic(key);\n        super(pubKey);\n\n        this.privateKey = key;\n    }\n\n    private getPrivateKeyBech(): string {\n        return `PrivateKey-` + bintools.cb58Encode(BufferAvalanche.from(this.privateKey));\n    }\n\n    getKeyChain(): EVMKeyChain {\n        let keychain = new EVMKeyChain(avalanche.getHRP(), 'C');\n        keychain.importKey(this.getPrivateKeyBech());\n        return keychain;\n    }\n\n    getKeyPair(): EVMKeyPair {\n        let keychain = new EVMKeyChain(avalanche.getHRP(), 'C');\n        return keychain.importKey(this.getPrivateKeyBech());\n    }\n\n    signEVM(tx: Transaction) {\n        return tx.sign(this.privateKey);\n    }\n\n    signC(tx: EVMUnsignedTx): EVMTx {\n        return tx.sign(this.getKeyChain());\n    }\n\n    getPrivateKeyHex(): string {\n        return this.privateKey.toString('hex');\n    }\n}\n", "import { ChainIdType } from '@/types';\nimport Web3 from 'web3';\nimport { bintools } from '@/common';\n\nexport const validateAddress = (address: string): boolean | string => {\n    return validateAddressX(address) || validateAddressP(address) || validateAddressEVM(address);\n};\n\nexport function validateAddressX(address: string) {\n    try {\n        let buff = bintools.parseAddress(address, 'X');\n        if (!buff) return false;\n        return true;\n    } catch (error) {\n        return false;\n    }\n}\n\nexport function validateAddressP(address: string) {\n    try {\n        let buff = bintools.parseAddress(address, 'P');\n        if (!buff) return false;\n        return true;\n    } catch (error) {\n        return false;\n    }\n}\n\nexport function validateAddressEVM(address: string) {\n    return Web3.utils.isAddress(address);\n}\n\n/**\n * Returns the human readable part of a X or P bech32 address.\n * @param address\n */\nexport function getAddressHRP(address: string): string {\n    if (!validateAddress(address)) {\n        throw new Error('Invalid X or P address.');\n    }\n    return address.split('-')[1].split('1')[0];\n}\n\n/**\n * Given an address, return which Chain it belongs to\n * @param address\n */\nexport function getAddressChain(address: string): ChainIdType {\n    if (!validateAddress(address)) {\n        throw new Error('Invalid address.');\n    }\n\n    if (Web3.utils.isAddress(address)) {\n        return 'C';\n    } else {\n        return address[0] as ChainIdType;\n    }\n}\n", "// Extending Big.js with a helper function\nimport Big from 'big.js';\nimport { BN, Buffer as BufferAvalanche } from 'avalanche';\nimport { validateAddress } from '@/helpers/address_helper';\nimport createHash from 'create-hash';\nimport axios from 'axios';\nimport { cChain, pChain, web3, xChain } from '@/Network/network';\nimport {\n    AvmStatusResponseType,\n    AvmStatusType,\n    ChainStatusResponseTypeC,\n    ChainStatusTypeC,\n    PlatformStatusResponseType,\n    PlatformStatusType,\n} from '@/utils/types';\nimport { PayloadBase, PayloadTypes } from 'avalanche/dist/utils';\n\ndeclare module 'big.js' {\n    interface Big {\n        toLocaleString(toFixed?: number): string;\n    }\n}\n\nBig.prototype.toLocaleString = function (toFixed: number = 9) {\n    let fixedStr = this.toFixed(toFixed);\n    let split = fixedStr.split('.');\n    let wholeStr = parseInt(split[0]).toLocaleString('en-US');\n\n    if (split.length === 1) {\n        return wholeStr;\n    } else {\n        let remainderStr = split[1];\n\n        // remove trailing 0s\n        let lastChar = remainderStr.charAt(remainderStr.length - 1);\n        while (lastChar === '0') {\n            remainderStr = remainderStr.substring(0, remainderStr.length - 1);\n            lastChar = remainderStr.charAt(remainderStr.length - 1);\n        }\n\n        let trimmed = remainderStr.substring(0, toFixed);\n        if (!trimmed) return wholeStr;\n        return `${wholeStr}.${trimmed}`;\n    }\n};\n\n/**\n * @param val the amount to parse\n * @param denomination number of decimal places to parse with\n */\nexport function bnToBig(val: BN, denomination = 0): Big {\n    return new Big(val.toString()).div(Math.pow(10, denomination));\n}\n\n/**\n * Converts a BN amount of 18 decimals to 9.\n * Used for DJTX C <-> X,P conversions\n * @param amount\n */\nexport function djtxCtoX(amount: BN) {\n    let tens = new BN(10).pow(new BN(9));\n    return amount.div(tens);\n}\n\nexport function djtxXtoC(amount: BN) {\n    let tens = new BN(10).pow(new BN(9));\n    return amount.mul(tens);\n}\n\nexport function djtxPtoC(amount: BN) {\n    return djtxXtoC(amount);\n}\n\nexport function bnToBigDjtxX(val: BN): Big {\n    return bnToBig(val, 9);\n}\n\nexport function bnToBigDjtxP(val: BN): Big {\n    return bnToBigDjtxX(val);\n}\n\nexport function bnToBigDjtxC(val: BN): Big {\n    return bnToBig(val, 18);\n}\n\n/**\n * Parses the value using a denomination of 18\n *\n * @param val the amount to parse given in WEI\n *\n * @example\n * ```\n * bnToDjtxC(new BN('22500000000000000000')\n * // will return  22.5\n *```\n *\n */\nexport function bnToDjtxC(val: BN): string {\n    return bnToLocaleString(val, 18);\n}\n\n/**\n * Parses the value using a denomination of 9\n *\n * @param val the amount to parse given in nDJTX\n */\nexport function bnToDjtxX(val: BN): string {\n    return bnToLocaleString(val, 9);\n}\n\n/**\n * Parses the value using a denomination of 9\n *\n * @param val the amount to parse given in nDJTX\n */\nexport function bnToDjtxP(val: BN): string {\n    return bnToDjtxX(val);\n}\n\n/**\n *\n * @param val the number to parse\n * @param decimals number of decimal places used to parse the number\n */\nexport function numberToBN(val: number | string, decimals: number): BN {\n    let valBig = Big(val);\n    let tens = Big(10).pow(decimals);\n    let valBN = new BN(valBig.times(tens).toFixed(0));\n    return valBN;\n}\n\nexport function numberToBNDjtxX(val: number | string) {\n    return numberToBN(val, 9);\n}\n\nexport function numberToBNDjtxP(val: number | string) {\n    return numberToBNDjtxX(val);\n}\n\nexport function numberToBNDjtxC(val: number | string) {\n    return numberToBN(val, 18);\n}\n\n/**\n * @Remarks\n * A helper method to convert BN numbers to human readable strings.\n *\n * @param val The amount to convert\n * @param decimals Number of decimal places to parse the amount with\n *\n * @example\n * ```\n * bnToLocaleString(new BN(100095),2)\n * // will return '1,000.95'\n * ```\n */\nexport function bnToLocaleString(val: BN, decimals = 9): string {\n    let bigVal = bnToBig(val, decimals);\n    return bigToLocaleString(bigVal, decimals);\n}\n\nexport function bigToLocaleString(bigVal: Big, decimals: number = 9): string {\n    let fixedStr = bigVal.toFixed(decimals);\n    let split = fixedStr.split('.');\n    let wholeStr = parseInt(split[0]).toLocaleString('en-US');\n\n    if (split.length === 1) {\n        return wholeStr;\n    } else {\n        let remainderStr = split[1];\n\n        // remove trailing 0s\n        let lastChar = remainderStr.charAt(remainderStr.length - 1);\n        while (lastChar === '0') {\n            remainderStr = remainderStr.substring(0, remainderStr.length - 1);\n            lastChar = remainderStr.charAt(remainderStr.length - 1);\n        }\n\n        let trimmed = remainderStr.substring(0, decimals);\n        if (!trimmed) return wholeStr;\n        return `${wholeStr}.${trimmed}`;\n    }\n}\n\nconst COINGECKO_URL = 'https://api.coingecko.com/api/v3/simple/price?ids=avalanche-2&vs_currencies=usd';\n\n/**\n * Fetches the current DJTX price using Coin Gecko.\n * @remarks\n * You might get rate limited if you use this function frequently.\n *\n * @return\n * Current USD price of 1 DJTX\n */\nexport async function getDjtxPrice(): Promise<number> {\n    const res = await axios.get(COINGECKO_URL);\n    return res.data['avalanche-2'].usd;\n}\n\n/**\n * Checks if address is valid.\n *\n * @return\n * boolean if address is valid, error message if not valid.\n */\nexport function isValidAddress(address: string): boolean {\n    return validateAddress(address) === true;\n}\n\nexport function digestMessage(msgStr: string): Buffer {\n    let mBuf = Buffer.from(msgStr, 'utf8');\n    let msgSize = Buffer.alloc(4);\n    msgSize.writeUInt32BE(mBuf.length, 0);\n    let msgBuf = Buffer.from(`\\x1AAvalanche Signed Message:\\n${msgSize}${msgStr}`, 'utf8');\n    return createHash('sha256').update(msgBuf).digest();\n}\n\nexport async function waitTxX(txId: string, tryCount = 10): Promise<string> {\n    if (tryCount <= 0) {\n        throw new Error('Timeout');\n    }\n    let resp: AvmStatusResponseType;\n\n    try {\n        resp = (await xChain.getTxStatus(txId)) as AvmStatusResponseType;\n    } catch (e) {\n        throw new Error('Unable to get transaction status.');\n    }\n\n    let status: AvmStatusType;\n    let reason;\n    if (typeof resp === 'string') {\n        status = resp as AvmStatusType;\n    } else {\n        status = resp.status as AvmStatusType;\n        reason = resp.reason;\n    }\n\n    if (status === 'Unknown' || status === 'Processing') {\n        return await new Promise((resolve) => {\n            setTimeout(async () => {\n                resolve(await waitTxX(txId, tryCount - 1));\n            }, 1000);\n        });\n        // return await waitTxX(txId, tryCount - 1);\n    } else if (status === 'Rejected') {\n        throw new Error(reason);\n    } else if (status === 'Accepted') {\n        return txId;\n    }\n\n    return txId;\n}\n\nexport async function waitTxP(txId: string, tryCount = 10): Promise<string> {\n    if (tryCount <= 0) {\n        throw new Error('Timeout');\n    }\n    let resp: PlatformStatusResponseType;\n\n    try {\n        resp = (await pChain.getTxStatus(txId)) as PlatformStatusResponseType;\n    } catch (e) {\n        throw new Error('Unable to get transaction status.');\n    }\n\n    let status: PlatformStatusType;\n    let reason;\n    if (typeof resp === 'string') {\n        status = resp as PlatformStatusType;\n    } else {\n        status = resp.status as PlatformStatusType;\n        reason = resp.reason;\n    }\n\n    if (status === 'Unknown' || status === 'Processing') {\n        return await new Promise((resolve) => {\n            setTimeout(async () => {\n                resolve(await waitTxP(txId, tryCount - 1));\n            }, 1000);\n        });\n        // return await waitTxX(txId, tryCount - 1);\n    } else if (status === 'Dropped') {\n        throw new Error(reason);\n    } else if (status === 'Committed') {\n        return txId;\n    } else {\n        throw new Error('Unknown status type.');\n    }\n}\n\nexport async function waitTxEvm(txHash: string, tryCount = 10): Promise<string> {\n    if (tryCount <= 0) {\n        throw new Error('Timeout');\n    }\n\n    let receipt;\n\n    try {\n        receipt = await web3.eth.getTransactionReceipt(txHash);\n    } catch (e) {\n        throw new Error('Unable to get transaction receipt.');\n    }\n\n    if (!receipt) {\n        return await new Promise((resolve) => {\n            setTimeout(async () => {\n                resolve(await waitTxEvm(txHash, tryCount - 1));\n            }, 1000);\n        });\n    } else {\n        if (receipt.status) {\n            return txHash;\n        } else {\n            throw new Error('Transaction reverted.');\n        }\n    }\n}\n\nexport async function waitTxC(txId: string, tryCount = 10): Promise<string> {\n    if (tryCount <= 0) {\n        throw new Error('Timeout');\n    }\n\n    let resp: ChainStatusResponseTypeC;\n    try {\n        resp = (await cChain.getAtomicTxStatus(txId)) as ChainStatusResponseTypeC;\n    } catch (e) {\n        throw new Error('Unable to get transaction status.');\n    }\n\n    let status: ChainStatusTypeC;\n    let reason;\n    if (typeof resp === 'string') {\n        status = resp as ChainStatusTypeC;\n    } else {\n        status = resp.status as ChainStatusTypeC;\n        reason = resp.reason;\n    }\n\n    if (status === 'Unknown' || status === 'Processing') {\n        return await new Promise((resolve) => {\n            setTimeout(async () => {\n                resolve(await waitTxC(txId, tryCount - 1));\n            }, 1000);\n        });\n        // return await waitTxX(txId, tryCount - 1);\n    } else if (status === 'Dropped') {\n        throw new Error(reason);\n    } else if (status === 'Accepted') {\n        return txId;\n    } else {\n        throw new Error('Unknown status type.');\n    }\n}\n\nlet payloadtypes = PayloadTypes.getInstance();\n\nexport function parseNftPayload(rawPayload: string): PayloadBase {\n    let payload = BufferAvalanche.from(rawPayload, 'base64');\n    payload = BufferAvalanche.concat([new BufferAvalanche(4).fill(payload.length), payload]);\n\n    let typeId = payloadtypes.getTypeID(payload);\n    let pl: BufferAvalanche = payloadtypes.getContent(payload);\n    let payloadbase: PayloadBase = payloadtypes.select(typeId, pl);\n\n    return payloadbase;\n}\n\n/**\n * Returns the transaction fee for X chain.\n */\nexport function getTxFeeX() {\n    return xChain.getTxFee();\n}\n\n/**\n * Returns the transaction fee for P chain.\n */\nexport function getTxFeeP() {\n    return pChain.getTxFee();\n}\n", "import { xChain, cChain, pChain, web3 } from '@/Network/network';\n\n// import { ITransaction } from '@/components/wallet/transfer/types';\nimport { BN, Buffer } from 'avalanche';\nimport {\n    MinterSet,\n    NFTMintOutput,\n    UnsignedTx as AVMUnsignedTx,\n    UTXO as AVMUTXO,\n    UTXOSet,\n    UTXOSet as AVMUTXOSet,\n    AVMConstants,\n} from 'avalanche/dist/apis/avm';\n\nimport { PayloadBase } from 'avalanche/dist/utils';\nimport { OutputOwners } from 'avalanche/dist/common';\nimport { UTXOSet as PlatformUTXOSet, PlatformVMConstants } from 'avalanche/dist/apis/platformvm';\n\nimport { EVMConstants } from 'avalanche/dist/apis/evm';\n\nimport { AvmExportChainType } from '../Wallet/types';\nimport { Transaction } from '@ethereumjs/tx';\nimport EthereumjsCommon from '@ethereumjs/common';\n\nimport ERC20Abi from '@openzeppelin/contracts/build/contracts/ERC20.json';\nimport ERC721Abi from '@openzeppelin/contracts/build/contracts/ERC721.json';\nimport { bintools } from '@/common';\n\nexport async function buildCreateNftFamilyTx(\n    name: string,\n    symbol: string,\n    groupNum: number,\n    fromAddrs: string[],\n    minterAddr: string,\n    changeAddr: string,\n    utxoSet: UTXOSet\n) {\n    let fromAddresses = fromAddrs;\n    let changeAddress = changeAddr;\n    let minterAddress = minterAddr;\n\n    const minterSets: MinterSet[] = [];\n\n    // Create the groups\n    for (let i = 0; i < groupNum; i++) {\n        const minterSet: MinterSet = new MinterSet(1, [minterAddress]);\n        minterSets.push(minterSet);\n    }\n\n    let unsignedTx: AVMUnsignedTx = await xChain.buildCreateNFTAssetTx(\n        utxoSet,\n        fromAddresses,\n        [changeAddress],\n        minterSets,\n        name,\n        symbol\n    );\n    return unsignedTx;\n}\n\nexport async function buildMintNftTx(\n    mintUtxo: AVMUTXO,\n    payload: PayloadBase,\n    quantity: number,\n    ownerAddress: string,\n    changeAddress: string,\n    fromAddresses: string[],\n    utxoSet: UTXOSet\n): Promise<AVMUnsignedTx> {\n    let addrBuf = bintools.parseAddress(ownerAddress, 'X');\n    let owners = [];\n\n    let sourceAddresses = fromAddresses;\n\n    for (let i = 0; i < quantity; i++) {\n        let owner = new OutputOwners([addrBuf]);\n        owners.push(owner);\n    }\n\n    let groupID = (mintUtxo.getOutput() as NFTMintOutput).getGroupID();\n\n    let mintTx = await xChain.buildCreateNFTMintTx(\n        utxoSet,\n        owners,\n        sourceAddresses,\n        [changeAddress],\n        mintUtxo.getUTXOID(),\n        groupID,\n        payload\n    );\n    return mintTx;\n}\n\nexport async function buildAvmExportTransaction(\n    destinationChain: AvmExportChainType,\n    utxoSet: AVMUTXOSet,\n    fromAddresses: string[],\n    toAddress: string,\n    amount: BN, // export amount + fee\n    sourceChangeAddress: string\n) {\n    let destinationChainId;\n    switch (destinationChain) {\n        case 'P':\n            destinationChainId = pChain.getBlockchainID();\n            break;\n        case 'C':\n            destinationChainId = cChain.getBlockchainID();\n            break;\n    }\n\n    return await xChain.buildExportTx(utxoSet as AVMUTXOSet, amount, destinationChainId, [toAddress], fromAddresses, [\n        sourceChangeAddress,\n    ]);\n}\n\nexport async function buildPlatformExportTransaction(\n    utxoSet: PlatformUTXOSet,\n    fromAddresses: string[],\n    toAddress: string,\n    amount: BN, // export amount + fee\n    sourceChangeAddress: string\n) {\n    let destinationChainId = xChain.getBlockchainID();\n\n    return await pChain.buildExportTx(utxoSet, amount, destinationChainId, [toAddress], fromAddresses, [\n        sourceChangeAddress,\n    ]);\n}\n\nexport async function buildEvmExportTransaction(\n    fromAddresses: string[],\n    toAddress: string,\n    amount: BN, // export amount + fee\n    fromAddressBech: string\n) {\n    let destinationChainId = xChain.getBlockchainID();\n\n    const nonce = await web3.eth.getTransactionCount(fromAddresses[0]);\n    const djtxAssetIDBuf: Buffer = await xChain.getDJTXAssetID();\n    const djtxAssetIDStr: string = bintools.cb58Encode(djtxAssetIDBuf);\n\n    let fromAddressHex = fromAddresses[0];\n\n    return await cChain.buildExportTx(\n        amount,\n        djtxAssetIDStr,\n        destinationChainId,\n        fromAddressHex,\n        fromAddressBech,\n        [toAddress],\n        nonce\n    );\n}\n\nexport async function buildEvmTransferNativeTx(\n    from: string,\n    to: string,\n    amount: BN, // in wei\n    gasPrice: BN,\n    gasLimit: number\n) {\n    const nonce = await web3.eth.getTransactionCount(from);\n    const chainId = await web3.eth.getChainId();\n    const networkId = await web3.eth.net.getId();\n    const chainParams = {\n        common: EthereumjsCommon.forCustomChain('mainnet', { networkId, chainId }, 'istanbul'),\n    };\n\n    const tx = Transaction.fromTxData(\n        {\n            nonce: nonce,\n            gasPrice: '0x' + gasPrice.toString('hex'),\n            gasLimit: gasLimit,\n            to: to,\n            value: '0x' + amount.toString('hex'),\n            data: '0x',\n        },\n        chainParams\n    );\n    return tx;\n}\n\nexport async function buildCustomEvmTx(\n    from: string,\n    gasPrice: BN,\n    gasLimit: number,\n    data?: string,\n    to?: string,\n    value?: string,\n    nonce?: number\n): Promise<Transaction> {\n    if (typeof nonce === 'undefined') {\n        nonce = await web3.eth.getTransactionCount(from);\n    }\n\n    const chainId = await web3.eth.getChainId();\n    const networkId = await web3.eth.net.getId();\n\n    const chainParams = {\n        common: EthereumjsCommon.forCustomChain('mainnet', { networkId, chainId }, 'istanbul'),\n    };\n\n    let gasPriceHex = `0x${gasPrice.toString('hex')}`;\n\n    let tx = Transaction.fromTxData(\n        {\n            nonce,\n            gasPrice: gasPriceHex,\n            gasLimit,\n            value,\n            to,\n            data,\n        },\n        chainParams\n    );\n    return tx;\n}\n\nexport async function buildEvmTransferErc20Tx(\n    from: string,\n    to: string,\n    amount: BN, // in wei\n    gasPrice: BN,\n    gasLimit: number,\n    contractAddress: string\n) {\n    //@ts-ignore\n    const cont = new web3.eth.Contract(ERC20Abi.abi, contractAddress);\n    const tokenTx = cont.methods.transfer(to, amount.toString());\n\n    let data = tokenTx.encodeABI();\n\n    let tx = await buildCustomEvmTx(from, gasPrice, gasLimit, data, contractAddress);\n\n    return tx;\n}\n\nexport async function buildEvmTransferErc721Tx(\n    from: string,\n    to: string,\n    gasPrice: BN,\n    gasLimit: number,\n    tokenContract: string,\n    tokenId: string\n) {\n    const nonce = await web3.eth.getTransactionCount(from);\n    const chainId = await web3.eth.getChainId();\n    const networkId = await web3.eth.net.getId();\n    const chainParams = {\n        common: EthereumjsCommon.forCustomChain('mainnet', { networkId, chainId }, 'istanbul'),\n    };\n    // @ts-ignore\n    const contract = new web3.eth.Contract(ERC721Abi.abi, tokenContract);\n    const tokenTx = contract.methods.transferFrom(from, to, tokenId);\n\n    let tx = Transaction.fromTxData(\n        {\n            nonce: nonce,\n            gasPrice: gasPrice.toString('hex'),\n            gasLimit: gasLimit,\n            value: '0x0',\n            to: tokenContract,\n            data: tokenTx.encodeABI(),\n        },\n        chainParams\n    );\n    return tx;\n}\n\nexport async function estimateErc20Gas(tokenContract: string, from: string, to: string, value: BN) {\n    //@ts-ignore\n    const contract = new web3.eth.Contract(ERC20Abi.abi, tokenContract);\n    const tokenTx = contract.methods.transfer(to, value.toString());\n    return await tokenTx.estimateGas({\n        from: from,\n    });\n}\n\n/**\n * Estimates the gas needed to send DJTX\n * @param to Destination address\n * @param amount Amount of DJTX to send, given in WEI\n * @param gasPrice Given in WEI\n */\nexport async function estimateDjtxGas(from: string, to: string, amount: BN, gasPrice: BN): Promise<number> {\n    try {\n        return await web3.eth.estimateGas({\n            from,\n            to,\n            gasPrice: `0x${gasPrice.toString('hex')}`,\n            value: `0x${amount.toString('hex')}`,\n        });\n    } catch (e) {\n        // TODO: Throws an error if we do not have enough djtx balance\n        //TODO: Is it ok to return 21000\n        return 21000;\n    }\n}\n\nexport enum AvmTxNameEnum {\n    'Transaction' = AVMConstants.BASETX,\n    'Mint' = AVMConstants.CREATEASSETTX,\n    'Operation' = AVMConstants.OPERATIONTX,\n    'Import' = AVMConstants.IMPORTTX,\n    'Export' = AVMConstants.EXPORTTX,\n}\n\nexport enum PlatfromTxNameEnum {\n    'Transaction' = PlatformVMConstants.BASETX,\n    'Add Validator' = PlatformVMConstants.ADDVALIDATORTX,\n    'Add Delegator' = PlatformVMConstants.ADDDELEGATORTX,\n    'Import' = PlatformVMConstants.IMPORTTX,\n    'Export' = PlatformVMConstants.EXPORTTX,\n    'Add Subnet Validator' = PlatformVMConstants.ADDSUBNETVALIDATORTX,\n    'Create Chain' = PlatformVMConstants.CREATECHAINTX,\n    'Create Subnet' = PlatformVMConstants.CREATESUBNETTX,\n    'Advance Time' = PlatformVMConstants.ADVANCETIMETX,\n    'Reward Validator' = PlatformVMConstants.REWARDVALIDATORTX,\n}\n\n// TODO: create asset transactions\nexport enum ParseableAvmTxEnum {\n    'Transaction' = AVMConstants.BASETX,\n    'Import' = AVMConstants.IMPORTTX,\n    'Export' = AVMConstants.EXPORTTX,\n}\n\nexport enum ParseablePlatformEnum {\n    'Transaction' = PlatformVMConstants.BASETX,\n    'Add Validator' = PlatformVMConstants.ADDVALIDATORTX,\n    'Add Delegator' = PlatformVMConstants.ADDDELEGATORTX,\n    'Import' = PlatformVMConstants.IMPORTTX,\n    'Export' = PlatformVMConstants.EXPORTTX,\n}\n\nexport enum ParseableEvmTxEnum {\n    'Import' = EVMConstants.IMPORTTX,\n    'Export' = EVMConstants.EXPORTTX,\n}\n", "import { UTXOSet as AVMUTXOSet } from 'avalanche/dist/apis/avm/utxos';\nimport { UTXOSet as PlatformUTXOSet } from 'avalanche/dist/apis/platformvm/utxos';\nimport { UTXOSet as EVMUTXOSet } from 'avalanche/dist/apis/evm/utxos';\nimport { xChain, cChain, pChain } from '@/Network/network';\nimport { AvmImportChainType } from '@/Wallet/types';\nimport { GetStakeResponse } from 'avalanche/dist/common';\n\n/**\n *\n * @param addrs an array of X chain addresses to get the atomic utxos of\n * @param chainID Which chain to check agains, either `P` or `C`\n */\nexport async function avmGetAtomicUTXOs(addrs: string[], chainID: AvmImportChainType): Promise<AVMUTXOSet> {\n    const selection = addrs.slice(0, 1024);\n    const remaining = addrs.slice(1024);\n\n    let utxoSet;\n    if (chainID === 'P') {\n        utxoSet = (await xChain.getUTXOs(selection, pChain.getBlockchainID())).utxos;\n    } else {\n        utxoSet = (await xChain.getUTXOs(selection, cChain.getBlockchainID())).utxos;\n    }\n\n    if (remaining.length > 0) {\n        const nextSet = await avmGetAtomicUTXOs(remaining, chainID);\n        utxoSet = utxoSet.merge(nextSet);\n    }\n    return utxoSet;\n}\n\n// todo: Use end index to get ALL utxos\nexport async function platformGetAtomicUTXOs(addrs: string[]): Promise<PlatformUTXOSet> {\n    let selection = addrs.slice(0, 1024);\n    let remaining = addrs.slice(1024);\n\n    let utxoSet = (await pChain.getUTXOs(selection, xChain.getBlockchainID())).utxos;\n    if (remaining.length > 0) {\n        // @ts-ignore\n        let nextSet = await platformGetAtomicUTXOs(remaining);\n        // @ts-ignore\n        utxoSet = utxoSet.merge(nextSet);\n    }\n    return utxoSet;\n}\n\n// todo: Use end index to get ALL utxos\nexport async function evmGetAtomicUTXOs(addrs: string[]): Promise<EVMUTXOSet> {\n    if (addrs.length > 1024) {\n        throw new Error('Number of addresses can not be greater than 1024.');\n    }\n\n    let result: EVMUTXOSet = (await cChain.getUTXOs(addrs, xChain.getBlockchainID())).utxos;\n    return result;\n}\n\nexport async function getStakeForAddresses(addrs: string[]): Promise<GetStakeResponse> {\n    if (addrs.length <= 256) {\n        let data = await pChain.getStake(addrs);\n        return data;\n    } else {\n        //Break the list in to 1024 chunks\n        let chunk = addrs.slice(0, 256);\n        let remainingChunk = addrs.slice(256);\n\n        let chunkData = await pChain.getStake(chunk);\n        let chunkStake = chunkData.staked;\n        let chunkUtxos = chunkData.stakedOutputs;\n\n        let next = await getStakeForAddresses(remainingChunk);\n        return {\n            staked: chunkStake.add(next.staked),\n            stakedOutputs: [...chunkUtxos, ...next.stakedOutputs],\n        };\n    }\n}\n\nexport async function avmGetAllUTXOs(addrs: string[]): Promise<AVMUTXOSet> {\n    if (addrs.length <= 1024) {\n        let utxos = await avmGetAllUTXOsForAddresses(addrs);\n        return utxos;\n    } else {\n        //Break the list in to 1024 chunks\n        let chunk = addrs.slice(0, 1024);\n        let remainingChunk = addrs.slice(1024);\n\n        let newSet = await avmGetAllUTXOsForAddresses(chunk);\n        return newSet.merge(await avmGetAllUTXOs(remainingChunk));\n    }\n}\n\nexport async function avmGetAllUTXOsForAddresses(addrs: string[], endIndex?: any): Promise<AVMUTXOSet> {\n    if (addrs.length > 1024) throw new Error('Maximum length of addresses is 1024');\n    let response;\n    if (!endIndex) {\n        response = await xChain.getUTXOs(addrs);\n    } else {\n        response = await xChain.getUTXOs(addrs, undefined, 0, endIndex);\n    }\n\n    let utxoSet = response.utxos;\n    let utxos = utxoSet.getAllUTXOs();\n    let nextEndIndex = response.endIndex;\n    let len = response.numFetched;\n\n    if (len >= 1024) {\n        let subUtxos = await avmGetAllUTXOsForAddresses(addrs, nextEndIndex);\n        return utxoSet.merge(subUtxos);\n    }\n    return utxoSet;\n}\n\n// helper method to get utxos for more than 1024 addresses\nexport async function platformGetAllUTXOs(addrs: string[]): Promise<PlatformUTXOSet> {\n    if (addrs.length <= 1024) {\n        let newSet = await platformGetAllUTXOsForAddresses(addrs);\n        return newSet;\n    } else {\n        //Break the list in to 1024 chunks\n        let chunk = addrs.slice(0, 1024);\n        let remainingChunk = addrs.slice(1024);\n\n        let newSet = await platformGetAllUTXOsForAddresses(chunk);\n\n        return newSet.merge(await platformGetAllUTXOs(remainingChunk));\n    }\n}\n\nexport async function platformGetAllUTXOsForAddresses(addrs: string[], endIndex?: any): Promise<PlatformUTXOSet> {\n    let response;\n    if (!endIndex) {\n        response = await pChain.getUTXOs(addrs);\n    } else {\n        response = await pChain.getUTXOs(addrs, undefined, 0, endIndex);\n    }\n\n    let utxoSet = response.utxos;\n    let nextEndIndex = response.endIndex;\n    let len = response.numFetched;\n\n    if (len >= 1024) {\n        let subUtxos = await platformGetAllUTXOsForAddresses(addrs, nextEndIndex);\n        return utxoSet.merge(subUtxos);\n    }\n\n    return utxoSet;\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n", "import {\n    AVMHistoryItemType,\n    iHistoryAddDelegator,\n    iHistoryBaseTx,\n    iHistoryBaseTxNFTsReceived,\n    iHistoryBaseTxNFTsReceivedRaw,\n    iHistoryBaseTxNFTsSent,\n    iHistoryBaseTxNFTsSentRaw,\n    iHistoryBaseTxTokensReceived,\n    iHistoryBaseTxTokensReceivedRaw,\n    iHistoryBaseTxTokensSent,\n    iHistoryBaseTxTokensSentRaw,\n    iHistoryEVMTx,\n    iHistoryImportExport,\n    iHistoryNftFamilyBalance,\n    ITransactionData,\n    ITransactionDataEVM,\n    UTXO,\n} from '@/History/types';\nimport { activeNetwork, explorer_api, xChain } from '@/Network/network';\nimport { BN } from 'avalanche';\nimport { ChainIdType } from '@/types';\nimport { AVMConstants } from 'avalanche/dist/apis/avm';\nimport { bnToDjtxC, bnToDjtxP, bnToDjtxX, bnToLocaleString, parseNftPayload } from '@/utils/utils';\nimport * as Assets from '@/Asset/Assets';\nimport { NO_EXPLORER_API } from '@/errors';\n\n/**\n * Returns transactions FROM and TO the address given\n * @param addr The address to get historic transactions for.\n */\nexport async function getAddressHistoryEVM(addr: string): Promise<ITransactionDataEVM[]> {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    let endpoint = `v2/ctransactions?address=${addr}`;\n    let data: ITransactionDataEVM[] = (await explorer_api.get(endpoint)).data.Transactions;\n\n    data.sort((a, b) => {\n        let dateA = new Date(a.createdAt);\n        let dateB = new Date(b.createdAt);\n\n        return dateB.getTime() - dateA.getTime();\n    });\n\n    return data;\n}\n\nexport async function getAddressHistory(\n    addrs: string[],\n    limit = 20,\n    chainID: string,\n    endTime?: string\n): Promise<ITransactionData[]> {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    const ADDR_SIZE = 1024;\n    let selection = addrs.slice(0, ADDR_SIZE);\n    let remaining = addrs.slice(ADDR_SIZE);\n\n    let addrsRaw = selection.map((addr) => {\n        return addr.split('-')[1];\n    });\n\n    let rootUrl = 'v2/transactions';\n\n    let req = {\n        address: addrsRaw,\n        sort: ['timestamp-desc'],\n        disableCount: ['1'],\n        chainID: [chainID],\n        disableGenesis: ['false'],\n    };\n\n    if (limit > 0) {\n        //@ts-ignore\n        req.limit = [limit.toString()];\n    }\n\n    if (endTime) {\n        //@ts-ignore\n        req.endTime = [endTime];\n    }\n\n    let res = await explorer_api.post(rootUrl, req);\n    let txs = res.data.transactions;\n    let next: string | undefined = res.data.next;\n\n    if (txs === null) txs = [];\n\n    // If we need to fetch more for this address\n    if (next && !limit) {\n        let endTime = next.split('&')[0].split('=')[1];\n        let nextRes = await getAddressHistory(selection, limit, chainID, endTime);\n        txs.push(...nextRes);\n    }\n\n    // If there are addresses left, fetch them too\n    // TODO: Do this in parallel, not recursive\n    if (remaining.length > 0) {\n        let nextRes = await getAddressHistory(remaining, limit, chainID);\n        txs.push(...nextRes);\n    }\n\n    return txs;\n}\n\nexport async function getTransactionSummary(\n    tx: ITransactionData,\n    walletAddrs: string[],\n    evmAddress: string\n): Promise<AVMHistoryItemType> {\n    let sum;\n\n    let cleanAddressesXP = walletAddrs.map((addr) => addr.split('-')[1]);\n\n    switch (tx.type) {\n        case 'import':\n        case 'pvm_import':\n            sum = getImportSummary(tx, cleanAddressesXP);\n            break;\n        case 'export':\n        case 'pvm_export':\n        case 'atomic_export_tx':\n            sum = getExportSummary(tx, cleanAddressesXP);\n            break;\n        case 'add_validator':\n            sum = getValidatorSummary(tx, cleanAddressesXP);\n            break;\n        case 'add_delegator':\n            sum = getValidatorSummary(tx, cleanAddressesXP);\n            break;\n        case 'atomic_import_tx':\n            sum = getImportSummaryC(tx, evmAddress);\n            break;\n        case 'operation':\n        case 'base':\n            sum = await getBaseTxSummary(tx, cleanAddressesXP);\n            break;\n        default:\n            throw new Error(`Unsupported history transaction type. (${tx.type})`);\n    }\n    return sum;\n}\n\nexport function getTransactionSummaryEVM(tx: ITransactionDataEVM, walletAddress: string): iHistoryEVMTx {\n    let isSender = tx.fromAddr.toUpperCase() === walletAddress.toUpperCase();\n\n    let amt = new BN(tx.value);\n    let amtClean = bnToDjtxC(amt);\n    let date = new Date(tx.createdAt);\n\n    let gasLimit = new BN(tx.gasLimit);\n    let gasPrice = new BN(tx.gasPrice);\n    let feeBN = gasLimit.mul(gasPrice); // in gwei\n\n    return {\n        id: tx.hash,\n        fee: feeBN,\n        memo: '',\n        hash: tx.hash,\n        block: tx.block,\n        isSender,\n        type: 'transaction_evm',\n        amount: amt,\n        amountClean: amtClean,\n        gasLimit: tx.gasLimit,\n        gasPrice: tx.gasPrice,\n        from: tx.fromAddr,\n        to: tx.toAddr,\n        timestamp: date,\n    };\n}\n\nfunction idToChainAlias(id: string): ChainIdType {\n    if (id === activeNetwork.xChainID) {\n        return 'X';\n    } else if (id === activeNetwork.pChainID) {\n        return 'P';\n    } else if (id === activeNetwork.cChainID) {\n        return 'C';\n    }\n    throw new Error('Unknown chain ID.');\n}\n\n// If any of the outputs has a different chain ID, thats the destination chain\n// else return current chain\nfunction findDestinationChain(tx: ITransactionData): string {\n    let baseChain = tx.chainID;\n    let outs = tx.outputs || [];\n\n    for (let i = 0; i < outs.length; i++) {\n        let outChainId = outs[i].outChainID;\n\n        if (outChainId !== baseChain) return outChainId;\n    }\n    return baseChain;\n}\n\n// If any of the inputs has a different chain ID, thats the source chain\n// else return current chain\nfunction findSourceChain(tx: ITransactionData): string {\n    let baseChain = tx.chainID;\n    let ins = tx.inputs;\n\n    for (let i = 0; i < ins.length; i++) {\n        let inChainId = ins[i].output.inChainID;\n        if (inChainId !== baseChain) return inChainId;\n    }\n    return baseChain;\n}\n\nfunction isOutputOwner(ownerAddrs: string[], output: UTXO): boolean {\n    let outAddrs = output.addresses;\n    if (!outAddrs) return false;\n\n    let totAddrs = outAddrs.filter((addr) => {\n        return ownerAddrs.includes(addr);\n    });\n\n    return totAddrs.length > 0;\n}\n\nfunction isOutputOwnerC(ownerAddr: string, output: UTXO): boolean {\n    let outAddrs = output.caddresses;\n    if (!outAddrs) return false;\n    return outAddrs.includes(ownerAddr);\n}\n\n/**\n * Returns the total amount of `assetID` in the given `utxos` owned by `address`. Checks for X/P addresses.\n * @param utxos UTXOs to calculate balance from.\n * @param addresses The wallet's  addresses.\n * @param assetID Only count outputs of this asset ID.\n * @param chainID Only count the outputs on this chain.\n * @param isStake Set to `true` if looking for staking utxos.\n */\nfunction getAssetBalanceFromUTXOs(\n    utxos: UTXO[],\n    addresses: string[],\n    assetID: string,\n    chainID: string,\n    isStake = false\n) {\n    let myOuts = utxos.filter((utxo) => {\n        if (\n            assetID === utxo.assetID &&\n            isOutputOwner(addresses, utxo) &&\n            chainID === utxo.chainID &&\n            utxo.stake === isStake\n        ) {\n            return true;\n        }\n        return false;\n    });\n\n    let tot = myOuts.reduce((acc, utxo) => {\n        return acc.add(new BN(utxo.amount));\n    }, new BN(0));\n\n    return tot;\n}\n\nfunction getNFTBalanceFromUTXOs(utxos: UTXO[], addresses: string[], assetID: string): iHistoryNftFamilyBalance {\n    let nftUTXOs = utxos.filter((utxo) => {\n        if (\n            utxo.outputType === AVMConstants.NFTXFEROUTPUTID &&\n            utxo.assetID === assetID &&\n            isOutputOwner(addresses, utxo)\n        ) {\n            return true;\n        }\n        return false;\n    });\n\n    let res: iHistoryNftFamilyBalance = {};\n    for (let i = 0; i < nftUTXOs.length; i++) {\n        let utxo = nftUTXOs[i];\n        let groupID = utxo.groupID;\n\n        let content;\n        if (utxo.payload) {\n            let parsedPayload = parseNftPayload(utxo.payload);\n            content = parsedPayload.getContent().toString();\n        }\n\n        if (res[groupID]) {\n            res[groupID].amount++;\n        } else {\n            res[groupID] = {\n                payload: content || '',\n                amount: 1,\n            };\n        }\n    }\n    return res;\n}\n\n/**\n * Returns the total amount of `assetID` in the given `utxos` owned by `address`. Checks for EVM address.\n * @param utxos UTXOs to calculate balance from.\n * @param address The wallet's  evm address `0x...`.\n * @param assetID Only count outputs of this asset ID.\n * @param chainID Only count the outputs on this chain.\n * @param isStake Set to `true` if looking for staking utxos.\n */\nfunction getEvmAssetBalanceFromUTXOs(\n    utxos: UTXO[],\n    address: string,\n    assetID: string,\n    chainID: string,\n    isStake = false\n) {\n    let myOuts = utxos.filter((utxo) => {\n        if (\n            assetID === utxo.assetID &&\n            isOutputOwnerC(address, utxo) &&\n            chainID === utxo.chainID &&\n            utxo.stake === isStake\n        ) {\n            return true;\n        }\n        return false;\n    });\n\n    let tot = myOuts.reduce((acc, utxo) => {\n        return acc.add(new BN(utxo.amount));\n    }, new BN(0));\n\n    return tot;\n}\n\nfunction getImportSummary(tx: ITransactionData, addresses: string[]): iHistoryImportExport {\n    let sourceChain = findSourceChain(tx);\n    let chainAliasFrom = idToChainAlias(sourceChain);\n    let chainAliasTo = idToChainAlias(tx.chainID);\n\n    let djtxID = activeNetwork.djtxID;\n\n    let outs = tx.outputs || [];\n    let amtOut = getAssetBalanceFromUTXOs(outs, addresses, djtxID, tx.chainID);\n\n    let time = new Date(tx.timestamp);\n    let fee = xChain.getTxFee();\n\n    let res: iHistoryImportExport = {\n        id: tx.id,\n        memo: parseMemo(tx.memo),\n        source: chainAliasFrom,\n        destination: chainAliasTo,\n        amount: amtOut,\n        amountClean: bnToDjtxX(amtOut),\n        timestamp: time,\n        type: 'import',\n        fee: fee,\n    };\n\n    return res;\n}\n\nfunction getExportSummary(tx: ITransactionData, addresses: string[]): iHistoryImportExport {\n    let inputs = tx.inputs;\n    let sourceChain = inputs[0].output.chainID;\n    let chainAliasFrom = idToChainAlias(sourceChain);\n\n    let destinationChain = findDestinationChain(tx);\n    let chainAliasTo = idToChainAlias(destinationChain);\n\n    let djtxID = activeNetwork.djtxID;\n\n    let outs = tx.outputs || [];\n    let amtOut = getAssetBalanceFromUTXOs(outs, addresses, djtxID, destinationChain);\n    // let amtIn = getAssetBalanceFromUTXOs(inUtxos, addresses, djtxID);\n\n    let time = new Date(tx.timestamp);\n    let fee = xChain.getTxFee();\n\n    let res: iHistoryImportExport = {\n        id: tx.id,\n        memo: parseMemo(tx.memo),\n        source: chainAliasFrom,\n        destination: chainAliasTo,\n        amount: amtOut,\n        amountClean: bnToDjtxX(amtOut),\n        timestamp: time,\n        type: 'export',\n        fee: fee,\n    };\n\n    return res;\n}\n\nfunction getValidatorSummary(tx: ITransactionData, ownerAddrs: string[]): iHistoryAddDelegator {\n    let time = new Date(tx.timestamp);\n\n    let pChainID = activeNetwork.pChainID;\n    let djtxID = activeNetwork.djtxID;\n\n    let outs = tx.outputs || [];\n    let stakeAmt = getAssetBalanceFromUTXOs(outs, ownerAddrs, djtxID, pChainID, true);\n\n    return {\n        id: tx.id,\n        nodeID: tx.validatorNodeID,\n        stakeStart: new Date(tx.validatorStart * 1000),\n        stakeEnd: new Date(tx.validatorEnd * 1000),\n        timestamp: time,\n        type: 'add_validator',\n        fee: new BN(0),\n        amount: stakeAmt,\n        amountClean: bnToDjtxP(stakeAmt),\n        memo: parseMemo(tx.memo),\n        isRewarded: tx.rewarded,\n    };\n}\n\n// Returns the summary for a C chain import TX\nfunction getImportSummaryC(tx: ITransactionData, ownerAddr: string) {\n    let sourceChain = findSourceChain(tx);\n    let chainAliasFrom = idToChainAlias(sourceChain);\n    let chainAliasTo = idToChainAlias(tx.chainID);\n\n    let djtxID = activeNetwork.djtxID;\n\n    let outs = tx.outputs || [];\n    let amtOut = getEvmAssetBalanceFromUTXOs(outs, ownerAddr, djtxID, tx.chainID);\n\n    let time = new Date(tx.timestamp);\n    let fee = xChain.getTxFee();\n\n    let res: iHistoryImportExport = {\n        id: tx.id,\n        source: chainAliasFrom,\n        destination: chainAliasTo,\n        amount: amtOut,\n        amountClean: bnToDjtxX(amtOut),\n        timestamp: time,\n        type: 'import',\n        fee: fee,\n        memo: parseMemo(tx.memo),\n    };\n\n    return res;\n}\n\nasync function getBaseTxSummary(tx: ITransactionData, ownerAddrs: string[]): Promise<iHistoryBaseTx> {\n    // Calculate losses from inputs\n    let losses = getBaseTxTokenLosses(tx, ownerAddrs);\n    let lossesNFT = getBaseTxNFTLosses(tx, ownerAddrs);\n\n    // Calculate gains from inputs\n    let gains = getBaseTxTokenGains(tx, ownerAddrs);\n    let gainsNFT = getBaseTxNFTGains(tx, ownerAddrs);\n\n    // TODO: Calculate absolutes\n    // gains - losses\n\n    let received: iHistoryBaseTxTokensReceived = {};\n    let receivedNFTs: iHistoryBaseTxNFTsReceived = {};\n\n    // Process Received Tokens\n    for (let assetID in gains) {\n        let fromAddrs = getBaseTxSenders(tx, assetID);\n        let tokenDesc = await Assets.getAssetDescription(assetID);\n        let amtBN = gains[assetID];\n        received[assetID] = {\n            amount: amtBN,\n            amountClean: bnToLocaleString(amtBN, tokenDesc.denomination),\n            from: fromAddrs,\n            asset: tokenDesc,\n        };\n    }\n\n    // Process Received NFTs\n    for (let assetID in gainsNFT) {\n        let fromAddrs = getBaseTxSenders(tx, assetID);\n        let tokenDesc = await Assets.getAssetDescription(assetID);\n        let groups = gainsNFT[assetID];\n        receivedNFTs[assetID] = {\n            groups: groups,\n            from: fromAddrs,\n            asset: tokenDesc,\n        };\n    }\n\n    // Process Sent Tokens\n    let sent: iHistoryBaseTxTokensSent = {};\n    let sentNFTs: iHistoryBaseTxNFTsSent = {};\n\n    // Process sent tokens\n    for (let assetID in losses) {\n        let toAddrs = getBaseTxReceivers(tx, assetID);\n        let tokenDesc = await Assets.getAssetDescription(assetID);\n        let amtBN = losses[assetID];\n\n        sent[assetID] = {\n            amount: amtBN,\n            amountClean: bnToLocaleString(amtBN, tokenDesc.denomination),\n            to: toAddrs,\n            asset: tokenDesc,\n        };\n    }\n\n    // Process Received NFTs\n    for (let assetID in lossesNFT) {\n        let fromAddrs = getBaseTxSenders(tx, assetID);\n        let tokenDesc = await Assets.getAssetDescription(assetID);\n        let groups = lossesNFT[assetID];\n        sentNFTs[assetID] = {\n            groups: groups,\n            to: fromAddrs,\n            asset: tokenDesc,\n        };\n    }\n\n    return {\n        id: tx.id,\n        fee: xChain.getTxFee(),\n        type: 'transaction',\n        timestamp: new Date(tx.timestamp),\n        memo: parseMemo(tx.memo),\n        tokens: {\n            sent,\n            received,\n        },\n        nfts: {\n            sent: sentNFTs,\n            received: receivedNFTs,\n        },\n    };\n}\n\nfunction getBaseTxNFTLosses(tx: ITransactionData, ownerAddrs: string[]): iHistoryBaseTxNFTsSentRaw {\n    let inUTXOs = tx.inputs.map((input) => input.output);\n    let nftUTXOs = inUTXOs.filter((utxo) => {\n        return utxo.outputType === AVMConstants.NFTXFEROUTPUTID;\n    });\n\n    let res: iHistoryBaseTxNFTsSentRaw = {};\n    for (let assetID in tx.inputTotals) {\n        let nftBal = getNFTBalanceFromUTXOs(nftUTXOs, ownerAddrs, assetID);\n\n        // If empty dictionary pass\n        if (Object.keys(nftBal).length === 0) continue;\n\n        res[assetID] = nftBal;\n    }\n    return res;\n}\n\nfunction getBaseTxNFTGains(tx: ITransactionData, ownerAddrs: string[]): iHistoryBaseTxNFTsReceivedRaw {\n    let outs = tx.outputs || [];\n    let nftUTXOs = outs.filter((utxo) => {\n        return utxo.outputType === AVMConstants.NFTXFEROUTPUTID;\n    });\n    let res: iHistoryBaseTxNFTsReceivedRaw = {};\n\n    for (let assetID in tx.inputTotals) {\n        let nftBal = getNFTBalanceFromUTXOs(nftUTXOs, ownerAddrs, assetID);\n        // If empty dictionary pass\n        if (Object.keys(nftBal).length === 0) continue;\n\n        res[assetID] = nftBal;\n    }\n    return res;\n}\n\nfunction getBaseTxTokenLosses(tx: ITransactionData, ownerAddrs: string[]): iHistoryBaseTxTokensSentRaw {\n    let inUTXOs = tx.inputs.map((input) => input.output);\n    let tokenUTXOs = inUTXOs.filter((utxo) => {\n        return utxo.outputType === AVMConstants.SECPXFEROUTPUTID;\n    });\n\n    let chainID = xChain.getBlockchainID();\n    let res: iHistoryBaseTxTokensSentRaw = {};\n    for (let assetID in tx.inputTotals) {\n        let bal = getAssetBalanceFromUTXOs(tokenUTXOs, ownerAddrs, assetID, chainID);\n        if (bal.isZero()) continue;\n        res[assetID] = bal;\n    }\n    return res;\n}\n\nfunction getBaseTxTokenGains(tx: ITransactionData, ownerAddrs: string[]): iHistoryBaseTxTokensReceivedRaw {\n    let chainID = xChain.getBlockchainID();\n    let outs = tx.outputs || [];\n    let tokenUTXOs = outs.filter((utxo) => {\n        return utxo.outputType === AVMConstants.SECPXFEROUTPUTID;\n    });\n\n    let res: iHistoryBaseTxTokensReceivedRaw = {};\n    for (let assetID in tx.outputTotals) {\n        let bal = getAssetBalanceFromUTXOs(tokenUTXOs, ownerAddrs, assetID, chainID);\n        if (bal.isZero()) continue;\n        res[assetID] = bal;\n    }\n    return res;\n}\n\n// Look at the inputs and check where the assetID came from.\nfunction getBaseTxSenders(tx: ITransactionData, assetID: string): string[] {\n    let inUTXOs = tx.inputs.map((input) => input.output);\n    let res: string[] = [];\n    for (let i = 0; i < inUTXOs.length; i++) {\n        let utxo = inUTXOs[i];\n        if (utxo.assetID === assetID && utxo.addresses) {\n            res.push(...utxo.addresses);\n        }\n    }\n    // Eliminate Duplicates\n    return res.filter((addr, i) => {\n        return res.indexOf(addr) === i;\n    });\n}\n\n// Look at the inputs and check where the assetID came from.\nfunction getBaseTxReceivers(tx: ITransactionData, assetID: string): string[] {\n    let res: string[] = [];\n    let outs = tx.outputs || [];\n    for (let i = 0; i < outs.length; i++) {\n        let utxo = outs[i];\n        if (utxo.assetID === assetID && utxo.addresses) {\n            res.push(...utxo.addresses);\n        }\n    }\n    // Eliminate Duplicates\n    return res.filter((addr, i) => {\n        return res.indexOf(addr) === i;\n    });\n}\n\nfunction parseMemo(raw: string): string {\n    const memoText = new Buffer(raw, 'base64').toString('utf8');\n\n    // Bug that sets memo to empty string (AAAAAA==) for some tx types\n    if (!memoText.length || raw === 'AAAAAA==') return '';\n    return memoText;\n}\n", "import { BN } from 'avalanche';\nimport { ChainIdType } from '@/types';\nimport { xChain } from '@/Network/network';\nimport { UniversalTx, UniversalTxActionType } from '@/helpers/universal_tx_helper';\n\nexport class UniversalNode {\n    parents: UniversalNode[];\n    child: UniversalNode | null; // can only have 1 child\n    balance: BN;\n    chain: ChainIdType;\n    constructor(balance: BN, chain: ChainIdType, parents: UniversalNode[] = [], child: UniversalNode | null = null) {\n        this.parents = parents;\n        this.child = child;\n        this.balance = balance;\n        this.chain = chain;\n    }\n\n    // Sum of the node's balance + all balance of parents minus the transfer fees\n    reduceTotalBalanceFromParents(): BN {\n        // If there are no balance return balance of self\n        if (this.parents.length === 0) {\n            return this.balance;\n        }\n\n        let fee = xChain.getTxFee();\n\n        let parentBals = this.parents.map((node) => {\n            // Subtract transfer fees from parent balance\n            // import + export\n            let parentBalance = node.reduceTotalBalanceFromParents();\n            parentBalance = parentBalance.sub(fee).sub(fee);\n            let zero = new BN(0);\n            return BN.max(parentBalance, zero);\n        });\n\n        let tot = parentBals.reduce((prev, current) => {\n            return prev.add(current);\n        }, new BN(0));\n\n        return tot.add(this.balance);\n    }\n\n    /**\n     * Returns the export action type from this node to its child\n     * @param to\n     */\n    getExportMethod(to?: ChainIdType): UniversalTxActionType {\n        switch (this.chain) {\n            case 'X':\n                if (to === 'P') {\n                    return 'export_x_p';\n                } else {\n                    return 'export_x_c';\n                }\n            case 'C':\n                return 'export_c_x';\n            case 'P':\n                return 'export_p_x';\n        }\n    }\n\n    /**\n     * Returns the import action type from this node to its child\n     * @param from Which chain are we importing from\n     */\n    getImportMethod(from?: ChainIdType): UniversalTxActionType {\n        switch (this.chain) {\n            case 'X':\n                if (from === 'P') {\n                    return 'import_p_x';\n                } else {\n                    return 'import_c_x';\n                }\n            case 'C':\n                return 'import_x_c';\n            case 'P':\n                return 'import_x_p';\n        }\n    }\n\n    buildExportTx(amount: BN): UniversalTx {\n        return {\n            action: this.getExportMethod(this.child?.chain),\n            amount: amount,\n        };\n    }\n\n    buildImportTx(from?: ChainIdType): UniversalTx {\n        return {\n            action: this.getImportMethod(from),\n        };\n    }\n\n    /***\n     * Assumes there is enough balance on node tree\n     * Returns empty array even if transaction not possible!\n     * What steps to take to have the target balance on this node.\n     * @param target Amount of nDJTX needed on this node.\n     */\n    getStepsForTargetBalance(target: BN): UniversalTx[] {\n        // If the node has enough balance no transaction needed\n        // If target is negative or zero no transaction needed\n        if (this.balance.gte(target) || target.lte(new BN(0))) {\n            return [];\n        }\n\n        let fee = xChain.getTxFee();\n        let feeImportExport = fee.add(fee);\n\n        // If not enough balance and no parents\n        // return all the balance\n        if (this.balance.lt(target) && this.parents.length === 0) {\n            let tx = this.buildExportTx(this.balance.sub(feeImportExport));\n            return [tx];\n        }\n\n        // If not enough balance\n\n        // Amount needed to collect from parents\n        let remaining = target.sub(this.balance);\n\n        // Amount the parent must have\n\n        if (this.parents.length === 1) {\n            // Export from parent to this node\n            let parent = this.parents[0];\n            let parentBalanceNeeded = remaining.add(feeImportExport);\n            let txs = parent.getStepsForTargetBalance(parentBalanceNeeded);\n            let tx = parent.buildExportTx(remaining);\n            let importTx = this.buildImportTx(parent.chain);\n            return [...txs, tx, importTx];\n        } else {\n            let transactions = [];\n            for (let i = 0; i < this.parents.length; i++) {\n                let p = this.parents[i];\n                let pBal = p.reduceTotalBalanceFromParents();\n                let pBalMax = pBal.sub(feeImportExport);\n                let parentBalanceNeeded = remaining.add(feeImportExport);\n\n                let exportAmt = BN.min(pBalMax, remaining); // The amount that will cross to the target chain\n                let target = BN.min(pBalMax, parentBalanceNeeded);\n\n                if (exportAmt.lte(new BN(0))) continue;\n\n                let pTxs = p.getStepsForTargetBalance(target);\n                let pTx = p.buildExportTx(exportAmt);\n                let importTx = this.buildImportTx(p.chain);\n                transactions.push(...pTxs);\n                transactions.push(pTx);\n                transactions.push(importTx);\n\n                remaining = remaining.sub(exportAmt);\n            }\n\n            // If we still have remaining balance, we can not complete this transfer\n            if (remaining.gt(new BN(0))) {\n                throw new Error('Insufficient DJTX balances.');\n            }\n\n            return transactions;\n        }\n    }\n\n    addParent(node: UniversalNode) {\n        this.parents.push(node);\n    }\n\n    setChild(node: UniversalNode) {\n        this.child = node;\n    }\n}\n", "import { BN } from 'avalanche';\nimport { UniversalNode } from '@/helpers/UniversalNode';\n\ntype UniversalTxActionTypesX = 'send_x' | 'export_x_c' | 'export_x_p' | 'import_p_x' | 'import_c_x';\ntype UniversalTxActionTypesC = 'send_c' | 'export_c_x' | 'import_x_c';\ntype UniversalTxActionTypesP = 'export_p_x' | 'import_x_p';\n\nexport type UniversalTxActionType = UniversalTxActionTypesX | UniversalTxActionTypesC | UniversalTxActionTypesP;\n\nexport interface UniversalTx {\n    action: UniversalTxActionType;\n    amount?: BN;\n}\n\nexport function createGraphForP(balX: BN, balP: BN, balC: BN): UniversalNode {\n    let xNode = new UniversalNode(balX, 'X');\n    let pNode = new UniversalNode(balP, 'P');\n    let cNode = new UniversalNode(balC, 'C');\n\n    pNode.addParent(xNode);\n    xNode.addParent(cNode);\n\n    cNode.setChild(xNode);\n    xNode.setChild(pNode);\n    return pNode;\n}\n\nexport function createGraphForC(balX: BN, balP: BN, balC: BN): UniversalNode {\n    let xNode = new UniversalNode(balX, 'X');\n    let pNode = new UniversalNode(balP, 'P');\n    let cNode = new UniversalNode(balC, 'C');\n\n    cNode.addParent(xNode);\n    xNode.addParent(pNode);\n\n    pNode.setChild(xNode);\n    xNode.setChild(cNode);\n\n    return cNode;\n}\n\nexport function createGraphForX(balX: BN, balP: BN, balC: BN): UniversalNode {\n    let xNode = new UniversalNode(balX, 'X');\n    let pNode = new UniversalNode(balP, 'P');\n    let cNode = new UniversalNode(balC, 'C');\n\n    xNode.addParent(pNode);\n    xNode.addParent(cNode);\n\n    cNode.setChild(xNode);\n    pNode.setChild(xNode);\n\n    return xNode;\n}\n\nexport function canHaveBalanceOnX(balX: BN, balP: BN, balC: BN, targetAmount: BN): boolean {\n    let startNode = createGraphForX(balX, balP, balC);\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\n}\n\nexport function canHaveBalanceOnP(balX: BN, balP: BN, balC: BN, targetAmount: BN): boolean {\n    let startNode = createGraphForP(balX, balP, balC);\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\n}\n\n/**\n * Will return true if `targetAmount` can exist on C chain\n */\nexport function canHaveBalanceOnC(balX: BN, balP: BN, balC: BN, targetAmount: BN): boolean {\n    let startNode = createGraphForC(balX, balP, balC);\n    return startNode.reduceTotalBalanceFromParents().gte(targetAmount);\n}\n\nexport function getStepsForBalanceP(balX: BN, balP: BN, balC: BN, targetAmount: BN): UniversalTx[] {\n    let startNode = createGraphForP(balX, balP, balC);\n\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\n        throw new Error('Insufficient DJTX.');\n    }\n\n    return startNode.getStepsForTargetBalance(targetAmount);\n}\n\nexport function getStepsForBalanceC(balX: BN, balP: BN, balC: BN, targetAmount: BN): UniversalTx[] {\n    let startNode = createGraphForC(balX, balP, balC);\n\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\n        throw new Error('Insufficient DJTX.');\n    }\n\n    return startNode.getStepsForTargetBalance(targetAmount);\n}\n\nexport function getStepsForBalanceX(balX: BN, balP: BN, balC: BN, targetAmount: BN): UniversalTx[] {\n    let startNode = createGraphForX(balX, balP, balC);\n\n    if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {\n        throw new Error('Insufficient DJTX.');\n    }\n\n    return startNode.getStepsForTargetBalance(targetAmount);\n}\n", "import {\n    AssetBalanceP,\n    AssetBalanceRawX,\n    AssetBalanceX,\n    AvmExportChainType,\n    AvmImportChainType,\n    ERC20Balance,\n    iDjtxBalance,\n    WalletBalanceX,\n    WalletEventArgsType,\n    WalletEventType,\n    WalletNameType,\n} from './types';\nimport {\n    buildAvmExportTransaction,\n    buildCreateNftFamilyTx,\n    buildCustomEvmTx,\n    buildEvmExportTransaction,\n    buildEvmTransferErc20Tx,\n    buildEvmTransferNativeTx,\n    buildMintNftTx,\n    estimateDjtxGas,\n    estimateErc20Gas,\n} from '@/helpers/tx_helper';\nimport { BN, Buffer } from 'avalanche';\nimport { Transaction } from '@ethereumjs/tx';\nimport { activeNetwork, avalanche, cChain, pChain, web3, xChain } from '@/Network/network';\nimport EvmWallet from '@/Wallet/EvmWallet';\n\nimport {\n    avmGetAllUTXOs,\n    avmGetAtomicUTXOs,\n    getStakeForAddresses,\n    platformGetAllUTXOs,\n    platformGetAtomicUTXOs,\n} from '@/helpers/utxo_helper';\n\nimport {\n    UTXOSet as AVMUTXOSet,\n    UnsignedTx as AVMUnsignedTx,\n    UTXO as AVMUTXO,\n    Tx as AvmTx,\n    AVMConstants,\n    AmountOutput,\n} from 'avalanche/dist/apis/avm';\nimport {\n    UTXOSet as PlatformUTXOSet,\n    UTXO as PlatformUTXO,\n    UnsignedTx as PlatformUnsignedTx,\n    Tx as PlatformTx,\n    PlatformVMConstants,\n    StakeableLockOut,\n} from 'avalanche/dist/apis/platformvm';\nimport { UnsignedTx as EVMUnsignedTx, Tx as EVMTx, UTXOSet as EVMUTXOSet } from 'avalanche/dist/apis/evm';\n\nimport { PayloadBase, UnixNow } from 'avalanche/dist/utils';\nimport { getAssetDescription } from '@/Asset/Assets';\nimport { getErc20Token } from '@/Asset/Erc20';\nimport { NO_NETWORK } from '@/errors';\nimport { djtxCtoX, bnToLocaleString, waitTxC, waitTxEvm, waitTxP, waitTxX } from '@/utils/utils';\nimport EvmWalletReadonly from '@/Wallet/EvmWalletReadonly';\nimport EventEmitter from 'events';\nimport {\n    getAddressHistory,\n    getAddressHistoryEVM,\n    getTransactionSummary,\n    getTransactionSummaryEVM,\n} from '@/History/history';\nimport { HistoryItemType, ITransactionData } from '@/History/types';\nimport moment from 'moment';\nimport { bintools } from '@/common';\nimport { ChainIdType } from '@/types';\nimport {\n    createGraphForC,\n    createGraphForP,\n    createGraphForX,\n    getStepsForBalanceC,\n    getStepsForBalanceP,\n    getStepsForBalanceX,\n    UniversalTx,\n} from '@/helpers/universal_tx_helper';\nimport { UniversalNode } from '@/helpers/UniversalNode';\nimport { GetStakeResponse } from 'avalanche/dist/common';\n\nexport abstract class WalletProvider {\n    abstract type: WalletNameType;\n    abstract evmWallet: EvmWallet | EvmWalletReadonly;\n\n    /**\n     * The X chain UTXOs of the wallet's current state\n     */\n    public utxosX: AVMUTXOSet = new AVMUTXOSet();\n\n    /**\n     * The P chain UTXOs of the wallet's current state\n     */\n    public utxosP: PlatformUTXOSet = new PlatformUTXOSet();\n\n    public balanceX: WalletBalanceX = {};\n\n    abstract signEvm(tx: Transaction): Promise<Transaction>;\n    abstract signX(tx: AVMUnsignedTx): Promise<AvmTx>;\n    abstract signP(tx: PlatformUnsignedTx): Promise<PlatformTx>;\n    abstract signC(tx: EVMUnsignedTx): Promise<EVMTx>;\n\n    abstract getAddressX(): string;\n    abstract getChangeAddressX(): string;\n    abstract getAddressP(): string;\n    abstract getAddressC(): string;\n    abstract getEvmAddressBech(): string;\n\n    abstract getExternalAddressesX(): string[];\n    abstract getInternalAddressesX(): string[];\n    abstract getExternalAddressesP(): string[];\n\n    abstract getAllAddressesX(): string[];\n    abstract getAllAddressesP(): string[];\n\n    /***\n     * Used to get an identifier string that is consistent across different network connections.\n     * Currently returns the C address of this wallet.\n     */\n    public getBaseAddress(): string {\n        return this.getAddressC();\n    }\n\n    protected emitter: EventEmitter = new EventEmitter();\n\n    public on(event: WalletEventType, listener: (...args: any[]) => void): void {\n        this.emitter.on(event, listener);\n    }\n\n    public off(event: WalletEventType, listener: (...args: any[]) => void): void {\n        this.emitter.off(event, listener);\n    }\n\n    protected emit(event: WalletEventType, args?: WalletEventArgsType): void {\n        this.emitter.emit(event, args);\n    }\n\n    protected emitAddressChange(): void {\n        this.emit('addressChanged', {\n            X: this.getAddressX(),\n            changeX: this.getChangeAddressX(),\n            P: this.getAddressP(),\n        });\n    }\n\n    protected emitBalanceChangeX(): void {\n        this.emit('balanceChangedX', this.balanceX);\n    }\n\n    protected emitBalanceChangeP(): void {\n        this.emit('balanceChangedP', this.getDjtxBalanceP());\n    }\n\n    protected emitBalanceChangeC(): void {\n        this.emit('balanceChangedC', this.getDjtxBalanceC());\n    }\n\n    /**\n     *\n     * @param to - the address funds are being send to.\n     * @param amount - amount of DJTX to send in nDJTX\n     * @param memo - A MEMO for the transaction\n     */\n    async sendDjtxX(to: string, amount: BN, memo?: string): Promise<string> {\n        if (!activeNetwork) throw NO_NETWORK;\n\n        let memoBuff = memo ? Buffer.from(memo) : undefined;\n\n        let froms = this.getAllAddressesX();\n        let changeAddress = this.getChangeAddressX();\n        let utxoSet = this.utxosX;\n\n        let tx = await xChain.buildBaseTx(\n            utxoSet,\n            amount,\n            activeNetwork.djtxID,\n            [to],\n            froms,\n            [changeAddress],\n            memoBuff\n        );\n        let signedTx = await this.signX(tx);\n        let txId = await xChain.issueTx(signedTx);\n        await waitTxX(txId);\n\n        // Update UTXOs\n        this.updateUtxosX();\n\n        return txId;\n    }\n\n    /**\n     * Sends DJTX to another address on the C chain.\n     * @param to Hex address to send DJTX to.\n     * @param amount Amount of DJTX to send, represented in WEI format.\n     * @param gasPrice Gas price in WEI format\n     * @param gasLimit Gas limit\n     *\n     * @return Returns the transaction hash\n     */\n    async sendDjtxC(to: string, amount: BN, gasPrice: BN, gasLimit: number): Promise<string> {\n        let fromAddr = this.getAddressC();\n        let tx = await buildEvmTransferNativeTx(fromAddr, to, amount, gasPrice, gasLimit);\n        let txId = await this.issueEvmTx(tx);\n        await this.updateDjtxBalanceC();\n        return txId;\n    }\n\n    /**\n     * Send Avalanche Native Tokens on X chain\n     * @param assetID ID of the token to send\n     * @param amount How many units of the token to send. Based on smallest divisible unit.\n     * @param to X chain address to send tokens to\n     */\n    async sendANT(assetID: string, amount: BN, to: string): Promise<string> {\n        let utxoSet = this.getUtxosX();\n        let fromAddrs = this.getAllAddressesX();\n        let changeAddr = this.getChangeAddressX();\n\n        let tx = await xChain.buildBaseTx(utxoSet, amount, assetID, [to], fromAddrs, [changeAddr]);\n        let signed = await this.signX(tx);\n        let txId = await xChain.issueTx(signed);\n        await waitTxX(txId);\n\n        this.updateUtxosX();\n        return txId;\n    }\n\n    /**\n     * Makes a transfer call on a ERC20 contract.\n     * @param to Hex address to transfer tokens to.\n     * @param amount Amount of the ERC20 token to send, donated in the token's correct denomination.\n     * @param gasPrice Gas price in WEI format\n     * @param gasLimit Gas limit\n     * @param contractAddress Contract address of the ERC20 token\n     */\n    async sendErc20(to: string, amount: BN, gasPrice: BN, gasLimit: number, contractAddress: string): Promise<string> {\n        let fromAddr = this.getAddressC();\n        let token = await getErc20Token(contractAddress);\n        let balOld = await token.balanceOf(fromAddr);\n        let tx = await buildEvmTransferErc20Tx(fromAddr, to, amount, gasPrice, gasLimit, contractAddress);\n        let txHash = await this.issueEvmTx(tx);\n\n        // TODO: We should not be using setTimeout, wait until tx is confirmed on chain\n        // TODO: Can it be an issue with sticky sessions? Nodes behind a LB?\n        // If new balance doesnt match old, emit balance change\n        setTimeout(async () => {\n            let balNew = await token.balanceOf(fromAddr);\n            if (!balOld.eq(balNew)) {\n                this.emitBalanceChangeC();\n            }\n        }, 2000);\n\n        return txHash;\n    }\n\n    /**\n     * Estimate the gas needed for an ERC20 Transfer transaction\n     * @param contractAddress The ERC20 contract address\n     * @param to Address receiving the tokens\n     * @param amount Amount to send. Given in the smallest divisible unit.\n     */\n    async estimateErc20Gas(contractAddress: string, to: string, amount: BN): Promise<number> {\n        let from = this.getAddressC();\n        return await estimateErc20Gas(contractAddress, from, to, amount);\n    }\n\n    /**\n     * Estimate the gas needed for a DJTX send transaction on the C chain.\n     * @param to Destination address.\n     * @param amount Amount of DJTX to send, in WEI.\n     */\n    async estimateDjtxGasLimit(to: string, amount: BN, gasPrice: BN): Promise<number> {\n        let from = this.getAddressC();\n        return await estimateDjtxGas(from, to, amount, gasPrice);\n    }\n\n    /**\n     * A method to create custom EVM transactions.\n     * @param gasPrice\n     * @param gasLimit\n     * @param data `data` field of the transaction, in hex format\n     * @param to `to` field of the transaction, in hex format\n     * @param value `value` field of the transaction, in hex format\n     * @param nonce Nonce of the transaction, in number. If not provided, SDK will get the latest nonce from the network\n     */\n    async sendCustomEvmTx(gasPrice: BN, gasLimit: number, data?: string, to?: string, value?: string, nonce?: number) {\n        let from = this.getAddressC();\n        let tx = await buildCustomEvmTx(from, gasPrice, gasLimit, data, to, value, nonce);\n        return await this.issueEvmTx(tx);\n    }\n\n    /**\n     * Returns the maximum spendable DJTX balance for the given chain.\n     * Scans all chains and take cross over fees into account\n     * @param chainType X, P or C\n     */\n    public getUsableDjtxBalanceForChain(chainType: ChainIdType): BN {\n        return this.createUniversalNode(chainType).reduceTotalBalanceFromParents();\n    }\n\n    /**\n     * Create a new instance of a UniversalNode for the given chain using current balance state\n     * @param chain Chain of the universal node.\n     * @private\n     */\n    private createUniversalNode(chain: ChainIdType): UniversalNode {\n        let xBal = this.getDjtxBalanceX().unlocked;\n        let pBal = this.getDjtxBalanceP().unlocked;\n        let cBal = djtxCtoX(this.getDjtxBalanceC()); // need to use 9 decimal places\n\n        switch (chain) {\n            case 'X':\n                return createGraphForX(xBal, pBal, cBal);\n            case 'P':\n                return createGraphForP(xBal, pBal, cBal);\n            case 'C':\n                return createGraphForC(xBal, pBal, cBal);\n        }\n    }\n\n    /**\n     * Can this wallet have the given amount on the given chain after a series of internal transactions (if required).\n     * @param chain X/P/C\n     * @param amount The amount to check against\n     */\n    public canHaveBalanceOnChain(chain: ChainIdType, amount: BN): boolean {\n        // The maximum amount of DJTX we can have on this chain\n        let maxAmt = this.createUniversalNode(chain).reduceTotalBalanceFromParents();\n        return maxAmt.gte(amount);\n    }\n\n    /**\n     * Returns an array of transaction to do in order to have the target amount on the given chain\n     * @param chain The chain (X/P/C) to have the desired amount on\n     * @param amount The desired amount\n     */\n    public getTransactionsForBalance(chain: ChainIdType, amount: BN): UniversalTx[] {\n        let xBal = this.getDjtxBalanceX().unlocked;\n        let pBal = this.getDjtxBalanceP().unlocked;\n        let cBal = djtxCtoX(this.getDjtxBalanceC()); // need to use 9 decimal places\n\n        switch (chain) {\n            case 'P':\n                return getStepsForBalanceP(xBal, pBal, cBal, amount);\n            case 'C':\n                return getStepsForBalanceC(xBal, pBal, cBal, amount);\n            case 'X':\n                return getStepsForBalanceX(xBal, pBal, cBal, amount);\n        }\n    }\n\n    /**\n     * Given a `Transaction`, it will sign and issue it to the network.\n     * @param tx The unsigned transaction to issue.\n     */\n    async issueEvmTx(tx: Transaction): Promise<string> {\n        let signedTx = await this.signEvm(tx);\n        let txHex = signedTx.serialize().toString('hex');\n        let hash = await web3.eth.sendSignedTransaction('0x' + txHex);\n        const txHash = hash.transactionHash;\n        return await waitTxEvm(txHash);\n    }\n\n    /**\n     * Returns the C chain DJTX balance of the wallet in WEI format.\n     */\n    async updateDjtxBalanceC(): Promise<BN> {\n        let balOld = this.evmWallet.getBalance();\n        let balNew = await this.evmWallet.updateBalance();\n\n        if (!balOld.eq(balNew)) {\n            this.emitBalanceChangeC();\n        }\n\n        return balNew;\n    }\n\n    /**\n     *  Returns UTXOs on the X chain that belong to this wallet.\n     *  - Makes network request.\n     *  - Updates `this.utxosX` with new UTXOs\n     *  - Calls `this.updateBalanceX()` after success.\n     *  */\n    public async updateUtxosX(): Promise<AVMUTXOSet> {\n        const addresses = this.getAllAddressesX();\n        // let oldUtxos = this.utxosX;\n        this.utxosX = await avmGetAllUTXOs(addresses);\n\n        await this.updateUnknownAssetsX();\n        this.updateBalanceX();\n\n        return this.utxosX;\n    }\n\n    /**\n     *  Returns the fetched UTXOs on the X chain that belong to this wallet.\n     */\n    public getUtxosX(): AVMUTXOSet {\n        return this.utxosX;\n    }\n\n    /**\n     *  Returns UTXOs on the P chain that belong to this wallet.\n     *  - Makes network request.\n     *  - Updates `this.utxosP` with the new UTXOs\n     */\n    public async updateUtxosP(): Promise<PlatformUTXOSet> {\n        let addresses = this.getAllAddressesP();\n        this.utxosP = await platformGetAllUTXOs(addresses);\n\n        this.emitBalanceChangeP();\n\n        return this.utxosP;\n    }\n\n    /**\n     * Returns the fetched UTXOs on the P chain that belong to this wallet.\n     */\n    public getUtxosP(): PlatformUTXOSet {\n        return this.utxosP;\n    }\n\n    /**\n     * Returns the number DJTX staked by this wallet.\n     */\n    public async getStake(): Promise<GetStakeResponse> {\n        let addrs = this.getAllAddressesP();\n        return await getStakeForAddresses(addrs);\n    }\n\n    /**\n     * Returns the wallet's balance of the given ERC20 contracts\n     * @param addresses ERC20 Contract addresses\n     */\n    public async getBalanceERC20(addresses: string[]): Promise<ERC20Balance[]> {\n        let walletAddr = this.getAddressC();\n        let tokenCalls = addresses.map((addr) => getErc20Token(addr));\n        let tokens = await Promise.all(tokenCalls);\n\n        let balanceCalls = tokens.map((token) => token.balanceOf(walletAddr));\n        let balances = await Promise.all(balanceCalls);\n\n        return balances.map((bal, i) => {\n            let token = tokens[i];\n            let balance: ERC20Balance = {\n                address: token.address,\n                denomination: token.decimals,\n                balanceParsed: bnToLocaleString(bal, token.decimals),\n                balance: bal,\n                name: token.name,\n                symbol: token.symbol,\n            };\n            return balance;\n        });\n    }\n\n    private async updateUnknownAssetsX() {\n        let utxos = this.utxosX.getAllUTXOs();\n\n        for (let i = 0; i < utxos.length; i++) {\n            let utxo = utxos[i];\n            let assetIdBuff = utxo.getAssetID();\n            let assetId = bintools.cb58Encode(assetIdBuff);\n            await getAssetDescription(assetId);\n        }\n    }\n\n    /**\n     * Uses the X chain UTXOs owned by this wallet, gets asset description for unknown assets,\n     * and returns a dictionary of Asset IDs to balance amounts.\n     * - Updates `this.balanceX`\n     * - Expensive operation if there are unknown assets\n     * - Uses existing UTXOs\n     * @private\n     */\n    private async updateBalanceX(): Promise<WalletBalanceX> {\n        if (!activeNetwork) throw NO_NETWORK;\n        let utxos = this.utxosX.getAllUTXOs();\n\n        let unixNow = UnixNow();\n\n        let res: WalletBalanceX = {};\n\n        for (let i = 0; i < utxos.length; i++) {\n            let utxo = utxos[i];\n            let out = utxo.getOutput();\n            let type = out.getOutputID();\n\n            if (type != AVMConstants.SECPXFEROUTPUTID) continue;\n\n            let locktime = out.getLocktime();\n            let amount = (out as AmountOutput).getAmount();\n            let assetIdBuff = utxo.getAssetID();\n            let assetId = bintools.cb58Encode(assetIdBuff);\n\n            let asset: AssetBalanceX = res[assetId];\n\n            if (!asset) {\n                let assetInfo = await getAssetDescription(assetId);\n                asset = { locked: new BN(0), unlocked: new BN(0), meta: assetInfo };\n            }\n\n            if (locktime.lte(unixNow)) {\n                // not locked\n                asset.unlocked = asset.unlocked.add(amount);\n            } else {\n                // locked\n                asset.locked = asset.locked.add(amount);\n            }\n\n            res[assetId] = asset;\n        }\n\n        // If there are no DJTX UTXOs create a dummy empty balance object\n        let djtxID = activeNetwork.djtxID;\n        if (!res[djtxID]) {\n            let assetInfo = await getAssetDescription(djtxID);\n            res[djtxID] = {\n                locked: new BN(0),\n                unlocked: new BN(0),\n                meta: assetInfo,\n            };\n        }\n\n        this.balanceX = res;\n\n        // TODO: Check previous value\n        this.emitBalanceChangeX();\n        return res;\n    }\n\n    public getBalanceX(): WalletBalanceX {\n        return this.balanceX;\n    }\n\n    /**\n     * A helpful method that returns the DJTX balance on X, P, C chains.\n     * Internally calls chain specific getDjtxBalance methods.\n     */\n    public getDjtxBalance(): iDjtxBalance {\n        let X = this.getDjtxBalanceX();\n        let P = this.getDjtxBalanceP();\n        let C = this.getDjtxBalanceC();\n\n        return {\n            X,\n            P,\n            C,\n        };\n    }\n\n    /**\n     * Returns the X chain DJTX balance of the current wallet state.\n     * - Does not make a network request.\n     * - Does not refresh wallet balance.\n     */\n    public getDjtxBalanceX(): AssetBalanceRawX {\n        if (!activeNetwork) {\n            throw new Error('Network not selected.');\n        }\n        return (\n            this.balanceX[activeNetwork.djtxID] || {\n                unlocked: new BN(0),\n                locked: new BN(0),\n            }\n        );\n    }\n\n    public getDjtxBalanceC(): BN {\n        return this.evmWallet.getBalance();\n    }\n\n    /**\n     * Returns the P chain DJTX balance of the current wallet state.\n     * - Does not make a network request.\n     * - Does not refresh wallet balance.\n     */\n    public getDjtxBalanceP(): AssetBalanceP {\n        let unlocked = new BN(0);\n        let locked = new BN(0);\n        let lockedStakeable = new BN(0);\n\n        let utxos = this.utxosP.getAllUTXOs();\n        let unixNow = UnixNow();\n\n        for (let i = 0; i < utxos.length; i++) {\n            let utxo = utxos[i];\n            let out = utxo.getOutput();\n            let type = out.getOutputID();\n\n            let amount = (out as AmountOutput).getAmount();\n\n            if (type === PlatformVMConstants.STAKEABLELOCKOUTID) {\n                let locktime = (out as StakeableLockOut).getStakeableLocktime();\n                if (locktime.lte(unixNow)) {\n                    unlocked.iadd(amount);\n                } else {\n                    lockedStakeable = lockedStakeable.add(amount);\n                }\n            } else {\n                let locktime = (out as AmountOutput).getLocktime();\n                if (locktime.lte(unixNow)) {\n                    unlocked.iadd(amount);\n                } else {\n                    locked.iadd(amount);\n                }\n            }\n        }\n\n        return {\n            unlocked,\n            locked,\n            lockedStakeable: lockedStakeable,\n        };\n    }\n\n    /**\n     * Exports DJTX from P chain to X chain\n     * @remarks\n     * The export transaction will cover the Export + Import Fees\n     *\n     * @param amt amount of nDJTX to transfer\n     * @return returns the transaction id.\n     */\n    async exportPChain(amt: BN) {\n        let fee = xChain.getTxFee();\n        let amtFee = amt.add(fee);\n\n        let utxoSet = this.utxosP;\n        let destinationAddr = this.getAddressX();\n\n        let pChangeAddr = this.getAddressP();\n        let fromAddrs = this.getAllAddressesP();\n\n        let xId = xChain.getBlockchainID();\n\n        let exportTx = await pChain.buildExportTx(utxoSet, amtFee, xId, [destinationAddr], fromAddrs, [pChangeAddr]);\n\n        let tx = await this.signP(exportTx);\n        let txId = await pChain.issueTx(tx);\n        await waitTxP(txId);\n\n        await this.updateUtxosP();\n\n        return txId;\n    }\n\n    /**\n     * Exports DJTX from C chain to X chain\n     * @remarks\n     * The export transaction will cover the Export + Import Fees\n     *\n     * @param amt amount of nDJTX to transfer\n     * @return returns the transaction id.\n     */\n    async exportCChain(amt: BN): Promise<string> {\n        let fee = xChain.getTxFee();\n        let amtFee = amt.add(fee);\n\n        let hexAddr = this.getAddressC();\n        let bechAddr = this.getEvmAddressBech();\n\n        let fromAddresses = [hexAddr];\n        let destinationAddr = this.getAddressX();\n\n        let exportTx = await buildEvmExportTransaction(fromAddresses, destinationAddr, amtFee, bechAddr);\n\n        let tx = await this.signC(exportTx);\n\n        let txId = await cChain.issueTx(tx);\n\n        await waitTxC(txId);\n\n        await this.updateDjtxBalanceC();\n        return txId;\n    }\n\n    /**\n     * Exports DJTX from X chain to either P or C chain\n     * @remarks\n     * The export transaction will cover the Export + Import Fees\n     *\n     * @param amt amount of nDJTX to transfer\n     * @param destinationChain Which chain to export to.\n     * @return returns the transaction id.\n     */\n    async exportXChain(amt: BN, destinationChain: AvmExportChainType) {\n        let fee = xChain.getTxFee();\n        let amtFee = amt.add(fee);\n\n        let destinationAddr;\n        if (destinationChain === 'P') {\n            destinationAddr = this.getAddressP();\n        } else {\n            // C Chain\n            destinationAddr = this.getEvmAddressBech();\n        }\n\n        let fromAddresses = this.getAllAddressesX();\n        let changeAddress = this.getChangeAddressX();\n        let utxos = this.utxosX;\n        let exportTx = (await buildAvmExportTransaction(\n            destinationChain,\n            utxos,\n            fromAddresses,\n            destinationAddr,\n            amtFee,\n            changeAddress\n        )) as AVMUnsignedTx;\n\n        let tx = await this.signX(exportTx);\n\n        let txId = await xChain.issueTx(tx);\n        await waitTxX(txId);\n\n        // Update UTXOs\n        await this.updateUtxosX();\n\n        return txId;\n    }\n\n    async getAtomicUTXOsX(chainID: AvmImportChainType) {\n        let addrs = this.getAllAddressesX();\n        let result = await avmGetAtomicUTXOs(addrs, chainID);\n        return result;\n    }\n\n    async getAtomicUTXOsP(): Promise<PlatformUTXOSet> {\n        let addrs = this.getAllAddressesP();\n        return await platformGetAtomicUTXOs(addrs);\n    }\n\n    /**\n     * Imports atomic X chain utxos to the current actie X chain address\n     * @param chainID The chain ID to import from, either `P` or `C`\n     */\n    async importX(chainID: AvmImportChainType) {\n        const utxoSet = await this.getAtomicUTXOsX(chainID);\n\n        if (utxoSet.getAllUTXOs().length === 0) {\n            throw new Error('Nothing to import.');\n        }\n\n        let xToAddr = this.getAddressX();\n\n        let hrp = avalanche.getHRP();\n        let utxoAddrs = utxoSet.getAddresses().map((addr) => bintools.addressToString(hrp, 'X', addr));\n\n        let fromAddrs = utxoAddrs;\n        let ownerAddrs = utxoAddrs;\n\n        let sourceChainId;\n        if (chainID === 'P') {\n            sourceChainId = pChain.getBlockchainID();\n        } else {\n            sourceChainId = cChain.getBlockchainID();\n        }\n\n        // Owner addresses, the addresses we exported to\n        const unsignedTx = await xChain.buildImportTx(utxoSet, ownerAddrs, sourceChainId, [xToAddr], fromAddrs, [\n            xToAddr,\n        ]);\n\n        const tx = await this.signX(unsignedTx);\n        const txId = await xChain.issueTx(tx);\n\n        await waitTxX(txId);\n\n        // Update UTXOs\n        await this.updateUtxosX();\n\n        return txId;\n    }\n\n    async importP(toAddress?: string): Promise<string> {\n        const utxoSet = await this.getAtomicUTXOsP();\n\n        if (utxoSet.getAllUTXOs().length === 0) {\n            throw new Error('Nothing to import.');\n        }\n\n        // Owner addresses, the addresses we exported to\n        let walletAddrP = this.getAddressP();\n\n        let hrp = avalanche.getHRP();\n        let utxoAddrs = utxoSet.getAddresses().map((addr) => bintools.addressToString(hrp, 'P', addr));\n\n        // let fromAddrs = utxoAddrs;\n        let ownerAddrs = utxoAddrs;\n\n        if (!toAddress) {\n            toAddress = walletAddrP;\n        }\n\n        const unsignedTx = await pChain.buildImportTx(\n            utxoSet,\n            ownerAddrs,\n            xChain.getBlockchainID(),\n            [toAddress],\n            ownerAddrs,\n            [walletAddrP],\n            undefined,\n            undefined\n        );\n        const tx = await this.signP(unsignedTx);\n        const txId = await pChain.issueTx(tx);\n\n        await waitTxP(txId);\n\n        await this.updateUtxosP();\n\n        return txId;\n    }\n\n    async importC() {\n        let bechAddr = this.getEvmAddressBech();\n\n        const utxoResponse = await cChain.getUTXOs(bechAddr, xChain.getBlockchainID());\n        const utxoSet: EVMUTXOSet = utxoResponse.utxos;\n\n        if (utxoSet.getAllUTXOs().length === 0) {\n            throw new Error('Nothing to import.');\n        }\n\n        let toAddress = this.getAddressC();\n        let ownerAddresses = [bechAddr];\n        let fromAddresses = ownerAddresses;\n        let sourceChain = xChain.getBlockchainID();\n\n        const unsignedTx = await cChain.buildImportTx(utxoSet, toAddress, ownerAddresses, sourceChain, fromAddresses);\n        let tx = await this.signC(unsignedTx);\n        let id = await cChain.issueTx(tx);\n\n        await waitTxC(id);\n\n        await this.updateDjtxBalanceC();\n\n        return id;\n    }\n\n    async createNftFamily(name: string, symbol: string, groupNum: number) {\n        let fromAddresses = this.getAllAddressesX();\n        let changeAddress = this.getChangeAddressX();\n\n        let minterAddress = this.getAddressX();\n\n        let utxoSet = this.utxosX;\n\n        let unsignedTx = await buildCreateNftFamilyTx(\n            name,\n            symbol,\n            groupNum,\n            fromAddresses,\n            minterAddress,\n            changeAddress,\n            utxoSet\n        );\n\n        let signed = await this.signX(unsignedTx);\n        const txId = await xChain.issueTx(signed);\n        return await waitTxX(txId);\n    }\n\n    async mintNft(mintUtxo: AVMUTXO, payload: PayloadBase, quantity: number) {\n        let ownerAddress = this.getAddressX();\n        let changeAddress = this.getChangeAddressX();\n\n        let sourceAddresses = this.getAllAddressesX();\n\n        let utxoSet = this.utxosX;\n        let tx = await buildMintNftTx(\n            mintUtxo,\n            payload,\n            quantity,\n            ownerAddress,\n            changeAddress,\n            sourceAddresses,\n            utxoSet\n        );\n        let signed = await this.signX(tx);\n        const txId = await xChain.issueTx(signed);\n        return await waitTxX(txId);\n    }\n\n    /**\n     * Adds a validator to the network using the given node id.\n     *\n     * @param nodeID The node id you are adding as a validator\n     * @param amt Amount of DJTX to stake in nDJTX\n     * @param start Validation period start date\n     * @param end Validation period end date\n     * @param delegationFee Minimum 2%\n     * @param rewardAddress P chain address to send staking rewards\n     * @param utxos\n     *\n     * @return Transaction id\n     */\n    async validate(\n        nodeID: string,\n        amt: BN,\n        start: Date,\n        end: Date,\n        delegationFee: number,\n        rewardAddress?: string,\n        utxos?: PlatformUTXO[]\n    ): Promise<string> {\n        let utxoSet = this.utxosP;\n\n        // If given custom UTXO set use that\n        if (utxos) {\n            utxoSet = new PlatformUTXOSet();\n            utxoSet.addArray(utxos);\n        }\n\n        let pAddressStrings = this.getAllAddressesP();\n        // let pAddressStrings = this.platformHelper.getAllDerivedAddresses()\n\n        let stakeAmount = amt;\n\n        // If reward address isn't given use index 0 address\n        if (!rewardAddress) {\n            rewardAddress = this.getAddressP();\n        }\n\n        // For change address use first available on the platform chain\n        let changeAddress = this.getAddressP();\n\n        let stakeReturnAddr = this.getAddressP();\n\n        // Convert dates to unix time\n        let startTime = new BN(Math.round(start.getTime() / 1000));\n        let endTime = new BN(Math.round(end.getTime() / 1000));\n\n        const unsignedTx = await pChain.buildAddValidatorTx(\n            utxoSet,\n            [stakeReturnAddr],\n            pAddressStrings, // from\n            [changeAddress], // change\n            nodeID,\n            startTime,\n            endTime,\n            stakeAmount,\n            [rewardAddress],\n            delegationFee\n        );\n\n        let tx = await this.signP(unsignedTx);\n        const txId = await pChain.issueTx(tx);\n        await waitTxP(txId);\n\n        this.updateUtxosP();\n\n        return txId;\n    }\n\n    async delegate(\n        nodeID: string,\n        amt: BN,\n        start: Date,\n        end: Date,\n        rewardAddress?: string,\n        utxos?: PlatformUTXO[]\n    ): Promise<string> {\n        let utxoSet = this.utxosP;\n        let pAddressStrings = this.getAllAddressesP();\n\n        let stakeAmount = amt;\n\n        // If given custom UTXO set use that\n        if (utxos) {\n            utxoSet = new PlatformUTXOSet();\n            utxoSet.addArray(utxos);\n        }\n\n        // If reward address isn't given use current P address\n        if (!rewardAddress) {\n            rewardAddress = this.getAddressP();\n        }\n\n        let stakeReturnAddr = this.getAddressP();\n\n        // For change address use the current platform chain\n        let changeAddress = this.getAddressP();\n\n        // Convert dates to unix time\n        let startTime = new BN(Math.round(start.getTime() / 1000));\n        let endTime = new BN(Math.round(end.getTime() / 1000));\n\n        const unsignedTx = await pChain.buildAddDelegatorTx(\n            utxoSet,\n            [stakeReturnAddr],\n            pAddressStrings,\n            [changeAddress],\n            nodeID,\n            startTime,\n            endTime,\n            stakeAmount,\n            [rewardAddress] // reward address\n        );\n\n        const tx = await this.signP(unsignedTx);\n        const txId = await pChain.issueTx(tx);\n        await waitTxP(txId);\n\n        this.updateUtxosP();\n        return txId;\n    }\n\n    /**\n     * Issues the given transaction.\n     * @param tx A universal transaction json object.\n     */\n    public async issueUniversalTx(tx: UniversalTx): Promise<string> {\n        switch (tx.action) {\n            case 'export_x_c':\n                if (!tx.amount) throw new Error('Universal transaction must specify an amount.');\n                return await this.exportXChain(tx.amount, 'C');\n            case 'import_x_c':\n                return await this.importC();\n            case 'export_x_p':\n                if (!tx.amount) throw new Error('Universal transaction must specify an amount.');\n                return await this.exportXChain(tx.amount, 'P');\n            case 'import_x_p':\n                return await this.importP();\n            case 'export_c_x':\n                if (!tx.amount) throw new Error('Universal transaction must specify an amount.');\n                return await this.exportCChain(tx.amount);\n            case 'import_c_x':\n                return await this.importX('C');\n            case 'export_p_x':\n                if (!tx.amount) throw new Error('Universal transaction must specify an amount.');\n                return await this.exportPChain(tx.amount);\n            case 'import_p_x':\n                return await this.importX('P');\n            default:\n                throw new Error('Method not supported.');\n        }\n    }\n\n    async getHistoryX(limit = 0): Promise<ITransactionData[]> {\n        let addrs = this.getAllAddressesX();\n        return await getAddressHistory(addrs, limit, xChain.getBlockchainID());\n    }\n\n    async getHistoryP(limit = 0): Promise<ITransactionData[]> {\n        let addrs = this.getAllAddressesP();\n        return await getAddressHistory(addrs, limit, pChain.getBlockchainID());\n    }\n\n    async getHistoryC(limit = 0): Promise<ITransactionData[]> {\n        let addrs = [this.getEvmAddressBech()];\n        return await getAddressHistory(addrs, limit, cChain.getBlockchainID());\n    }\n\n    async getHistoryEVM() {\n        let addr = this.getAddressC();\n        return await getAddressHistoryEVM(addr);\n    }\n\n    async getHistory(limit: number = 0): Promise<HistoryItemType[]> {\n        let txsX = await this.getHistoryX(limit);\n        let txsP = await this.getHistoryP(limit);\n        let txsC = await this.getHistoryC(limit);\n\n        let txsXPC = txsX.concat(txsP, txsC);\n\n        let txsEVM = await this.getHistoryEVM();\n\n        let addrs = this.getAllAddressesX();\n        let addrC = this.getAddressC();\n\n        // Parse X,P,C transactions\n        // Have to loop because of the asynchronous call\n        let parsedXPC = [];\n        for (let i = 0; i < txsXPC.length; i++) {\n            let tx = txsXPC[i];\n            try {\n                let summary = await getTransactionSummary(tx, addrs, addrC);\n                parsedXPC.push(summary);\n            } catch (err) {\n                console.error(err);\n            }\n        }\n\n        // Parse EVM Transactions\n        let parsedEVM = txsEVM.map((tx) => getTransactionSummaryEVM(tx, addrC));\n\n        // Sort and join X,P,C transactions\n        let parsedAll = [...parsedXPC, ...parsedEVM];\n        let txsSorted = parsedAll.sort((x, y) => (moment(x.timestamp).isBefore(moment(y.timestamp)) ? 1 : -1));\n\n        // If there is a limit only return that much\n        if (limit > 0) {\n            return txsSorted.slice(0, limit);\n        }\n        return txsSorted;\n    }\n}\n", "import { explorer_api } from '@/Network/network';\nimport { NO_EXPLORER_API } from '@/errors';\n\nasync function isAddressUsedX(addr: string) {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    let addrRaw = addr.split('-')[1];\n    let url = `/x/transactions?address=${addrRaw}&limit=1&disableCount=1`;\n\n    let res = await explorer_api.get(url);\n    if (res.data.transactions.length > 0) return true;\n    else return false;\n}\n\nasync function getAddressDetailX(addr: string) {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    let addrRaw = addr.split('-')[1];\n    let url = `/x/addresses/${addrRaw}`;\n\n    let res = await explorer_api.get(url);\n    return res.data;\n}\n\n// Given an array of addresses, checks which chain each address was already used on\nasync function getAddressChains(addrs: string[]) {\n    if (!explorer_api) {\n        throw NO_EXPLORER_API;\n    }\n\n    // Strip the prefix\n    let rawAddrs = addrs.map((addr) => {\n        return addr.split('-')[1];\n    });\n\n    let urlRoot = `/v2/addressChains`;\n\n    let res = await explorer_api.post(urlRoot, {\n        address: rawAddrs,\n        disableCount: ['1'],\n    });\n\n    return res.data.addressChains;\n}\n\nexport { getAddressDetailX, isAddressUsedX, getAddressChains };\n", "import HDKey from 'hdkey';\nimport { getPreferredHRP } from 'avalanche/dist/utils';\nimport { activeNetwork, avalanche, pChain, xChain } from '@/Network/network';\nimport { KeyPair as AVMKeyPair, KeyChain as AVMKeyChain } from 'avalanche/dist/apis/avm/keychain';\nimport { KeyChain as PlatformKeyChain, KeyPair as PlatformKeyPair } from 'avalanche/dist/apis/platformvm';\nimport { HdChainType } from './types';\nimport { Buffer } from 'avalanche';\nimport { INDEX_RANGE, SCAN_RANGE, SCAN_SIZE } from './constants';\nimport { getAddressChains } from '../Explorer/Explorer';\nimport { NO_NETWORK } from '@/errors';\nimport { bintools } from '@/common';\n\ntype AddressCache = {\n    [index: string]: HDKey;\n};\n\ntype KeyCacheX = {\n    [index: string]: AVMKeyPair;\n};\n\ntype KeyCacheP = {\n    [index: string]: PlatformKeyPair;\n};\n\n// Each HD wallet has 2 HdScaners, one for internal chain, one for external\nexport default class HdScanner {\n    protected index = 0;\n    protected addressCache: AddressCache = {};\n    protected keyCacheX: KeyCacheX = {};\n    protected keyCacheP: KeyCacheP = {};\n    readonly changePath: string;\n    readonly accountKey: HDKey;\n\n    constructor(accountKey: HDKey, isInternal = true) {\n        this.changePath = isInternal ? '1' : '0';\n        this.accountKey = accountKey;\n    }\n\n    getIndex() {\n        return this.index;\n    }\n\n    public increment(): number {\n        return this.index++;\n    }\n\n    public getAddressX() {\n        return this.getAddressForIndex(this.index, 'X');\n    }\n\n    public getAddressP() {\n        return this.getAddressForIndex(this.index, 'P');\n    }\n\n    public getAllAddresses(chainId: HdChainType = 'X'): string[] {\n        let upTo = this.index;\n        let addrs = [];\n        for (let i = 0; i <= upTo; i++) {\n            addrs.push(this.getAddressForIndex(i, chainId));\n        }\n        return addrs;\n    }\n\n    getAddressesInRange(start: number, end: number): string[] {\n        let res = [];\n        for (let i = start; i < end; i++) {\n            res.push(this.getAddressForIndex(i));\n        }\n        return res;\n    }\n\n    getKeyChainX(): AVMKeyChain {\n        let keychain = xChain.newKeyChain();\n        for (let i = 0; i <= this.index; i++) {\n            let key = this.getKeyForIndexX(i);\n            keychain.addKey(key);\n        }\n        return keychain;\n    }\n\n    getKeyChainP(): PlatformKeyChain {\n        let keychain = pChain.newKeyChain();\n        for (let i = 0; i <= this.index; i++) {\n            let key = this.getKeyForIndexP(i);\n            keychain.addKey(key);\n        }\n        return keychain;\n    }\n\n    getKeyForIndexX(index: number): AVMKeyPair {\n        let cache = this.keyCacheX[index];\n        if (cache) return cache;\n\n        let hdKey = this.getHdKeyForIndex(index);\n        let pkHex = hdKey.privateKey.toString('hex');\n\n        let pkBuf: Buffer = new Buffer(pkHex, 'hex');\n\n        let keychain = xChain.newKeyChain();\n        let keypair = keychain.importKey(pkBuf);\n\n        this.keyCacheX[index] = keypair;\n        return keypair;\n    }\n\n    getKeyForIndexP(index: number): PlatformKeyPair {\n        let cache = this.keyCacheP[index];\n        if (cache) return cache;\n\n        let hdKey = this.getHdKeyForIndex(index);\n        let pkHex = hdKey.privateKey.toString('hex');\n\n        let pkBuf: Buffer = new Buffer(pkHex, 'hex');\n\n        let keychain = pChain.newKeyChain();\n        let keypair = keychain.importKey(pkBuf);\n\n        this.keyCacheP[index] = keypair;\n\n        return keypair;\n    }\n\n    private getHdKeyForIndex(index: number): HDKey {\n        let key: HDKey;\n        if (this.addressCache[index]) {\n            key = this.addressCache[index];\n        } else {\n            key = this.accountKey.derive(`m/${this.changePath}/${index}`) as HDKey;\n            this.addressCache[index] = key;\n        }\n        return key;\n    }\n\n    private getAddressForIndex(index: number, chainId: HdChainType = 'X'): string {\n        let key = this.getHdKeyForIndex(index);\n\n        let publicKey = key.publicKey.toString('hex');\n        let publicKeyBuff = Buffer.from(publicKey, 'hex');\n\n        let hrp = getPreferredHRP(avalanche.getNetworkID());\n\n        let keypair = new AVMKeyPair(hrp, chainId);\n        let addrBuf = keypair.addressFromPublicKey(publicKeyBuff);\n        let addr = bintools.addressToString(hrp, chainId, addrBuf);\n\n        return addr;\n    }\n\n    // Uses the explorer to scan used addresses and find its starting index\n    public async resetIndex(startIndex = 0): Promise<number> {\n        if (!activeNetwork) throw NO_NETWORK;\n\n        let index;\n        if (activeNetwork.explorerURL) {\n            index = await this.findAvailableIndexExplorer(startIndex);\n        } else {\n            index = await this.findAvailableIndexNode(startIndex);\n        }\n        this.index = index;\n        return index;\n    }\n\n    // Scans the address space of this hd path and finds the last used index using the\n    // explorer API.\n    private async findAvailableIndexExplorer(startIndex = 0): Promise<number> {\n        let upTo = 512;\n\n        let addrs = this.getAddressesInRange(startIndex, startIndex + upTo);\n        let addrChains = await getAddressChains(addrs);\n\n        for (let i = 0; i < addrs.length - INDEX_RANGE; i++) {\n            let gapSize: number = 0;\n\n            for (let n = 0; n < INDEX_RANGE; n++) {\n                let scanIndex = i + n;\n                let scanAddr = addrs[scanIndex];\n\n                let rawAddr = scanAddr.split('-')[1];\n                let chains: string[] = addrChains[rawAddr];\n\n                if (!chains) {\n                    // If doesnt exist on any chain\n                    gapSize++;\n                } else {\n                    i = i + n;\n                    break;\n                }\n            }\n\n            // If the gap is reached return the index\n            if (gapSize === INDEX_RANGE) {\n                return startIndex + i;\n            }\n        }\n\n        return await this.findAvailableIndexExplorer(startIndex + (upTo - INDEX_RANGE));\n    }\n\n    // Uses the node to find last used HD index\n    // Only used when there is no explorer API available\n    private async findAvailableIndexNode(start = 0): Promise<number> {\n        let addrsX: string[] = [];\n        let addrsP: string[] = [];\n\n        // Get keys for indexes start to start+scan_size\n        for (let i: number = start; i < start + SCAN_SIZE; i++) {\n            let addressX = this.getAddressForIndex(i, 'X');\n            let addressP = this.getAddressForIndex(i, 'P');\n            addrsX.push(addressX);\n            addrsP.push(addressP);\n        }\n\n        let utxoSetX = (await xChain.getUTXOs(addrsX)).utxos;\n        let utxoSetP = (await pChain.getUTXOs(addrsP)).utxos;\n\n        // Scan UTXOs of these indexes and try to find a gap of INDEX_RANGE\n        for (let i: number = 0; i < addrsX.length - INDEX_RANGE; i++) {\n            let gapSize: number = 0;\n            for (let n: number = 0; n < INDEX_RANGE; n++) {\n                let scanIndex: number = i + n;\n                let addr: string = addrsX[scanIndex];\n                let addrBuf = bintools.parseAddress(addr, 'X');\n                let addrUTXOsX: string[] = utxoSetX.getUTXOIDs([addrBuf]);\n                let addrUTXOsP: string[] = utxoSetP.getUTXOIDs([addrBuf]);\n                if (addrUTXOsX.length === 0 && addrUTXOsP.length === 0) {\n                    gapSize++;\n                } else {\n                    // Potential improvement\n                    i = i + n;\n                    break;\n                }\n            }\n\n            // If we found a gap of 20, we can return the last fullIndex+1\n            if (gapSize === INDEX_RANGE) {\n                let targetIndex = start + i;\n                return targetIndex;\n            }\n        }\n        return await this.findAvailableIndexNode(start + SCAN_RANGE);\n    }\n}\n", "import { WalletProvider } from '@/Wallet/Wallet';\nimport HdScanner from '@/Wallet/HdScanner';\nimport HDKey from 'hdkey';\nimport { UTXOSet as AVMUTXOSet } from 'avalanche/dist/apis/avm/utxos';\nimport { avalanche } from '@/Network/network';\nimport { UTXOSet as PlatformUTXOSet } from 'avalanche/dist/apis/platformvm';\nimport { iHDWalletIndex } from '@/Wallet/types';\nimport { bintools } from '@/common';\n\nexport abstract class HDWalletAbstract extends WalletProvider {\n    protected internalScan: HdScanner;\n    protected externalScan: HdScanner;\n    protected accountKey: HDKey;\n\n    protected constructor(accountKey: HDKey) {\n        super();\n\n        this.internalScan = new HdScanner(accountKey, true);\n        this.externalScan = new HdScanner(accountKey, false);\n        this.accountKey = accountKey;\n    }\n\n    /**\n     * Returns current index used for external address derivation.\n     */\n    public getExternalIndex(): number {\n        return this.externalScan.getIndex();\n    }\n\n    /**\n     * Returns current index used for internal address derivation.\n     */\n    public getInternalIndex(): number {\n        return this.internalScan.getIndex();\n    }\n\n    /**\n     * Gets the active external address on the X chain\n     * - The X address will change after every deposit.\n     */\n    public getAddressX(): string {\n        return this.externalScan.getAddressX();\n    }\n\n    /**\n     * Gets the active change address on the X chain\n     * - The change address will change after every transaction on the X chain.\n     */\n    public getChangeAddressX() {\n        return this.internalScan.getAddressX();\n    }\n\n    /**\n     * Gets the active address on the P chain\n     */\n    public getAddressP(): string {\n        return this.externalScan.getAddressP();\n    }\n\n    /**\n     * Returns every external X chain address used by the wallet up to now.\n     */\n    public getExternalAddressesX(): string[] {\n        return this.externalScan.getAllAddresses('X');\n    }\n\n    /**\n     * Returns every internal X chain address used by the wallet up to now.\n     */\n    public getInternalAddressesX(): string[] {\n        return this.internalScan.getAllAddresses('X');\n    }\n\n    /**\n     * Returns every X chain address used by the wallet up to now (internal + external).\n     */\n    public getAllAddressesX(): string[] {\n        return [...this.getExternalAddressesX(), ...this.getInternalAddressesX()];\n    }\n\n    public getExternalAddressesP(): string[] {\n        return this.externalScan.getAllAddresses('P');\n    }\n\n    /**\n     * Returns every P chain address used by the wallet up to now.\n     */\n    public getAllAddressesP(): string[] {\n        return this.getExternalAddressesP();\n    }\n\n    /**\n     * Scans the network and initializes internal and external addresses on P and X chains.\n     * - Heavy operation\n     * - MUST use the explorer api to find the last used address\n     * - If explorer is not available it will use the connected node. This may result in invalid balances.\n     */\n    public async resetHdIndices(externalStart = 0, internalStart = 0): Promise<iHDWalletIndex> {\n        let indexExt = await this.externalScan.resetIndex(externalStart);\n        let indexInt = await this.internalScan.resetIndex(internalStart);\n\n        let indices = {\n            internal: indexInt,\n            external: indexExt,\n        };\n\n        this.emitAddressChange();\n        this.emitHdReady(indices);\n\n        return indices;\n    }\n\n    /**\n     * Emits an event to indicate the wallet has finishing calculating its last use address\n     * @protected\n     */\n    protected emitHdReady(indices: iHDWalletIndex): void {\n        this.emit('hd_ready', indices);\n    }\n\n    public async updateUtxosX(): Promise<AVMUTXOSet> {\n        let utxosX = await super.updateUtxosX();\n\n        // If the current internal or external X address is in the utxo set, increment hd index\n        let utxoAddrs = utxosX.getAddresses();\n        let utxoAddrsStr = utxoAddrs.map((addr) => {\n            return bintools.addressToString(avalanche.getHRP(), 'X', addr);\n        });\n\n        let addrExternalX = this.getAddressX();\n        let addrInternalX = this.getChangeAddressX();\n\n        let isAddrChange = false;\n        // Increment external index if the current address is in the utxo set\n        if (utxoAddrsStr.includes(addrExternalX)) {\n            this.incrementExternal();\n            isAddrChange = true;\n        }\n\n        // Increment internal index if the current address is in the utxo set\n        if (utxoAddrsStr.includes(addrInternalX)) {\n            this.incrementInternal();\n            isAddrChange = true;\n        }\n\n        if (isAddrChange) this.emitAddressChange();\n\n        return utxosX;\n    }\n\n    private incrementExternal() {\n        this.externalScan.increment();\n    }\n\n    private incrementInternal() {\n        this.internalScan.increment();\n    }\n\n    public async updateUtxosP(): Promise<PlatformUTXOSet> {\n        let utxosP = await super.updateUtxosP();\n\n        // If the current P address is in the utxo set, increment hd index\n        let utxoAddrs = utxosP.getAddresses();\n        let utxoAddrsStr = utxoAddrs.map((addr) => {\n            return bintools.addressToString(avalanche.getHRP(), 'P', addr);\n        });\n\n        let addrExternalP = this.getAddressP();\n\n        // Increment external index if the current address is in the utxo set\n        if (utxoAddrsStr.includes(addrExternalP)) {\n            this.incrementExternal();\n            this.emitAddressChange();\n        }\n\n        return utxosP;\n    }\n\n    public getAddressAtIndexExternalX(index: number): string {\n        if (index < 0) throw new Error('Index must be >= 0');\n        return this.externalScan.getKeyForIndexX(index).getAddressString();\n    }\n\n    public getAddressAtIndexInternalX(index: number): string {\n        if (index < 0) throw new Error('Index must be >= 0');\n        return this.internalScan.getKeyForIndexX(index).getAddressString();\n    }\n\n    public getAddressAtIndexExternalP(index: number): string {\n        if (index < 0) throw new Error('Index must be >= 0');\n        return this.externalScan.getKeyForIndexP(index).getAddressString();\n    }\n}\n", "import * as bip39 from 'bip39';\nimport HDKey from 'hdkey';\nimport { DJTX_ACCOUNT_PATH, ETH_ACCOUNT_PATH } from './constants';\nimport EvmWallet from './EvmWallet';\nimport { UnsafeWallet, WalletNameType } from './types';\nimport { Buffer } from 'avalanche';\nimport { Transaction } from '@ethereumjs/tx';\nimport { Tx as AVMTx, UnsignedTx as AVMUnsignedTx } from 'avalanche/dist/apis/avm';\nimport { Tx as PlatformTx, UnsignedTx as PlatformUnsignedTx } from 'avalanche/dist/apis/platformvm';\nimport { KeyPair as AVMKeyPair, KeyChain as AVMKeyChain } from 'avalanche/dist/apis/avm/keychain';\nimport { KeyChain as PlatformKeyChain } from 'avalanche/dist/apis/platformvm';\nimport {\n    UnsignedTx as EVMUnsignedTx,\n    Tx as EVMTx,\n    KeyChain as EVMKeychain,\n    KeyPair as EVMKeyPair,\n} from 'avalanche/dist/apis/evm';\nimport { avalanche } from '@/Network/network';\nimport { digestMessage } from '@/utils/utils';\nimport { HDWalletAbstract } from '@/Wallet/HDWalletAbstract';\nimport { bintools } from '@/common';\n\nexport default class MnemonicWallet extends HDWalletAbstract implements UnsafeWallet {\n    evmWallet: EvmWallet;\n    type: WalletNameType;\n    mnemonic: string;\n\n    private ethAccountKey: HDKey;\n\n    constructor(mnemonic: string) {\n        let seed: globalThis.Buffer = bip39.mnemonicToSeedSync(mnemonic);\n        let masterHdKey: HDKey = HDKey.fromMasterSeed(seed);\n        let accountKey = masterHdKey.derive(DJTX_ACCOUNT_PATH);\n\n        super(accountKey);\n\n        this.type = 'mnemonic';\n        if (!bip39.validateMnemonic(mnemonic)) {\n            throw new Error('Invalid mnemonic phrase.');\n        }\n\n        let ethAccountKey = masterHdKey.derive(ETH_ACCOUNT_PATH + '/0/0');\n        this.ethAccountKey = ethAccountKey;\n        let ethKey = ethAccountKey.privateKey;\n        let evmWallet = new EvmWallet(ethKey);\n\n        this.mnemonic = mnemonic;\n        this.evmWallet = evmWallet;\n    }\n\n    /**\n     * Gets the active address on the C chain in Bech32 encoding\n     * @return\n     * Bech32 representation of the EVM address.\n     */\n    public getEvmAddressBech(): string {\n        let keypair = new EVMKeyPair(avalanche.getHRP(), 'C');\n        let addr = keypair.addressFromPublicKey(Buffer.from(this.ethAccountKey.publicKey));\n        return bintools.addressToString(avalanche.getHRP(), 'C', addr);\n    }\n\n    /**\n     * Returns the derived private key used by the EVM wallet.\n     */\n    public getEvmPrivateKeyHex(): string {\n        return this.evmWallet.getPrivateKeyHex();\n    }\n\n    /**\n     * Generates a 24 word mnemonic phrase and initializes a wallet instance with it.\n     * @return Returns the initialized wallet.\n     */\n    static create(): MnemonicWallet {\n        const mnemonic = bip39.generateMnemonic(256);\n        return MnemonicWallet.fromMnemonic(mnemonic);\n    }\n\n    /**\n     * Returns a new 24 word mnemonic key phrase.\n     */\n    static generateMnemonicPhrase(): string {\n        return bip39.generateMnemonic(256);\n    }\n\n    /**\n     * Returns a new instance of a Mnemonic wallet from the given key phrase.\n     * @param mnemonic The 24 word mnemonic phrase of the wallet\n     */\n    static fromMnemonic(mnemonic: string): MnemonicWallet {\n        return new MnemonicWallet(mnemonic);\n    }\n\n    /**\n     * Signs an EVM transaction on the C chain.\n     * @param tx The unsigned transaction\n     */\n    async signEvm(tx: Transaction): Promise<Transaction> {\n        return this.evmWallet.signEVM(tx);\n    }\n\n    /**\n     * Signs an AVM transaction.\n     * @param tx The unsigned transaction\n     */\n    async signX(tx: AVMUnsignedTx): Promise<AVMTx> {\n        return tx.sign(this.getKeyChainX());\n    }\n\n    /**\n     * Signs a PlatformVM transaction.\n     * @param tx The unsigned transaction\n     */\n    async signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\n        return tx.sign(this.getKeyChainP());\n    }\n\n    /**\n     * Signs a C chain transaction\n     * @remarks\n     * Used for Import and Export transactions on the C chain. For everything else, use `this.signEvm()`\n     * @param tx The unsigned transaction\n     */\n    async signC(tx: EVMUnsignedTx): Promise<EVMTx> {\n        return this.evmWallet.signC(tx);\n    }\n\n    /**\n     * Returns a keychain with the keys of every derived X chain address.\n     * @private\n     */\n    private getKeyChainX(): AVMKeyChain {\n        let internal = this.internalScan.getKeyChainX();\n        let external = this.externalScan.getKeyChainX();\n        return internal.union(external);\n    }\n\n    /**\n     * Returns a keychain with the keys of every derived P chain address.\n     * @private\n     */\n    private getKeyChainP(): PlatformKeyChain {\n        return this.externalScan.getKeyChainP();\n    }\n\n    /**\n     * Gets the active address on the C chain\n     * @return\n     * Hex representation of the EVM address.\n     */\n    public getAddressC(): string {\n        return this.evmWallet.getAddress();\n    }\n\n    // TODO: Support internal address as well\n    signMessage(msgStr: string, index: number): string {\n        let key = this.externalScan.getKeyForIndexX(index) as AVMKeyPair;\n        let digest = digestMessage(msgStr);\n\n        // Convert to the other Buffer and sign\n        let digestHex = digest.toString('hex');\n        let digestBuff = Buffer.from(digestHex, 'hex');\n        let signed = key.sign(digestBuff);\n\n        return bintools.cb58Encode(signed);\n    }\n}\n", "import { WalletProvider } from '@/Wallet/Wallet';\nimport { UnsafeWallet, WalletNameType } from '@/Wallet/types';\n\nimport { KeyChain as AVMKeyChain, UnsignedTx as AVMUnsignedTx, Tx as AVMTx } from 'avalanche/dist/apis/avm';\nimport {\n    KeyChain as PlatformKeyChain,\n    UnsignedTx as PlatformUnsignedTx,\n    Tx as PlatformTx,\n} from 'avalanche/dist/apis/platformvm';\nimport { avalanche, pChain, xChain } from '@/Network/network';\nimport { Buffer as BufferAvalanche } from 'avalanche';\nimport EvmWallet from '@/Wallet/EvmWallet';\nimport { UnsignedTx, Tx, KeyPair as EVMKeyPair } from 'avalanche/dist/apis/evm';\nimport { Transaction } from '@ethereumjs/tx';\nimport { bintools } from '@/common';\n\nexport default class SingletonWallet extends WalletProvider implements UnsafeWallet {\n    type: WalletNameType = 'singleton';\n    key = '';\n    keyBuff: BufferAvalanche;\n    evmWallet: EvmWallet;\n\n    /**\n     *\n     * @param privateKey An avalanche private key, starts with `PrivateKey-`\n     */\n    constructor(privateKey: string) {\n        super();\n\n        this.key = privateKey;\n\n        // Derive EVM key and address\n        let pkBuf = bintools.cb58Decode(privateKey.split('-')[1]);\n        this.keyBuff = pkBuf;\n\n        let pkHex = pkBuf.toString('hex');\n        let pkBuffNative = Buffer.from(pkHex, 'hex');\n\n        this.evmWallet = new EvmWallet(pkBuffNative);\n    }\n\n    static fromPrivateKey(key: string): SingletonWallet {\n        return new SingletonWallet(key);\n    }\n\n    static fromEvmKey(key: string): SingletonWallet {\n        let keyBuff = bintools.cb58Encode(BufferAvalanche.from(key, 'hex'));\n        let avmKeyStr = `PrivateKey-${keyBuff}`;\n        return new SingletonWallet(avmKeyStr);\n    }\n\n    private getKeyChainX(): AVMKeyChain {\n        let keyChain = xChain.newKeyChain();\n        keyChain.importKey(this.key);\n        return keyChain;\n    }\n\n    private getKeyChainP(): PlatformKeyChain {\n        let keyChain = pChain.newKeyChain();\n        keyChain.importKey(this.key);\n        return keyChain;\n    }\n\n    /**\n     * Returns the derived private key used by the EVM wallet.\n     */\n    public getEvmPrivateKeyHex(): string {\n        return this.evmWallet.getPrivateKeyHex();\n    }\n\n    getAddressC(): string {\n        return this.evmWallet.getAddress();\n    }\n\n    getAddressP(): string {\n        let keyChain = this.getKeyChainP();\n        return keyChain.getAddressStrings()[0];\n    }\n\n    getAddressX(): string {\n        let keyChain = this.getKeyChainX();\n        return keyChain.getAddressStrings()[0];\n    }\n\n    getAllAddressesP(): string[] {\n        return [this.getAddressP()];\n    }\n\n    getAllAddressesX(): string[] {\n        return [this.getAddressX()];\n    }\n\n    getChangeAddressX(): string {\n        return this.getAddressX();\n    }\n\n    getEvmAddressBech(): string {\n        let keypair = new EVMKeyPair(avalanche.getHRP(), 'C');\n        keypair.importKey(this.keyBuff);\n        return keypair.getAddressString();\n    }\n\n    getExternalAddressesP(): string[] {\n        return [this.getAddressP()];\n    }\n\n    getExternalAddressesX(): string[] {\n        return [this.getAddressX()];\n    }\n\n    getInternalAddressesX(): string[] {\n        return [this.getAddressX()];\n    }\n\n    async signC(tx: UnsignedTx): Promise<Tx> {\n        return this.evmWallet.signC(tx);\n    }\n\n    async signEvm(tx: Transaction): Promise<Transaction> {\n        return this.evmWallet.signEVM(tx);\n    }\n\n    async signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\n        return tx.sign(this.getKeyChainP());\n    }\n\n    async signX(tx: AVMUnsignedTx): Promise<AVMTx> {\n        return tx.sign(this.getKeyChainX());\n    }\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defer = defer;\nexports.splitPath = splitPath;\nexports.eachSeries = eachSeries;\nexports.foreach = foreach;\nexports.doIf = doIf;\nexports.asyncWhile = asyncWhile;\n\n/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\nfunction defer() {\n  let resolve, reject;\n  let promise = new Promise(function (success, failure) {\n    resolve = success;\n    reject = failure;\n  });\n  if (!resolve || !reject) throw \"defer() error\"; // this never happens and is just to make flow happy\n\n  return {\n    promise,\n    resolve,\n    reject\n  };\n} // TODO use bip32-path library\n\n\nfunction splitPath(path) {\n  let result = [];\n  let components = path.split(\"/\");\n  components.forEach(element => {\n    let number = parseInt(element, 10);\n\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n\n    result.push(number);\n  });\n  return result;\n} // TODO use async await\n\n\nfunction eachSeries(arr, fun) {\n  return arr.reduce((p, e) => p.then(() => fun(e)), Promise.resolve());\n}\n\nfunction foreach(arr, callback) {\n  function iterate(index, array, result) {\n    if (index >= array.length) {\n      return result;\n    } else return callback(array[index], index).then(function (res) {\n      result.push(res);\n      return iterate(index + 1, array, result);\n    });\n  }\n\n  return Promise.resolve().then(() => iterate(0, arr, []));\n}\n\nfunction doIf(condition, callback) {\n  return Promise.resolve().then(() => {\n    if (condition) {\n      return callback();\n    }\n  });\n}\n\nfunction asyncWhile(predicate, callback) {\n  function iterate(result) {\n    if (!predicate()) {\n      return result;\n    } else {\n      return callback().then(res => {\n        result.push(res);\n        return iterate(result);\n      });\n    }\n  }\n\n  return Promise.resolve([]).then(iterate);\n}\n//# sourceMappingURL=utils.js.map", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/* eslint-disable no-continue */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-prototype-builtins */\r\nvar errorClasses = {};\r\nvar deserializers = {};\r\nvar addCustomErrorDeserializer = function (name, deserializer) {\r\n    deserializers[name] = deserializer;\r\n};\r\nvar createCustomErrorClass = function (name) {\r\n    var C = function CustomError(message, fields) {\r\n        Object.assign(this, fields);\r\n        this.name = name;\r\n        this.message = message || name;\r\n        this.stack = new Error().stack;\r\n    };\r\n    C.prototype = new Error();\r\n    errorClasses[name] = C;\r\n    return C;\r\n};\r\n// inspired from https://github.com/programble/errio/blob/master/index.js\r\nvar deserializeError = function (object) {\r\n    if (typeof object === \"object\" && object) {\r\n        try {\r\n            // $FlowFixMe FIXME HACK\r\n            var msg = JSON.parse(object.message);\r\n            if (msg.message && msg.name) {\r\n                object = msg;\r\n            }\r\n        }\r\n        catch (e) {\r\n            // nothing\r\n        }\r\n        var error = void 0;\r\n        if (typeof object.name === \"string\") {\r\n            var name_1 = object.name;\r\n            var des = deserializers[name_1];\r\n            if (des) {\r\n                error = des(object);\r\n            }\r\n            else {\r\n                var constructor = name_1 === \"Error\" ? Error : errorClasses[name_1];\r\n                if (!constructor) {\r\n                    console.warn(\"deserializing an unknown class '\" + name_1 + \"'\");\r\n                    constructor = createCustomErrorClass(name_1);\r\n                }\r\n                error = Object.create(constructor.prototype);\r\n                try {\r\n                    for (var prop in object) {\r\n                        if (object.hasOwnProperty(prop)) {\r\n                            error[prop] = object[prop];\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // sometimes setting a property can fail (e.g. .name)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            error = new Error(object.message);\r\n        }\r\n        if (!error.stack && Error.captureStackTrace) {\r\n            Error.captureStackTrace(error, deserializeError);\r\n        }\r\n        return error;\r\n    }\r\n    return new Error(String(object));\r\n};\r\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\r\nvar serializeError = function (value) {\r\n    if (!value)\r\n        return value;\r\n    if (typeof value === \"object\") {\r\n        return destroyCircular(value, []);\r\n    }\r\n    if (typeof value === \"function\") {\r\n        return \"[Function: \" + (value.name || \"anonymous\") + \"]\";\r\n    }\r\n    return value;\r\n};\r\n// https://www.npmjs.com/package/destroy-circular\r\nfunction destroyCircular(from, seen) {\r\n    var to = {};\r\n    seen.push(from);\r\n    for (var _i = 0, _a = Object.keys(from); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        var value = from[key];\r\n        if (typeof value === \"function\") {\r\n            continue;\r\n        }\r\n        if (!value || typeof value !== \"object\") {\r\n            to[key] = value;\r\n            continue;\r\n        }\r\n        if (seen.indexOf(from[key]) === -1) {\r\n            to[key] = destroyCircular(from[key], seen.slice(0));\r\n            continue;\r\n        }\r\n        to[key] = \"[Circular]\";\r\n    }\r\n    if (typeof from.name === \"string\") {\r\n        to.name = from.name;\r\n    }\r\n    if (typeof from.message === \"string\") {\r\n        to.message = from.message;\r\n    }\r\n    if (typeof from.stack === \"string\") {\r\n        to.stack = from.stack;\r\n    }\r\n    return to;\r\n}\n\nvar AccountNameRequiredError = createCustomErrorClass(\"AccountNameRequired\");\r\nvar AccountNotSupported = createCustomErrorClass(\"AccountNotSupported\");\r\nvar AmountRequired = createCustomErrorClass(\"AmountRequired\");\r\nvar BluetoothRequired = createCustomErrorClass(\"BluetoothRequired\");\r\nvar BtcUnmatchedApp = createCustomErrorClass(\"BtcUnmatchedApp\");\r\nvar CantOpenDevice = createCustomErrorClass(\"CantOpenDevice\");\r\nvar CashAddrNotSupported = createCustomErrorClass(\"CashAddrNotSupported\");\r\nvar CurrencyNotSupported = createCustomErrorClass(\"CurrencyNotSupported\");\r\nvar DeviceAppVerifyNotSupported = createCustomErrorClass(\"DeviceAppVerifyNotSupported\");\r\nvar DeviceGenuineSocketEarlyClose = createCustomErrorClass(\"DeviceGenuineSocketEarlyClose\");\r\nvar DeviceNotGenuineError = createCustomErrorClass(\"DeviceNotGenuine\");\r\nvar DeviceOnDashboardExpected = createCustomErrorClass(\"DeviceOnDashboardExpected\");\r\nvar DeviceOnDashboardUnexpected = createCustomErrorClass(\"DeviceOnDashboardUnexpected\");\r\nvar DeviceInOSUExpected = createCustomErrorClass(\"DeviceInOSUExpected\");\r\nvar DeviceHalted = createCustomErrorClass(\"DeviceHalted\");\r\nvar DeviceNameInvalid = createCustomErrorClass(\"DeviceNameInvalid\");\r\nvar DeviceSocketFail = createCustomErrorClass(\"DeviceSocketFail\");\r\nvar DeviceSocketNoBulkStatus = createCustomErrorClass(\"DeviceSocketNoBulkStatus\");\r\nvar DisconnectedDevice = createCustomErrorClass(\"DisconnectedDevice\");\r\nvar DisconnectedDeviceDuringOperation = createCustomErrorClass(\"DisconnectedDeviceDuringOperation\");\r\nvar EnpointConfigError = createCustomErrorClass(\"EnpointConfig\");\r\nvar EthAppPleaseEnableContractData = createCustomErrorClass(\"EthAppPleaseEnableContractData\");\r\nvar FeeEstimationFailed = createCustomErrorClass(\"FeeEstimationFailed\");\r\nvar FirmwareNotRecognized = createCustomErrorClass(\"FirmwareNotRecognized\");\r\nvar HardResetFail = createCustomErrorClass(\"HardResetFail\");\r\nvar InvalidXRPTag = createCustomErrorClass(\"InvalidXRPTag\");\r\nvar InvalidAddress = createCustomErrorClass(\"InvalidAddress\");\r\nvar InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass(\"InvalidAddressBecauseDestinationIsAlsoSource\");\r\nvar LatestMCUInstalledError = createCustomErrorClass(\"LatestMCUInstalledError\");\r\nvar UnknownMCU = createCustomErrorClass(\"UnknownMCU\");\r\nvar LedgerAPIError = createCustomErrorClass(\"LedgerAPIError\");\r\nvar LedgerAPIErrorWithMessage = createCustomErrorClass(\"LedgerAPIErrorWithMessage\");\r\nvar LedgerAPINotAvailable = createCustomErrorClass(\"LedgerAPINotAvailable\");\r\nvar ManagerAppAlreadyInstalledError = createCustomErrorClass(\"ManagerAppAlreadyInstalled\");\r\nvar ManagerAppRelyOnBTCError = createCustomErrorClass(\"ManagerAppRelyOnBTC\");\r\nvar ManagerAppDepInstallRequired = createCustomErrorClass(\"ManagerAppDepInstallRequired\");\r\nvar ManagerAppDepUninstallRequired = createCustomErrorClass(\"ManagerAppDepUninstallRequired\");\r\nvar ManagerDeviceLockedError = createCustomErrorClass(\"ManagerDeviceLocked\");\r\nvar ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass(\"ManagerFirmwareNotEnoughSpace\");\r\nvar ManagerNotEnoughSpaceError = createCustomErrorClass(\"ManagerNotEnoughSpace\");\r\nvar ManagerUninstallBTCDep = createCustomErrorClass(\"ManagerUninstallBTCDep\");\r\nvar NetworkDown = createCustomErrorClass(\"NetworkDown\");\r\nvar NoAddressesFound = createCustomErrorClass(\"NoAddressesFound\");\r\nvar NotEnoughBalance = createCustomErrorClass(\"NotEnoughBalance\");\r\nvar NotEnoughBalanceToDelegate = createCustomErrorClass(\"NotEnoughBalanceToDelegate\");\r\nvar NotEnoughBalanceInParentAccount = createCustomErrorClass(\"NotEnoughBalanceInParentAccount\");\r\nvar NotEnoughSpendableBalance = createCustomErrorClass(\"NotEnoughSpendableBalance\");\r\nvar NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass(\"NotEnoughBalanceBecauseDestinationNotCreated\");\r\nvar NoAccessToCamera = createCustomErrorClass(\"NoAccessToCamera\");\r\nvar NotEnoughGas = createCustomErrorClass(\"NotEnoughGas\");\r\nvar NotSupportedLegacyAddress = createCustomErrorClass(\"NotSupportedLegacyAddress\");\r\nvar GasLessThanEstimate = createCustomErrorClass(\"GasLessThanEstimate\");\r\nvar PasswordsDontMatchError = createCustomErrorClass(\"PasswordsDontMatch\");\r\nvar PasswordIncorrectError = createCustomErrorClass(\"PasswordIncorrect\");\r\nvar RecommendSubAccountsToEmpty = createCustomErrorClass(\"RecommendSubAccountsToEmpty\");\r\nvar RecommendUndelegation = createCustomErrorClass(\"RecommendUndelegation\");\r\nvar TimeoutTagged = createCustomErrorClass(\"TimeoutTagged\");\r\nvar UnexpectedBootloader = createCustomErrorClass(\"UnexpectedBootloader\");\r\nvar MCUNotGenuineToDashboard = createCustomErrorClass(\"MCUNotGenuineToDashboard\");\r\nvar RecipientRequired = createCustomErrorClass(\"RecipientRequired\");\r\nvar UnavailableTezosOriginatedAccountReceive = createCustomErrorClass(\"UnavailableTezosOriginatedAccountReceive\");\r\nvar UnavailableTezosOriginatedAccountSend = createCustomErrorClass(\"UnavailableTezosOriginatedAccountSend\");\r\nvar UpdateFetchFileFail = createCustomErrorClass(\"UpdateFetchFileFail\");\r\nvar UpdateIncorrectHash = createCustomErrorClass(\"UpdateIncorrectHash\");\r\nvar UpdateIncorrectSig = createCustomErrorClass(\"UpdateIncorrectSig\");\r\nvar UpdateYourApp = createCustomErrorClass(\"UpdateYourApp\");\r\nvar UserRefusedDeviceNameChange = createCustomErrorClass(\"UserRefusedDeviceNameChange\");\r\nvar UserRefusedAddress = createCustomErrorClass(\"UserRefusedAddress\");\r\nvar UserRefusedFirmwareUpdate = createCustomErrorClass(\"UserRefusedFirmwareUpdate\");\r\nvar UserRefusedAllowManager = createCustomErrorClass(\"UserRefusedAllowManager\");\r\nvar UserRefusedOnDevice = createCustomErrorClass(\"UserRefusedOnDevice\"); // TODO rename because it's just for transaction refusal\r\nvar TransportOpenUserCancelled = createCustomErrorClass(\"TransportOpenUserCancelled\");\r\nvar TransportInterfaceNotAvailable = createCustomErrorClass(\"TransportInterfaceNotAvailable\");\r\nvar TransportRaceCondition = createCustomErrorClass(\"TransportRaceCondition\");\r\nvar TransportWebUSBGestureRequired = createCustomErrorClass(\"TransportWebUSBGestureRequired\");\r\nvar DeviceShouldStayInApp = createCustomErrorClass(\"DeviceShouldStayInApp\");\r\nvar WebsocketConnectionError = createCustomErrorClass(\"WebsocketConnectionError\");\r\nvar WebsocketConnectionFailed = createCustomErrorClass(\"WebsocketConnectionFailed\");\r\nvar WrongDeviceForAccount = createCustomErrorClass(\"WrongDeviceForAccount\");\r\nvar WrongAppForCurrency = createCustomErrorClass(\"WrongAppForCurrency\");\r\nvar ETHAddressNonEIP = createCustomErrorClass(\"ETHAddressNonEIP\");\r\nvar CantScanQRCode = createCustomErrorClass(\"CantScanQRCode\");\r\nvar FeeNotLoaded = createCustomErrorClass(\"FeeNotLoaded\");\r\nvar FeeRequired = createCustomErrorClass(\"FeeRequired\");\r\nvar FeeTooHigh = createCustomErrorClass(\"FeeTooHigh\");\r\nvar SyncError = createCustomErrorClass(\"SyncError\");\r\nvar PairingFailed = createCustomErrorClass(\"PairingFailed\");\r\nvar GenuineCheckFailed = createCustomErrorClass(\"GenuineCheckFailed\");\r\nvar LedgerAPI4xx = createCustomErrorClass(\"LedgerAPI4xx\");\r\nvar LedgerAPI5xx = createCustomErrorClass(\"LedgerAPI5xx\");\r\nvar FirmwareOrAppUpdateRequired = createCustomErrorClass(\"FirmwareOrAppUpdateRequired\");\r\n// db stuff, no need to translate\r\nvar NoDBPathGiven = createCustomErrorClass(\"NoDBPathGiven\");\r\nvar DBWrongPassword = createCustomErrorClass(\"DBWrongPassword\");\r\nvar DBNotReset = createCustomErrorClass(\"DBNotReset\");\r\n/**\r\n * TransportError is used for any generic transport errors.\r\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\r\n */\r\nfunction TransportError(message, id) {\r\n    this.name = \"TransportError\";\r\n    this.message = message;\r\n    this.stack = new Error().stack;\r\n    this.id = id;\r\n}\r\nTransportError.prototype = new Error();\r\naddCustomErrorDeserializer(\"TransportError\", function (e) { return new TransportError(e.message, e.id); });\r\nvar StatusCodes = {\r\n    PIN_REMAINING_ATTEMPTS: 0x63c0,\r\n    INCORRECT_LENGTH: 0x6700,\r\n    MISSING_CRITICAL_PARAMETER: 0x6800,\r\n    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\r\n    SECURITY_STATUS_NOT_SATISFIED: 0x6982,\r\n    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\r\n    INCORRECT_DATA: 0x6a80,\r\n    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\r\n    REFERENCED_DATA_NOT_FOUND: 0x6a88,\r\n    FILE_ALREADY_EXISTS: 0x6a89,\r\n    INCORRECT_P1_P2: 0x6b00,\r\n    INS_NOT_SUPPORTED: 0x6d00,\r\n    CLA_NOT_SUPPORTED: 0x6e00,\r\n    TECHNICAL_PROBLEM: 0x6f00,\r\n    OK: 0x9000,\r\n    MEMORY_PROBLEM: 0x9240,\r\n    NO_EF_SELECTED: 0x9400,\r\n    INVALID_OFFSET: 0x9402,\r\n    FILE_NOT_FOUND: 0x9404,\r\n    INCONSISTENT_FILE: 0x9408,\r\n    ALGORITHM_NOT_SUPPORTED: 0x9484,\r\n    INVALID_KCV: 0x9485,\r\n    CODE_NOT_INITIALIZED: 0x9802,\r\n    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\r\n    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\r\n    CONTRADICTION_INVALIDATION: 0x9810,\r\n    CODE_BLOCKED: 0x9840,\r\n    MAX_VALUE_REACHED: 0x9850,\r\n    GP_AUTH_FAILED: 0x6300,\r\n    LICENSING: 0x6f42,\r\n    HALTED: 0x6faa,\r\n};\r\nfunction getAltStatusMessage(code) {\r\n    switch (code) {\r\n        // improve text of most common errors\r\n        case 0x6700:\r\n            return \"Incorrect length\";\r\n        case 0x6800:\r\n            return \"Missing critical parameter\";\r\n        case 0x6982:\r\n            return \"Security not satisfied (dongle locked or have invalid access rights)\";\r\n        case 0x6985:\r\n            return \"Condition of use not satisfied (denied by the user?)\";\r\n        case 0x6a80:\r\n            return \"Invalid data received\";\r\n        case 0x6b00:\r\n            return \"Invalid parameter received\";\r\n    }\r\n    if (0x6f00 <= code && code <= 0x6fff) {\r\n        return \"Internal error, please report\";\r\n    }\r\n}\r\n/**\r\n * Error thrown when a device returned a non success status.\r\n * the error.statusCode is one of the `StatusCodes` exported by this library.\r\n */\r\nfunction TransportStatusError(statusCode) {\r\n    this.name = \"TransportStatusError\";\r\n    var statusText = Object.keys(StatusCodes).find(function (k) { return StatusCodes[k] === statusCode; }) ||\r\n        \"UNKNOWN_ERROR\";\r\n    var smsg = getAltStatusMessage(statusCode) || statusText;\r\n    var statusCodeStr = statusCode.toString(16);\r\n    this.message = \"Ledger device: \" + smsg + \" (0x\" + statusCodeStr + \")\";\r\n    this.stack = new Error().stack;\r\n    this.statusCode = statusCode;\r\n    this.statusText = statusText;\r\n}\r\nTransportStatusError.prototype = new Error();\r\naddCustomErrorDeserializer(\"TransportStatusError\", function (e) { return new TransportStatusError(e.statusCode); });\n\nexports.AccountNameRequiredError = AccountNameRequiredError;\nexports.AccountNotSupported = AccountNotSupported;\nexports.AmountRequired = AmountRequired;\nexports.BluetoothRequired = BluetoothRequired;\nexports.BtcUnmatchedApp = BtcUnmatchedApp;\nexports.CantOpenDevice = CantOpenDevice;\nexports.CantScanQRCode = CantScanQRCode;\nexports.CashAddrNotSupported = CashAddrNotSupported;\nexports.CurrencyNotSupported = CurrencyNotSupported;\nexports.DBNotReset = DBNotReset;\nexports.DBWrongPassword = DBWrongPassword;\nexports.DeviceAppVerifyNotSupported = DeviceAppVerifyNotSupported;\nexports.DeviceGenuineSocketEarlyClose = DeviceGenuineSocketEarlyClose;\nexports.DeviceHalted = DeviceHalted;\nexports.DeviceInOSUExpected = DeviceInOSUExpected;\nexports.DeviceNameInvalid = DeviceNameInvalid;\nexports.DeviceNotGenuineError = DeviceNotGenuineError;\nexports.DeviceOnDashboardExpected = DeviceOnDashboardExpected;\nexports.DeviceOnDashboardUnexpected = DeviceOnDashboardUnexpected;\nexports.DeviceShouldStayInApp = DeviceShouldStayInApp;\nexports.DeviceSocketFail = DeviceSocketFail;\nexports.DeviceSocketNoBulkStatus = DeviceSocketNoBulkStatus;\nexports.DisconnectedDevice = DisconnectedDevice;\nexports.DisconnectedDeviceDuringOperation = DisconnectedDeviceDuringOperation;\nexports.ETHAddressNonEIP = ETHAddressNonEIP;\nexports.EnpointConfigError = EnpointConfigError;\nexports.EthAppPleaseEnableContractData = EthAppPleaseEnableContractData;\nexports.FeeEstimationFailed = FeeEstimationFailed;\nexports.FeeNotLoaded = FeeNotLoaded;\nexports.FeeRequired = FeeRequired;\nexports.FeeTooHigh = FeeTooHigh;\nexports.FirmwareNotRecognized = FirmwareNotRecognized;\nexports.FirmwareOrAppUpdateRequired = FirmwareOrAppUpdateRequired;\nexports.GasLessThanEstimate = GasLessThanEstimate;\nexports.GenuineCheckFailed = GenuineCheckFailed;\nexports.HardResetFail = HardResetFail;\nexports.InvalidAddress = InvalidAddress;\nexports.InvalidAddressBecauseDestinationIsAlsoSource = InvalidAddressBecauseDestinationIsAlsoSource;\nexports.InvalidXRPTag = InvalidXRPTag;\nexports.LatestMCUInstalledError = LatestMCUInstalledError;\nexports.LedgerAPI4xx = LedgerAPI4xx;\nexports.LedgerAPI5xx = LedgerAPI5xx;\nexports.LedgerAPIError = LedgerAPIError;\nexports.LedgerAPIErrorWithMessage = LedgerAPIErrorWithMessage;\nexports.LedgerAPINotAvailable = LedgerAPINotAvailable;\nexports.MCUNotGenuineToDashboard = MCUNotGenuineToDashboard;\nexports.ManagerAppAlreadyInstalledError = ManagerAppAlreadyInstalledError;\nexports.ManagerAppDepInstallRequired = ManagerAppDepInstallRequired;\nexports.ManagerAppDepUninstallRequired = ManagerAppDepUninstallRequired;\nexports.ManagerAppRelyOnBTCError = ManagerAppRelyOnBTCError;\nexports.ManagerDeviceLockedError = ManagerDeviceLockedError;\nexports.ManagerFirmwareNotEnoughSpaceError = ManagerFirmwareNotEnoughSpaceError;\nexports.ManagerNotEnoughSpaceError = ManagerNotEnoughSpaceError;\nexports.ManagerUninstallBTCDep = ManagerUninstallBTCDep;\nexports.NetworkDown = NetworkDown;\nexports.NoAccessToCamera = NoAccessToCamera;\nexports.NoAddressesFound = NoAddressesFound;\nexports.NoDBPathGiven = NoDBPathGiven;\nexports.NotEnoughBalance = NotEnoughBalance;\nexports.NotEnoughBalanceBecauseDestinationNotCreated = NotEnoughBalanceBecauseDestinationNotCreated;\nexports.NotEnoughBalanceInParentAccount = NotEnoughBalanceInParentAccount;\nexports.NotEnoughBalanceToDelegate = NotEnoughBalanceToDelegate;\nexports.NotEnoughGas = NotEnoughGas;\nexports.NotEnoughSpendableBalance = NotEnoughSpendableBalance;\nexports.NotSupportedLegacyAddress = NotSupportedLegacyAddress;\nexports.PairingFailed = PairingFailed;\nexports.PasswordIncorrectError = PasswordIncorrectError;\nexports.PasswordsDontMatchError = PasswordsDontMatchError;\nexports.RecipientRequired = RecipientRequired;\nexports.RecommendSubAccountsToEmpty = RecommendSubAccountsToEmpty;\nexports.RecommendUndelegation = RecommendUndelegation;\nexports.StatusCodes = StatusCodes;\nexports.SyncError = SyncError;\nexports.TimeoutTagged = TimeoutTagged;\nexports.TransportError = TransportError;\nexports.TransportInterfaceNotAvailable = TransportInterfaceNotAvailable;\nexports.TransportOpenUserCancelled = TransportOpenUserCancelled;\nexports.TransportRaceCondition = TransportRaceCondition;\nexports.TransportStatusError = TransportStatusError;\nexports.TransportWebUSBGestureRequired = TransportWebUSBGestureRequired;\nexports.UnavailableTezosOriginatedAccountReceive = UnavailableTezosOriginatedAccountReceive;\nexports.UnavailableTezosOriginatedAccountSend = UnavailableTezosOriginatedAccountSend;\nexports.UnexpectedBootloader = UnexpectedBootloader;\nexports.UnknownMCU = UnknownMCU;\nexports.UpdateFetchFileFail = UpdateFetchFileFail;\nexports.UpdateIncorrectHash = UpdateIncorrectHash;\nexports.UpdateIncorrectSig = UpdateIncorrectSig;\nexports.UpdateYourApp = UpdateYourApp;\nexports.UserRefusedAddress = UserRefusedAddress;\nexports.UserRefusedAllowManager = UserRefusedAllowManager;\nexports.UserRefusedDeviceNameChange = UserRefusedDeviceNameChange;\nexports.UserRefusedFirmwareUpdate = UserRefusedFirmwareUpdate;\nexports.UserRefusedOnDevice = UserRefusedOnDevice;\nexports.WebsocketConnectionError = WebsocketConnectionError;\nexports.WebsocketConnectionFailed = WebsocketConnectionFailed;\nexports.WrongAppForCurrency = WrongAppForCurrency;\nexports.WrongDeviceForAccount = WrongDeviceForAccount;\nexports.addCustomErrorDeserializer = addCustomErrorDeserializer;\nexports.createCustomErrorClass = createCustomErrorClass;\nexports.deserializeError = deserializeError;\nexports.getAltStatusMessage = getAltStatusMessage;\nexports.serializeError = serializeError;\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = require(\"./utils\");\n\nvar _errors = require(\"@ledgerhq/errors\");\n\nvar _bignumber = require(\"bignumber.js\");\n\nvar _rlp = require(\"rlp\");\n\n/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// FIXME drop:\nconst starkQuantizationTypeMap = {\n  eth: 1,\n  erc20: 2,\n  erc721: 3,\n  erc20mintable: 4,\n  erc721mintable: 5\n};\n\nfunction hexBuffer(str) {\n  return Buffer.from(str.startsWith(\"0x\") ? str.slice(2) : str, \"hex\");\n}\n\nfunction maybeHexBuffer(str) {\n  if (!str) return null;\n  return hexBuffer(str);\n}\n\nconst remapTransactionRelatedErrors = e => {\n  if (e && e.statusCode === 0x6a80) {\n    return new _errors.EthAppPleaseEnableContractData(\"Please enable Contract data on the Ethereum app Settings\");\n  }\n\n  return e;\n};\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\n\n\nclass Eth {\n  constructor(transport, scrambleKey = \"w0w\") {\n    this.transport = void 0;\n    this.transport = transport;\n    transport.decorateAppAPIMethods(this, [\"getAddress\", \"provideERC20TokenInformation\", \"signTransaction\", \"signPersonalMessage\", \"getAppConfiguration\", \"signEIP712HashedMessage\", \"starkGetPublicKey\", \"starkSignOrder\", \"starkSignOrder_v2\", \"starkSignTransfer\", \"starkSignTransfer_v2\", \"starkProvideQuantum\", \"starkProvideQuantum_v2\", \"starkUnsafeSign\", \"eth2GetPublicKey\", \"eth2SetWithdrawalIndex\"], scrambleKey);\n  }\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n\n\n  getAddress(path, boolDisplay, boolChaincode) {\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x02, boolDisplay ? 0x01 : 0x00, boolChaincode ? 0x01 : 0x00, buffer).then(response => {\n      let result = {};\n      let publicKeyLength = response[0];\n      let addressLength = response[1 + publicKeyLength];\n      result.publicKey = response.slice(1, 1 + publicKeyLength).toString(\"hex\");\n      result.address = \"0x\" + response.slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength).toString(\"ascii\");\n\n      if (boolChaincode) {\n        result.chainCode = response.slice(1 + publicKeyLength + 1 + addressLength, 1 + publicKeyLength + 1 + addressLength + 32).toString(\"hex\");\n      }\n\n      return result;\n    });\n  }\n  /**\n   * This commands provides a trusted description of an ERC 20 token\n   * to associate a contract address with a ticker and number of decimals.\n   *\n   * It shall be run immediately before performing a transaction involving a contract\n   * calling this contract address to display the proper token information to the user if necessary.\n   *\n   * @param {*} info: a blob from \"erc20.js\" utilities that contains all token information.\n   *\n   * @example\n   * import { byContractAddress } from \"@ledgerhq/hw-app-eth/erc20\"\n   * const zrxInfo = byContractAddress(\"0xe41d2489571d322189246dafa5ebde1f4699f498\")\n   * if (zrxInfo) await appEth.provideERC20TokenInformation(zrxInfo)\n   * const signed = await appEth.signTransaction(path, rawTxHex)\n   */\n\n\n  provideERC20TokenInformation({\n    data\n  }) {\n    return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n        // we return a flag to know if the call was effective or not\n        return false;\n      }\n\n      throw e;\n    });\n  }\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n   * @example\n   eth.signTransaction(\"44'/60'/0'/0/0\", \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\").then(result => ...)\n   */\n\n\n  signTransaction(path, rawTxHex) {\n    let paths = (0, _utils.splitPath)(path);\n    let offset = 0;\n    let rawTx = Buffer.from(rawTxHex, \"hex\");\n    let toSend = [];\n    let response; // Check if the TX is encoded following EIP 155\n\n    let rlpTx = (0, _rlp.decode)(rawTx);\n    let rlpOffset = 0;\n    let chainIdPrefix = \"\";\n\n    if (rlpTx.length > 6) {\n      let rlpVrs = (0, _rlp.encode)(rlpTx.slice(-3));\n      rlpOffset = rawTx.length - (rlpVrs.length - 1);\n      const chainIdSrc = rlpTx[6];\n      const chainIdBuf = Buffer.alloc(4);\n      chainIdSrc.copy(chainIdBuf, 4 - chainIdSrc.length);\n      chainIdPrefix = (chainIdBuf.readUInt32BE(0) * 2).toString(16).slice(0, -2); // Drop the low byte, that comes from the ledger.\n    }\n\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize = offset + maxChunkSize > rawTx.length ? rawTx.length - offset : maxChunkSize;\n\n      if (rlpOffset != 0 && offset + chunkSize == rlpOffset) {\n        // Make sure that the chunk doesn't end right on the EIP 155 marker if set\n        chunkSize--;\n      }\n\n      let buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize);\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n\n    return (0, _utils.foreach)(toSend, (data, i) => this.transport.send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data).then(apduResponse => {\n      response = apduResponse;\n    })).then(() => {\n      const v = chainIdPrefix + response.slice(0, 1).toString(\"hex\");\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    }, e => {\n      throw remapTransactionRelatedErrors(e);\n    });\n  }\n  /**\n   */\n\n\n  getAppConfiguration() {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(response => {\n      let result = {};\n      result.arbitraryDataEnabled = response[0] & 0x01;\n      result.erc20ProvisioningNecessary = response[0] & 0x02;\n      result.starkEnabled = response[0] & 0x04;\n      result.starkv2Supported = response[0] & 0x08;\n      result.version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n      return result;\n    });\n  }\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\n  eth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n\n\n  signPersonalMessage(path, messageHex) {\n    let paths = (0, _utils.splitPath)(path);\n    let offset = 0;\n    let message = Buffer.from(messageHex, \"hex\");\n    let toSend = [];\n    let response;\n\n    while (offset !== message.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      let chunkSize = offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;\n      let buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize);\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(buffer, 1 + 4 * paths.length + 4, offset, offset + chunkSize);\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      toSend.push(buffer);\n      offset += chunkSize;\n    }\n\n    return (0, _utils.foreach)(toSend, (data, i) => this.transport.send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data).then(apduResponse => {\n      response = apduResponse;\n    })).then(() => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    });\n  }\n  /**\n  * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)\n  * @example\n  eth.signEIP712HashedMessage(\"44'/60'/0'/0/0\", Buffer.from(\"0101010101010101010101010101010101010101010101010101010101010101\").toString(\"hex\"), Buffer.from(\"0202020202020202020202020202020202020202020202020202020202020202\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n\n\n  signEIP712HashedMessage(path, domainSeparatorHex, hashStructMessageHex) {\n    const domainSeparator = hexBuffer(domainSeparatorHex);\n    const hashStruct = hexBuffer(hashStructMessageHex);\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 32 + 32, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    domainSeparator.copy(buffer, offset);\n    offset += 32;\n    hashStruct.copy(buffer, offset);\n    return this.transport.send(0xe0, 0x0c, 0x00, 0x00, buffer).then(response => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v,\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * get Stark public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return the Stark public key\n   */\n\n\n  starkGetPublicKey(path, boolDisplay) {\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xf0, 0x02, boolDisplay ? 0x01 : 0x00, 0x00, buffer).then(response => {\n      return response.slice(0, response.length - 2);\n    });\n  }\n  /**\n   * sign a Stark order\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantization quantization used for the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantization quantization used for the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  starkSignOrder(path, sourceTokenAddress, sourceQuantization, destinationTokenAddress, destinationQuantization, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 20 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(destinationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x01, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * sign a Stark order using the Starkex V2 protocol\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantizationType quantization type used for the source token\n   * @option sourceQuantization quantization used for the source token (not present for erc 721 or mintable erc 721)\n   * @option sourceMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantizationType quantization type used for the destination token\n   * @option destinationQuantization quantization used for the destination token (not present for erc 721 or mintable erc 721)\n   * @option destinationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  starkSignOrder_v2(path, sourceTokenAddress, sourceQuantizationType, sourceQuantization, sourceMintableBlobOrTokenId, destinationTokenAddress, destinationQuantizationType, destinationQuantization, destinationMintableBlobOrTokenId, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n\n    if (!(sourceQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkSignOrderv2 invalid source quantization type=\" + sourceQuantizationType);\n    }\n\n    if (!(destinationQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkSignOrderv2 invalid destination quantization type=\" + destinationQuantizationType);\n    }\n\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 1 + 20 + 32 + 32 + 1 + 20 + 32 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    buffer[offset] = starkQuantizationTypeMap[sourceQuantizationType];\n    offset++;\n\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (sourceQuantization) {\n      Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (sourceMintableBlobOrTokenId) {\n      Buffer.from(sourceMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n    buffer[offset] = starkQuantizationTypeMap[destinationQuantizationType];\n    offset++;\n\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (destinationQuantization) {\n      Buffer.from(destinationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (destinationMintableBlobOrTokenId) {\n      Buffer.from(destinationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x03, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * sign a Stark transfer\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantization quantization used for the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  starkSignTransfer(path, transferTokenAddress, transferQuantization, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp) {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 32 + 4 + 4 + 8 + 4 + 4, 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(transferQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x02, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * sign a Stark transfer or conditional transfer using the Starkex V2 protocol\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantizationType quantization type used for the token to be transferred\n   * @option transferQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n   * @option transferMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @option conditionalTransferAddress onchain address of the condition for a conditional transfer\n   * @option conditionalTransferFact fact associated to the condition for a conditional transfer\n   * @return the signature\n   */\n\n\n  starkSignTransfer_v2(path, transferTokenAddress, transferQuantizationType, transferQuantization, transferMintableBlobOrTokenId, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp, conditionalTransferAddress, conditionalTransferFact) {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    const conditionalTransferAddressHex = maybeHexBuffer(conditionalTransferAddress);\n\n    if (!(transferQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkSignTransferv2 invalid quantization type=\" + transferQuantizationType);\n    }\n\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 1 + 20 + 32 + 32 + 32 + 4 + 4 + 8 + 4 + 4 + (conditionalTransferAddressHex ? 32 + 20 : 0), 0);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    buffer[offset] = starkQuantizationTypeMap[transferQuantizationType];\n    offset++;\n\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (transferQuantization) {\n      Buffer.from(transferQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (transferMintableBlobOrTokenId) {\n      Buffer.from(transferMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n\n    if (conditionalTransferAddressHex && conditionalTransferFact) {\n      offset += 4;\n      Buffer.from(conditionalTransferFact.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n      offset += 32;\n      conditionalTransferAddressHex.copy(buffer, offset);\n    }\n\n    return this.transport.send(0xf0, 0x04, conditionalTransferAddressHex ? 0x05 : 0x04, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantization quantization used for the token to be transferred\n   */\n\n\n  starkProvideQuantum(operationContract, operationQuantization) {\n    const operationContractHex = maybeHexBuffer(operationContract);\n    let buffer = Buffer.alloc(20 + 32, 0);\n\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, 0);\n    }\n\n    Buffer.from(operationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, 20);\n    return this.transport.send(0xf0, 0x08, 0x00, 0x00, buffer).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for ETH application versions not supporting Stark extensions\n        return false;\n      }\n\n      throw e;\n    });\n  }\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call using the Starkex V2 protocol\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantizationType quantization type of the token to be transferred\n   * @option operationQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n   * @option operationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) of the token to be transferred\n   */\n\n\n  starkProvideQuantum_v2(operationContract, operationQuantizationType, operationQuantization, operationMintableBlobOrTokenId) {\n    const operationContractHex = maybeHexBuffer(operationContract);\n\n    if (!(operationQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkProvideQuantumV2 invalid quantization type=\" + operationQuantizationType);\n    }\n\n    let buffer = Buffer.alloc(20 + 32 + 32, 0);\n    let offset = 0;\n\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (operationQuantization) {\n      Buffer.from(operationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (operationMintableBlobOrTokenId) {\n      Buffer.from(operationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    return this.transport.send(0xf0, 0x08, starkQuantizationTypeMap[operationQuantizationType], 0x00, buffer).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for ETH application versions not supporting Stark extensions\n        return false;\n      }\n\n      throw e;\n    });\n  }\n  /**\n   * sign the given hash over the Stark curve\n   * It is intended for speed of execution in case an unknown Stark model is pushed and should be avoided as much as possible.\n   * @param path a path in BIP 32 format\n   * @param hash hexadecimal hash to sign\n   * @return the signature\n   */\n\n\n  starkUnsafeSign(path, hash) {\n    const hashHex = hexBuffer(hash);\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4 + 32);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    hashHex.copy(buffer, offset);\n    return this.transport.send(0xf0, 0x0a, 0x00, 0x00, buffer).then(response => {\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r,\n        s\n      };\n    });\n  }\n  /**\n   * get an Ethereum 2 BLS-12 381 public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with a publicKey\n   * @example\n   * eth.eth2GetPublicKey(\"12381/3600/0/0\").then(o => o.publicKey)\n   */\n\n\n  eth2GetPublicKey(path, boolDisplay) {\n    let paths = (0, _utils.splitPath)(path);\n    let buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x0e, boolDisplay ? 0x01 : 0x00, 0x00, buffer).then(response => {\n      let result = {};\n      result.publicKey = response.slice(0, -2).toString(\"hex\");\n      return result;\n    });\n  }\n  /**\n   * Set the index of a Withdrawal key used as withdrawal credentials in an ETH 2 deposit contract call signature\n   *\n   * It shall be run before the ETH 2 deposit transaction is signed. If not called, the index is set to 0\n   *\n   * @param withdrawalIndex index path in the EIP 2334 path m/12381/3600/withdrawalIndex/0\n   * @return True if the method was executed successfully\n   */\n\n\n  eth2SetWithdrawalIndex(withdrawalIndex) {\n    let buffer = Buffer.alloc(4, 0);\n    buffer.writeUInt32BE(withdrawalIndex, 0);\n    return this.transport.send(0xe0, 0x10, 0x00, 0x00, buffer).then(() => true, e => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for ETH application versions not supporting ETH 2\n        return false;\n      }\n\n      throw e;\n    });\n  }\n\n}\n\nexports.default = Eth;\n//# sourceMappingURL=Eth.js.map", "/*\n * Bitcoin BIP32 path helpers\n * (C) 2016 Alex Beregszaszi\n */\n\nconst HARDENED = 0x80000000\n\nvar BIPPath = function (path) {\n  if (!Array.isArray(path)) {\n    throw new Error('Input must be an Array')\n  }\n  if (path.length === 0) {\n    throw new Error('Path must contain at least one level')\n  }\n  for (var i = 0; i < path.length; i++) {\n    if (typeof path[i] !== 'number') {\n      throw new Error('Path element is not a number')\n    }\n  }\n  this.path = path\n}\n\nBIPPath.validatePathArray = function (path) {\n  try {\n    BIPPath.fromPathArray(path)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nBIPPath.validateString = function (text, reqRoot) {\n  try {\n    BIPPath.fromString(text, reqRoot)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nBIPPath.fromPathArray = function (path) {\n  return new BIPPath(path)\n}\n\nBIPPath.fromString = function (text, reqRoot) {\n  // skip the root\n  if (/^m\\//i.test(text)) {\n    text = text.slice(2)\n  } else if (reqRoot) {\n    throw new Error('Root element is required')\n  }\n\n  var path = text.split('/')\n  var ret = new Array(path.length)\n  for (var i = 0; i < path.length; i++) {\n    var tmp = /(\\d+)([hH\\']?)/.exec(path[i])\n    if (tmp === null) {\n      throw new Error('Invalid input')\n    }\n    ret[i] = parseInt(tmp[1], 10)\n\n    if (ret[i] >= HARDENED) {\n      throw new Error('Invalid child index')\n    }\n\n    if (tmp[2] === 'h' || tmp[2] === 'H' || tmp[2] === '\\'') {\n      ret[i] += HARDENED\n    } else if (tmp[2].length != 0) {\n      throw new Error('Invalid modifier')\n    }\n  }\n  return new BIPPath(ret)\n}\n\nBIPPath.prototype.toPathArray = function () {\n  return this.path\n}\n\nBIPPath.prototype.toString = function (noRoot, oldStyle) {\n  var ret = new Array(this.path.length)\n  for (var i = 0; i < this.path.length; i++) {\n    var tmp = this.path[i]\n    if (tmp & HARDENED) {\n      ret[i] = (tmp & ~HARDENED) + (oldStyle ? 'h' : '\\'')\n    } else {\n      ret[i] = tmp\n    }\n  }\n  return (noRoot ? '' : 'm/') + ret.join('/')\n}\n\nBIPPath.prototype.inspect = function () {\n  return 'BIPPath <' + this.toString() + '>'\n}\n\nmodule.exports = BIPPath\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _bip32Path = require(\"bip32-path\");\n\nvar _bip32Path2 = _interopRequireDefault(_bip32Path);\n\nvar _createHash = require(\"create-hash\");\n\nvar _createHash2 = _interopRequireDefault(_createHash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\n/**\n * Avalanche API\n *\n * @example\n * import Avalanche from \"@obsidiansystems/hw-app-avalanche\";\n * const avalanche = new Avalanche(transport);\n */\nclass Avalanche {\n\n  constructor(transport, scrambleKey = \"Avalanche\", logger = console.error) {\n    this.CLA = 0x80;\n    this.MAX_APDU_SIZE = 230;\n    this.MAX_HRP_LENGTH = 24;\n    this.INS_VERSION = 0x00;\n    this.INS_GET_WALLET_ID = 0x01;\n    this.INS_PROMPT_PUBLIC_KEY = 0x02;\n    this.INS_PROMPT_EXT_PUBLIC_KEY = 0x03;\n    this.INS_SIGN_HASH = 0x04;\n    this.INS_SIGN_TRANSACTION = 0x05;\n\n    this.transport = transport;\n    this.logger = logger;\n    if (scrambleKey) {\n      transport.decorateAppAPIMethods(this, [\"getAppConfiguration\", \"getWalletAddress\", \"getWalletExtendedPublicKey\", \"getWalletId\", \"signHash\", \"signTransaction\"], scrambleKey);\n    }\n  }\n\n  /**\n   * get Avalanche address for a given BIP-32 path.\n   *\n   * @param derivation_path a path in BIP 32 format\n   * @return a buffer with a public key, and TODO: should be address, not public key\n   * @example\n   * await avalanche.getWalletPublicKey(\"44'/9000'/0'/0/0\");\n   */\n  getWalletAddress(derivation_path, hrp = \"\") {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (hrp.length > _this.MAX_HRP_LENGTH) {\n        throw \"Maximum Bech32 'human readable part' length exceeded\";\n      }\n\n      const cla = _this.CLA;\n      const ins = _this.INS_PROMPT_PUBLIC_KEY;\n      const p1 = hrp.length;\n      const p2 = 0x00;\n      const data = Buffer.concat([Buffer.from(hrp, \"latin1\"), _this.encodeBip32Path(_bip32Path2.default.fromString(derivation_path))]);\n\n      const response = yield _this.transport.send(cla, ins, p1, p2, data);\n      return response.slice(0, -2);\n    })();\n  }\n\n  /**\n   * get extended public key for a given BIP-32 path.\n   *\n   * @param derivation_path a path in BIP-32 format\n   * @return an object with a buffer for the public key data and a buffer for the chain code\n   * @example\n   * await avalanche.getWalletExtendedPublicKey(\"44'/9000'/0'/0/0\");\n   */\n  getWalletExtendedPublicKey(derivation_path) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const cla = _this2.CLA;\n      const ins = _this2.INS_PROMPT_EXT_PUBLIC_KEY;\n      const p1 = 0x00;\n      const p2 = 0x00;\n      const data = _this2.encodeBip32Path(_bip32Path2.default.fromString(derivation_path));\n\n      const response = yield _this2.transport.send(cla, ins, p1, p2, data);\n      const publicKeyLength = response[0];\n      const chainCodeOffset = 2 + publicKeyLength;\n      const chainCodeLength = response[1 + publicKeyLength];\n      return {\n        public_key: response.slice(1, 1 + publicKeyLength),\n        chain_code: response.slice(chainCodeOffset, chainCodeOffset + chainCodeLength)\n      };\n    })();\n  }\n\n  /**\n   * Sign a hash with a given set of BIP-32 paths.\n   *\n   * @param derivationPathPrefix a BIP-32 path that will act as the prefix to all other signing paths.\n   * @param derivationPathSuffixes an array of BIP-32 path suffixes that will be\n   *                               appended to the prefix to form the final path for signing.\n   * @param hash 32-byte buffer containing the hash to sign\n   * @return a map of path suffixes (as strings) to signature buffers\n   * @example\n   * const signatures = await avalanche.signHash(\n   *   BIPPath.fromString(\"44'/9000'/0'\"),\n   *   [BIPPath.fromString(\"0/0\")],\n   *   Buffer.from(\"0000000000000000000000000000000000000000000000000000000000000000\", \"hex\"));\n   */\n  signHash(derivationPathPrefix, derivationPathSuffixes, hash) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (hash.length != 32) {\n        throw \"Hash buffer must be 32 bytes\";\n      }\n\n      const firstMessage = Buffer.concat([_this3.uInt8Buffer(derivationPathSuffixes.length), hash, _this3.encodeBip32Path(derivationPathPrefix)]);\n      const responseHash = yield _this3.transport.send(_this3.CLA, _this3.INS_SIGN_HASH, 0x00, 0x00, firstMessage);\n      if (!responseHash.slice(0, 32).equals(hash)) {\n        throw \"Ledger reported a hash that does not match the input hash!\";\n      }\n\n      return _this3._collectSignaturesFromSuffixes(derivationPathSuffixes, _this3.INS_SIGN_HASH, 0x01, 0x81);\n    })();\n  }\n\n  /**\n   * Sign a transaction with a given set of BIP-32 paths.\n   *\n   * @param derivationPathPrefix a BIP-32 path that will act as the prefix to all other signing paths.\n   * @param derivationPathSuffixes an array of BIP-32 path suffixes that will be\n   *                               appended to the prefix to form the final path for signing.\n   * @param txn binary of the transaction\n   * @return an object with a hash of the transaction and a map of path suffixes (as strings) to signature buffers\n   * @example\n   * const signatures = await avalanche.signTransaction(\n   *   BIPPath.fromString(\"44'/9000'/0'\"),\n   *   [BIPPath.fromString(\"0/0\")],\n   *   Buffer.from(\"...\", \"hex\"),\n   *   BIPPath.fromString(\"44'/9000'/0'/0'/0'\"));\n   * );\n   */\n  signTransaction(derivationPathPrefix, derivationPathSuffixes, txn, changePath) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n\n      const SIGN_TRANSACTION_SECTION_PREAMBLE = 0x00;\n      const SIGN_TRANSACTION_SECTION_PAYLOAD_CHUNK = 0x01;\n      const SIGN_TRANSACTION_SECTION_PAYLOAD_CHUNK_LAST = 0x81;\n      const SIGN_TRANSACTION_SECTION_SIGN_WITH_PATH = 0x02;\n      const SIGN_TRANSACTION_SECTION_SIGN_WITH_PATH_LAST = 0x82;\n\n      const preamble = Buffer.concat([_this4.uInt8Buffer(derivationPathSuffixes.length), _this4.encodeBip32Path(derivationPathPrefix)]);\n      if (changePath != null) {\n        const preamble_ = Buffer.concat([preamble, _this4.encodeBip32Path(changePath)]);\n        yield _this4.transport.send(_this4.CLA, _this4.INS_SIGN_TRANSACTION, SIGN_TRANSACTION_SECTION_PREAMBLE, 0x01, preamble_);\n      } else {\n        yield _this4.transport.send(_this4.CLA, _this4.INS_SIGN_TRANSACTION, SIGN_TRANSACTION_SECTION_PREAMBLE, 0x00, preamble);\n      }\n\n      let remainingData = txn.slice(0); // copy\n      let response;\n      while (remainingData.length > 0) {\n        const thisChunk = remainingData.slice(0, _this4.MAX_APDU_SIZE);\n        remainingData = remainingData.slice(_this4.MAX_APDU_SIZE);\n        response = yield _this4.transport.send(_this4.CLA, _this4.INS_SIGN_TRANSACTION, remainingData.length > 0 ? SIGN_TRANSACTION_SECTION_PAYLOAD_CHUNK : SIGN_TRANSACTION_SECTION_PAYLOAD_CHUNK_LAST, 0x00, thisChunk);\n      }\n\n      const responseHash = response.slice(0, 32);\n      const expectedHash = Buffer.from((0, _createHash2.default)('sha256').update(txn).digest());\n      if (!responseHash.equals(expectedHash)) {\n        throw \"Ledger reported a hash that does not match the expected transaction hash!\";\n      }\n\n      return {\n        hash: responseHash,\n        signatures: yield _this4._collectSignaturesFromSuffixes(derivationPathSuffixes, _this4.INS_SIGN_TRANSACTION, SIGN_TRANSACTION_SECTION_SIGN_WITH_PATH, SIGN_TRANSACTION_SECTION_SIGN_WITH_PATH_LAST)\n      };\n    })();\n  }\n\n  /**\n   * Get the version of the Avalanche app installed on the hardware device\n   *\n   * @return an object with a version\n   * @example\n   * console.log(await avalanche.getAppConfiguration());\n   *\n   * {\n   *   \"version\": \"1.0.3\",\n   *   \"commit\": \"abcdcefg\"\n   *   \"name\": \"Avalanche\"\n   * }\n   */\n  getAppConfiguration() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const data = yield _this5.transport.send(_this5.CLA, _this5.INS_VERSION, 0x00, 0x00);\n\n      const eatNBytes = function (input, n) {\n        const out = input.slice(0, n);\n        return [out, input.slice(n)];\n      };\n\n      const eatWhile = function (input, f) {\n        for (var i = 0; i < input.length; i++) {\n          if (!f(input[i])) {\n            return [input.slice(0, i), input.slice(i)];\n          }\n        }\n        return [input, \"\"];\n      };\n\n      const [versionData, rest1] = eatNBytes(data, 3);\n      const [commitData, rest2] = eatWhile(rest1, function (c) {\n        return c != 0;\n      });\n      const [nameData, rest3] = eatWhile(rest2.slice(1), function (c) {\n        return c != 0;\n      });\n      if (rest3.toString(\"hex\") != \"009000\") {\n        _this5.logger(\"WARNING: Response data does not exactly match expected format for VERSION instruction\");\n      }\n\n      return {\n        version: \"\" + versionData[0] + \".\" + versionData[1] + \".\" + versionData[2],\n        commit: commitData.toString(\"latin1\"),\n        name: nameData.toString(\"latin1\")\n      };\n    })();\n  }\n\n  /**\n   * Get the wallet identifier for the Ledger wallet\n   *\n   * @return a byte string\n   * @example\n   * console.log((await avalanche.getWalletId()).toString(\"hex\"));\n   *\n   * 79c46bc3\n   */\n  getWalletId() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this6.transport.send(_this6.CLA, _this6.INS_GET_WALLET_ID, 0x00, 0x00);\n      return result.slice(0, -2);\n    })();\n  }\n\n  _collectSignaturesFromSuffixes(suffixes, ins, p1NotDone, p1Done) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      let resultMap = new Map();\n      for (let ix = 0; ix < suffixes.length; ix++) {\n        const suffix = suffixes[ix];\n        _this7.logger(\"Signing with \" + suffix.toString(true));\n        const message = _this7.encodeBip32Path(suffix);\n        const isLastMessage = ix >= suffixes.length - 1;\n        const signatureData = yield _this7.transport.send(_this7.CLA, ins, isLastMessage ? p1Done : p1NotDone, 0x00, message);\n        resultMap.set(suffix.toString(true), signatureData.slice(0, -2));\n      };\n      return resultMap;\n    })();\n  }\n\n  uInt8Buffer(uint8) {\n    let buff = Buffer.alloc(1);\n    buff.writeUInt8(uint8);\n    return buff;\n  }\n\n  uInt32BEBuffer(uint32) {\n    let buff = Buffer.alloc(4);\n    buff.writeUInt32BE(uint32);\n    return buff;\n  }\n\n  encodeBip32Path(path) {\n    const pathArr = path.toPathArray();\n    return Buffer.concat([this.uInt8Buffer(pathArr.length)].concat(pathArr.map(this.uInt32BEBuffer)));\n  }\n}\nexports.default = Avalanche;\n//# sourceMappingURL=Avalanche.js.map", "// @ts-ignore\n// import TransportU2F from '@ledgerhq/hw-transport-u2f';\n\nimport Eth from '@ledgerhq/hw-app-eth';\n// @ts-ignore\nimport AppDjtx from '@obsidiansystems/hw-app-avalanche';\nimport EthereumjsCommon from '@ethereumjs/common';\nimport { importPublic, publicToAddress, bnToRlp, rlp, BN as EthBN } from 'ethereumjs-util';\nimport {\n    DJTX_ACCOUNT_PATH,\n    ETH_ACCOUNT_PATH,\n    LEDGER_ETH_ACCOUNT_PATH,\n    LEDGER_EXCHANGE_TIMEOUT,\n    MIN_EVM_SUPPORT_V,\n} from '@/Wallet/constants';\nimport HDKey from 'hdkey';\nimport { ChainAlias, ILedgerAppConfig, WalletNameType } from '@/Wallet/types';\nimport { Transaction, TxOptions } from '@ethereumjs/tx';\nimport {\n    UnsignedTx as AVMUnsignedTx,\n    Tx as AVMTx,\n    TransferableOperation,\n    OperationTx,\n    AVMConstants,\n    ImportTx as AVMImportTx,\n    SelectCredentialClass as AVMSelectCredentialClass,\n} from 'avalanche/dist/apis/avm';\nimport { Credential, SigIdx, Signature } from 'avalanche/dist/common';\nimport {\n    UnsignedTx as EVMUnsignedTx,\n    Tx as EVMTx,\n    ImportTx as EVMImportTx,\n    ExportTx as EVMExportTx,\n    EVMInput,\n    SelectCredentialClass as EVMSelectCredentialClass,\n    EVMConstants,\n} from 'avalanche/dist/apis/evm';\nimport {\n    UnsignedTx as PlatformUnsignedTx,\n    Tx as PlatformTx,\n    PlatformVMConstants,\n    ImportTx as PlatformImportTx,\n    SelectCredentialClass as PlatformSelectCredentialClass,\n} from 'avalanche/dist/apis/platformvm';\nimport { HDWalletAbstract } from '@/Wallet/HDWalletAbstract';\nimport EvmWalletReadonly from '@/Wallet/EvmWalletReadonly';\nimport { KeyPair as EVMKeyPair } from 'avalanche/dist/apis/evm/keychain';\nimport { activeNetwork, avalanche, web3 } from '@/Network/network';\nimport { Buffer, BN } from 'avalanche';\nimport { ChainIdType } from '@/types';\nimport { ParseableAvmTxEnum, ParseablePlatformEnum, ParseableEvmTxEnum } from '@/helpers/tx_helper';\nimport createHash from 'create-hash';\n//@ts-ignore\nimport bippath from 'bip32-path';\nimport { bintools } from '@/common';\n\nexport default class LedgerWallet extends HDWalletAbstract {\n    evmWallet: EvmWalletReadonly;\n    type: WalletNameType = 'ledger';\n    evmAccount: HDKey;\n    config: ILedgerAppConfig;\n\n    appDjtx: AppDjtx;\n    ethApp: Eth;\n\n    constructor(djtxAcct: HDKey, evmAcct: HDKey, djtxApp: AppDjtx, ethApp: Eth, config: ILedgerAppConfig) {\n        super(djtxAcct);\n        this.evmAccount = evmAcct;\n        this.config = config;\n        this.appDjtx = djtxApp;\n        this.ethApp = ethApp;\n\n        this.evmWallet = new EvmWalletReadonly(importPublic(evmAcct.publicKey));\n    }\n\n    /**\n     * Create a new ledger wallet instance from the given transport\n     * @param transport\n     */\n    static async fromTransport(transport: any) {\n        transport.setExchangeTimeout(LEDGER_EXCHANGE_TIMEOUT);\n        let app, eth;\n\n        try {\n            app = new AppDjtx(transport, 'w0w');\n            eth = new Eth(transport, 'w0w');\n        } catch (e) {\n            throw new Error('Failed to create ledger instance from the given transport.');\n        }\n\n        let config = await app.getAppConfiguration();\n\n        if (!config) {\n            throw new Error(`Unable to connect ledger. You must use ledger version ${MIN_EVM_SUPPORT_V} or above.`);\n        }\n\n        if (config.version < MIN_EVM_SUPPORT_V) {\n            throw new Error(`Unable to connect ledger. You must use ledger version ${MIN_EVM_SUPPORT_V} or above.`);\n        }\n\n        return await LedgerWallet.fromApp(app, eth);\n    }\n\n    static async getDjtxAccount(app: AppDjtx): Promise<HDKey> {\n        let res = await app.getWalletExtendedPublicKey(DJTX_ACCOUNT_PATH);\n        let hd = new HDKey();\n        hd.publicKey = res.public_key;\n        hd.chainCode = res.chain_code;\n\n        return hd;\n    }\n\n    static async getEvmAccount(eth: Eth): Promise<HDKey> {\n        let ethRes = await eth.getAddress(LEDGER_ETH_ACCOUNT_PATH, true, true);\n        let hdEth = new HDKey();\n        // @ts-ignore\n        hdEth.publicKey = Buffer.from(ethRes.publicKey, 'hex');\n        // @ts-ignore\n        hdEth.chainCode = Buffer.from(ethRes.chainCode, 'hex');\n\n        return hdEth;\n    }\n\n    static async fromApp(app: AppDjtx, eth: Eth): Promise<LedgerWallet> {\n        try {\n            let djtxAccount = await LedgerWallet.getDjtxAccount(app);\n            let evmAccount = await LedgerWallet.getEvmAccount(eth);\n            let config = await app.getAppConfiguration();\n            return new LedgerWallet(djtxAccount, evmAccount, app, eth, config);\n        } catch (e) {\n            throw new Error('Unable to create ledger wallet instance from the given apps.');\n        }\n    }\n\n    getAddressC(): string {\n        return this.evmWallet.getAddress();\n    }\n\n    getEvmAddressBech(): string {\n        let keypair = new EVMKeyPair(avalanche.getHRP(), 'C');\n        let addr = keypair.addressFromPublicKey(Buffer.from(this.evmAccount.publicKey));\n        return bintools.addressToString(avalanche.getHRP(), 'C', addr);\n    }\n\n    async signEvm(tx: Transaction): Promise<Transaction> {\n        const rawUnsignedTx = rlp.encode([\n            bnToRlp(tx.nonce),\n            bnToRlp(tx.gasPrice),\n            bnToRlp(tx.gasLimit),\n            tx.to !== undefined ? tx.to.buf : Buffer.from([]),\n            bnToRlp(tx.value),\n            tx.data,\n            bnToRlp(tx.common.chainIdBN()),\n            Buffer.from([]),\n            Buffer.from([]),\n        ]);\n\n        const signature = await this.ethApp.signTransaction(LEDGER_ETH_ACCOUNT_PATH, rawUnsignedTx);\n\n        const signatureBN = {\n            v: new EthBN(signature.v, 16),\n            r: new EthBN(signature.r, 16),\n            s: new EthBN(signature.s, 16),\n        };\n\n        const chainId = await web3.eth.getChainId();\n        const networkId = await web3.eth.net.getId();\n\n        let common = EthereumjsCommon.forCustomChain('mainnet', { networkId, chainId }, 'istanbul');\n\n        const chainParams: TxOptions = {\n            common,\n        };\n\n        const signedTx = Transaction.fromTxData(\n            {\n                nonce: tx.nonce,\n                gasPrice: tx.gasPrice,\n                gasLimit: tx.gasLimit,\n                to: tx.to,\n                value: tx.value,\n                data: tx.data,\n                ...signatureBN,\n            },\n            chainParams\n        );\n        return signedTx;\n    }\n\n    // Returns an array of derivation paths that need to sign this transaction\n    // Used with signTransactionHash and signTransactionParsable\n    getTransactionPaths<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx>(\n        unsignedTx: UnsignedTx,\n        chainId: ChainIdType\n    ): { paths: string[]; isDjtxOnly: boolean } {\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n\n        let ins = tx.getIns();\n        let operations: TransferableOperation[] = [];\n\n        // Try to get operations, it will fail if there are none, ignore and continue\n        try {\n            operations = (tx as OperationTx).getOperations();\n        } catch (e) {\n            console.log('Failed to get tx operations.');\n        }\n\n        let items = ins;\n        if (\n            (txType === AVMConstants.IMPORTTX && chainId === 'X') ||\n            (txType === PlatformVMConstants.IMPORTTX && chainId === 'P')\n        ) {\n            items = ((tx as AVMImportTx) || PlatformImportTx).getImportInputs();\n        }\n\n        let hrp = avalanche.getHRP();\n        let paths: string[] = [];\n\n        let isDjtxOnly = true;\n        // Collect paths derivation paths for source addresses\n        for (let i = 0; i < items.length; i++) {\n            let item = items[i];\n\n            let assetId = bintools.cb58Encode(item.getAssetID());\n            // @ts-ignore\n            // if (assetId !== store.state.Assets.AVA_ASSET_ID) {\n            if (assetId !== activeNetwork.djtxID) {\n                isDjtxOnly = false;\n            }\n\n            let sigidxs: SigIdx[] = item.getInput().getSigIdxs();\n            let sources = sigidxs.map((sigidx) => sigidx.getSource());\n            let addrs: string[] = sources.map((source) => {\n                return bintools.addressToString(hrp, chainId, source);\n            });\n\n            for (let j = 0; j < addrs.length; j++) {\n                let srcAddr = addrs[j];\n                let pathStr = this.getPathFromAddress(srcAddr); // returns change/index\n\n                paths.push(pathStr);\n            }\n        }\n\n        // Do the Same for operational inputs, if there are any...\n        for (let i = 0; i < operations.length; i++) {\n            let op = operations[i];\n            let sigidxs: SigIdx[] = op.getOperation().getSigIdxs();\n            let sources = sigidxs.map((sigidx) => sigidx.getSource());\n            let addrs: string[] = sources.map((source) => {\n                return bintools.addressToString(hrp, chainId, source);\n            });\n\n            for (let j = 0; j < addrs.length; j++) {\n                let srcAddr = addrs[j];\n                let pathStr = this.getPathFromAddress(srcAddr); // returns change/index\n\n                paths.push(pathStr);\n            }\n        }\n\n        return { paths, isDjtxOnly };\n    }\n\n    getPathFromAddress(address: string) {\n        let externalAddrs = this.externalScan.getAllAddresses();\n        let internalAddrs = this.internalScan.getAllAddresses();\n        let platformAddrs = this.externalScan.getAllAddresses('P');\n\n        let extIndex = externalAddrs.indexOf(address);\n        let intIndex = internalAddrs.indexOf(address);\n        let platformIndex = platformAddrs.indexOf(address);\n\n        if (extIndex >= 0) {\n            return `0/${extIndex}`;\n        } else if (intIndex >= 0) {\n            return `1/${intIndex}`;\n        } else if (platformIndex >= 0) {\n            return `0/${platformIndex}`;\n        } else if (address[0] === 'C') {\n            return '0/0';\n        } else {\n            throw new Error('Unable to find source address.');\n        }\n    }\n\n    async signX(unsignedTx: AVMUnsignedTx): Promise<AVMTx> {\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n        let chainId: ChainIdType = 'X';\n\n        let parseableTxs = ParseableAvmTxEnum;\n        let { paths, isDjtxOnly } = this.getTransactionPaths<AVMUnsignedTx>(unsignedTx, chainId);\n\n        // If ledger doesnt support parsing, sign hash\n        let canLedgerParse = this.config.version >= '0.3.1';\n        let isParsableType = txType in parseableTxs && isDjtxOnly;\n\n        let signedTx;\n        if (canLedgerParse && isParsableType) {\n            signedTx = await this.signTransactionParsable<AVMUnsignedTx, AVMTx>(unsignedTx, paths, chainId);\n        } else {\n            signedTx = await this.signTransactionHash<AVMUnsignedTx, AVMTx>(unsignedTx, paths, chainId);\n        }\n\n        return signedTx;\n    }\n\n    getChangePath(chainId?: ChainAlias): string {\n        switch (chainId) {\n            case 'P':\n                return 'm/0';\n            case 'X':\n            default:\n                return 'm/1';\n        }\n    }\n\n    getChangeIndex(chainId?: ChainAlias): number {\n        switch (chainId) {\n            case 'P':\n                // return this.platformHelper.hdIndex\n                return this.externalScan.getIndex();\n            case 'X':\n            default:\n                // return this.internalHelper.hdIndex\n                return this.internalScan.getIndex();\n        }\n    }\n\n    getChangeBipPath<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx>(\n        unsignedTx: UnsignedTx,\n        chainId: ChainIdType\n    ) {\n        if (chainId === 'C') {\n            return null;\n        }\n\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n\n        const chainChangePath = this.getChangePath(chainId).split('m/')[1];\n        let changeIdx = this.getChangeIndex(chainId);\n        // If change and destination paths are the same\n        // it can cause ledger to not display the destination amt.\n        // Since platform helper does not have internal/external\n        // path for change (it uses the external index)\n        // there will be address collisions. So return null.\n        if (\n            txType === PlatformVMConstants.IMPORTTX ||\n            txType === PlatformVMConstants.EXPORTTX ||\n            txType === PlatformVMConstants.ADDVALIDATORTX ||\n            txType === PlatformVMConstants.ADDDELEGATORTX\n        ) {\n            return null;\n        }\n\n        // else if (txType === PlatformVMConstants.ADDVALIDATORTX || txType === PlatformVMConstants.ADDDELEGATORTX) {\n        // changeIdx = this.platformHelper.getFirstAvailableIndex()\n        // changeIdx = this.externalScan.getIndex();\n        // }\n\n        return bippath.fromString(`${DJTX_ACCOUNT_PATH}/${chainChangePath}/${changeIdx}`);\n    }\n\n    // Used for signing transactions that are parsable\n    async signTransactionParsable<\n        UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx,\n        SignedTx extends AVMTx | PlatformTx | EVMTx\n    >(unsignedTx: UnsignedTx, paths: string[], chainId: ChainIdType): Promise<SignedTx> {\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n        let parseableTxs = {\n            X: ParseableAvmTxEnum,\n            P: ParseablePlatformEnum,\n            C: ParseableEvmTxEnum,\n        }[chainId];\n\n        let title = `Sign ${parseableTxs[txType]}`;\n\n        let bip32Paths = this.pathsToUniqueBipPaths(paths);\n\n        const accountPath =\n            chainId === 'C' ? bippath.fromString(`${ETH_ACCOUNT_PATH}`) : bippath.fromString(`${DJTX_ACCOUNT_PATH}`);\n        let txbuff = unsignedTx.toBuffer();\n        let changePath = this.getChangeBipPath(unsignedTx, chainId);\n        // let messages = this.getTransactionMessages<UnsignedTx>(unsignedTx, chainId, changePath)\n\n        // try {\n        // store.commit('Ledger/openModal', {\n        //     title: title,\n        //     messages: messages,\n        //     info: null,\n        // })\n\n        let ledgerSignedTx = await this.appDjtx.signTransaction(accountPath, bip32Paths, txbuff, changePath);\n\n        let sigMap = ledgerSignedTx.signatures;\n        let creds = this.getCredentials<UnsignedTx>(unsignedTx, paths, sigMap, chainId);\n\n        let signedTx;\n        switch (chainId) {\n            case 'X':\n                signedTx = new AVMTx(unsignedTx as AVMUnsignedTx, creds);\n                break;\n            case 'P':\n                signedTx = new PlatformTx(unsignedTx as PlatformUnsignedTx, creds);\n                break;\n            case 'C':\n                signedTx = new EVMTx(unsignedTx as EVMUnsignedTx, creds);\n                break;\n        }\n\n        return signedTx as SignedTx;\n        // } catch (e) {\n        // store.commit('Ledger/closeModal')\n        // console.error(e)\n        // throw e\n        // }\n    }\n\n    // Used for non parsable transactions.\n    // Ideally we wont use this function at all, but ledger is not ready yet.\n    async signTransactionHash<\n        UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx,\n        SignedTx extends AVMTx | PlatformTx | EVMTx\n    >(unsignedTx: UnsignedTx, paths: string[], chainId: ChainIdType): Promise<SignedTx> {\n        let txbuff = unsignedTx.toBuffer();\n        const msg: Buffer = Buffer.from(createHash('sha256').update(txbuff).digest());\n\n        // store.commit('Ledger/openModal', {\n        //     title: 'Sign Hash',\n        //     messages: [],\n        //     info: msg.toString('hex').toUpperCase(),\n        // })\n\n        let bip32Paths = this.pathsToUniqueBipPaths(paths);\n\n        // Sign the msg with ledger\n        const accountPath = bippath.fromString(`${DJTX_ACCOUNT_PATH}`);\n        let sigMap = await this.appDjtx.signHash(accountPath, bip32Paths, msg);\n        // store.commit('Ledger/closeModal')\n\n        let creds: Credential[] = this.getCredentials<UnsignedTx>(unsignedTx, paths, sigMap, chainId);\n\n        let signedTx;\n        switch (chainId) {\n            case 'X':\n                signedTx = new AVMTx(unsignedTx as AVMUnsignedTx, creds);\n                break;\n            case 'P':\n                signedTx = new PlatformTx(unsignedTx as PlatformUnsignedTx, creds);\n                break;\n            case 'C':\n                signedTx = new EVMTx(unsignedTx as EVMUnsignedTx, creds);\n                break;\n        }\n\n        return signedTx as SignedTx;\n    }\n\n    pathsToUniqueBipPaths(paths: string[]) {\n        let uniquePaths = paths.filter((val: any, i: number) => {\n            return paths.indexOf(val) === i;\n        });\n\n        let bip32Paths = uniquePaths.map((path) => {\n            return bippath.fromString(path, false);\n        });\n\n        return bip32Paths;\n    }\n\n    getCredentials<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx | EVMUnsignedTx>(\n        unsignedTx: UnsignedTx,\n        paths: string[],\n        sigMap: any,\n        chainId: ChainIdType\n    ): Credential[] {\n        let creds: Credential[] = [];\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n\n        // @ts-ignore\n        let ins = tx.getIns ? tx.getIns() : [];\n        let operations: TransferableOperation[] = [];\n        let evmInputs: EVMInput[] = [];\n\n        let items = ins;\n        if (\n            (txType === AVMConstants.IMPORTTX && chainId === 'X') ||\n            (txType === PlatformVMConstants.IMPORTTX && chainId === 'P') ||\n            (txType === EVMConstants.IMPORTTX && chainId === 'C')\n        ) {\n            items = ((tx as AVMImportTx) || PlatformImportTx || EVMImportTx).getImportInputs();\n        }\n\n        // Try to get operations, it will fail if there are none, ignore and continue\n        try {\n            operations = (tx as OperationTx).getOperations();\n        } catch (e) {\n            console.log('Failed to get tx operations.');\n        }\n\n        let CredentialClass;\n        if (chainId === 'X') {\n            CredentialClass = AVMSelectCredentialClass;\n        } else if (chainId === 'P') {\n            CredentialClass = PlatformSelectCredentialClass;\n        } else {\n            CredentialClass = EVMSelectCredentialClass;\n        }\n\n        // Try to get evm inputs, it will fail if there are none, ignore and continue\n        try {\n            evmInputs = (tx as EVMExportTx).getInputs();\n        } catch (e) {\n            console.log('Failed to get EVM inputs.');\n        }\n\n        for (let i = 0; i < items.length; i++) {\n            const sigidxs: SigIdx[] = items[i].getInput().getSigIdxs();\n            const cred: Credential = CredentialClass(items[i].getInput().getCredentialID());\n\n            for (let j = 0; j < sigidxs.length; j++) {\n                let pathIndex = i + j;\n                let pathStr = paths[pathIndex];\n\n                let sigRaw = sigMap.get(pathStr);\n                let sigBuff = Buffer.from(sigRaw);\n                const sig: Signature = new Signature();\n                sig.fromBuffer(sigBuff);\n                cred.addSignature(sig);\n            }\n            creds.push(cred);\n        }\n\n        for (let i = 0; i < operations.length; i++) {\n            let op = operations[i].getOperation();\n            const sigidxs: SigIdx[] = op.getSigIdxs();\n            const cred: Credential = CredentialClass(op.getCredentialID());\n\n            for (let j = 0; j < sigidxs.length; j++) {\n                let pathIndex = items.length + i + j;\n                let pathStr = paths[pathIndex];\n\n                let sigRaw = sigMap.get(pathStr);\n                let sigBuff = Buffer.from(sigRaw);\n                const sig: Signature = new Signature();\n                sig.fromBuffer(sigBuff);\n                cred.addSignature(sig);\n            }\n            creds.push(cred);\n        }\n\n        for (let i = 0; i < evmInputs.length; i++) {\n            let evmInput = evmInputs[i];\n            const sigidxs: SigIdx[] = evmInput.getSigIdxs();\n            const cred: Credential = CredentialClass(evmInput.getCredentialID());\n\n            for (let j = 0; j < sigidxs.length; j++) {\n                let pathIndex = items.length + i + j;\n                let pathStr = paths[pathIndex];\n\n                let sigRaw = sigMap.get(pathStr);\n                let sigBuff = Buffer.from(sigRaw);\n                const sig: Signature = new Signature();\n                sig.fromBuffer(sigBuff);\n                cred.addSignature(sig);\n            }\n            creds.push(cred);\n        }\n\n        return creds;\n    }\n\n    async signP(unsignedTx: PlatformUnsignedTx): Promise<PlatformTx> {\n        let tx = unsignedTx.getTransaction();\n        let txType = tx.getTxType();\n        let chainId: ChainIdType = 'P';\n        let parseableTxs = ParseablePlatformEnum;\n\n        let { paths, isDjtxOnly } = this.getTransactionPaths<PlatformUnsignedTx>(unsignedTx, chainId);\n        // If ledger doesnt support parsing, sign hash\n        let canLedgerParse = this.config.version >= '0.3.1';\n        let isParsableType = txType in parseableTxs && isDjtxOnly;\n\n        // TODO: Remove after ledger is fixed\n        // If UTXOS contain lockedStakeable funds always use sign hash\n        let txIns = unsignedTx.getTransaction().getIns();\n        for (let i = 0; i < txIns.length; i++) {\n            let typeID = txIns[i].getInput().getTypeID();\n            if (typeID === PlatformVMConstants.STAKEABLELOCKINID) {\n                canLedgerParse = false;\n                break;\n            }\n        }\n\n        let signedTx;\n        if (canLedgerParse && isParsableType) {\n            signedTx = await this.signTransactionParsable<PlatformUnsignedTx, PlatformTx>(unsignedTx, paths, chainId);\n        } else {\n            signedTx = await this.signTransactionHash<PlatformUnsignedTx, PlatformTx>(unsignedTx, paths, chainId);\n        }\n        // store.commit('Ledger/closeModal')\n        return signedTx;\n    }\n\n    async signC(unsignedTx: EVMUnsignedTx): Promise<EVMTx> {\n        // TODO: Might need to upgrade paths array to:\n        //  paths = Array(utxoSet.getAllUTXOs().length).fill('0/0'),\n        let tx = unsignedTx.getTransaction();\n        let typeId = tx.getTxType();\n\n        let paths = ['0/0'];\n        if (typeId === EVMConstants.EXPORTTX) {\n            let ins = (tx as EVMExportTx).getInputs();\n            paths = ins.map(() => '0/0');\n        } else if (typeId === EVMConstants.IMPORTTX) {\n            let ins = (tx as EVMImportTx).getImportInputs();\n            paths = ins.map(() => '0/0');\n        }\n\n        let txSigned = (await this.signTransactionParsable(unsignedTx, paths, 'C')) as EVMTx;\n        // store.commit('Ledger/closeModal')\n        return txSigned;\n    }\n}\n", "import { HDWalletAbstract } from '@/Wallet/HDWalletAbstract';\nimport { UnsignedTx as EVMUnsignedTx, Tx as EVMTx } from 'avalanche/dist/apis/evm';\nimport { UnsignedTx as PlatformUnsignedTx, Tx as PlatformTx } from 'avalanche/dist/apis/platformvm';\nimport { UnsignedTx as AVMUnsignedTx, Tx as AVMTx } from 'avalanche/dist/apis/avm';\nimport { Transaction } from '@ethereumjs/tx';\nimport { WalletNameType } from '@/Wallet/types';\nimport EvmWallet from '@/Wallet/EvmWallet';\nimport EvmWalletReadonly from '@/Wallet/EvmWalletReadonly';\nimport HDKey from 'hdkey';\nimport { importPublic } from 'ethereumjs-util';\n\nexport default class PublicMnemonicWallet extends HDWalletAbstract {\n    /**\n     *\n     * @param xpubAVM of derivation path m/44'/9000'/0'\n     * @param xpubEVM of derivation path m/44'/60'/0'\n     */\n    constructor(xpubAVM: string, xpubEVM: string) {\n        let avmAcct = HDKey.fromExtendedKey(xpubAVM);\n        let evmAcct = HDKey.fromExtendedKey(xpubEVM).derive('m/0/0');\n        super(avmAcct);\n\n        this.type = 'xpub';\n\n        this.evmWallet = new EvmWalletReadonly(importPublic(evmAcct.publicKey));\n    }\n\n    evmWallet: EvmWallet | EvmWalletReadonly;\n    type: WalletNameType;\n\n    getAddressC(): string {\n        return this.evmWallet.getAddress();\n    }\n\n    getEvmAddressBech(): string {\n        return this.evmWallet.getAddressBech32();\n    }\n\n    //@ts-ignore\n    signC(tx: EVMUnsignedTx): Promise<EVMTx> {\n        throw new Error('Not supported.');\n    }\n\n    //@ts-ignore\n    signEvm(tx: Transaction): Promise<Transaction> {\n        throw new Error('Not supported.');\n    }\n    //@ts-ignore\n    signP(tx: PlatformUnsignedTx): Promise<PlatformTx> {\n        throw new Error('Not supported.');\n    }\n\n    //@ts-ignore\n    signX(tx: AVMUnsignedTx): Promise<AVMTx> {\n        throw new Error('Not supported.');\n    }\n}\n", "import { Buffer } from 'buffer/';\nimport createHash from 'create-hash';\n\n/**\n * @ignore\n */\n\n/**\n * Helper utility for encryption and password hashing, browser-safe.\n * Encryption is using AES-GCM with a random public nonce.\n */\nexport default class CryptoHelpers {\n    protected ivSize = 12;\n\n    protected saltSize = 16;\n\n    protected tagLength = 128;\n\n    protected aesLength = 256;\n\n    public keygenIterations = 200000; //3.0, 2.0 uses 100000\n\n    /**\n     * Internal-intended function for cleaning passwords.\n     *\n     * @param password\n     * @param salt\n     */\n    _pwcleaner(password: string, slt: Buffer): Buffer {\n        const pw: Buffer = Buffer.from(password, 'utf8');\n        return this.sha256(Buffer.concat([pw, slt]));\n    }\n    /**\n     * Internal-intended function for producing an intermediate key.\n     *\n     * @param pwkey\n     */\n\n    async _keyMaterial(pwkey: Buffer): Promise<CryptoKey> {\n        return crypto.subtle.importKey('raw', new Uint8Array(pwkey), { name: 'PBKDF2' }, false, ['deriveKey']);\n    }\n\n    /**\n     * Internal-intended function for turning an intermediate key into a salted key.\n     *\n     * @param keyMaterial\n     * @param salt\n     */\n    async _deriveKey(keyMaterial: CryptoKey, salt: Buffer): Promise<CryptoKey> {\n        return crypto.subtle.deriveKey(\n            {\n                name: 'PBKDF2',\n                salt,\n                iterations: this.keygenIterations,\n                hash: 'SHA-256',\n            },\n            keyMaterial,\n            { name: 'AES-GCM', length: this.aesLength },\n            false,\n            ['encrypt', 'decrypt']\n        );\n    }\n\n    /**\n     * A SHA256 helper function.\n     *\n     * @param message The message to hash\n     *\n     * @returns A {@link https://github.com/feross/buffer|Buffer} containing the SHA256 hash of the message\n     */\n    sha256(message: string | Buffer): Buffer {\n        let buff: Buffer;\n        if (typeof message === 'string') {\n            buff = Buffer.from(message, 'utf8');\n        } else {\n            buff = Buffer.from(message);\n        }\n        return Buffer.from(createHash('sha256').update(buff).digest()); // ensures correct Buffer class is used\n    }\n\n    /**\n     * Generates a randomized {@link https://github.com/feross/buffer|Buffer} to be used as a salt\n     */\n    makeSalt(): Buffer {\n        const salt = Buffer.alloc(this.saltSize);\n        crypto.getRandomValues(salt);\n        return salt;\n    }\n\n    /**\n     * Produces a password-safe hash.\n     *\n     * @param password A string for the password\n     * @param salt An optional {@link https://github.com/feross/buffer|Buffer} containing a salt used in the password hash\n     *\n     * @returns An object containing the \"salt\" and the \"hash\" produced by this function, both as {@link https://github.com/feross/buffer|Buffer}.\n     */\n    async pwhash(password: string, salt: Buffer): Promise<{ salt: Buffer; hash: Buffer }> {\n        let slt: Buffer;\n        if (salt instanceof Buffer) {\n            slt = salt;\n            // @ts-ignore\n        } else if (salt instanceof Uint8Array && process.env.NODE_ENV === 'test') {\n            slt = salt;\n        } else {\n            slt = this.makeSalt();\n        }\n\n        const hash: Buffer = this._pwcleaner(password, this._pwcleaner(password, slt));\n        return { salt: slt, hash };\n    }\n\n    /**\n     * Encrypts plaintext with the provided password using AES-GCM.\n     *\n     * @param password A string for the password\n     * @param plaintext The plaintext to encrypt\n     * @param salt An optional {@link https://github.com/feross/buffer|Buffer} for the salt to use in the encryption process\n     *\n     * @returns An object containing the \"salt\", \"iv\", and \"ciphertext\", all as {@link https://github.com/feross/buffer|Buffer}.\n     */\n    async encrypt(\n        password: string,\n        plaintext: Buffer | string,\n        salt: Buffer | undefined = undefined\n    ): Promise<{ salt: Buffer; iv: Buffer; ciphertext: Buffer }> {\n        let slt: Buffer;\n        if (typeof salt !== 'undefined' && salt instanceof Buffer) {\n            slt = salt;\n        } else {\n            slt = this.makeSalt();\n        }\n\n        let pt: Buffer;\n        if (typeof plaintext !== 'undefined' && plaintext instanceof Buffer) {\n            pt = plaintext;\n        } else {\n            pt = Buffer.from(plaintext, 'utf8');\n        }\n        const pwkey: Buffer = this._pwcleaner(password, slt);\n        const keyMaterial: CryptoKey = await this._keyMaterial(pwkey);\n        const pkey: CryptoKey = await this._deriveKey(keyMaterial, slt);\n        const iv: Buffer = Buffer.from(crypto.getRandomValues(new Uint8Array(this.ivSize)));\n\n        const ciphertext: Buffer = Buffer.from(\n            await crypto.subtle.encrypt(\n                {\n                    name: 'AES-GCM',\n                    iv,\n                    additionalData: slt,\n                    tagLength: this.tagLength,\n                },\n                pkey,\n                pt\n            )\n        );\n\n        return {\n            salt: slt,\n            iv,\n            ciphertext,\n        };\n    }\n\n    /**\n     * Decrypts ciphertext with the provided password, iv, and salt.\n     *\n     * @param password A string for the password\n     * @param ciphertext A {@link https://github.com/feross/buffer|Buffer} for the ciphertext\n     * @param salt A {@link https://github.com/feross/buffer|Buffer} for the salt\n     * @param iv A {@link https://github.com/feross/buffer|Buffer} for the iv\n     */\n    async decrypt(password: string, ciphertext: Buffer, salt: Buffer, iv: Buffer): Promise<Buffer> {\n        const pwkey: Buffer = this._pwcleaner(password, salt);\n        const keyMaterial: CryptoKey = await this._keyMaterial(pwkey);\n        const pkey: CryptoKey = await this._deriveKey(keyMaterial, salt);\n\n        const pt: Buffer = Buffer.from(\n            await crypto.subtle.decrypt(\n                {\n                    name: 'AES-GCM',\n                    iv, // The initialization vector you used to encrypt\n                    additionalData: salt, // The addtionalData you used to encrypt (if any)\n                    tagLength: 128, // The tagLength you used to encrypt (if any)\n                },\n                pkey, // from generateKey or importKey above\n                ciphertext // ArrayBuffer of the data\n            )\n        );\n        return pt;\n    }\n\n    constructor() {}\n}\n", "// Functions to manage import/export of keystore files\nimport {\n    AllKeyFileDecryptedTypes,\n    AllKeyFileTypes,\n    KeyFileDecryptedV2,\n    KeyFileDecryptedV3,\n    KeyFileDecryptedV4,\n    KeyFileDecryptedV5,\n    KeyFileDecryptedV6,\n    KeyFileKeyDecryptedV2,\n    KeyFileKeyDecryptedV3,\n    KeyFileKeyDecryptedV4,\n    KeyFileKeyDecryptedV5,\n    KeyFileKeyDecryptedV6,\n    KeyFileKeyV2,\n    KeyFileKeyV3,\n    KeyFileKeyV4,\n    KeyFileKeyV5,\n    KeyFileKeyV6,\n    KeyFileV2,\n    KeyFileV3,\n    KeyFileV4,\n    KeyFileV5,\n    KeyFileV6,\n    KeystoreFileKeyType,\n} from './types';\nimport { xChain } from '@/Network/network';\nimport { Buffer } from 'buffer/';\nimport MnemonicWallet from '@/Wallet/MnemonicWallet';\nimport Crypto from './Crypto';\nimport SingletonWallet from '@/Wallet/SingletonWallet';\nimport { AccessWalletMultipleInput } from './types';\n// import { keyToKeypair } from '@/helpers/helper'\nimport * as bip39 from 'bip39';\nimport { bintools } from '@/common';\n\nconst cryptoHelpers = new Crypto();\n\nconst KEYSTORE_VERSION = '6.0';\n\nconst ITERATIONS_V2 = 100000;\nconst ITERATIONS_V3 = 200000; // and any version above\n\nconst SUPPORTED_VERSION = ['2.0', '3.0', '4.0', '5.0', '6.0'];\n\ninterface IHash {\n    salt: Buffer;\n    hash: Buffer;\n}\n\ninterface PKCrypt {\n    salt: Buffer;\n    iv: Buffer;\n    ciphertext: Buffer;\n}\n\nasync function readV2(data: KeyFileV2, pass: string) {\n    const version: string = data.version;\n    cryptoHelpers.keygenIterations = ITERATIONS_V2;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n    let pass_hash: string = data.pass_hash;\n\n    let checkHashString: string;\n    let checkHash: Buffer = await cryptoHelpers._pwcleaner(pass, salt);\n    checkHashString = bintools.cb58Encode(checkHash);\n\n    if (checkHashString !== pass_hash) {\n        throw 'INVALID_PASS';\n    }\n\n    let keys: KeyFileKeyV2[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV2[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV2 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        let key_string = bintools.cb58Encode(key_decrypt);\n\n        keysDecrypt.push({\n            key: key_string,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: 0,\n        keys: keysDecrypt,\n    };\n}\nasync function readV3(data: KeyFileV3, pass: string) {\n    const version: string = data.version;\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n    let pass_hash: string = data.pass_hash;\n\n    let checkHashString: string;\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\n    checkHashString = bintools.cb58Encode(checkHash.hash);\n\n    if (checkHashString !== pass_hash) {\n        throw 'INVALID_PASS';\n    }\n\n    let keys: KeyFileKeyV3[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV3[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV3 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        let key_string = bintools.cb58Encode(key_decrypt);\n\n        keysDecrypt.push({\n            key: key_string,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: 0,\n        keys: keysDecrypt,\n    };\n}\nasync function readV4(data: KeyFileV4, pass: string): Promise<KeyFileDecryptedV5> {\n    const version = data.version;\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n    let pass_hash: string = data.pass_hash;\n\n    let checkHashString: string;\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\n    checkHashString = bintools.cb58Encode(checkHash.hash);\n\n    if (checkHashString !== pass_hash) {\n        throw 'INVALID_PASS';\n    }\n\n    let keys: KeyFileKeyV4[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV4[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV4 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        let key_string = bintools.cb58Encode(key_decrypt);\n\n        keysDecrypt.push({\n            key: key_string,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: 0,\n        keys: keysDecrypt,\n    };\n}\n\nasync function readV5(data: KeyFileV5, pass: string): Promise<KeyFileDecryptedV5> {\n    const version: string = data.version;\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n    let pass_hash = data.pass_hash;\n\n    let checkHashString: string;\n    let checkHash: IHash = await cryptoHelpers.pwhash(pass, salt);\n    checkHashString = bintools.cb58Encode(checkHash.hash);\n\n    if (checkHashString !== pass_hash) {\n        throw 'INVALID_PASS';\n    }\n\n    let keys: KeyFileKeyV5[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV5[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV5 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        let key_string = key_decrypt.toString();\n\n        keysDecrypt.push({\n            key: key_string,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: 0,\n        keys: keysDecrypt,\n    };\n}\n\nasync function readV6(data: KeyFileV6, pass: string): Promise<KeyFileDecryptedV6> {\n    const version: string = data.version;\n    const activeIndex = data.activeIndex;\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = bintools.cb58Decode(data.salt);\n\n    let keys: KeyFileKeyV6[] = data.keys;\n    let keysDecrypt: KeyFileKeyDecryptedV6[] = [];\n\n    for (let i = 0; i < keys.length; i++) {\n        let key_data: KeyFileKeyV6 = keys[i];\n\n        let key: Buffer = bintools.cb58Decode(key_data.key);\n        let type: KeystoreFileKeyType = key_data.type;\n        let nonce: Buffer = bintools.cb58Decode(key_data.iv);\n\n        let key_decrypt: Buffer;\n        try {\n            key_decrypt = await cryptoHelpers.decrypt(pass, key, salt, nonce);\n        } catch (e) {\n            throw 'INVALID_PASS';\n        }\n\n        const key_string = key_decrypt.toString();\n\n        keysDecrypt.push({\n            key: key_string,\n            type: type,\n        });\n    }\n\n    return {\n        version,\n        activeIndex: activeIndex || 0,\n        keys: keysDecrypt,\n    };\n}\n\n/**\n * Will decrypt and return the keys of the encrypted wallets in the given json file\n * @param data A JSON file of encrypted wallet keys\n * @param pass The password to decrypt the keys\n */\nasync function readKeyFile(data: AllKeyFileTypes, pass: string): Promise<AllKeyFileDecryptedTypes> {\n    switch (data.version) {\n        case '6.0':\n            return await readV6(data as KeyFileV6, pass);\n        case '5.0':\n            return await readV5(data as KeyFileV5, pass);\n        case '4.0':\n            return await readV4(data as KeyFileV4, pass);\n        case '3.0':\n            return await readV3(data as KeyFileV3, pass);\n        case '2.0':\n            return await readV2(data as KeyFileV2, pass);\n        default:\n            throw 'INVALID_VERSION';\n    }\n}\n\nfunction extractKeysV2(\n    file: KeyFileDecryptedV2 | KeyFileDecryptedV3 | KeyFileDecryptedV4\n): AccessWalletMultipleInput[] {\n    let chainID = xChain.getBlockchainAlias();\n    let keys = (file as KeyFileDecryptedV2 | KeyFileDecryptedV3 | KeyFileDecryptedV4).keys;\n\n    return keys.map((key) => {\n        // Private keys from the keystore file do not have the PrivateKey- prefix\n        let pk = 'PrivateKey-' + key.key;\n        // let keypair = keyToKeypair(pk, chainID)\n        let keypair = xChain.newKeyChain().importKey(pk);\n\n        let keyBuf = keypair.getPrivateKey();\n        let keyHex: string = keyBuf.toString('hex');\n        let paddedKeyHex = keyHex.padStart(64, '0');\n        let mnemonic: string = bip39.entropyToMnemonic(paddedKeyHex);\n\n        return {\n            key: mnemonic,\n            type: 'mnemonic',\n        };\n    });\n}\n\nfunction extractKeysV5(file: KeyFileDecryptedV5): AccessWalletMultipleInput[] {\n    return file.keys.map((key) => ({\n        key: key.key,\n        type: 'mnemonic',\n    }));\n}\n\nfunction extractKeysV6(file: KeyFileDecryptedV6): AccessWalletMultipleInput[] {\n    return file.keys.map((key) => ({\n        type: key.type,\n        key: key.key,\n    }));\n}\n\nfunction extractKeysFromDecryptedFile(file: AllKeyFileDecryptedTypes): AccessWalletMultipleInput[] {\n    switch (file.version) {\n        case '6.0':\n            return extractKeysV6(file as KeyFileDecryptedV6);\n        case '5.0':\n            return extractKeysV5(file as KeyFileDecryptedV5);\n        case '4.0':\n            return extractKeysV2(file as KeyFileDecryptedV4);\n        case '3.0':\n            return extractKeysV2(file as KeyFileDecryptedV3);\n        case '2.0':\n            return extractKeysV2(file as KeyFileDecryptedV2);\n        default:\n            throw 'INVALID_VERSION';\n    }\n}\n\n/**\n * Given an array of wallets, the active index, and a password, return an encrypted JSON object that is the keystore file\n * @param wallets An array of wallet to encrypt\n * @param pass Password used in encryption\n * @param activeIndex Index of the active wallet in the `wallets` array\n * @return Returns a JSON object that can later be decrypted with `readKeyfile` and the given password\n */\nasync function makeKeyfile(\n    wallets: (MnemonicWallet | SingletonWallet)[],\n    pass: string,\n    activeIndex: number\n): Promise<KeyFileV6> {\n    // 3.0 and above uses 200,000\n    cryptoHelpers.keygenIterations = ITERATIONS_V3;\n\n    let salt: Buffer = await cryptoHelpers.makeSalt();\n\n    let keys: KeyFileKeyV6[] = [];\n\n    for (let i = 0; i < wallets.length; i++) {\n        let wallet = wallets[i];\n        let key;\n        let type: KeystoreFileKeyType;\n        if (wallet.type === 'singleton') {\n            key = (wallet as SingletonWallet).key;\n            type = 'singleton';\n        } else {\n            key = (wallet as MnemonicWallet).mnemonic;\n            type = 'mnemonic';\n        }\n        let pk_crypt: PKCrypt = await cryptoHelpers.encrypt(pass, key, salt);\n\n        let key_data: KeyFileKeyV6 = {\n            key: bintools.cb58Encode(pk_crypt.ciphertext),\n            iv: bintools.cb58Encode(pk_crypt.iv),\n            type: type,\n        };\n        keys.push(key_data);\n    }\n\n    let file_data: KeyFileV6 = {\n        version: KEYSTORE_VERSION,\n        salt: bintools.cb58Encode(salt),\n        activeIndex,\n        keys: keys,\n    };\n    return file_data;\n}\n\nexport default { readKeyFile, makeKeyfile, KEYSTORE_VERSION, extractKeysFromDecryptedFile };\n"], "names": ["Defaults", "global", "this", "require$$0", "require$$1", "BinTools", "axios", "Avalanche", "Web3", "url", "URL", "Sockette", "PubSub", "ethers", "DOMPurify", "BN", "publicToAddress", "EVMKeyPair", "BufferAvalanche", "privateToPublic", "EVMKeyChain", "Big", "createHash", "PayloadTypes", "MinterSet", "OutputOwners", "EthereumjsCommon", "tx", "Transaction", "AVMConstants", "PlatformVMConstants", "EVMConstants", "Assets.getAssetDescription", "AVMUTXOSet", "PlatformUTXOSet", "EventEmitter", "Buffer", "UnixNow", "moment", "getPreferredHRP", "AVMKeyPair", "bip39", "HDKey", "_errors", "_utils", "_rlp", "_bip32Path", "_createHash", "importPublic", "rlp", "bnToRlp", "EthBN", "PlatformImportTx", "bippath", "AVMTx", "PlatformTx", "EVMTx", "EVMImportTx", "AVMSelectCredentialClass", "PlatformSelectCredentialClass", "EVMSelectCredentialClass", "Signature", "Crypto"], "mappings": "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" }
\ No newline at end of file
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/dist/utils/utils.d.ts b/node_modules/@avalabs/avalanche-wallet-sdk/dist/utils/utils.d.ts
index 58a37e0..d2184df 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/dist/utils/utils.d.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/dist/utils/utils.d.ts
@@ -15,15 +15,15 @@ declare module 'big.js' {
 export declare function bnToBig(val: BN, denomination?: number): Big;
 /**
  * Converts a BN amount of 18 decimals to 9.
- * Used for AVAX C <-> X,P conversions
+ * Used for DJTX C <-> X,P conversions
  * @param amount
  */
-export declare function avaxCtoX(amount: BN): BN;
-export declare function avaxXtoC(amount: BN): BN;
-export declare function avaxPtoC(amount: BN): BN;
-export declare function bnToBigAvaxX(val: BN): Big;
-export declare function bnToBigAvaxP(val: BN): Big;
-export declare function bnToBigAvaxC(val: BN): Big;
+export declare function djtxCtoX(amount: BN): BN;
+export declare function djtxXtoC(amount: BN): BN;
+export declare function djtxPtoC(amount: BN): BN;
+export declare function bnToBigDjtxX(val: BN): Big;
+export declare function bnToBigDjtxP(val: BN): Big;
+export declare function bnToBigDjtxC(val: BN): Big;
 /**
  * Parses the value using a denomination of 18
  *
@@ -31,33 +31,33 @@ export declare function bnToBigAvaxC(val: BN): Big;
  *
  * @example
  * ```
- * bnToAvaxC(new BN('22500000000000000000')
+ * bnToDjtxC(new BN('22500000000000000000')
  * // will return  22.5
  *```
  *
  */
-export declare function bnToAvaxC(val: BN): string;
+export declare function bnToDjtxC(val: BN): string;
 /**
  * Parses the value using a denomination of 9
  *
- * @param val the amount to parse given in nAVAX
+ * @param val the amount to parse given in nDJTX
  */
-export declare function bnToAvaxX(val: BN): string;
+export declare function bnToDjtxX(val: BN): string;
 /**
  * Parses the value using a denomination of 9
  *
- * @param val the amount to parse given in nAVAX
+ * @param val the amount to parse given in nDJTX
  */
-export declare function bnToAvaxP(val: BN): string;
+export declare function bnToDjtxP(val: BN): string;
 /**
  *
  * @param val the number to parse
  * @param decimals number of decimal places used to parse the number
  */
 export declare function numberToBN(val: number | string, decimals: number): BN;
-export declare function numberToBNAvaxX(val: number | string): BN;
-export declare function numberToBNAvaxP(val: number | string): BN;
-export declare function numberToBNAvaxC(val: number | string): BN;
+export declare function numberToBNDjtxX(val: number | string): BN;
+export declare function numberToBNDjtxP(val: number | string): BN;
+export declare function numberToBNDjtxC(val: number | string): BN;
 /**
  * @Remarks
  * A helper method to convert BN numbers to human readable strings.
@@ -74,14 +74,14 @@ export declare function numberToBNAvaxC(val: number | string): BN;
 export declare function bnToLocaleString(val: BN, decimals?: number): string;
 export declare function bigToLocaleString(bigVal: Big, decimals?: number): string;
 /**
- * Fetches the current AVAX price using Coin Gecko.
+ * Fetches the current DJTX price using Coin Gecko.
  * @remarks
  * You might get rate limited if you use this function frequently.
  *
  * @return
- * Current USD price of 1 AVAX
+ * Current USD price of 1 DJTX
  */
-export declare function getAvaxPrice(): Promise<number>;
+export declare function getDjtxPrice(): Promise<number>;
 /**
  * Checks if address is valid.
  *
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/History/history.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/History/history.ts
index e47752a..1206c91 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/History/history.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/History/history.ts
@@ -21,7 +21,7 @@ import { activeNetwork, explorer_api, xChain } from '@/Network/network';
 import { BN } from 'avalanche';
 import { ChainIdType } from '@/types';
 import { AVMConstants } from 'avalanche/dist/apis/avm';
-import { bnToAvaxC, bnToAvaxP, bnToAvaxX, bnToLocaleString, parseNftPayload } from '@/utils/utils';
+import { bnToDjtxC, bnToDjtxP, bnToDjtxX, bnToLocaleString, parseNftPayload } from '@/utils/utils';
 import * as Assets from '@/Asset/Assets';
 import { NO_EXPLORER_API } from '@/errors';
 
@@ -150,7 +150,7 @@ export function getTransactionSummaryEVM(tx: ITransactionDataEVM, walletAddress:
     let isSender = tx.fromAddr.toUpperCase() === walletAddress.toUpperCase();
 
     let amt = new BN(tx.value);
-    let amtClean = bnToAvaxC(amt);
+    let amtClean = bnToDjtxC(amt);
     let date = new Date(tx.createdAt);
 
     let gasLimit = new BN(tx.gasLimit);
@@ -338,10 +338,10 @@ function getImportSummary(tx: ITransactionData, addresses: string[]): iHistoryIm
     let chainAliasFrom = idToChainAlias(sourceChain);
     let chainAliasTo = idToChainAlias(tx.chainID);
 
-    let avaxID = activeNetwork.avaxID;
+    let djtxID = activeNetwork.djtxID;
 
     let outs = tx.outputs || [];
-    let amtOut = getAssetBalanceFromUTXOs(outs, addresses, avaxID, tx.chainID);
+    let amtOut = getAssetBalanceFromUTXOs(outs, addresses, djtxID, tx.chainID);
 
     let time = new Date(tx.timestamp);
     let fee = xChain.getTxFee();
@@ -352,7 +352,7 @@ function getImportSummary(tx: ITransactionData, addresses: string[]): iHistoryIm
         source: chainAliasFrom,
         destination: chainAliasTo,
         amount: amtOut,
-        amountClean: bnToAvaxX(amtOut),
+        amountClean: bnToDjtxX(amtOut),
         timestamp: time,
         type: 'import',
         fee: fee,
@@ -369,11 +369,11 @@ function getExportSummary(tx: ITransactionData, addresses: string[]): iHistoryIm
     let destinationChain = findDestinationChain(tx);
     let chainAliasTo = idToChainAlias(destinationChain);
 
-    let avaxID = activeNetwork.avaxID;
+    let djtxID = activeNetwork.djtxID;
 
     let outs = tx.outputs || [];
-    let amtOut = getAssetBalanceFromUTXOs(outs, addresses, avaxID, destinationChain);
-    // let amtIn = getAssetBalanceFromUTXOs(inUtxos, addresses, avaxID);
+    let amtOut = getAssetBalanceFromUTXOs(outs, addresses, djtxID, destinationChain);
+    // let amtIn = getAssetBalanceFromUTXOs(inUtxos, addresses, djtxID);
 
     let time = new Date(tx.timestamp);
     let fee = xChain.getTxFee();
@@ -384,7 +384,7 @@ function getExportSummary(tx: ITransactionData, addresses: string[]): iHistoryIm
         source: chainAliasFrom,
         destination: chainAliasTo,
         amount: amtOut,
-        amountClean: bnToAvaxX(amtOut),
+        amountClean: bnToDjtxX(amtOut),
         timestamp: time,
         type: 'export',
         fee: fee,
@@ -397,10 +397,10 @@ function getValidatorSummary(tx: ITransactionData, ownerAddrs: string[]): iHisto
     let time = new Date(tx.timestamp);
 
     let pChainID = activeNetwork.pChainID;
-    let avaxID = activeNetwork.avaxID;
+    let djtxID = activeNetwork.djtxID;
 
     let outs = tx.outputs || [];
-    let stakeAmt = getAssetBalanceFromUTXOs(outs, ownerAddrs, avaxID, pChainID, true);
+    let stakeAmt = getAssetBalanceFromUTXOs(outs, ownerAddrs, djtxID, pChainID, true);
 
     return {
         id: tx.id,
@@ -411,7 +411,7 @@ function getValidatorSummary(tx: ITransactionData, ownerAddrs: string[]): iHisto
         type: 'add_validator',
         fee: new BN(0),
         amount: stakeAmt,
-        amountClean: bnToAvaxP(stakeAmt),
+        amountClean: bnToDjtxP(stakeAmt),
         memo: parseMemo(tx.memo),
         isRewarded: tx.rewarded,
     };
@@ -423,10 +423,10 @@ function getImportSummaryC(tx: ITransactionData, ownerAddr: string) {
     let chainAliasFrom = idToChainAlias(sourceChain);
     let chainAliasTo = idToChainAlias(tx.chainID);
 
-    let avaxID = activeNetwork.avaxID;
+    let djtxID = activeNetwork.djtxID;
 
     let outs = tx.outputs || [];
-    let amtOut = getEvmAssetBalanceFromUTXOs(outs, ownerAddr, avaxID, tx.chainID);
+    let amtOut = getEvmAssetBalanceFromUTXOs(outs, ownerAddr, djtxID, tx.chainID);
 
     let time = new Date(tx.timestamp);
     let fee = xChain.getTxFee();
@@ -436,7 +436,7 @@ function getImportSummaryC(tx: ITransactionData, ownerAddr: string) {
         source: chainAliasFrom,
         destination: chainAliasTo,
         amount: amtOut,
-        amountClean: bnToAvaxX(amtOut),
+        amountClean: bnToDjtxX(amtOut),
         timestamp: time,
         type: 'import',
         fee: fee,
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/constants.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/constants.ts
index 0600d85..e28696e 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/constants.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/constants.ts
@@ -5,12 +5,12 @@ import { Defaults } from 'avalanche/dist/utils';
 import { getRpcC, getRpcP, getRpcX } from './helpers/rpcFromConfig';
 
 export const MainnetConfig: NetworkConfig = {
-    rawUrl: 'https://api.avax.network',
+    rawUrl: 'https://api.djtx.network',
     apiProtocol: 'https',
-    apiIp: 'api.avax.network',
+    apiIp: 'api.djtx.network',
     apiPort: 443,
-    explorerURL: 'https://explorerapi.avax.network',
-    explorerSiteURL: 'https://explorer.avax.network',
+    explorerURL: 'https://explorerapi.djtx.network',
+    explorerSiteURL: 'https://explorer.djtx.network',
     networkID: 1,
     // @ts-ignore
     xChainID: Defaults.network[1]['X']['blockchainID'],
@@ -21,7 +21,7 @@ export const MainnetConfig: NetworkConfig = {
     // @ts-ignore
     evmChainID: Defaults.network[1]['C']['chainID'],
     // @ts-ignore
-    avaxID: Defaults.network[1]['X']['avaxAssetID'],
+    djtxID: Defaults.network[1]['X']['djtxAssetID'],
     get rpcUrl() {
         return {
             c: getRpcC(this),
@@ -32,12 +32,12 @@ export const MainnetConfig: NetworkConfig = {
 };
 
 export const TestnetConfig: NetworkConfig = {
-    rawUrl: 'https://api.avax-test.network',
+    rawUrl: 'https://api.djtx-test.network',
     apiProtocol: 'https',
-    apiIp: 'api.avax-test.network',
+    apiIp: 'api.djtx-test.network',
     apiPort: 443,
-    explorerURL: 'https://explorerapi.avax-test.network',
-    explorerSiteURL: 'https://explorer.avax-test.network',
+    explorerURL: 'https://explorerapi.djtx-test.network',
+    explorerSiteURL: 'https://explorer.djtx-test.network',
     networkID: 5,
     // @ts-ignore
     xChainID: Defaults.network[5]['X']['blockchainID'],
@@ -48,7 +48,7 @@ export const TestnetConfig: NetworkConfig = {
     // @ts-ignore
     evmChainID: Defaults.network[5]['C']['chainID'],
     // @ts-ignore
-    avaxID: Defaults.network[5]['X']['avaxAssetID'],
+    djtxID: Defaults.network[5]['X']['djtxAssetID'],
     get rpcUrl() {
         return {
             c: getRpcC(this),
@@ -73,7 +73,7 @@ export const LocalnetConfig: NetworkConfig = {
     // @ts-ignore
     evmChainID: Defaults.network[12345]['C']['chainID'],
     // @ts-ignore
-    avaxID: Defaults.network[12345]['X']['avaxAssetID'],
+    djtxID: Defaults.network[12345]['X']['djtxAssetID'],
     get rpcUrl() {
         return {
             c: getRpcC(this),
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/index.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/index.ts
index 22616ae..17b5017 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/index.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/index.ts
@@ -33,8 +33,8 @@ export function isLocalNetwork(activeNetwork: NetworkConfig) {
 // Default connection is Mainnet
 setNetwork(MainnetConfig);
 
-export function getAvaxAssetID() {
-    return activeNetwork.avaxID;
+export function getDjtxAssetID() {
+    return activeNetwork.djtxID;
 }
 
 export function getActiveNetworkConfig() {
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/network.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/network.ts
index d5823ee..e99222f 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/network.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/network.ts
@@ -77,9 +77,9 @@ export function setRpcNetwork(conf: NetworkConfig, credentials = true): void {
     cChain.refreshBlockchainID(conf.cChainID);
     cChain.setBlockchainAlias('C');
 
-    xChain.setAVAXAssetID(conf.avaxID);
-    pChain.setAVAXAssetID(conf.avaxID);
-    cChain.setAVAXAssetID(conf.avaxID);
+    xChain.setDJTXAssetID(conf.djtxID);
+    pChain.setDJTXAssetID(conf.djtxID);
+    cChain.setDJTXAssetID(conf.djtxID);
 
     if (conf.explorerURL) {
         explorer_api = createExplorerApi(conf);
@@ -122,14 +122,14 @@ export async function getConfigFromUrl(url: string): Promise<NetworkConfig> {
     let fetchIdP = infoApi.getBlockchainID('P');
     let fetchIdC = infoApi.getBlockchainID('C');
     let fetchEvmChainID = connectionEvm.eth.getChainId();
-    let fetchAvaxId = await xApi.getAVAXAssetID();
+    let fetchDjtxId = await xApi.getDJTXAssetID();
 
-    let values = await Promise.all([fetchIdX, fetchIdP, fetchIdC, fetchAvaxId, fetchEvmChainID]);
+    let values = await Promise.all([fetchIdX, fetchIdP, fetchIdC, fetchDjtxId, fetchEvmChainID]);
 
     let idX = values[0];
     let idP = values[1];
     let idC = values[2];
-    let avaxId = bintools.cb58Encode(values[3]);
+    let djtxId = bintools.cb58Encode(values[3]);
     let evmChainId = values[4];
 
     let config: NetworkConfig = {
@@ -141,7 +141,7 @@ export async function getConfigFromUrl(url: string): Promise<NetworkConfig> {
         xChainID: idX,
         pChainID: idP,
         cChainID: idC,
-        avaxID: avaxId,
+        djtxID: djtxId,
         evmChainID: evmChainId,
         get rpcUrl(): NetworkConfigRpc {
             return {
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/providers/EVMWebSocketProvider.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/providers/EVMWebSocketProvider.ts
index 1cacd7c..9264f0d 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/providers/EVMWebSocketProvider.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/providers/EVMWebSocketProvider.ts
@@ -85,7 +85,7 @@ export default class EVMWebSocketProvider {
     private onBlock() {
         // Update wallet balances
         this.wallets.forEach((w) => {
-            w.updateAvaxBalanceC();
+            w.updateDjtxBalanceC();
         });
     }
 }
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/types.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/types.ts
index 8f6a241..0946113 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/types.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/Network/types.ts
@@ -18,6 +18,6 @@ export interface NetworkConfig {
     xChainID: string;
     pChainID: string;
     cChainID: string;
-    avaxID: string;
+    djtxID: string;
     rpcUrl: NetworkConfigRpc;
 }
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/LedgerWallet.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/LedgerWallet.ts
index 02f3c38..43fcb50 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/LedgerWallet.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/LedgerWallet.ts
@@ -3,11 +3,11 @@
 
 import Eth from '@ledgerhq/hw-app-eth';
 // @ts-ignore
-import AppAvax from '@obsidiansystems/hw-app-avalanche';
+import AppDjtx from '@obsidiansystems/hw-app-avalanche';
 import EthereumjsCommon from '@ethereumjs/common';
 import { importPublic, publicToAddress, bnToRlp, rlp, BN as EthBN } from 'ethereumjs-util';
 import {
-    AVAX_ACCOUNT_PATH,
+    DJTX_ACCOUNT_PATH,
     ETH_ACCOUNT_PATH,
     LEDGER_ETH_ACCOUNT_PATH,
     LEDGER_EXCHANGE_TIMEOUT,
@@ -60,14 +60,14 @@ export default class LedgerWallet extends HDWalletAbstract {
     evmAccount: HDKey;
     config: ILedgerAppConfig;
 
-    appAvax: AppAvax;
+    appDjtx: AppDjtx;
     ethApp: Eth;
 
-    constructor(avaxAcct: HDKey, evmAcct: HDKey, avaxApp: AppAvax, ethApp: Eth, config: ILedgerAppConfig) {
-        super(avaxAcct);
+    constructor(djtxAcct: HDKey, evmAcct: HDKey, djtxApp: AppDjtx, ethApp: Eth, config: ILedgerAppConfig) {
+        super(djtxAcct);
         this.evmAccount = evmAcct;
         this.config = config;
-        this.appAvax = avaxApp;
+        this.appDjtx = djtxApp;
         this.ethApp = ethApp;
 
         this.evmWallet = new EvmWalletReadonly(importPublic(evmAcct.publicKey));
@@ -82,7 +82,7 @@ export default class LedgerWallet extends HDWalletAbstract {
         let app, eth;
 
         try {
-            app = new AppAvax(transport, 'w0w');
+            app = new AppDjtx(transport, 'w0w');
             eth = new Eth(transport, 'w0w');
         } catch (e) {
             throw new Error('Failed to create ledger instance from the given transport.');
@@ -101,8 +101,8 @@ export default class LedgerWallet extends HDWalletAbstract {
         return await LedgerWallet.fromApp(app, eth);
     }
 
-    static async getAvaxAccount(app: AppAvax): Promise<HDKey> {
-        let res = await app.getWalletExtendedPublicKey(AVAX_ACCOUNT_PATH);
+    static async getDjtxAccount(app: AppDjtx): Promise<HDKey> {
+        let res = await app.getWalletExtendedPublicKey(DJTX_ACCOUNT_PATH);
         let hd = new HDKey();
         hd.publicKey = res.public_key;
         hd.chainCode = res.chain_code;
@@ -121,12 +121,12 @@ export default class LedgerWallet extends HDWalletAbstract {
         return hdEth;
     }
 
-    static async fromApp(app: AppAvax, eth: Eth): Promise<LedgerWallet> {
+    static async fromApp(app: AppDjtx, eth: Eth): Promise<LedgerWallet> {
         try {
-            let avaxAccount = await LedgerWallet.getAvaxAccount(app);
+            let djtxAccount = await LedgerWallet.getDjtxAccount(app);
             let evmAccount = await LedgerWallet.getEvmAccount(eth);
             let config = await app.getAppConfiguration();
-            return new LedgerWallet(avaxAccount, evmAccount, app, eth, config);
+            return new LedgerWallet(djtxAccount, evmAccount, app, eth, config);
         } catch (e) {
             throw new Error('Unable to create ledger wallet instance from the given apps.');
         }
@@ -192,7 +192,7 @@ export default class LedgerWallet extends HDWalletAbstract {
     getTransactionPaths<UnsignedTx extends AVMUnsignedTx | PlatformUnsignedTx>(
         unsignedTx: UnsignedTx,
         chainId: ChainIdType
-    ): { paths: string[]; isAvaxOnly: boolean } {
+    ): { paths: string[]; isDjtxOnly: boolean } {
         let tx = unsignedTx.getTransaction();
         let txType = tx.getTxType();
 
@@ -217,7 +217,7 @@ export default class LedgerWallet extends HDWalletAbstract {
         let hrp = avalanche.getHRP();
         let paths: string[] = [];
 
-        let isAvaxOnly = true;
+        let isDjtxOnly = true;
         // Collect paths derivation paths for source addresses
         for (let i = 0; i < items.length; i++) {
             let item = items[i];
@@ -225,8 +225,8 @@ export default class LedgerWallet extends HDWalletAbstract {
             let assetId = bintools.cb58Encode(item.getAssetID());
             // @ts-ignore
             // if (assetId !== store.state.Assets.AVA_ASSET_ID) {
-            if (assetId !== activeNetwork.avaxID) {
-                isAvaxOnly = false;
+            if (assetId !== activeNetwork.djtxID) {
+                isDjtxOnly = false;
             }
 
             let sigidxs: SigIdx[] = item.getInput().getSigIdxs();
@@ -260,7 +260,7 @@ export default class LedgerWallet extends HDWalletAbstract {
             }
         }
 
-        return { paths, isAvaxOnly };
+        return { paths, isDjtxOnly };
     }
 
     getPathFromAddress(address: string) {
@@ -291,11 +291,11 @@ export default class LedgerWallet extends HDWalletAbstract {
         let chainId: ChainIdType = 'X';
 
         let parseableTxs = ParseableAvmTxEnum;
-        let { paths, isAvaxOnly } = this.getTransactionPaths<AVMUnsignedTx>(unsignedTx, chainId);
+        let { paths, isDjtxOnly } = this.getTransactionPaths<AVMUnsignedTx>(unsignedTx, chainId);
 
         // If ledger doesnt support parsing, sign hash
         let canLedgerParse = this.config.version >= '0.3.1';
-        let isParsableType = txType in parseableTxs && isAvaxOnly;
+        let isParsableType = txType in parseableTxs && isDjtxOnly;
 
         let signedTx;
         if (canLedgerParse && isParsableType) {
@@ -361,7 +361,7 @@ export default class LedgerWallet extends HDWalletAbstract {
         // changeIdx = this.externalScan.getIndex();
         // }
 
-        return bippath.fromString(`${AVAX_ACCOUNT_PATH}/${chainChangePath}/${changeIdx}`);
+        return bippath.fromString(`${DJTX_ACCOUNT_PATH}/${chainChangePath}/${changeIdx}`);
     }
 
     // Used for signing transactions that are parsable
@@ -382,7 +382,7 @@ export default class LedgerWallet extends HDWalletAbstract {
         let bip32Paths = this.pathsToUniqueBipPaths(paths);
 
         const accountPath =
-            chainId === 'C' ? bippath.fromString(`${ETH_ACCOUNT_PATH}`) : bippath.fromString(`${AVAX_ACCOUNT_PATH}`);
+            chainId === 'C' ? bippath.fromString(`${ETH_ACCOUNT_PATH}`) : bippath.fromString(`${DJTX_ACCOUNT_PATH}`);
         let txbuff = unsignedTx.toBuffer();
         let changePath = this.getChangeBipPath(unsignedTx, chainId);
         // let messages = this.getTransactionMessages<UnsignedTx>(unsignedTx, chainId, changePath)
@@ -394,7 +394,7 @@ export default class LedgerWallet extends HDWalletAbstract {
         //     info: null,
         // })
 
-        let ledgerSignedTx = await this.appAvax.signTransaction(accountPath, bip32Paths, txbuff, changePath);
+        let ledgerSignedTx = await this.appDjtx.signTransaction(accountPath, bip32Paths, txbuff, changePath);
 
         let sigMap = ledgerSignedTx.signatures;
         let creds = this.getCredentials<UnsignedTx>(unsignedTx, paths, sigMap, chainId);
@@ -438,8 +438,8 @@ export default class LedgerWallet extends HDWalletAbstract {
         let bip32Paths = this.pathsToUniqueBipPaths(paths);
 
         // Sign the msg with ledger
-        const accountPath = bippath.fromString(`${AVAX_ACCOUNT_PATH}`);
-        let sigMap = await this.appAvax.signHash(accountPath, bip32Paths, msg);
+        const accountPath = bippath.fromString(`${DJTX_ACCOUNT_PATH}`);
+        let sigMap = await this.appDjtx.signHash(accountPath, bip32Paths, msg);
         // store.commit('Ledger/closeModal')
 
         let creds: Credential[] = this.getCredentials<UnsignedTx>(unsignedTx, paths, sigMap, chainId);
@@ -581,10 +581,10 @@ export default class LedgerWallet extends HDWalletAbstract {
         let chainId: ChainIdType = 'P';
         let parseableTxs = ParseablePlatformEnum;
 
-        let { paths, isAvaxOnly } = this.getTransactionPaths<PlatformUnsignedTx>(unsignedTx, chainId);
+        let { paths, isDjtxOnly } = this.getTransactionPaths<PlatformUnsignedTx>(unsignedTx, chainId);
         // If ledger doesnt support parsing, sign hash
         let canLedgerParse = this.config.version >= '0.3.1';
-        let isParsableType = txType in parseableTxs && isAvaxOnly;
+        let isParsableType = txType in parseableTxs && isDjtxOnly;
 
         // TODO: Remove after ledger is fixed
         // If UTXOS contain lockedStakeable funds always use sign hash
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/MnemonicWallet.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/MnemonicWallet.ts
index 5ebe7d7..0b0ac5d 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/MnemonicWallet.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/MnemonicWallet.ts
@@ -1,6 +1,6 @@
 import * as bip39 from 'bip39';
 import HDKey from 'hdkey';
-import { AVAX_ACCOUNT_PATH, ETH_ACCOUNT_PATH } from './constants';
+import { DJTX_ACCOUNT_PATH, ETH_ACCOUNT_PATH } from './constants';
 import EvmWallet from './EvmWallet';
 import { UnsafeWallet, WalletNameType } from './types';
 import { Buffer } from 'avalanche';
@@ -30,7 +30,7 @@ export default class MnemonicWallet extends HDWalletAbstract implements UnsafeWa
     constructor(mnemonic: string) {
         let seed: globalThis.Buffer = bip39.mnemonicToSeedSync(mnemonic);
         let masterHdKey: HDKey = HDKey.fromMasterSeed(seed);
-        let accountKey = masterHdKey.derive(AVAX_ACCOUNT_PATH);
+        let accountKey = masterHdKey.derive(DJTX_ACCOUNT_PATH);
 
         super(accountKey);
 
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/Wallet.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/Wallet.ts
index 856e61f..b22f980 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/Wallet.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/Wallet.ts
@@ -5,7 +5,7 @@ import {
     AvmExportChainType,
     AvmImportChainType,
     ERC20Balance,
-    iAvaxBalance,
+    iDjtxBalance,
     WalletBalanceX,
     WalletEventArgsType,
     WalletEventType,
@@ -19,7 +19,7 @@ import {
     buildEvmTransferErc20Tx,
     buildEvmTransferNativeTx,
     buildMintNftTx,
-    estimateAvaxGas,
+    estimateDjtxGas,
     estimateErc20Gas,
 } from '@/helpers/tx_helper';
 import { BN, Buffer } from 'avalanche';
@@ -57,7 +57,7 @@ import { PayloadBase, UnixNow } from 'avalanche/dist/utils';
 import { getAssetDescription } from '@/Asset/Assets';
 import { getErc20Token } from '@/Asset/Erc20';
 import { NO_NETWORK } from '@/errors';
-import { avaxCtoX, bnToLocaleString, waitTxC, waitTxEvm, waitTxP, waitTxX } from '@/utils/utils';
+import { djtxCtoX, bnToLocaleString, waitTxC, waitTxEvm, waitTxP, waitTxX } from '@/utils/utils';
 import EvmWalletReadonly from '@/Wallet/EvmWalletReadonly';
 import EventEmitter from 'events';
 import {
@@ -151,20 +151,20 @@ export abstract class WalletProvider {
     }
 
     protected emitBalanceChangeP(): void {
-        this.emit('balanceChangedP', this.getAvaxBalanceP());
+        this.emit('balanceChangedP', this.getDjtxBalanceP());
     }
 
     protected emitBalanceChangeC(): void {
-        this.emit('balanceChangedC', this.getAvaxBalanceC());
+        this.emit('balanceChangedC', this.getDjtxBalanceC());
     }
 
     /**
      *
      * @param to - the address funds are being send to.
-     * @param amount - amount of AVAX to send in nAVAX
+     * @param amount - amount of DJTX to send in nDJTX
      * @param memo - A MEMO for the transaction
      */
-    async sendAvaxX(to: string, amount: BN, memo?: string): Promise<string> {
+    async sendDjtxX(to: string, amount: BN, memo?: string): Promise<string> {
         if (!activeNetwork) throw NO_NETWORK;
 
         let memoBuff = memo ? Buffer.from(memo) : undefined;
@@ -176,7 +176,7 @@ export abstract class WalletProvider {
         let tx = await xChain.buildBaseTx(
             utxoSet,
             amount,
-            activeNetwork.avaxID,
+            activeNetwork.djtxID,
             [to],
             froms,
             [changeAddress],
@@ -193,19 +193,19 @@ export abstract class WalletProvider {
     }
 
     /**
-     * Sends AVAX to another address on the C chain.
-     * @param to Hex address to send AVAX to.
-     * @param amount Amount of AVAX to send, represented in WEI format.
+     * Sends DJTX to another address on the C chain.
+     * @param to Hex address to send DJTX to.
+     * @param amount Amount of DJTX to send, represented in WEI format.
      * @param gasPrice Gas price in WEI format
      * @param gasLimit Gas limit
      *
      * @return Returns the transaction hash
      */
-    async sendAvaxC(to: string, amount: BN, gasPrice: BN, gasLimit: number): Promise<string> {
+    async sendDjtxC(to: string, amount: BN, gasPrice: BN, gasLimit: number): Promise<string> {
         let fromAddr = this.getAddressC();
         let tx = await buildEvmTransferNativeTx(fromAddr, to, amount, gasPrice, gasLimit);
         let txId = await this.issueEvmTx(tx);
-        await this.updateAvaxBalanceC();
+        await this.updateDjtxBalanceC();
         return txId;
     }
 
@@ -269,13 +269,13 @@ export abstract class WalletProvider {
     }
 
     /**
-     * Estimate the gas needed for a AVAX send transaction on the C chain.
+     * Estimate the gas needed for a DJTX send transaction on the C chain.
      * @param to Destination address.
-     * @param amount Amount of AVAX to send, in WEI.
+     * @param amount Amount of DJTX to send, in WEI.
      */
-    async estimateAvaxGasLimit(to: string, amount: BN, gasPrice: BN): Promise<number> {
+    async estimateDjtxGasLimit(to: string, amount: BN, gasPrice: BN): Promise<number> {
         let from = this.getAddressC();
-        return await estimateAvaxGas(from, to, amount, gasPrice);
+        return await estimateDjtxGas(from, to, amount, gasPrice);
     }
 
     /**
@@ -294,11 +294,11 @@ export abstract class WalletProvider {
     }
 
     /**
-     * Returns the maximum spendable AVAX balance for the given chain.
+     * Returns the maximum spendable DJTX balance for the given chain.
      * Scans all chains and take cross over fees into account
      * @param chainType X, P or C
      */
-    public getUsableAvaxBalanceForChain(chainType: ChainIdType): BN {
+    public getUsableDjtxBalanceForChain(chainType: ChainIdType): BN {
         return this.createUniversalNode(chainType).reduceTotalBalanceFromParents();
     }
 
@@ -308,9 +308,9 @@ export abstract class WalletProvider {
      * @private
      */
     private createUniversalNode(chain: ChainIdType): UniversalNode {
-        let xBal = this.getAvaxBalanceX().unlocked;
-        let pBal = this.getAvaxBalanceP().unlocked;
-        let cBal = avaxCtoX(this.getAvaxBalanceC()); // need to use 9 decimal places
+        let xBal = this.getDjtxBalanceX().unlocked;
+        let pBal = this.getDjtxBalanceP().unlocked;
+        let cBal = djtxCtoX(this.getDjtxBalanceC()); // need to use 9 decimal places
 
         switch (chain) {
             case 'X':
@@ -328,7 +328,7 @@ export abstract class WalletProvider {
      * @param amount The amount to check against
      */
     public canHaveBalanceOnChain(chain: ChainIdType, amount: BN): boolean {
-        // The maximum amount of AVAX we can have on this chain
+        // The maximum amount of DJTX we can have on this chain
         let maxAmt = this.createUniversalNode(chain).reduceTotalBalanceFromParents();
         return maxAmt.gte(amount);
     }
@@ -339,9 +339,9 @@ export abstract class WalletProvider {
      * @param amount The desired amount
      */
     public getTransactionsForBalance(chain: ChainIdType, amount: BN): UniversalTx[] {
-        let xBal = this.getAvaxBalanceX().unlocked;
-        let pBal = this.getAvaxBalanceP().unlocked;
-        let cBal = avaxCtoX(this.getAvaxBalanceC()); // need to use 9 decimal places
+        let xBal = this.getDjtxBalanceX().unlocked;
+        let pBal = this.getDjtxBalanceP().unlocked;
+        let cBal = djtxCtoX(this.getDjtxBalanceC()); // need to use 9 decimal places
 
         switch (chain) {
             case 'P':
@@ -366,9 +366,9 @@ export abstract class WalletProvider {
     }
 
     /**
-     * Returns the C chain AVAX balance of the wallet in WEI format.
+     * Returns the C chain DJTX balance of the wallet in WEI format.
      */
-    async updateAvaxBalanceC(): Promise<BN> {
+    async updateDjtxBalanceC(): Promise<BN> {
         let balOld = this.evmWallet.getBalance();
         let balNew = await this.evmWallet.updateBalance();
 
@@ -425,7 +425,7 @@ export abstract class WalletProvider {
     }
 
     /**
-     * Returns the number AVAX staked by this wallet.
+     * Returns the number DJTX staked by this wallet.
      */
     public async getStake(): Promise<GetStakeResponse> {
         let addrs = this.getAllAddressesP();
@@ -515,11 +515,11 @@ export abstract class WalletProvider {
             res[assetId] = asset;
         }
 
-        // If there are no AVAX UTXOs create a dummy empty balance object
-        let avaxID = activeNetwork.avaxID;
-        if (!res[avaxID]) {
-            let assetInfo = await getAssetDescription(avaxID);
-            res[avaxID] = {
+        // If there are no DJTX UTXOs create a dummy empty balance object
+        let djtxID = activeNetwork.djtxID;
+        if (!res[djtxID]) {
+            let assetInfo = await getAssetDescription(djtxID);
+            res[djtxID] = {
                 locked: new BN(0),
                 unlocked: new BN(0),
                 meta: assetInfo,
@@ -538,13 +538,13 @@ export abstract class WalletProvider {
     }
 
     /**
-     * A helpful method that returns the AVAX balance on X, P, C chains.
-     * Internally calls chain specific getAvaxBalance methods.
+     * A helpful method that returns the DJTX balance on X, P, C chains.
+     * Internally calls chain specific getDjtxBalance methods.
      */
-    public getAvaxBalance(): iAvaxBalance {
-        let X = this.getAvaxBalanceX();
-        let P = this.getAvaxBalanceP();
-        let C = this.getAvaxBalanceC();
+    public getDjtxBalance(): iDjtxBalance {
+        let X = this.getDjtxBalanceX();
+        let P = this.getDjtxBalanceP();
+        let C = this.getDjtxBalanceC();
 
         return {
             X,
@@ -554,32 +554,32 @@ export abstract class WalletProvider {
     }
 
     /**
-     * Returns the X chain AVAX balance of the current wallet state.
+     * Returns the X chain DJTX balance of the current wallet state.
      * - Does not make a network request.
      * - Does not refresh wallet balance.
      */
-    public getAvaxBalanceX(): AssetBalanceRawX {
+    public getDjtxBalanceX(): AssetBalanceRawX {
         if (!activeNetwork) {
             throw new Error('Network not selected.');
         }
         return (
-            this.balanceX[activeNetwork.avaxID] || {
+            this.balanceX[activeNetwork.djtxID] || {
                 unlocked: new BN(0),
                 locked: new BN(0),
             }
         );
     }
 
-    public getAvaxBalanceC(): BN {
+    public getDjtxBalanceC(): BN {
         return this.evmWallet.getBalance();
     }
 
     /**
-     * Returns the P chain AVAX balance of the current wallet state.
+     * Returns the P chain DJTX balance of the current wallet state.
      * - Does not make a network request.
      * - Does not refresh wallet balance.
      */
-    public getAvaxBalanceP(): AssetBalanceP {
+    public getDjtxBalanceP(): AssetBalanceP {
         let unlocked = new BN(0);
         let locked = new BN(0);
         let lockedStakeable = new BN(0);
@@ -619,11 +619,11 @@ export abstract class WalletProvider {
     }
 
     /**
-     * Exports AVAX from P chain to X chain
+     * Exports DJTX from P chain to X chain
      * @remarks
      * The export transaction will cover the Export + Import Fees
      *
-     * @param amt amount of nAVAX to transfer
+     * @param amt amount of nDJTX to transfer
      * @return returns the transaction id.
      */
     async exportPChain(amt: BN) {
@@ -650,11 +650,11 @@ export abstract class WalletProvider {
     }
 
     /**
-     * Exports AVAX from C chain to X chain
+     * Exports DJTX from C chain to X chain
      * @remarks
      * The export transaction will cover the Export + Import Fees
      *
-     * @param amt amount of nAVAX to transfer
+     * @param amt amount of nDJTX to transfer
      * @return returns the transaction id.
      */
     async exportCChain(amt: BN): Promise<string> {
@@ -675,16 +675,16 @@ export abstract class WalletProvider {
 
         await waitTxC(txId);
 
-        await this.updateAvaxBalanceC();
+        await this.updateDjtxBalanceC();
         return txId;
     }
 
     /**
-     * Exports AVAX from X chain to either P or C chain
+     * Exports DJTX from X chain to either P or C chain
      * @remarks
      * The export transaction will cover the Export + Import Fees
      *
-     * @param amt amount of nAVAX to transfer
+     * @param amt amount of nDJTX to transfer
      * @param destinationChain Which chain to export to.
      * @return returns the transaction id.
      */
@@ -837,7 +837,7 @@ export abstract class WalletProvider {
 
         await waitTxC(id);
 
-        await this.updateAvaxBalanceC();
+        await this.updateDjtxBalanceC();
 
         return id;
     }
@@ -890,7 +890,7 @@ export abstract class WalletProvider {
      * Adds a validator to the network using the given node id.
      *
      * @param nodeID The node id you are adding as a validator
-     * @param amt Amount of AVAX to stake in nAVAX
+     * @param amt Amount of DJTX to stake in nDJTX
      * @param start Validation period start date
      * @param end Validation period end date
      * @param delegationFee Minimum 2%
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/constants.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/constants.ts
index 503f2b4..8685f96 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/constants.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/constants.ts
@@ -2,8 +2,8 @@
 // Accounts are not used and the account index is fixed to 0
 // m / purpose' / coin_type' / account' / change / address_index
 
-export const AVAX_TOKEN_INDEX: string = '9000';
-export const AVAX_ACCOUNT_PATH: string = `m/44'/${AVAX_TOKEN_INDEX}'/0'`; // Change and index left out
+export const DJTX_TOKEN_INDEX: string = '9000';
+export const DJTX_ACCOUNT_PATH: string = `m/44'/${DJTX_TOKEN_INDEX}'/0'`; // Change and index left out
 export const ETH_ACCOUNT_PATH: string = `m/44'/60'/0'`;
 export const LEDGER_ETH_ACCOUNT_PATH = ETH_ACCOUNT_PATH + '/0/0';
 
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/types.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/types.ts
index 74a64d1..7d95446 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/types.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/Wallet/types.ts
@@ -40,7 +40,7 @@ export interface WalletCollectiblesXGroup {
     id: number;
 }
 
-export interface iAvaxBalance {
+export interface iDjtxBalance {
     X: AssetBalanceRawX;
     P: AssetBalanceP;
     C: BN;
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/helpers/UniversalNode.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/helpers/UniversalNode.ts
index 7f924ba..dd3c83e 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/helpers/UniversalNode.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/helpers/UniversalNode.ts
@@ -95,7 +95,7 @@ export class UniversalNode {
      * Assumes there is enough balance on node tree
      * Returns empty array even if transaction not possible!
      * What steps to take to have the target balance on this node.
-     * @param target Amount of nAVAX needed on this node.
+     * @param target Amount of nDJTX needed on this node.
      */
     getStepsForTargetBalance(target: BN): UniversalTx[] {
         // If the node has enough balance no transaction needed
@@ -154,7 +154,7 @@ export class UniversalNode {
 
             // If we still have remaining balance, we can not complete this transfer
             if (remaining.gt(new BN(0))) {
-                throw new Error('Insufficient AVAX balances.');
+                throw new Error('Insufficient DJTX balances.');
             }
 
             return transactions;
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/helpers/tx_helper.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/helpers/tx_helper.ts
index 112f753..55db6f8 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/helpers/tx_helper.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/helpers/tx_helper.ts
@@ -137,14 +137,14 @@ export async function buildEvmExportTransaction(
     let destinationChainId = xChain.getBlockchainID();
 
     const nonce = await web3.eth.getTransactionCount(fromAddresses[0]);
-    const avaxAssetIDBuf: Buffer = await xChain.getAVAXAssetID();
-    const avaxAssetIDStr: string = bintools.cb58Encode(avaxAssetIDBuf);
+    const djtxAssetIDBuf: Buffer = await xChain.getDJTXAssetID();
+    const djtxAssetIDStr: string = bintools.cb58Encode(djtxAssetIDBuf);
 
     let fromAddressHex = fromAddresses[0];
 
     return await cChain.buildExportTx(
         amount,
-        avaxAssetIDStr,
+        djtxAssetIDStr,
         destinationChainId,
         fromAddressHex,
         fromAddressBech,
@@ -278,12 +278,12 @@ export async function estimateErc20Gas(tokenContract: string, from: string, to:
 }
 
 /**
- * Estimates the gas needed to send AVAX
+ * Estimates the gas needed to send DJTX
  * @param to Destination address
- * @param amount Amount of AVAX to send, given in WEI
+ * @param amount Amount of DJTX to send, given in WEI
  * @param gasPrice Given in WEI
  */
-export async function estimateAvaxGas(from: string, to: string, amount: BN, gasPrice: BN): Promise<number> {
+export async function estimateDjtxGas(from: string, to: string, amount: BN, gasPrice: BN): Promise<number> {
     try {
         return await web3.eth.estimateGas({
             from,
@@ -292,7 +292,7 @@ export async function estimateAvaxGas(from: string, to: string, amount: BN, gasP
             value: `0x${amount.toString('hex')}`,
         });
     } catch (e) {
-        // TODO: Throws an error if we do not have enough avax balance
+        // TODO: Throws an error if we do not have enough djtx balance
         //TODO: Is it ok to return 21000
         return 21000;
     }
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/helpers/universal_tx_helper.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/helpers/universal_tx_helper.ts
index 2c177ca..0341cb1 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/helpers/universal_tx_helper.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/helpers/universal_tx_helper.ts
@@ -75,7 +75,7 @@ export function getStepsForBalanceP(balX: BN, balP: BN, balC: BN, targetAmount:
     let startNode = createGraphForP(balX, balP, balC);
 
     if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {
-        throw new Error('Insufficient AVAX.');
+        throw new Error('Insufficient DJTX.');
     }
 
     return startNode.getStepsForTargetBalance(targetAmount);
@@ -85,7 +85,7 @@ export function getStepsForBalanceC(balX: BN, balP: BN, balC: BN, targetAmount:
     let startNode = createGraphForC(balX, balP, balC);
 
     if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {
-        throw new Error('Insufficient AVAX.');
+        throw new Error('Insufficient DJTX.');
     }
 
     return startNode.getStepsForTargetBalance(targetAmount);
@@ -95,7 +95,7 @@ export function getStepsForBalanceX(balX: BN, balP: BN, balC: BN, targetAmount:
     let startNode = createGraphForX(balX, balP, balC);
 
     if (startNode.reduceTotalBalanceFromParents().lt(targetAmount)) {
-        throw new Error('Insufficient AVAX.');
+        throw new Error('Insufficient DJTX.');
     }
 
     return startNode.getStepsForTargetBalance(targetAmount);
diff --git a/node_modules/@avalabs/avalanche-wallet-sdk/src/utils/utils.ts b/node_modules/@avalabs/avalanche-wallet-sdk/src/utils/utils.ts
index 75b2f0b..e99352f 100644
--- a/node_modules/@avalabs/avalanche-wallet-sdk/src/utils/utils.ts
+++ b/node_modules/@avalabs/avalanche-wallet-sdk/src/utils/utils.ts
@@ -54,32 +54,32 @@ export function bnToBig(val: BN, denomination = 0): Big {
 
 /**
  * Converts a BN amount of 18 decimals to 9.
- * Used for AVAX C <-> X,P conversions
+ * Used for DJTX C <-> X,P conversions
  * @param amount
  */
-export function avaxCtoX(amount: BN) {
+export function djtxCtoX(amount: BN) {
     let tens = new BN(10).pow(new BN(9));
     return amount.div(tens);
 }
 
-export function avaxXtoC(amount: BN) {
+export function djtxXtoC(amount: BN) {
     let tens = new BN(10).pow(new BN(9));
     return amount.mul(tens);
 }
 
-export function avaxPtoC(amount: BN) {
-    return avaxXtoC(amount);
+export function djtxPtoC(amount: BN) {
+    return djtxXtoC(amount);
 }
 
-export function bnToBigAvaxX(val: BN): Big {
+export function bnToBigDjtxX(val: BN): Big {
     return bnToBig(val, 9);
 }
 
-export function bnToBigAvaxP(val: BN): Big {
-    return bnToBigAvaxX(val);
+export function bnToBigDjtxP(val: BN): Big {
+    return bnToBigDjtxX(val);
 }
 
-export function bnToBigAvaxC(val: BN): Big {
+export function bnToBigDjtxC(val: BN): Big {
     return bnToBig(val, 18);
 }
 
@@ -90,31 +90,31 @@ export function bnToBigAvaxC(val: BN): Big {
  *
  * @example
  * ```
- * bnToAvaxC(new BN('22500000000000000000')
+ * bnToDjtxC(new BN('22500000000000000000')
  * // will return  22.5
  *```
  *
  */
-export function bnToAvaxC(val: BN): string {
+export function bnToDjtxC(val: BN): string {
     return bnToLocaleString(val, 18);
 }
 
 /**
  * Parses the value using a denomination of 9
  *
- * @param val the amount to parse given in nAVAX
+ * @param val the amount to parse given in nDJTX
  */
-export function bnToAvaxX(val: BN): string {
+export function bnToDjtxX(val: BN): string {
     return bnToLocaleString(val, 9);
 }
 
 /**
  * Parses the value using a denomination of 9
  *
- * @param val the amount to parse given in nAVAX
+ * @param val the amount to parse given in nDJTX
  */
-export function bnToAvaxP(val: BN): string {
-    return bnToAvaxX(val);
+export function bnToDjtxP(val: BN): string {
+    return bnToDjtxX(val);
 }
 
 /**
@@ -129,15 +129,15 @@ export function numberToBN(val: number | string, decimals: number): BN {
     return valBN;
 }
 
-export function numberToBNAvaxX(val: number | string) {
+export function numberToBNDjtxX(val: number | string) {
     return numberToBN(val, 9);
 }
 
-export function numberToBNAvaxP(val: number | string) {
-    return numberToBNAvaxX(val);
+export function numberToBNDjtxP(val: number | string) {
+    return numberToBNDjtxX(val);
 }
 
-export function numberToBNAvaxC(val: number | string) {
+export function numberToBNDjtxC(val: number | string) {
     return numberToBN(val, 18);
 }
 
@@ -185,14 +185,14 @@ export function bigToLocaleString(bigVal: Big, decimals: number = 9): string {
 const COINGECKO_URL = 'https://api.coingecko.com/api/v3/simple/price?ids=avalanche-2&vs_currencies=usd';
 
 /**
- * Fetches the current AVAX price using Coin Gecko.
+ * Fetches the current DJTX price using Coin Gecko.
  * @remarks
  * You might get rate limited if you use this function frequently.
  *
  * @return
- * Current USD price of 1 AVAX
+ * Current USD price of 1 DJTX
  */
-export async function getAvaxPrice(): Promise<number> {
+export async function getDjtxPrice(): Promise<number> {
     const res = await axios.get(COINGECKO_URL);
     return res.data['avalanche-2'].usd;
 }
