{"version":3,"sources":["webpack:///./node_modules/avalanche/dist/apis/socket/socket.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/validationtx.js","webpack:///./node_modules/avalanche/dist/common/jrpcapi.js","webpack:///./node_modules/avalanche/dist/apis/info/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/outputs.js","webpack:///./node_modules/avalanche/dist/common/output.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/utxos.js","webpack:///./node_modules/avalanche/dist/common/nbytes.js","webpack:///./node_modules/avalanche/dist/apis/index/index.js","webpack:///./node_modules/avalanche/dist/common/secp256k1.js","webpack:///./node_modules/avalanche/dist/avalanche.js","webpack:///./node_modules/avalanche/dist/apis/health/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/createsubnettx.js","webpack:///./node_modules/avalanche/dist/common/apibase.js","webpack:///./node_modules/avalanche/dist/common/keychain.js","webpack:///./node_modules/avalanche/dist/apis/info/index.js","webpack:///./node_modules/avalanche/dist/common/input.js","webpack:///./node_modules/avalanche/dist/common/assetamount.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/keychain.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/importtx.js","webpack:///./node_modules/avalanche/dist/common/index.js","webpack:///./node_modules/avalanche/dist/apis/health/index.js","webpack:///./node_modules/avalanche/dist/common/utxos.js","webpack:///./node_modules/avalanche/dist/apis/keystore/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/index.js","webpack:///./node_modules/avalanche/dist/common/interfaces.js","webpack:///./node_modules/avalanche/dist/apis/metrics/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/api.js","webpack:///./node_modules/avalanche/dist/common/evmtx.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/metrics/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/tx.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/constants.js","webpack:///./node_modules/avalanche/dist/common/tx.js","webpack:///./node_modules/avalanche/dist/common/credentials.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/credentials.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/basetx.js","webpack:///./node_modules/avalanche/dist/common/restapi.js","webpack:///./node_modules/avalanche/dist/apis/index/api.js","webpack:///./node_modules/avalanche/dist/apis/keystore/api.js"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","Socket","isomorphic_ws_1","utils_1","default","url","MainnetAPI","options","super","data","cb","send","mcode","close","AddValidatorTx","AddDelegatorTx","WeightedValidatorTx","ValidatorTx","bn_js_1","bintools_1","basetx_1","outputs_1","buffer_1","constants_1","constants_2","helperfunctions_1","outputs_2","serialization_1","errors_1","bintools","getInstance","serialization","Serialization","BaseTx","networkID","blockchainID","outs","ins","memo","nodeID","startTime","endTime","_typeName","_typeID","undefined","Buffer","alloc","fromBNToBuffer","encoding","fields","serialize","assign","encoder","deserialize","decoder","bufferToNodeIDString","fromBufferToBN","bytes","offset","fromBuffer","copyFrom","superbuff","toBuffer","bsize","length","concat","DefaultNetworkID","weight","stakeAmount","stakeOuts","rewardOwners","PlatformVMConstants","ADDDELEGATORTX","getTxType","map","s","xferout","TransferableOutput","ParseableOutput","getWeight","val","i","add","getOutput","getAmount","getOuts","getStakeOuts","numstakeouts","outcount","readUInt32BE","push","numouts","writeUInt32BE","barr","sort","comparator","out","ro","newbase","args","delegationFee","ADDVALIDATORTX","DelegationFeeError","parseFloat","toFixed","getDelegationFeeBuffer","dbuff","delegatorMultiplier","dBuff","buffnum","superBuff","feeBuff","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","JRPCAPI","apibase_1","APIBase","core","baseurl","jrpcVersion","rpcid","callMethod","method","params","headers","ep","rpc","id","jsonrpc","headrs","baseURL","getProtocol","getHost","port","getPort","axConf","responseType","resp","post","JSON","stringify","status","parse","Error","error","message","getRPCID","InfoAPI","jrpcapi_1","getBlockchainID","alias","response","getNetworkID","getNetworkName","networkName","getNodeID","getNodeVersion","version","getTxFee","txFee","creationTxFee","isBootstrapped","chain","peers","nodeIDs","SECPOwnerOutput","StakeableLockOut","SECPTransferOutput","AmountOutput","SelectOutputClass","output_1","outputid","SECPXFEROUTPUTID","SECPOWNEROUTPUTID","STAKEABLELOCKOUTID","OutputIdError","StandardTransferableOutput","arguments","output","assetID","ASSETIDLEN","StandardParseableOutput","StandardAmountOutput","newout","create","amount","addresses","locktime","threshold","stakeableLocktime","transferableOutput","synchronize","outobj","getAddresses","a","addr","Address","numaddrs","getLocktime","getThreshold","amountValue","outbuff","xferoutBuff","Output","BaseNFTOutput","OutputOwners","nbytes_1","NBytes","cb58Encode","addrbuff","b58ToBuffer","validateChecksum","newbuff","ChecksumError","AddressError","getSize","b","compare","Serializable","getAddressIdx","address","toString","getAddress","idx","AddressIndexError","meetsThreshold","asOf","now","UnixNow","qualified","getSpenders","lte","j","addrs","bufferToB58","aoutid","getOutputID","abuff","boutid","bbuff","asort","bsort","outid","sorta","sortb","getAssetID","parseableBuff","clone","groupID","getGroupID","UTXOSet","AssetAmountDestination","UTXO","inputs_1","utxos_1","tx_1","exporttx_1","importtx_1","assetamount_1","validationtx_1","createsubnettx_1","StandardUTXO","codecID","txid","outputidx","serialized","cb58Decode","utxo","LATESTCODEC","StandardAssetAmountDestination","StandardUTXOSet","getConsumableUXTO","stakeable","getAllUTXOs","filter","stakeableOutput","getStakeableLocktime","lt","getMinimumSpendable","aad","utxoArray","tmpUTXOArray","forEach","getTypeID","stakeableLockOut1","stakeableLockOut2","toNumber","index","assetKey","fromAddresses","getSenders","assetExists","assetAmount","getAssetAmount","isFinished","lockedStakeable","unlocked","amountOutput","input","SECPTransferInput","locked","gt","StakeableLockIn","ParseableInput","spendAmount","spenders","spender","addSignatureIdx","txID","getTxID","outputIdx","getOutputIdx","transferInput","TransferableInput","addInput","canComplete","InsufficientFundsError","zero","assetAmounts","getAmounts","change","getChange","isStakeableLockChange","getStakeableLockChange","lockedChange","getAssetIDString","lockedOutputs","lockedOutput","parseableOutput","getTransferableOutput","outputAmountRemaining","sub","newChangeOutput","newLockedChangeOutput","transferOutput","addChange","newOutput","newLockedOutput","addOutput","unlockedChange","getChangeAddresses","totalAmountSpent","getSpent","stakeableLockedAmount","getStakeableLockSpent","totalUnlockedSpent","amountBurnt","getBurn","totalUnlockedAvailable","unlockedAmount","getDestinations","buildBaseTx","toAddresses","changeAddresses","fee","feeAssetID","ThresholdError","eq","addAssetAmount","_feeCheck","minSpendableErr","getInputs","getAllOutputs","baseTx","UnsignedTx","buildImportTx","atomics","sourceChain","importIns","feepaid","feeAssetStr","amt","infeeamount","assetStr","gte","xferin","from","getInput","spendout","feeRemaining","importTx","ImportTx","buildExportTx","djtxAssetID","destinationChain","exportouts","FeeAssetError","Defaults","network","X","getChangeOutputs","getOutputs","exportTx","ExportTx","buildAddDelegatorTx","rewardLocktime","rewardThreshold","rewardAddresses","TimeError","rewardOutputOwners","UTx","buildAddValidatorTx","buildCreateSubnetTx","subnetOwnerAddresses","subnetOwnerThreshold","CreateSubnetTx","utxos","utxoid","utxoidCleaned","addressUTXOs","addressCleaned","utxobalance","utxovar","UTXOError","newset","allUTXOs","addArray","b58str","emsg","buff","BufferSizeError","__createBinding","o","m","k","k2","enumerable","get","__exportStar","p","hasOwnProperty","__setModuleDefault","v","__importStar","call","SECP256k1KeyChain","SECP256k1KeyPair","elliptic","create_hash_1","keychain_1","EC","ec","ecparams","curve","BN","n","constructor","StandardKeyPair","_sigFromSigBuffer","sig","r","recoveryParam","readUIntBE","sigOpt","generateKey","keypair","genKeyPair","privk","getPrivate","padStart","pubk","getPublic","importKey","keyFromPrivate","addressFromPublicKey","keyFromPublic","sha256","update","digest","ripesha","PublicKeyError","getPrivateKeyString","getPublicKeyString","sign","msg","sigObj","canonical","recovery","writeUInt8","toArray","verify","recover","recoverPubKey","encodeCompressed","StandardKeyChain","newKey","addKey","axios_1","AvalancheCore","host","protocol","hrp","auth","requestConfig","apis","setAddress","getIP","getURL","getHeaders","getRequestConfig","setNetworkID","netid","getPreferredHRP","getHRP","setHRP","setHeader","key","removeHeader","removeAllHeaders","prop","prototype","setRequestConfig","removeRequestConfig","removeAllRequestConfigs","setAuthToken","_setHeaders","entries","addAPI","apiName","ConstructorFN","api","_request","xhrmethod","getdata","postdata","axiosConfig","config","ip","request","xhrdata","RequestResponseData","statusText","delete","put","patch","HealthAPI","getLiveness","subnetOwners","CREATESUBNETTX","SubnetOwnerError","typeID","db_1","setBaseURL","db","backup","getAll","clearAll","getNamespace","setAll","getBaseURL","getDB","getPrivateKey","getPublicKey","keys","values","kp","getAddressStrings","getAddressString","removeKey","kaddr","hasKey","getKey","StandardAmountInput","StandardTransferableInput","StandardParseableInput","Input","credentials_1","sigCount","sigIdxs","getSigIdxs","addressIdx","sigidx","SigIdx","setSource","sidx","sigbuff","getInputID","inbuff","inid","getUTXOID","AssetAmount","burn","spent","stakeableLockSpent","stakeableLockChange","finished","stakeableLocked","total","destinations","senders","amounts","amountkey","inputs","outputs","aa","assetHexStr","KeyChain","KeyPair","secp256k1_1","chainid","type","bufferToType","getChainID","setChainID","newkp","makeKey","pk","split","newkc","kc","AmountInput","SelectInputClass","input_1","inputid","SECPINPUTID","STAKEABLELOCKINID","InputIdError","getCredentialID","SECPCREDENTIAL","transferableInput","xferinBuff","credentials_2","IMPORTTX","numIns","Array","isArray","TransferableInputError","ii","anIn","ChainIdError","sigs","cred","SelectCredentialClass","sigidxs","getSource","signval","Signature","addSignature","getCodecID","readUInt8","getCodecIDBuffer","outputidbuffer","includes","utxoX","parseUTXO","console","log","remove","removeArray","removed","getUTXO","utxoids","results","getAllUTXOStrings","u","getUTXOIDs","spendable","indexOf","getBalance","asset","spend","getAssetIDs","Set","merge","utxoset","hasUTXOIDs","utxos1","utxos2","process","intersection","us1","us2","difference","symDifference","union","mergeByRule","mergeRule","uSet","MergeRuleError","overwrite","added","lambda","MetricsAPI","restapi_1","RESTAPI","getMetrics","PlatformVMAPI","payload_1","keychain","PlatformChainID","blockchainAlias","DJTXAssetID","minValidatorStake","minDelegatorStake","getBlockchainAlias","setBlockchainAlias","refreshBlockchainID","parseAddress","ADDRESSLENGTH","addressFromBuffer","getDJTXAssetID","refresh","getStakingAssetID","setDJTXAssetID","getDefaultTxFee","setTxFee","getDefaultCreationTxFee","getCreationTxFee","setCreationTxFee","keyChain","newKeyChain","checkGooseEgg","utx","outTotal","outputTotal","getOutputTotal","ONEDJTX","mul","createBlockchain","username","password","subnetID","vmID","fxIDs","name","genesis","genesisData","getBlockchainStatus","createAddress","listAddresses","getCurrentValidators","getPendingValidators","sampleValidators","sampleSize","size","validators","addValidator","rewardAddress","delegationFeeRate","getTime","addSubnetValidator","addDelegator","createSubnet","controlKeys","validatedBy","validates","blockchainIDs","getBlockchains","blockchains","exportDJTX","to","importDJTX","issueTx","tx","Transaction","txobj","Tx","TransactionError","getCurrentSupply","supply","getHeight","height","getMinStake","setMinStake","getStake","staked","stakedOutputs","stakedOutput","buf","replace","getSubnets","ids","subnets","exportKey","privateKey","getTx","getTxStatus","includeReason","getUTXOs","limit","startIndex","persistOpts","has","getName","selfArray","self","getMergeRule","set","getOverwrite","numFetched","parseInt","ownerAddresses","_cleanAddressArray","stringToAddress","srcChain","atomicUTXOs","PayloadBase","getPayload","builtUnsignedTx","GooseEggCheckError","prefixes","rewards","minStake","StakeError","NodeIDStringToBuffer","owners","getRewardUTXOs","caller","bech32","EVMStandardTx","EVMStandardUnsignedTx","EVMStandardBaseTx","serializer","transaction","codecBuf","writeUInt16BE","getInputTotal","aIDHex","txtype","basebuff","unsignedTx","credentials","getUnsignedTx","c","txbuff","credlen","credential","credid","credbuff","exportOuts","EXPORTTX","numOuts","TransferableOutputError","eo","getExportOutputs","anOut","SelectTxClass","BASETX","StandardUnsignedTx","readUInt16BE","StandardTx","numcreds","SECPFXID","SUBNETAUTHID","LOCKEDSTAKEABLES","ADDSUBNETVALIDATORTX","CREATECHAINTX","ADVANCETIMETX","REWARDVALIDATORTX","BLOCKCHAINIDLEN","SYMBOLMAXLEN","ASSETNAMELEN","StandardBaseTx","cb58","hex","decimalString","buffer","numins","getMemo","memolen","getTransaction","getIns","getTotalOuts","getCredentials","setCodecID","credID","Credential","source","sigarray","sigArray","siglen","writeInt32BE","SECPCredential","CredIdError","newbasetx","tx_2","newOut","newIn","incount","contentType","acceptType","prepHeaders","getContentType","getAcceptType","IndexAPI","getLastAccepted","getContainerByIndex","getContainerByID","containerID","getContainerRange","numToFetch","getIndex","isAccepted","KeystoreAPI","createUser","success","exportUser","user","importUser","listUsers","users","deleteUser"],"mappings":"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","file":"js/chunk-vendors~89a8b29a.a92b6ec3.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = void 0;\nconst isomorphic_ws_1 = __importDefault(require(\"isomorphic-ws\"));\nconst utils_1 = require(\"../../utils\");\nclass Socket extends isomorphic_ws_1.default {\n    /**\n     * Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.\n     *\n     * @param url Defaults to [[MainnetAPI]]\n     * @param options Optional\n     */\n    constructor(url = `wss://${utils_1.MainnetAPI}:443/ext/bc/X/events`, options) {\n        super(url, options);\n    }\n    /**\n     * Send a message to the server\n     *\n     * @param data\n     * @param cb Optional\n     */\n    send(data, cb) {\n        super.send(data, cb);\n    }\n    /**\n     * Terminates the connection completely\n     *\n     * @param mcode Optional\n     * @param data Optional\n     */\n    close(mcode, data) {\n        super.close(mcode, data);\n    }\n}\nexports.Socket = Socket;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvc29ja2V0L3NvY2tldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxrRUFBcUM7QUFDckMsdUNBQXdDO0FBQ3hDLE1BQWEsTUFBTyxTQUFRLHVCQUFTO0lBOEJuQzs7Ozs7T0FLRztJQUNILFlBQ0UsTUFBa0MsU0FBUyxrQkFBVSxzQkFBc0IsRUFDM0UsT0FBcUQ7UUFDckQsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUNyQixDQUFDO0lBOUJEOzs7OztPQUtHO0lBQ0gsSUFBSSxDQUFDLElBQVMsRUFBRSxFQUFRO1FBQ3RCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3RCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxLQUFjLEVBQUUsSUFBYTtRQUNqQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUMxQixDQUFDO0NBYUY7QUF6Q0Qsd0JBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLVNvY2tldFxuICovXG5pbXBvcnQgeyBDbGllbnRSZXF1ZXN0QXJncyB9IGZyb20gXCJodHRwXCJcbmltcG9ydCBXZWJTb2NrZXQgZnJvbSBcImlzb21vcnBoaWMtd3NcIlxuaW1wb3J0IHsgTWFpbm5ldEFQSSB9IGZyb20gXCIuLi8uLi91dGlsc1wiXG5leHBvcnQgY2xhc3MgU29ja2V0IGV4dGVuZHMgV2ViU29ja2V0IHtcbiAgLy8gRmlyZXMgb25jZSB0aGUgY29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZCBiZXR3ZWVuIHRoZSBjbGllbnQgYW5kIHRoZSBzZXJ2ZXJcbiAgb25vcGVuOiBhbnlcbiAgLy8gRmlyZXMgd2hlbiB0aGUgc2VydmVyIHNlbmRzIHNvbWUgZGF0YVxuICBvbm1lc3NhZ2U6IGFueVxuICAvLyBGaXJlcyBhZnRlciBlbmQgb2YgdGhlIGNvbW11bmljYXRpb24gYmV0d2VlbiBzZXJ2ZXIgYW5kIHRoZSBjbGllbnRcbiAgb25jbG9zZTogYW55XG4gIC8vIEZpcmVzIGZvciBzb21lIG1pc3Rha2UsIHdoaWNoIGhhcHBlbnMgZHVyaW5nIHRoZSBjb21tdW5pY2F0aW9uXG4gIG9uZXJyb3I6IGFueVxuXG4gIC8qKlxuICAgKiBTZW5kIGEgbWVzc2FnZSB0byB0aGUgc2VydmVyXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIFxuICAgKiBAcGFyYW0gY2IgT3B0aW9uYWxcbiAgICovXG4gIHNlbmQoZGF0YTogYW55LCBjYj86IGFueSk6IHZvaWQge1xuICAgIHN1cGVyLnNlbmQoZGF0YSwgY2IpXG4gIH1cblxuICAvKipcbiAgICogVGVybWluYXRlcyB0aGUgY29ubmVjdGlvbiBjb21wbGV0ZWx5XG4gICAqXG4gICAqIEBwYXJhbSBtY29kZSBPcHRpb25hbCBcbiAgICogQHBhcmFtIGRhdGEgT3B0aW9uYWxcbiAgICovXG4gIGNsb3NlKG1jb2RlPzogbnVtYmVyLCBkYXRhPzogc3RyaW5nKTogdm9pZCB7XG4gICAgc3VwZXIuY2xvc2UobWNvZGUsIGRhdGEpXG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgdGhlIEFQSSBmb3IgY3JlYXRpbmcgYW5kIG1hbmFnaW5nIGEgV2ViU29ja2V0IGNvbm5lY3Rpb24gdG8gYSBzZXJ2ZXIsIGFzIHdlbGwgYXMgZm9yIHNlbmRpbmcgYW5kIHJlY2VpdmluZyBkYXRhIG9uIHRoZSBjb25uZWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gdXJsIERlZmF1bHRzIHRvIFtbTWFpbm5ldEFQSV1dXG4gICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICB1cmw6IHN0cmluZyB8IGltcG9ydChcInVybFwiKS5VUkwgPSBgd3NzOi8vJHtNYWlubmV0QVBJfTo0NDMvZXh0L2JjL1gvZXZlbnRzYCxcbiAgICBvcHRpb25zPzogV2ViU29ja2V0LkNsaWVudE9wdGlvbnMgfCBDbGllbnRSZXF1ZXN0QXJncykge1xuICAgIHN1cGVyKHVybCwgb3B0aW9ucylcbiAgfVxufVxuIl19","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ValidationTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddValidatorTx = exports.AddDelegatorTx = exports.WeightedValidatorTx = exports.ValidatorTx = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst basetx_1 = require(\"./basetx\");\nconst outputs_1 = require(\"../platformvm/outputs\");\nconst buffer_1 = require(\"buffer/\");\nconst constants_1 = require(\"./constants\");\nconst constants_2 = require(\"../../utils/constants\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst outputs_2 = require(\"./outputs\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Abstract class representing an transactions with validation information.\n */\nclass ValidatorTx extends basetx_1.BaseTx {\n    constructor(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ValidatorTx\";\n        this._typeID = undefined;\n        this.nodeID = buffer_1.Buffer.alloc(20);\n        this.startTime = buffer_1.Buffer.alloc(8);\n        this.endTime = buffer_1.Buffer.alloc(8);\n        this.nodeID = nodeID;\n        this.startTime = bintools.fromBNToBuffer(startTime, 8);\n        this.endTime = bintools.fromBNToBuffer(endTime, 8);\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"nodeID\": serialization.encoder(this.nodeID, encoding, \"Buffer\", \"nodeID\"), \"startTime\": serialization.encoder(this.startTime, encoding, \"Buffer\", \"decimalString\"), \"endTime\": serialization.encoder(this.endTime, encoding, \"Buffer\", \"decimalString\") });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.nodeID = serialization.decoder(fields[\"nodeID\"], encoding, \"nodeID\", \"Buffer\", 20);\n        this.startTime = serialization.decoder(fields[\"startTime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.endTime = serialization.decoder(fields[\"endTime\"], encoding, \"decimalString\", \"Buffer\", 8);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getNodeID() {\n        return this.nodeID;\n    }\n    /**\n     * Returns a string for the nodeID amount.\n     */\n    getNodeIDString() {\n        return helperfunctions_1.bufferToNodeIDString(this.nodeID);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getStartTime() {\n        return bintools.fromBufferToBN(this.startTime);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getEndTime() {\n        return bintools.fromBufferToBN(this.endTime);\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.nodeID = bintools.copyFrom(bytes, offset, offset + 20);\n        offset += 20;\n        this.startTime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.endTime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ValidatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = superbuff.length + this.nodeID.length + this.startTime.length + this.endTime.length;\n        return buffer_1.Buffer.concat([\n            superbuff,\n            this.nodeID,\n            this.startTime,\n            this.endTime\n        ], bsize);\n    }\n}\nexports.ValidatorTx = ValidatorTx;\nclass WeightedValidatorTx extends ValidatorTx {\n    /**\n     * Class representing an unsigned AddSubnetValidatorTx transaction.\n     *\n     * @param networkID Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainID Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n     * @param weight Optional. The amount of nDJTX the validator is staking.\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, weight = undefined) {\n        super(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime);\n        this._typeName = \"WeightedValidatorTx\";\n        this._typeID = undefined;\n        this.weight = buffer_1.Buffer.alloc(8);\n        if (typeof weight !== undefined) {\n            this.weight = bintools.fromBNToBuffer(weight, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"weight\": serialization.encoder(this.weight, encoding, \"Buffer\", \"decimalString\") });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.weight = serialization.decoder(fields[\"weight\"], encoding, \"decimalString\", \"Buffer\", 8);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getWeight() {\n        return bintools.fromBufferToBN(this.weight);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getWeightBuffer() {\n        return this.weight;\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.weight = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[AddSubnetValidatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        return buffer_1.Buffer.concat([superbuff, this.weight]);\n    }\n}\nexports.WeightedValidatorTx = WeightedValidatorTx;\n/* Must implement later, the signing process isn't friendly to AvalancheJS\n\nexport class AddSubnetValidatorTx extends WeightedValidatorTx {\n    protected subnetID:Buffer = Buffer.alloc(32);\n    protected subnetAddrs:Buffer[] = [];\n    protected subnetAuthIdxs:Buffer[] = [];\n\n\n    getTxType = ():number => {\n        return PlatformVMConstants.ADDSUBNETVALIDATORTX;\n    }\n\n\n    getSubnetID = ():Buffer => {\n        return this.subnetID;\n    }\n\n\n    getSubnetIDString = ():string => {\n        return bintools.cb58Encode(this.subnetID);\n    }\n\n\n    getSubnetAuthAddresses = ():Buffer[] => {\n        return this.subnetAddrs;\n    }\n\n\n    setSubnetAuthAddresses = (addrs:Buffer[]):void => {\n        this.subnetAddrs = addrs;\n    }\n\n    calcSubnetAuthIdxs = (addrs:Buffer[]):Buffer[] => {\n        let idxs:Buffer[] = [];\n        addrs = addrs.sort();\n        for(let i: number = 0; i < addrs.length; i++){\n            let idx:Buffer = Buffer.alloc(4);\n            idx.writeUInt32BE(i,0);\n            idxs.push(idx);\n        }\n    }\n\n\n    getSubnetAuthIdxs = ():Buffer[] => {\n        return this.subnetAddrs;\n    }\n\n    fromBuffer(bytes:Buffer, offset:number = 0):number {\n        offset = super.fromBuffer(bytes, offset);\n        this.subnetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        let sublenbuff:Buffer = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        let sublen:number = sublenbuff.readUInt32BE(0);\n        for(let i: number = 0; i < sublen; i++){\n\n        }\n        offset = this.subnetAuth.fromBuffer(bytes, offset);\n        return offset;\n    }\n\n\n    toBuffer():Buffer {\n        const superbuff:Buffer = super.toBuffer();\n\n        return Buffer.concat([superbuff, this.subnetID, subAuth], superbuff.length + this.subnetID.length + subAuth.length);\n    }\n\n\n    sign(msg:Buffer, kc:KeyChain):Credential[] {\n        let creds:SECPCredential[] = super.sign(msg, kc);\n        const cred:SECPCredential = SelectCredentialClass(PlatformVMConstants.SECPCREDENTIAL) as SECPCredential;\n        for(let i: number = 0; i  < this.subnetAuth.length ; i++) {\n            if(!kc.hasKey(this.subnetAuth[i])) {\n                throw new Error(\"AddSubnetValidatorTx.sign -- specified address in subnetAuth not existent in provided keychain.\");\n            }\n            \n            let kp:KeyPair = kc.getKey(this.subnetAuth[i]);\n            const signval:Buffer = kp.sign(msg);\n            const sig:Signature = new Signature();\n            sig.fromBuffer(signval);\n            cred.addSignature(sig);\n        }\n        creds.push(cred);\n        return creds;\n    }\n\n\n    constructor(\n        networkID:number = DefaultNetworkID,\n        blockchainID:Buffer = Buffer.alloc(32, 16),\n        outs:TransferableOutput[] = undefined,\n        ins:TransferableInput[] = undefined,\n        memo:Buffer = undefined,\n        nodeID:Buffer = undefined,\n        startTime:BN = undefined,\n        endTime:BN = undefined,\n        weight:BN = undefined,\n        subnetID:Buffer = undefined,\n        subnetAuth:Buffer[] = undefined\n    ) {\n        super(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, weight);\n        if(typeof subnetID !== undefined){\n            this.subnetID = subnetID;\n        }\n        if(typeof subnetAuth !== undefined) {\n            this.subnetAuth = subnetAuth;\n        }\n    }\n\n}\n*/\n/**\n * Class representing an unsigned AddDelegatorTx transaction.\n */\nclass AddDelegatorTx extends WeightedValidatorTx {\n    /**\n     * Class representing an unsigned AddDelegatorTx transaction.\n     *\n     * @param networkID Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainID Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n     * @param stakeAmount Optional. The amount of nDJTX the validator is staking.\n     * @param stakeOuts Optional. The outputs used in paying the stake.\n     * @param rewardOwners Optional. The [[ParseableOutput]] containing a [[SECPOwnerOutput]] for the rewards.\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, stakeAmount = undefined, stakeOuts = undefined, rewardOwners = undefined) {\n        super(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, stakeAmount);\n        this._typeName = \"AddDelegatorTx\";\n        this._typeID = constants_1.PlatformVMConstants.ADDDELEGATORTX;\n        this.stakeOuts = [];\n        this.rewardOwners = undefined;\n        /**\n           * Returns the id of the [[AddDelegatorTx]]\n           */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        if (typeof stakeOuts !== undefined) {\n            this.stakeOuts = stakeOuts;\n        }\n        this.rewardOwners = rewardOwners;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"stakeOuts\": this.stakeOuts.map((s) => s.serialize(encoding)), \"rewardOwners\": this.rewardOwners.serialize(encoding) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.stakeOuts = fields[\"stakeOuts\"].map((s) => {\n            let xferout = new outputs_1.TransferableOutput();\n            xferout.deserialize(s, encoding);\n            return xferout;\n        });\n        this.rewardOwners = new outputs_2.ParseableOutput();\n        this.rewardOwners.deserialize(fields[\"rewardOwners\"], encoding);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getStakeAmount() {\n        return this.getWeight();\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getStakeAmountBuffer() {\n        return this.weight;\n    }\n    /**\n     * Returns the array of outputs being staked.\n     */\n    getStakeOuts() {\n        return this.stakeOuts;\n    }\n    /**\n     * Should match stakeAmount. Used in sanity checking.\n     */\n    getStakeOutsTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.stakeOuts.length; i++) {\n            val = val.add(this.stakeOuts[i].getOutput().getAmount());\n        }\n        return val;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the reward address.\n     */\n    getRewardOwners() {\n        return this.rewardOwners;\n    }\n    getTotalOuts() {\n        return [...this.getOuts(), ...this.getStakeOuts()];\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        const numstakeouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = numstakeouts.readUInt32BE(0);\n        this.stakeOuts = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.stakeOuts.push(xferout);\n        }\n        this.rewardOwners = new outputs_2.ParseableOutput();\n        offset = this.rewardOwners.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[AddDelegatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        let bsize = superbuff.length;\n        const numouts = buffer_1.Buffer.alloc(4);\n        numouts.writeUInt32BE(this.stakeOuts.length, 0);\n        let barr = [super.toBuffer(), numouts];\n        bsize += numouts.length;\n        this.stakeOuts = this.stakeOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.stakeOuts.length; i++) {\n            let out = this.stakeOuts[i].toBuffer();\n            barr.push(out);\n            bsize += out.length;\n        }\n        let ro = this.rewardOwners.toBuffer();\n        barr.push(ro);\n        bsize += ro.length;\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    clone() {\n        let newbase = new AddDelegatorTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new AddDelegatorTx(...args);\n    }\n}\nexports.AddDelegatorTx = AddDelegatorTx;\nclass AddValidatorTx extends AddDelegatorTx {\n    /**\n     * Class representing an unsigned AddValidatorTx transaction.\n     *\n     * @param networkID Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainID Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n     * @param stakeAmount Optional. The amount of nDJTX the validator is staking.\n     * @param stakeOuts Optional. The outputs used in paying the stake.\n     * @param rewardOwners Optional. The [[ParseableOutput]] containing the [[SECPOwnerOutput]] for the rewards.\n     * @param delegationFee Optional. The percent fee this validator charges when others delegate stake to them.\n     * Up to 4 decimal places allowed; additional decimal places are ignored. Must be between 0 and 100, inclusive.\n     * For example, if delegationFeeRate is 1.2345 and someone delegates to this validator, then when the delegation\n     * period is over, 1.2345% of the reward goes to the validator and the rest goes to the delegator.\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, stakeAmount = undefined, stakeOuts = undefined, rewardOwners = undefined, delegationFee = undefined) {\n        super(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, rewardOwners);\n        this._typeName = \"AddValidatorTx\";\n        this._typeID = constants_1.PlatformVMConstants.ADDVALIDATORTX;\n        this.delegationFee = 0;\n        /**\n           * Returns the id of the [[AddValidatorTx]]\n           */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        if (typeof delegationFee === \"number\") {\n            if (delegationFee >= 0 && delegationFee <= 100) {\n                this.delegationFee = parseFloat(delegationFee.toFixed(4));\n            }\n            else {\n                throw new errors_1.DelegationFeeError(\"AddValidatorTx.constructor -- delegationFee must be in the range of 0 and 100, inclusively.\");\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"delegationFee\": serialization.encoder(this.getDelegationFeeBuffer(), encoding, \"Buffer\", \"decimalString\", 4) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let dbuff = serialization.decoder(fields[\"delegationFee\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.delegationFee = dbuff.readUInt32BE(0) / AddValidatorTx.delegatorMultiplier;\n    }\n    /**\n     * Returns the delegation fee (represents a percentage from 0 to 100);\n     */\n    getDelegationFee() {\n        return this.delegationFee;\n    }\n    /**\n     * Returns the binary representation of the delegation fee as a {@link https://github.com/feross/buffer|Buffer}.\n     */\n    getDelegationFeeBuffer() {\n        let dBuff = buffer_1.Buffer.alloc(4);\n        let buffnum = parseFloat(this.delegationFee.toFixed(4)) * AddValidatorTx.delegatorMultiplier;\n        dBuff.writeUInt32BE(buffnum, 0);\n        return dBuff;\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        let dbuff = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.delegationFee = dbuff.readUInt32BE(0) / AddValidatorTx.delegatorMultiplier;\n        return offset;\n    }\n    toBuffer() {\n        let superBuff = super.toBuffer();\n        let feeBuff = this.getDelegationFeeBuffer();\n        return buffer_1.Buffer.concat([superBuff, feeBuff]);\n    }\n}\nexports.AddValidatorTx = AddValidatorTx;\nAddValidatorTx.delegatorMultiplier = 10000;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n* @packageDocumentation\n* @module Common-JRPCAPI\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JRPCAPI = void 0;\nconst apibase_1 = require(\"./apibase\");\nclass JRPCAPI extends apibase_1.APIBase {\n    /**\n    *\n    * @param core Reference to the Avalanche instance using this endpoint\n    * @param baseurl Path of the APIs baseurl - ex: \"/ext/bc/avm\"\n    * @param jrpcVersion The jrpc version to use, default \"2.0\".\n    */\n    constructor(core, baseurl, jrpcVersion = \"2.0\") {\n        super(core, baseurl);\n        this.jrpcVersion = \"2.0\";\n        this.rpcid = 1;\n        this.callMethod = (method, params, baseurl, headers) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.id = this.rpcid;\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            else if (this.jrpcVersion === \"1.0\") {\n                rpc.params = [];\n            }\n            if (this.jrpcVersion !== \"1.0\") {\n                rpc.jsonrpc = this.jrpcVersion;\n            }\n            let headrs = { \"Content-Type\": \"application/json;charset=UTF-8\" };\n            if (headers) {\n                headrs = Object.assign(Object.assign({}, headrs), headers);\n            }\n            let baseURL = `${this.core.getProtocol()}://${this.core.getHost()}`;\n            const port = this.core.getPort();\n            if (port != undefined && typeof port === \"number\" && port >= 0) {\n                baseURL = `${baseURL}:${port}`;\n            }\n            const axConf = {\n                baseURL: baseURL,\n                responseType: \"json\",\n            };\n            const resp = yield this.core.post(ep, {}, JSON.stringify(rpc), headrs, axConf);\n            if (resp.status >= 200 && resp.status < 300) {\n                this.rpcid += 1;\n                if (typeof resp.data === \"string\") {\n                    resp.data = JSON.parse(resp.data);\n                }\n                if (typeof resp.data === \"object\" && (resp.data === null || \"error\" in resp.data)) {\n                    throw new Error(resp.data.error.message);\n                }\n            }\n            return resp;\n        });\n        /**\n        * Returns the rpcid, a strictly-increasing number, starting from 1, indicating the next\n        * request ID that will be sent.\n        */\n        this.getRPCID = () => this.rpcid;\n        this.jrpcVersion = jrpcVersion;\n        this.rpcid = 1;\n    }\n}\nexports.JRPCAPI = JRPCAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianJwY2FwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vanJwY2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztFQUdFOzs7Ozs7Ozs7Ozs7QUFJRix1Q0FBd0Q7QUFFeEQsTUFBYSxPQUFRLFNBQVEsaUJBQU87SUE2RGxDOzs7OztNQUtFO0lBQ0YsWUFBWSxJQUFtQixFQUFFLE9BQWUsRUFBRSxjQUFzQixLQUFLO1FBQzNFLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFuRVosZ0JBQVcsR0FBVyxLQUFLLENBQUE7UUFDM0IsVUFBSyxHQUFHLENBQUMsQ0FBQTtRQUVuQixlQUFVLEdBQUcsQ0FDWCxNQUFjLEVBQ2QsTUFBMEIsRUFDMUIsT0FBZSxFQUNmLE9BQWdCLEVBQ2MsRUFBRTtZQUNoQyxNQUFNLEVBQUUsR0FBVyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQTtZQUMxQyxNQUFNLEdBQUcsR0FBUSxFQUFFLENBQUE7WUFDbkIsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFBO1lBQ25CLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1lBRW5CLDJCQUEyQjtZQUMzQixJQUFJLE1BQU0sRUFBRTtnQkFDVixHQUFHLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTthQUNwQjtpQkFBTSxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssS0FBSyxFQUFFO2dCQUNyQyxHQUFHLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQTthQUNoQjtZQUVELElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLLEVBQUU7Z0JBQzlCLEdBQUcsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQTthQUMvQjtZQUVELElBQUksTUFBTSxHQUFXLEVBQUUsY0FBYyxFQUFFLGdDQUFnQyxFQUFFLENBQUE7WUFDekUsSUFBRyxPQUFPLEVBQUU7Z0JBQ1YsTUFBTSxtQ0FBUSxNQUFNLEdBQUssT0FBTyxDQUFFLENBQUE7YUFDbkM7WUFFRCxJQUFJLE9BQU8sR0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFBO1lBQzNFLE1BQU0sSUFBSSxHQUFXLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUE7WUFDeEMsSUFBSSxJQUFJLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO2dCQUM5RCxPQUFPLEdBQUcsR0FBRyxPQUFPLElBQUksSUFBSSxFQUFFLENBQUE7YUFDL0I7WUFFRCxNQUFNLE1BQU0sR0FBc0I7Z0JBQ2hDLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixZQUFZLEVBQUUsTUFBTTthQUNyQixDQUFBO1lBRUQsTUFBTSxJQUFJLEdBQXdCLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUNuRyxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO2dCQUMzQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQTtnQkFDZixJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7b0JBQ2pDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7aUJBQ2xDO2dCQUNELElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQ2pGLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7aUJBQ3pDO2FBQ0Y7WUFDRCxPQUFPLElBQUksQ0FBQTtRQUNiLENBQUMsQ0FBQSxDQUFBO1FBRUQ7OztVQUdFO1FBQ0YsYUFBUSxHQUFHLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7UUFVakMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUE7UUFDOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUE7SUFDaEIsQ0FBQztDQUNGO0FBeEVELDBCQXdFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiogQG1vZHVsZSBDb21tb24tSlJQQ0FQSVxuKi9cblxuaW1wb3J0IHsgQXhpb3NSZXF1ZXN0Q29uZmlnIH0gZnJvbSBcImF4aW9zXCJcbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gXCIuLi9hdmFsYW5jaGVcIlxuaW1wb3J0IHsgQVBJQmFzZSwgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gXCIuL2FwaWJhc2VcIlxuXG5leHBvcnQgY2xhc3MgSlJQQ0FQSSBleHRlbmRzIEFQSUJhc2Uge1xuICBwcm90ZWN0ZWQganJwY1ZlcnNpb246IHN0cmluZyA9IFwiMi4wXCJcbiAgcHJvdGVjdGVkIHJwY2lkID0gMVxuXG4gIGNhbGxNZXRob2QgPSBhc3luYyAoXG4gICAgbWV0aG9kOiBzdHJpbmcsXG4gICAgcGFyYW1zPzogb2JqZWN0W10gfCBvYmplY3QsXG4gICAgYmFzZXVybD86c3RyaW5nLFxuICAgIGhlYWRlcnM/OiBvYmplY3RcbiAgKTogUHJvbWlzZTxSZXF1ZXN0UmVzcG9uc2VEYXRhPiA9PiB7XG4gICAgY29uc3QgZXA6IHN0cmluZyA9IGJhc2V1cmwgfHwgdGhpcy5iYXNldXJsXG4gICAgY29uc3QgcnBjOiBhbnkgPSB7fVxuICAgIHJwYy5pZCA9IHRoaXMucnBjaWRcbiAgICBycGMubWV0aG9kID0gbWV0aG9kXG5cbiAgICAvLyBTZXQgcGFyYW1ldGVycyBpZiBleGlzdHNcbiAgICBpZiAocGFyYW1zKSB7XG4gICAgICBycGMucGFyYW1zID0gcGFyYW1zXG4gICAgfSBlbHNlIGlmICh0aGlzLmpycGNWZXJzaW9uID09PSBcIjEuMFwiKSB7XG4gICAgICBycGMucGFyYW1zID0gW11cbiAgICB9XG5cbiAgICBpZiAodGhpcy5qcnBjVmVyc2lvbiAhPT0gXCIxLjBcIikge1xuICAgICAgcnBjLmpzb25ycGMgPSB0aGlzLmpycGNWZXJzaW9uXG4gICAgfVxuXG4gICAgbGV0IGhlYWRyczogb2JqZWN0ID0geyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiIH1cbiAgICBpZihoZWFkZXJzKSB7XG4gICAgICBoZWFkcnMgPSB7IC4uLmhlYWRycywgLi4uaGVhZGVycyB9XG4gICAgfVxuXG4gICAgbGV0IGJhc2VVUkw6IHN0cmluZyA9IGAke3RoaXMuY29yZS5nZXRQcm90b2NvbCgpfTovLyR7dGhpcy5jb3JlLmdldEhvc3QoKX1gXG4gICAgY29uc3QgcG9ydDogbnVtYmVyID0gdGhpcy5jb3JlLmdldFBvcnQoKVxuICAgIGlmIChwb3J0ICE9IHVuZGVmaW5lZCAmJiB0eXBlb2YgcG9ydCA9PT0gXCJudW1iZXJcIiAmJiBwb3J0ID49IDApIHtcbiAgICAgIGJhc2VVUkwgPSBgJHtiYXNlVVJMfToke3BvcnR9YFxuICAgIH1cblxuICAgIGNvbnN0IGF4Q29uZjpBeGlvc1JlcXVlc3RDb25maWcgPSB7XG4gICAgICBiYXNlVVJMOiBiYXNlVVJMLFxuICAgICAgcmVzcG9uc2VUeXBlOiBcImpzb25cIixcbiAgICB9XG5cbiAgICBjb25zdCByZXNwOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jb3JlLnBvc3QoZXAsIHt9LCBKU09OLnN0cmluZ2lmeShycGMpLCBoZWFkcnMsIGF4Q29uZilcbiAgICBpZiAocmVzcC5zdGF0dXMgPj0gMjAwICYmIHJlc3Auc3RhdHVzIDwgMzAwKSB7XG4gICAgICB0aGlzLnJwY2lkICs9IDFcbiAgICAgIGlmICh0eXBlb2YgcmVzcC5kYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJlc3AuZGF0YSA9IEpTT04ucGFyc2UocmVzcC5kYXRhKVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiByZXNwLmRhdGEgPT09IFwib2JqZWN0XCIgJiYgKHJlc3AuZGF0YSA9PT0gbnVsbCB8fCBcImVycm9yXCIgaW4gcmVzcC5kYXRhKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcC5kYXRhLmVycm9yLm1lc3NhZ2UpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNwXG4gIH1cblxuICAvKipcbiAgKiBSZXR1cm5zIHRoZSBycGNpZCwgYSBzdHJpY3RseS1pbmNyZWFzaW5nIG51bWJlciwgc3RhcnRpbmcgZnJvbSAxLCBpbmRpY2F0aW5nIHRoZSBuZXh0XG4gICogcmVxdWVzdCBJRCB0aGF0IHdpbGwgYmUgc2VudC5cbiAgKi9cbiAgZ2V0UlBDSUQgPSAoKTogbnVtYmVyID0+IHRoaXMucnBjaWRcblxuICAvKipcbiAgKlxuICAqIEBwYXJhbSBjb3JlIFJlZmVyZW5jZSB0byB0aGUgQXZhbGFuY2hlIGluc3RhbmNlIHVzaW5nIHRoaXMgZW5kcG9pbnRcbiAgKiBAcGFyYW0gYmFzZXVybCBQYXRoIG9mIHRoZSBBUElzIGJhc2V1cmwgLSBleDogXCIvZXh0L2JjL2F2bVwiXG4gICogQHBhcmFtIGpycGNWZXJzaW9uIFRoZSBqcnBjIHZlcnNpb24gdG8gdXNlLCBkZWZhdWx0IFwiMi4wXCIuXG4gICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6IEF2YWxhbmNoZUNvcmUsIGJhc2V1cmw6IHN0cmluZywganJwY1ZlcnNpb246IHN0cmluZyA9IFwiMi4wXCIpIHtcbiAgICBzdXBlcihjb3JlLCBiYXNldXJsKVxuICAgIHRoaXMuanJwY1ZlcnNpb24gPSBqcnBjVmVyc2lvblxuICAgIHRoaXMucnBjaWQgPSAxXG4gIH1cbn1cbiJdfQ==","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InfoAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * Class for interacting with a node's InfoAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass InfoAPI extends jrpcapi_1.JRPCAPI {\n    constructor(core, baseurl = '/ext/info') {\n        super(core, baseurl);\n        /**\n         * Fetches the blockchainID from the node for a given alias.\n         *\n         * @param alias The blockchain alias to get the blockchainID\n         *\n         * @returns Returns a Promise<string> containing the base 58 string representation of the blockchainID.\n         */\n        this.getBlockchainID = (alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                alias,\n            };\n            const response = yield this.callMethod('info.getBlockchainID', params);\n            return response.data.result.blockchainID;\n        });\n        /**\n         * Fetches the networkID from the node.\n         *\n         * @returns Returns a Promise<number> of the networkID.\n         */\n        this.getNetworkID = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod('info.getNetworkID');\n            return response.data.result.networkID;\n        });\n        /**\n         * Fetches the network name this node is running on\n         *\n         * @returns Returns a Promise<string> containing the network name.\n         */\n        this.getNetworkName = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod('info.getNetworkName');\n            return response.data.result.networkName;\n        });\n        /**\n         * Fetches the nodeID from the node.\n         *\n         * @returns Returns a Promise<string> of the nodeID.\n         */\n        this.getNodeID = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod('info.getNodeID');\n            return response.data.result.nodeID;\n        });\n        /**\n         * Fetches the version of Gecko this node is running\n         *\n         * @returns Returns a Promise<string> containing the version of Gecko.\n         */\n        this.getNodeVersion = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod('info.getNodeVersion');\n            return response.data.result.version;\n        });\n        /**\n         * Fetches the transaction fee from the node.\n         *\n         * @returns Returns a Promise<object> of the transaction fee in nDJTX.\n         */\n        this.getTxFee = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod('info.getTxFee');\n            return {\n                txFee: new bn_js_1.default(response.data.result.txFee, 10),\n                creationTxFee: new bn_js_1.default(response.data.result.creationTxFee, 10)\n            };\n        });\n        /**\n         * Check whether a given chain is done bootstrapping\n         * @param chain The ID or alias of a chain.\n         *\n         * @returns Returns a Promise<boolean> of whether the chain has completed bootstrapping.\n         */\n        this.isBootstrapped = (chain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                chain\n            };\n            const response = yield this.callMethod('info.isBootstrapped', params);\n            return response.data.result.isBootstrapped;\n        });\n        /**\n         * Returns the peers connected to the node.\n         * @param nodeIDs an optional parameter to specify what nodeID's descriptions should be returned.\n         * If this parameter is left empty, descriptions for all active connections will be returned.\n         * If the node is not connected to a specified nodeID, it will be omitted from the response.\n         *\n         * @returns Promise for the list of connected peers in PeersResponse format.\n         */\n        this.peers = (nodeIDs = []) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                nodeIDs\n            };\n            const response = yield this.callMethod('info.peers', params);\n            return response.data.result.peers;\n        });\n    }\n}\nexports.InfoAPI = InfoAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPOwnerOutput = exports.StakeableLockOut = exports.SECPTransferOutput = exports.AmountOutput = exports.ParseableOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Outputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nexports.SelectOutputClass = (outputid, ...args) => {\n    if (outputid == constants_1.PlatformVMConstants.SECPXFEROUTPUTID) {\n        return new SECPTransferOutput(...args);\n    }\n    else if (outputid == constants_1.PlatformVMConstants.SECPOWNEROUTPUTID) {\n        return new SECPOwnerOutput(...args);\n    }\n    else if (outputid == constants_1.PlatformVMConstants.STAKEABLELOCKOUTID) {\n        return new StakeableLockOut(...args);\n    }\n    throw new errors_1.OutputIdError(\"Error - SelectOutputClass: unknown outputid \" + outputid);\n};\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = exports.SelectOutputClass(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.PlatformVMConstants.ASSETIDLEN);\n        offset += constants_1.PlatformVMConstants.ASSETIDLEN;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = exports.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass ParseableOutput extends output_1.StandardParseableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"ParseableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = exports.SelectOutputClass(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = exports.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.ParseableOutput = ParseableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.AmountOutput = AmountOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPTransferOutput extends AmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferOutput\";\n        this._typeID = constants_1.PlatformVMConstants.SECPXFEROUTPUTID;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferOutput = SECPTransferOutput;\n/**\n * An [[Output]] class which specifies an input that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n */\nclass StakeableLockOut extends AmountOutput {\n    /**\n     * A [[Output]] class which specifies a [[ParseableOutput]] that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the output\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     * @param stakeableLocktime A {@link https://github.com/indutny/bn.js/|BN} representing the stakeable locktime\n     * @param transferableOutput A [[ParseableOutput]] which is embedded into this output.\n     */\n    constructor(amount = undefined, addresses = undefined, locktime = undefined, threshold = undefined, stakeableLocktime = undefined, transferableOutput = undefined) {\n        super(amount, addresses, locktime, threshold);\n        this._typeName = \"StakeableLockOut\";\n        this._typeID = constants_1.PlatformVMConstants.STAKEABLELOCKOUTID;\n        if (typeof stakeableLocktime !== \"undefined\") {\n            this.stakeableLocktime = bintools.fromBNToBuffer(stakeableLocktime, 8);\n        }\n        if (typeof transferableOutput !== \"undefined\") {\n            this.transferableOutput = transferableOutput;\n            this.synchronize();\n        }\n    }\n    //serialize and deserialize both are inherited\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        let outobj = Object.assign(Object.assign({}, fields), { \"stakeableLocktime\": serialization.encoder(this.stakeableLocktime, encoding, \"Buffer\", \"decimalString\", 8), \"transferableOutput\": this.transferableOutput.serialize(encoding) });\n        delete outobj[\"addresses\"];\n        delete outobj[\"locktime\"];\n        delete outobj[\"threshold\"];\n        delete outobj[\"amount\"];\n        return outobj;\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        fields[\"addresses\"] = [];\n        fields[\"locktime\"] = \"0\";\n        fields[\"threshold\"] = \"1\";\n        fields[\"amount\"] = \"99\";\n        super.deserialize(fields, encoding);\n        this.stakeableLocktime = serialization.decoder(fields[\"stakeableLocktime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.transferableOutput = new ParseableOutput();\n        this.transferableOutput.deserialize(fields[\"transferableOutput\"], encoding);\n        this.synchronize();\n    }\n    //call this every time you load in data\n    synchronize() {\n        let output = this.transferableOutput.getOutput();\n        this.addresses = output.getAddresses().map((a) => {\n            let addr = new output_1.Address();\n            addr.fromBuffer(a);\n            return addr;\n        });\n        this.numaddrs = buffer_1.Buffer.alloc(4);\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        this.locktime = bintools.fromBNToBuffer(output.getLocktime(), 8);\n        this.threshold = buffer_1.Buffer.alloc(4);\n        this.threshold.writeUInt32BE(output.getThreshold(), 0);\n        this.amount = bintools.fromBNToBuffer(output.getAmount(), 8);\n        this.amountValue = output.getAmount();\n    }\n    getStakeableLocktime() {\n        return bintools.fromBufferToBN(this.stakeableLocktime);\n    }\n    getTransferableOutput() {\n        return this.transferableOutput;\n    }\n    /**\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[StakeableLockOut]] and returns the size of the output.\n     */\n    fromBuffer(outbuff, offset = 0) {\n        this.stakeableLocktime = bintools.copyFrom(outbuff, offset, offset + 8);\n        offset += 8;\n        this.transferableOutput = new ParseableOutput();\n        offset = this.transferableOutput.fromBuffer(outbuff, offset);\n        this.synchronize();\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[StakeableLockOut]] instance.\n     */\n    toBuffer() {\n        let xferoutBuff = this.transferableOutput.toBuffer();\n        const bsize = this.stakeableLocktime.length + xferoutBuff.length;\n        const barr = [this.stakeableLocktime, xferoutBuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new StakeableLockOut(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.StakeableLockOut = StakeableLockOut;\n/**\n * An [[Output]] class which only specifies an Output ownership and uses secp256k1 signature scheme.\n */\nclass SECPOwnerOutput extends output_1.Output {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPOwnerOutput\";\n        this._typeID = constants_1.PlatformVMConstants.SECPOWNEROUTPUTID;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    create(...args) {\n        return new SECPOwnerOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.SECPOwnerOutput = SECPOwnerOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Output\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseNFTOutput = exports.StandardAmountOutput = exports.StandardTransferableOutput = exports.StandardParseableOutput = exports.Output = exports.OutputOwners = exports.Address = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst nbytes_1 = require(\"./nbytes\");\nconst helperfunctions_1 = require(\"../utils/helperfunctions\");\nconst serialization_1 = require(\"../utils/serialization\");\nconst errors_1 = require(\"../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class for representing an address used in [[Output]] types\n */\nclass Address extends nbytes_1.NBytes {\n    /**\n     * Class for representing an address used in [[Output]] types\n     */\n    constructor() {\n        super();\n        this._typeName = \"Address\";\n        this._typeID = undefined;\n        //serialize and deserialize both are inherited\n        this.bytes = buffer_1.Buffer.alloc(20);\n        this.bsize = 20;\n    }\n    /**\n       * Returns a base-58 representation of the [[Address]].\n       */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    /**\n       * Takes a base-58 string containing an [[Address]], parses it, populates the class, and returns the length of the Address in bytes.\n       *\n       * @param bytes A base-58 string containing a raw [[Address]]\n       *\n       * @returns The length of the raw [[Address]]\n       */\n    fromString(addr) {\n        const addrbuff = bintools.b58ToBuffer(addr);\n        if (addrbuff.length === 24 && bintools.validateChecksum(addrbuff)) {\n            const newbuff = bintools.copyFrom(addrbuff, 0, addrbuff.length - 4);\n            if (newbuff.length === 20) {\n                this.bytes = newbuff;\n            }\n        }\n        else if (addrbuff.length === 24) {\n            throw new errors_1.ChecksumError('Error - Address.fromString: invalid checksum on address');\n        }\n        else if (addrbuff.length === 20) {\n            this.bytes = addrbuff;\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.AddressError('Error - Address.fromString: invalid address');\n        }\n        return this.getSize();\n    }\n    clone() {\n        let newbase = new Address();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new Address();\n    }\n}\nexports.Address = Address;\n/**\n * Returns a function used to sort an array of [[Address]]es\n */\nAddress.comparator = () => (a, b) => buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n/**\n * Defines the most basic values for output ownership. Mostly inherited from, but can be used in population of NFT Owner data.\n */\nclass OutputOwners extends serialization_1.Serializable {\n    /**\n     * An [[Output]] class which contains addresses, locktimes, and thresholds.\n     *\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing output owner's addresses\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     */\n    constructor(addresses = undefined, locktime = undefined, threshold = undefined) {\n        super();\n        this._typeName = \"OutputOwners\";\n        this._typeID = undefined;\n        this.locktime = buffer_1.Buffer.alloc(8);\n        this.threshold = buffer_1.Buffer.alloc(4);\n        this.numaddrs = buffer_1.Buffer.alloc(4);\n        this.addresses = [];\n        /**\n         * Returns the threshold of signers required to spend this output.\n         */\n        this.getThreshold = () => this.threshold.readUInt32BE(0);\n        /**\n         * Returns the a {@link https://github.com/indutny/bn.js/|BN} repersenting the UNIX Timestamp when the lock is made available.\n         */\n        this.getLocktime = () => bintools.fromBufferToBN(this.locktime);\n        /**\n         * Returns an array of {@link https://github.com/feross/buffer|Buffer}s for the addresses.\n         */\n        this.getAddresses = () => {\n            const result = [];\n            for (let i = 0; i < this.addresses.length; i++) {\n                result.push(this.addresses[i].toBuffer());\n            }\n            return result;\n        };\n        /**\n         * Returns the index of the address.\n         *\n         * @param address A {@link https://github.com/feross/buffer|Buffer} of the address to look up to return its index.\n         *\n         * @returns The index of the address.\n         */\n        this.getAddressIdx = (address) => {\n            for (let i = 0; i < this.addresses.length; i++) {\n                if (this.addresses[i].toBuffer().toString('hex') === address.toString('hex')) {\n                    return i;\n                }\n            }\n            /* istanbul ignore next */\n            return -1;\n        };\n        /**\n         * Returns the address from the index provided.\n         *\n         * @param idx The index of the address.\n         *\n         * @returns Returns the string representing the address.\n         */\n        this.getAddress = (idx) => {\n            if (idx < this.addresses.length) {\n                return this.addresses[idx].toBuffer();\n            }\n            throw new errors_1.AddressIndexError('Error - Output.getAddress: idx out of range');\n        };\n        /**\n         * Given an array of address {@link https://github.com/feross/buffer|Buffer}s and an optional timestamp, returns true if the addresses meet the threshold required to spend the output.\n         */\n        this.meetsThreshold = (addresses, asOf = undefined) => {\n            let now;\n            if (typeof asOf === 'undefined') {\n                now = helperfunctions_1.UnixNow();\n            }\n            else {\n                now = asOf;\n            }\n            const qualified = this.getSpenders(addresses, now);\n            const threshold = this.threshold.readUInt32BE(0);\n            if (qualified.length >= threshold) {\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Given an array of addresses and an optional timestamp, select an array of address {@link https://github.com/feross/buffer|Buffer}s of qualified spenders for the output.\n         */\n        this.getSpenders = (addresses, asOf = undefined) => {\n            const qualified = [];\n            let now;\n            if (typeof asOf === 'undefined') {\n                now = helperfunctions_1.UnixNow();\n            }\n            else {\n                now = asOf;\n            }\n            const locktime = bintools.fromBufferToBN(this.locktime);\n            if (now.lte(locktime)) { // not unlocked, not spendable\n                return qualified;\n            }\n            const threshold = this.threshold.readUInt32BE(0);\n            for (let i = 0; i < this.addresses.length && qualified.length < threshold; i++) {\n                for (let j = 0; j < addresses.length && qualified.length < threshold; j++) {\n                    if (addresses[j].toString('hex') === this.addresses[i].toBuffer().toString('hex')) {\n                        qualified.push(addresses[j]);\n                    }\n                }\n            }\n            return qualified;\n        };\n        if (typeof addresses !== \"undefined\" && addresses.length) {\n            const addrs = [];\n            for (let i = 0; i < addresses.length; i++) {\n                addrs[i] = new Address();\n                addrs[i].fromBuffer(addresses[i]);\n            }\n            this.addresses = addrs;\n            this.addresses.sort(Address.comparator());\n            this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        }\n        if (typeof threshold !== undefined) {\n            this.threshold.writeUInt32BE((threshold || 1), 0);\n        }\n        if (typeof locktime !== \"undefined\") {\n            this.locktime = bintools.fromBNToBuffer(locktime, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"locktime\": serialization.encoder(this.locktime, encoding, \"Buffer\", \"decimalString\", 8), \"threshold\": serialization.encoder(this.threshold, encoding, \"Buffer\", \"decimalString\", 4), \"addresses\": this.addresses.map((a) => a.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.locktime = serialization.decoder(fields[\"locktime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.threshold = serialization.decoder(fields[\"threshold\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.addresses = fields[\"addresses\"].map((a) => {\n            let addr = new Address();\n            addr.deserialize(a, encoding);\n            return addr;\n        });\n        this.numaddrs = buffer_1.Buffer.alloc(4);\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n    }\n    /**\n     * Returns a base-58 string representing the [[Output]].\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.locktime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.threshold = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.numaddrs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numaddrs = this.numaddrs.readUInt32BE(0);\n        this.addresses = [];\n        for (let i = 0; i < numaddrs; i++) {\n            const addr = new Address();\n            offset = addr.fromBuffer(bytes, offset);\n            this.addresses.push(addr);\n        }\n        this.addresses.sort(Address.comparator());\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[Output]] instance.\n     */\n    toBuffer() {\n        this.addresses.sort(Address.comparator());\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        let bsize = this.locktime.length + this.threshold.length + this.numaddrs.length;\n        const barr = [this.locktime, this.threshold, this.numaddrs];\n        for (let i = 0; i < this.addresses.length; i++) {\n            const b = this.addresses[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[Output]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.OutputOwners = OutputOwners;\nOutputOwners.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getOutputID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getOutputID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\nclass Output extends OutputOwners {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Output\";\n        this._typeID = undefined;\n    }\n}\nexports.Output = Output;\nclass StandardParseableOutput extends serialization_1.Serializable {\n    /**\n     * Class representing an [[ParseableOutput]] for a transaction.\n     *\n     * @param output A number representing the InputID of the [[ParseableOutput]]\n     */\n    constructor(output = undefined) {\n        super();\n        this._typeName = \"StandardParseableOutput\";\n        this._typeID = undefined;\n        this.getOutput = () => this.output;\n        if (output instanceof Output) {\n            this.output = output;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"output\": this.output.serialize(encoding) });\n    }\n    toBuffer() {\n        const outbuff = this.output.toBuffer();\n        const outid = buffer_1.Buffer.alloc(4);\n        outid.writeUInt32BE(this.output.getOutputID(), 0);\n        const barr = [outid, outbuff];\n        return buffer_1.Buffer.concat(barr, outid.length + outbuff.length);\n    }\n}\nexports.StandardParseableOutput = StandardParseableOutput;\n/**\n * Returns a function used to sort an array of [[ParseableOutput]]s\n */\nStandardParseableOutput.comparator = () => (a, b) => {\n    const sorta = a.toBuffer();\n    const sortb = b.toBuffer();\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\nclass StandardTransferableOutput extends StandardParseableOutput {\n    /**\n     * Class representing an [[StandardTransferableOutput]] for a transaction.\n     *\n     * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Output]]\n     * @param output A number representing the InputID of the [[StandardTransferableOutput]]\n     */\n    constructor(assetID = undefined, output = undefined) {\n        super(output);\n        this._typeName = \"StandardTransferableOutput\";\n        this._typeID = undefined;\n        this.assetID = undefined;\n        this.getAssetID = () => this.assetID;\n        if (typeof assetID !== 'undefined') {\n            this.assetID = assetID;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"assetID\": serialization.encoder(this.assetID, encoding, \"Buffer\", \"cb58\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.assetID = serialization.decoder(fields[\"assetID\"], encoding, \"cb58\", \"Buffer\", 32);\n    }\n    toBuffer() {\n        const parseableBuff = super.toBuffer();\n        const barr = [this.assetID, parseableBuff];\n        return buffer_1.Buffer.concat(barr, this.assetID.length + parseableBuff.length);\n    }\n}\nexports.StandardTransferableOutput = StandardTransferableOutput;\n/**\n * An [[Output]] class which specifies a token amount .\n */\nclass StandardAmountOutput extends Output {\n    /**\n     * A [[StandardAmountOutput]] class which issues a payment on an assetID.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the output\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     */\n    constructor(amount = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this._typeName = \"StandardAmountOutput\";\n        this._typeID = undefined;\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        /**\n         * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getAmount = () => this.amountValue.clone();\n        if (typeof amount !== \"undefined\") {\n            this.amountValue = amount.clone();\n            this.amount = bintools.fromBNToBuffer(amount, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"amount\": serialization.encoder(this.amount, encoding, \"Buffer\", \"decimalString\", 8) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.amount = serialization.decoder(fields[\"amount\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[StandardAmountOutput]] and returns the size of the output.\n     */\n    fromBuffer(outbuff, offset = 0) {\n        this.amount = bintools.copyFrom(outbuff, offset, offset + 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n        offset += 8;\n        return super.fromBuffer(outbuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[StandardAmountOutput]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.amount.length + superbuff.length;\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        const barr = [this.amount, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.StandardAmountOutput = StandardAmountOutput;\n/**\n * An [[Output]] class which specifies an NFT.\n */\nclass BaseNFTOutput extends Output {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"BaseNFTOutput\";\n        this._typeID = undefined;\n        this.groupID = buffer_1.Buffer.alloc(4);\n        /**\n         * Returns the groupID as a number.\n         */\n        this.getGroupID = () => {\n            return this.groupID.readUInt32BE(0);\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"groupID\": serialization.encoder(this.groupID, encoding, \"Buffer\", \"decimalString\", 4) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.groupID = serialization.decoder(fields[\"groupID\"], encoding, \"decimalString\", \"Buffer\", 4);\n    }\n}\nexports.BaseNFTOutput = BaseNFTOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.UTXO = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst constants_1 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst exporttx_1 = require(\"../platformvm/exporttx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst importtx_1 = require(\"../platformvm/importtx\");\nconst basetx_1 = require(\"../platformvm/basetx\");\nconst assetamount_1 = require(\"../../common/assetamount\");\nconst validationtx_1 = require(\"./validationtx\");\nconst createsubnettx_1 = require(\"./createsubnettx\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXO\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = outputs_1.SelectOutputClass(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = outputs_1.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.PlatformVMConstants.LATESTCODEC, txid = undefined, outputidx = undefined, assetID = undefined, output = undefined) {\n        return new UTXO(codecID, txid, outputidx, assetID, output);\n    }\n}\nexports.UTXO = UTXO;\nclass AssetAmountDestination extends assetamount_1.StandardAssetAmountDestination {\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXOSet\";\n        this._typeID = undefined;\n        this.getConsumableUXTO = (asOf = helperfunctions_1.UnixNow(), stakeable = false) => {\n            return this.getAllUTXOs().filter((utxo) => {\n                if (stakeable) {\n                    // stakeable transactions can consume any UTXO.\n                    return true;\n                }\n                const output = utxo.getOutput();\n                if (!(output instanceof outputs_1.StakeableLockOut)) {\n                    // non-stakeable transactions can consume any UTXO that isn't locked.\n                    return true;\n                }\n                const stakeableOutput = output;\n                if (stakeableOutput.getStakeableLocktime().lt(asOf)) {\n                    // If the stakeable outputs locktime has ended, then this UTXO can still\n                    // be consumed by a non-stakeable transaction.\n                    return true;\n                }\n                // This output is locked and can't be consumed by a non-stakeable\n                // transaction.\n                return false;\n            });\n        };\n        this.getMinimumSpendable = (aad, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1, stakeable = false) => {\n            let utxoArray = this.getConsumableUXTO(asOf, stakeable);\n            let tmpUTXOArray = [];\n            if (stakeable) {\n                // If this is a stakeable transaction then have StakeableLockOut come before SECPTransferOutput\n                // so that users first stake locked tokens before staking unlocked tokens\n                utxoArray.forEach((utxo) => {\n                    // StakeableLockOuts\n                    if (utxo.getOutput().getTypeID() === 22) {\n                        tmpUTXOArray.push(utxo);\n                    }\n                });\n                // Sort the StakeableLockOuts by StakeableLocktime so that the greatest StakeableLocktime are spent first\n                tmpUTXOArray.sort((a, b) => {\n                    let stakeableLockOut1 = a.getOutput();\n                    let stakeableLockOut2 = b.getOutput();\n                    return stakeableLockOut2.getStakeableLocktime().toNumber() - stakeableLockOut1.getStakeableLocktime().toNumber();\n                });\n                utxoArray.forEach((utxo) => {\n                    // SECPTransferOutputs\n                    if (utxo.getOutput().getTypeID() === 7) {\n                        tmpUTXOArray.push(utxo);\n                    }\n                });\n                utxoArray = tmpUTXOArray;\n            }\n            // outs is a map from assetID to a tuple of (lockedStakeable, unlocked)\n            // which are arrays of outputs.\n            const outs = {};\n            // We only need to iterate over UTXOs until we have spent sufficient funds\n            // to met the requested amounts.\n            utxoArray.forEach((utxo, index) => {\n                const assetID = utxo.getAssetID();\n                const assetKey = assetID.toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                const output = utxo.getOutput();\n                if (!(output instanceof outputs_1.AmountOutput) || !aad.assetExists(assetKey) || !output.meetsThreshold(fromAddresses, asOf)) {\n                    // We should only try to spend fungible assets.\n                    // We should only spend {{ assetKey }}.\n                    // We need to be able to spend the output.\n                    return;\n                }\n                const assetAmount = aad.getAssetAmount(assetKey);\n                if (assetAmount.isFinished()) {\n                    // We've already spent the needed UTXOs for this assetID.\n                    return;\n                }\n                if (!(assetKey in outs)) {\n                    // If this is the first time spending this assetID, we need to\n                    // initialize the outs object correctly.\n                    outs[assetKey] = {\n                        lockedStakeable: [],\n                        unlocked: [],\n                    };\n                }\n                const amountOutput = output;\n                // amount is the amount of funds available from this UTXO.\n                const amount = amountOutput.getAmount();\n                // Set up the SECP input with the same amount as the output.\n                let input = new inputs_1.SECPTransferInput(amount);\n                let locked = false;\n                if (amountOutput instanceof outputs_1.StakeableLockOut) {\n                    const stakeableOutput = amountOutput;\n                    const stakeableLocktime = stakeableOutput.getStakeableLocktime();\n                    if (stakeableLocktime.gt(asOf)) {\n                        // Add a new input and mark it as being locked.\n                        input = new inputs_1.StakeableLockIn(amount, stakeableLocktime, new inputs_1.ParseableInput(input));\n                        // Mark this UTXO as having been re-locked.\n                        locked = true;\n                    }\n                }\n                assetAmount.spendAmount(amount, locked);\n                if (locked) {\n                    // Track the UTXO as locked.\n                    outs[assetKey].lockedStakeable.push(amountOutput);\n                }\n                else {\n                    // Track the UTXO as unlocked.\n                    outs[assetKey].unlocked.push(amountOutput);\n                }\n                // Get the indices of the outputs that should be used to authorize the\n                // spending of this input.\n                // TODO: getSpenders should return an array of indices rather than an\n                // array of addresses.\n                const spenders = amountOutput.getSpenders(fromAddresses, asOf);\n                spenders.forEach((spender) => {\n                    const idx = amountOutput.getAddressIdx(spender);\n                    if (idx === -1) {\n                        // This should never happen, which is why the error is thrown rather\n                        // than being returned. If this were to ever happen this would be an\n                        // error in the internal logic rather having called this function with\n                        // invalid arguments.\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError('Error - UTXOSet.getMinimumSpendable: no such '\n                            + `address in output: ${spender}`);\n                    }\n                    input.addSignatureIdx(idx, spender);\n                });\n                const txID = utxo.getTxID();\n                const outputIdx = utxo.getOutputIdx();\n                const transferInput = new inputs_1.TransferableInput(txID, outputIdx, assetID, input);\n                aad.addInput(transferInput);\n            });\n            if (!aad.canComplete()) {\n                // After running through all the UTXOs, we still weren't able to get all\n                // the necessary funds, so this transaction can't be made.\n                return new errors_1.InsufficientFundsError('Error - UTXOSet.getMinimumSpendable: insufficient '\n                    + 'funds to create the transaction');\n            }\n            // TODO: We should separate the above functionality into a single function\n            // that just selects the UTXOs to consume.\n            const zero = new bn_js_1.default(0);\n            // assetAmounts is an array of asset descriptions and how much is left to\n            // spend for them.\n            const assetAmounts = aad.getAmounts();\n            assetAmounts.forEach((assetAmount) => {\n                // change is the amount that should be returned back to the source of the\n                // funds.\n                const change = assetAmount.getChange();\n                // isStakeableLockChange is if the change is locked or not.\n                const isStakeableLockChange = assetAmount.getStakeableLockChange();\n                // lockedChange is the amount of locked change that should be returned to\n                // the sender\n                const lockedChange = isStakeableLockChange ? change : zero.clone();\n                const assetID = assetAmount.getAssetID();\n                const assetKey = assetAmount.getAssetIDString();\n                const lockedOutputs = outs[assetKey].lockedStakeable;\n                lockedOutputs.forEach((lockedOutput, i) => {\n                    const stakeableLocktime = lockedOutput.getStakeableLocktime();\n                    const parseableOutput = lockedOutput.getTransferableOutput();\n                    // We know that parseableOutput contains an AmountOutput because the\n                    // first loop filters for fungible assets.\n                    const output = parseableOutput.getOutput();\n                    let outputAmountRemaining = output.getAmount();\n                    // The only output that could generate change is the last output.\n                    // Otherwise, any further UTXOs wouldn't have needed to be spent.\n                    if (i == lockedOutputs.length - 1 && lockedChange.gt(zero)) {\n                        // update outputAmountRemaining to no longer hold the change that we\n                        // are returning.\n                        outputAmountRemaining = outputAmountRemaining.sub(lockedChange);\n                        // Create the inner output.\n                        const newChangeOutput = outputs_1.SelectOutputClass(output.getOutputID(), lockedChange, output.getAddresses(), output.getLocktime(), output.getThreshold());\n                        // Wrap the inner output in the StakeableLockOut wrapper.\n                        let newLockedChangeOutput = outputs_1.SelectOutputClass(lockedOutput.getOutputID(), lockedChange, output.getAddresses(), output.getLocktime(), output.getThreshold(), stakeableLocktime, new outputs_1.ParseableOutput(newChangeOutput));\n                        const transferOutput = new outputs_1.TransferableOutput(assetID, newLockedChangeOutput);\n                        aad.addChange(transferOutput);\n                    }\n                    // We know that outputAmountRemaining > 0. Otherwise, we would never\n                    // have consumed this UTXO, as it would be only change.\n                    // Create the inner output.\n                    const newOutput = outputs_1.SelectOutputClass(output.getOutputID(), outputAmountRemaining, output.getAddresses(), output.getLocktime(), output.getThreshold());\n                    // Wrap the inner output in the StakeableLockOut wrapper.\n                    const newLockedOutput = outputs_1.SelectOutputClass(lockedOutput.getOutputID(), outputAmountRemaining, output.getAddresses(), output.getLocktime(), output.getThreshold(), stakeableLocktime, new outputs_1.ParseableOutput(newOutput));\n                    const transferOutput = new outputs_1.TransferableOutput(assetID, newLockedOutput);\n                    aad.addOutput(transferOutput);\n                });\n                // unlockedChange is the amount of unlocked change that should be returned\n                // to the sender\n                const unlockedChange = isStakeableLockChange ? zero.clone() : change;\n                if (unlockedChange.gt(zero)) {\n                    const newChangeOutput = new outputs_1.SECPTransferOutput(unlockedChange, aad.getChangeAddresses(), zero.clone(), // make sure that we don't lock the change output.\n                    1);\n                    const transferOutput = new outputs_1.TransferableOutput(assetID, newChangeOutput);\n                    aad.addChange(transferOutput);\n                }\n                // totalAmountSpent is the total amount of tokens consumed.\n                const totalAmountSpent = assetAmount.getSpent();\n                // stakeableLockedAmount is the total amount of locked tokens consumed.\n                const stakeableLockedAmount = assetAmount.getStakeableLockSpent();\n                // totalUnlockedSpent is the total amount of unlocked tokens consumed.\n                const totalUnlockedSpent = totalAmountSpent.sub(stakeableLockedAmount);\n                // amountBurnt is the amount of unlocked tokens that must be burn.\n                const amountBurnt = assetAmount.getBurn();\n                // totalUnlockedAvailable is the total amount of unlocked tokens available\n                // to be produced.\n                const totalUnlockedAvailable = totalUnlockedSpent.sub(amountBurnt);\n                // unlockedAmount is the amount of unlocked tokens that should be sent.\n                const unlockedAmount = totalUnlockedAvailable.sub(unlockedChange);\n                if (unlockedAmount.gt(zero)) {\n                    const newOutput = new outputs_1.SECPTransferOutput(unlockedAmount, aad.getDestinations(), locktime, threshold);\n                    const transferOutput = new outputs_1.TransferableOutput(assetID, newOutput);\n                    aad.addOutput(transferOutput);\n                }\n            });\n            return undefined;\n        };\n        /**\n         * Creates an [[UnsignedTx]] wrapping a [[BaseTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] wrapping a [[BaseTx]] manually (with their corresponding [[TransferableInput]]s and [[TransferableOutput]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount of the asset to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned. Default: assetID\n         * @param memo Optional. Contains arbitrary data, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildBaseTx = (networkID, blockchainID, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            if (threshold > toAddresses.length) {\n                /* istanbul ignore next */\n                throw new errors_1.ThresholdError(\"Error - UTXOSet.buildBaseTx: threshold is greater than number of addresses\");\n            }\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            let ins = [];\n            let outs = [];\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getAllOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const baseTx = new basetx_1.BaseTx(networkID, blockchainID, outs, ins, memo);\n            return new tx_1.UnsignedTx(baseTx);\n        };\n        /**\n          * Creates an unsigned ImportTx transaction.\n          *\n          * @param networkID The number representing NetworkID of the node\n          * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param toAddresses The addresses to send the funds\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n          * @param importIns An array of [[TransferableInput]]s being imported\n          * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}. Fee will come from the inputs first, if they can.\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting outputs\n          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildImportTx = (networkID, blockchainID, toAddresses, fromAddresses, changeAddresses, atomics, sourceChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (typeof fee === \"undefined\") {\n                fee = zero.clone();\n            }\n            const importIns = [];\n            let feepaid = new bn_js_1.default(0);\n            let feeAssetStr = feeAssetID.toString(\"hex\");\n            for (let i = 0; i < atomics.length; i++) {\n                const utxo = atomics[i];\n                const assetID = utxo.getAssetID();\n                const output = utxo.getOutput();\n                let amt = output.getAmount().clone();\n                let infeeamount = amt.clone();\n                let assetStr = assetID.toString(\"hex\");\n                if (typeof feeAssetID !== \"undefined\" &&\n                    fee.gt(zero) &&\n                    feepaid.lt(fee) &&\n                    assetStr === feeAssetStr) {\n                    feepaid = feepaid.add(infeeamount);\n                    if (feepaid.gte(fee)) {\n                        infeeamount = feepaid.sub(fee);\n                        feepaid = fee.clone();\n                    }\n                    else {\n                        infeeamount = zero.clone();\n                    }\n                }\n                const txid = utxo.getTxID();\n                const outputidx = utxo.getOutputIdx();\n                const input = new inputs_1.SECPTransferInput(amt);\n                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);\n                const from = output.getAddresses();\n                const spenders = output.getSpenders(from, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = output.getAddressIdx(spenders[j]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError('Error - UTXOSet.buildImportTx: no such '\n                            + `address in output: ${spenders[j]}`);\n                    }\n                    xferin.getInput().addSignatureIdx(idx, spenders[j]);\n                }\n                importIns.push(xferin);\n                //add extra outputs for each amount (calculated from the imported inputs), minus fees\n                if (infeeamount.gt(zero)) {\n                    const spendout = outputs_1.SelectOutputClass(output.getOutputID(), infeeamount, toAddresses, locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(assetID, spendout);\n                    outs.push(xferout);\n                }\n            }\n            // get remaining fees from the provided addresses\n            let feeRemaining = fee.sub(feepaid);\n            if (feeRemaining.gt(zero) && this._feeCheck(feeRemaining, feeAssetID)) {\n                const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, feeRemaining);\n                const minSpendableErr = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n                if (typeof minSpendableErr === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw minSpendableErr;\n                }\n            }\n            const importTx = new importtx_1.ImportTx(networkID, blockchainID, outs, ins, memo, sourceChain, importIns);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n          * Creates an unsigned ExportTx transaction.\n          *\n          * @param networkID The number representing NetworkID of the node\n          * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param djtxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for DJTX\n          * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the DJTX\n          * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the DJTX\n          * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover of the DJTX\n          * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting outputs\n          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n          *\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildExportTx = (networkID, blockchainID, amount, djtxAssetID, // TODO: rename this to amountAssetID\n        toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let outs = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = djtxAssetID;\n            }\n            else if (feeAssetID.toString(\"hex\") !== djtxAssetID.toString(\"hex\")) {\n                /* istanbul ignore next */\n                throw new errors_1.FeeAssetError('Error - UTXOSet.buildExportTx: '\n                    + `feeAssetID must match djtxAssetID`);\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.Defaults.network[networkID].X[\"blockchainID\"]);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (djtxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(djtxAssetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(djtxAssetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkID, blockchainID, outs, ins, memo, destinationChain, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n        /**\n        * Class representing an unsigned [[AddSubnetValidatorTx]] transaction.\n        *\n        * @param networkID Networkid, [[DefaultNetworkID]]\n        * @param blockchainID Blockchainid, default undefined\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees in DJTX\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n        * @param weight The amount of weight for this subnet validator.\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting outputs\n        * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        /* must implement later once the transaction format signing process is clearer\n        buildAddSubnetValidatorTx = (\n          networkID:number = DefaultNetworkID,\n          blockchainID:Buffer,\n          fromAddresses:Buffer[],\n          changeAddresses:Buffer[],\n          nodeID:Buffer,\n          startTime:BN,\n          endTime:BN,\n          weight:BN,\n          fee:BN = undefined,\n          feeAssetID:Buffer = undefined,\n          memo:Buffer = undefined,\n          asOf:BN = UnixNow()\n        ):UnsignedTx => {\n          let ins:TransferableInput[] = [];\n          let outs:TransferableOutput[] = [];\n          //let stakeOuts:TransferableOutput[] = [];\n          \n          const zero:BN = new BN(0);\n          const now:BN = UnixNow();\n          if (startTime.lt(now) || endTime.lte(startTime)) {\n            throw new Error(\"UTXOSet.buildAddSubnetValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n          }\n         \n          // Not implemented: Fees can be paid from importIns\n          if(this._feeCheck(fee, feeAssetID)) {\n            const aad:AssetAmountDestination = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n            aad.addAssetAmount(feeAssetID, zero, fee);\n            const success:Error = this.getMinimumSpendable(aad, asOf);\n            if(typeof success === \"undefined\") {\n              ins = aad.getInputs();\n              outs = aad.getAllOutputs();\n            } else {\n              throw success;\n            }\n          }\n         \n          const UTx:AddSubnetValidatorTx = new AddSubnetValidatorTx(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, weight);\n          return new UnsignedTx(UTx);\n        }\n        */\n        /**\n        * Class representing an unsigned [[AddDelegatorTx]] transaction.\n        *\n        * @param networkID Networkid, [[DefaultNetworkID]]\n        * @param blockchainID Blockchainid, default undefined\n        * @param djtxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for DJTX\n        * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} recieves the stake at the end of the staking period\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees and the stake\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the staking payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n        * @param stakeAmount A {@link https://github.com/indutny/bn.js/|BN} for the amount of stake to be delegated in nDJTX.\n        * @param rewardLocktime The locktime field created in the resulting reward outputs\n        * @param rewardThreshold The number of signatures required to spend the funds in the resultant reward UTXO\n        * @param rewardAddresses The addresses the validator reward goes.\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        this.buildAddDelegatorTx = (networkID = constants_2.DefaultNetworkID, blockchainID, djtxAssetID, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewardAddresses, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            let ins = [];\n            let outs = [];\n            let stakeOuts = [];\n            const zero = new bn_js_1.default(0);\n            const now = helperfunctions_1.UnixNow();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new errors_1.TimeError(\"UTXOSet.buildAddDelegatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (djtxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(djtxAssetID, stakeAmount, fee);\n            }\n            else {\n                aad.addAssetAmount(djtxAssetID, stakeAmount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, undefined, undefined, true);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                stakeOuts = aad.getOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const rewardOutputOwners = new outputs_1.SECPOwnerOutput(rewardAddresses, rewardLocktime, rewardThreshold);\n            const UTx = new validationtx_1.AddDelegatorTx(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, new outputs_1.ParseableOutput(rewardOutputOwners));\n            return new tx_1.UnsignedTx(UTx);\n        };\n        /**\n          * Class representing an unsigned [[AddValidatorTx]] transaction.\n          *\n          * @param networkID NetworkID, [[DefaultNetworkID]]\n          * @param blockchainID BlockchainID, default undefined\n          * @param djtxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for DJTX\n          * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} recieves the stake at the end of the staking period\n          * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees and the stake\n          * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the staking payment\n          * @param nodeID The node ID of the validator being added.\n          * @param startTime The Unix time when the validator starts validating the Primary Network.\n          * @param endTime The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n          * @param stakeAmount A {@link https://github.com/indutny/bn.js/|BN} for the amount of stake to be delegated in nDJTX.\n          * @param rewardLocktime The locktime field created in the resulting reward outputs\n          * @param rewardThreshold The number of signatures required to spend the funds in the resultant reward UTXO\n          * @param rewardAddresses The addresses the validator reward goes.\n          * @param delegationFee A number for the percentage of reward to be given to the validator when someone delegates to them. Must be between 0 and 100.\n          * @param minStake A {@link https://github.com/indutny/bn.js/|BN} representing the minimum stake required to validate on this network.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          *\n          * @returns An unsigned transaction created from the passed in parameters.\n          */\n        this.buildAddValidatorTx = (networkID = constants_2.DefaultNetworkID, blockchainID, djtxAssetID, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewardAddresses, delegationFee, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            let ins = [];\n            let outs = [];\n            let stakeOuts = [];\n            const zero = new bn_js_1.default(0);\n            const now = helperfunctions_1.UnixNow();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new errors_1.TimeError(\"UTXOSet.buildAddValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            if (delegationFee > 100 || delegationFee < 0) {\n                throw new errors_1.TimeError(\"UTXOSet.buildAddValidatorTx -- startTime must be in the range of 0 to 100, inclusively\");\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (djtxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(djtxAssetID, stakeAmount, fee);\n            }\n            else {\n                aad.addAssetAmount(djtxAssetID, stakeAmount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, undefined, undefined, true);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                stakeOuts = aad.getOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const rewardOutputOwners = new outputs_1.SECPOwnerOutput(rewardAddresses, rewardLocktime, rewardThreshold);\n            const UTx = new validationtx_1.AddValidatorTx(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, new outputs_1.ParseableOutput(rewardOutputOwners), delegationFee);\n            return new tx_1.UnsignedTx(UTx);\n        };\n        /**\n          * Class representing an unsigned [[CreateSubnetTx]] transaction.\n          *\n          * @param networkID Networkid, [[DefaultNetworkID]]\n          * @param blockchainID Blockchainid, default undefined\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs.\n          * @param subnetOwnerAddresses An array of {@link https://github.com/feross/buffer|Buffer} for the addresses to add to a subnet\n          * @param subnetOwnerThreshold The number of owners's signatures required to add a validator to the network\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n          * @param feeAssetID Optional. The assetID of the fees being burned\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          *\n          * @returns An unsigned transaction created from the passed in parameters.\n          */\n        this.buildCreateSubnetTx = (networkID = constants_2.DefaultNetworkID, blockchainID, fromAddresses, changeAddresses, subnetOwnerAddresses, subnetOwnerThreshold, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const minSpendableErr = this.getMinimumSpendable(aad, asOf, undefined, undefined);\n                if (typeof minSpendableErr === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw minSpendableErr;\n                }\n            }\n            const locktime = new bn_js_1.default(0);\n            const UTx = new createsubnettx_1.CreateSubnetTx(networkID, blockchainID, outs, ins, memo, new outputs_1.SECPOwnerOutput(subnetOwnerAddresses, locktime, subnetOwnerThreshold));\n            return new tx_1.UnsignedTx(UTx);\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let utxos = {};\n        for (let utxoid in fields[\"utxos\"]) {\n            let utxoidCleaned = serialization.decoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[utxoidCleaned] = new UTXO();\n            utxos[utxoidCleaned].deserialize(fields[\"utxos\"][utxoid], encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in fields[\"addressUTXOs\"]) {\n            let addressCleaned = serialization.decoder(address, encoding, \"cb58\", \"hex\");\n            let utxobalance = {};\n            for (let utxoid in fields[\"addressUTXOs\"][address]) {\n                let utxoidCleaned = serialization.decoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[utxoidCleaned] = serialization.decoder(fields[\"addressUTXOs\"][address][utxoid], encoding, \"decimalString\", \"BN\");\n            }\n            addressUTXOs[addressCleaned] = utxobalance;\n        }\n        this.utxos = utxos;\n        this.addressUTXOs = addressUTXOs;\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === 'string') {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof utxos_1.StandardUTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.UTXOError(\"Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string\");\n        }\n        return utxovar;\n    }\n    create(...args) {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) && feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-NBytes\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NBytes = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst serialization_1 = require(\"../utils/serialization\");\nconst errors_1 = require(\"../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Abstract class that implements basic functionality for managing a\n * {@link https://github.com/feross/buffer|Buffer} of an exact length.\n *\n * Create a class that extends this one and override bsize to make it validate for exactly\n * the correct length.\n */\nclass NBytes extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"NBytes\";\n        this._typeID = undefined;\n        /**\n         * Returns the length of the {@link https://github.com/feross/buffer|Buffer}.\n         *\n         * @returns The exact length requirement of this class\n         */\n        this.getSize = () => this.bsize;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"bsize\": serialization.encoder(this.bsize, encoding, \"number\", \"decimalString\", 4), \"bytes\": serialization.encoder(this.bytes, encoding, \"Buffer\", \"hex\", this.bsize) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.bsize = serialization.decoder(fields[\"bsize\"], encoding, \"decimalString\", \"number\", 4);\n        this.bytes = serialization.decoder(fields[\"bytes\"], encoding, \"hex\", \"Buffer\", this.bsize);\n    }\n    /**\n     * Takes a base-58 encoded string, verifies its length, and stores it.\n     *\n     * @returns The size of the {@link https://github.com/feross/buffer|Buffer}\n     */\n    fromString(b58str) {\n        try {\n            this.fromBuffer(bintools.b58ToBuffer(b58str));\n        }\n        catch (e) {\n            /* istanbul ignore next */\n            const emsg = `Error - NBytes.fromString: ${e}`;\n            /* istanbul ignore next */\n            throw new Error(emsg);\n        }\n        return this.bsize;\n    }\n    /**\n     * Takes a [[Buffer]], verifies its length, and stores it.\n     *\n     * @returns The size of the {@link https://github.com/feross/buffer|Buffer}\n     */\n    fromBuffer(buff, offset = 0) {\n        try {\n            if (buff.length - offset < this.bsize) {\n                /* istanbul ignore next */\n                throw new errors_1.BufferSizeError(\"Error - NBytes.fromBuffer: not enough space available in buffer.\");\n            }\n            this.bytes = bintools.copyFrom(buff, offset, offset + this.bsize);\n        }\n        catch (e) {\n            /* istanbul ignore next */\n            const emsg = `Error - NBytes.fromBuffer: ${e}`;\n            /* istanbul ignore next */\n            throw new Error(emsg);\n        }\n        return offset + this.bsize;\n    }\n    /**\n     * @returns A reference to the stored {@link https://github.com/feross/buffer|Buffer}\n     */\n    toBuffer() {\n        return this.bytes;\n    }\n    /**\n     * @returns A base-58 string of the stored {@link https://github.com/feross/buffer|Buffer}\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NBytes = NBytes;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmJ5dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9uYnl0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7O0FBR0gsaUVBQXdDO0FBQ3hDLDBEQUF3RjtBQUN4Riw0Q0FBaUQ7QUFFakQ7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBYSxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBQ2pELE1BQU0sYUFBYSxHQUFrQiw2QkFBYSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBRWhFOzs7Ozs7R0FNRztBQUNILE1BQXNCLE1BQU8sU0FBUSw0QkFBWTtJQUFqRDs7UUFDWSxjQUFTLEdBQUcsUUFBUSxDQUFBO1FBQ3BCLFlBQU8sR0FBRyxTQUFTLENBQUE7UUFtQjdCOzs7O1dBSUc7UUFDSCxZQUFPLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtJQXlENUIsQ0FBQztJQS9FQyxTQUFTLENBQUMsV0FBK0IsS0FBSztRQUM1QyxJQUFJLE1BQU0sR0FBVyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzlDLHVDQUNLLE1BQU0sS0FDVCxPQUFPLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQyxFQUNsRixPQUFPLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFDbEY7SUFDSCxDQUFDO0lBQ0QsV0FBVyxDQUFDLE1BQWMsRUFBRSxXQUErQixLQUFLO1FBQzlELEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ25DLElBQUksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDM0YsSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDNUYsQ0FBQztJQVlEOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsTUFBYztRQUN2QixJQUFJO1lBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7U0FDOUM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLDBCQUEwQjtZQUMxQixNQUFNLElBQUksR0FBVyw4QkFBOEIsQ0FBQyxFQUFFLENBQUE7WUFDdEQsMEJBQTBCO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7UUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDbkIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsSUFBWSxFQUFFLFNBQWlCLENBQUM7UUFDekMsSUFBSTtZQUNGLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDckMsMEJBQTBCO2dCQUMxQixNQUFNLElBQUksd0JBQWUsQ0FBQyxrRUFBa0UsQ0FBQyxDQUFBO2FBQzlGO1lBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUNsRTtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsMEJBQTBCO1lBQzFCLE1BQU0sSUFBSSxHQUFXLDhCQUE4QixDQUFDLEVBQUUsQ0FBQTtZQUN0RCwwQkFBMEI7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUN0QjtRQUNELE9BQU8sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDNUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNuQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ04sT0FBTyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO0lBQzlDLENBQUM7Q0FJRjtBQW5GRCx3QkFtRkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBDb21tb24tTkJ5dGVzXG4gKi9cblxuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyLydcbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi91dGlscy9iaW50b29scydcbmltcG9ydCB7IFNlcmlhbGl6YWJsZSwgU2VyaWFsaXphdGlvbiwgU2VyaWFsaXplZEVuY29kaW5nIH0gZnJvbSAnLi4vdXRpbHMvc2VyaWFsaXphdGlvbidcbmltcG9ydCB7IEJ1ZmZlclNpemVFcnJvciB9IGZyb20gJy4uL3V0aWxzL2Vycm9ycydcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzOiBCaW5Ub29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKClcbmNvbnN0IHNlcmlhbGl6YXRpb246IFNlcmlhbGl6YXRpb24gPSBTZXJpYWxpemF0aW9uLmdldEluc3RhbmNlKClcblxuLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyB0aGF0IGltcGxlbWVudHMgYmFzaWMgZnVuY3Rpb25hbGl0eSBmb3IgbWFuYWdpbmcgYVxuICoge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gb2YgYW4gZXhhY3QgbGVuZ3RoLlxuICpcbiAqIENyZWF0ZSBhIGNsYXNzIHRoYXQgZXh0ZW5kcyB0aGlzIG9uZSBhbmQgb3ZlcnJpZGUgYnNpemUgdG8gbWFrZSBpdCB2YWxpZGF0ZSBmb3IgZXhhY3RseVxuICogdGhlIGNvcnJlY3QgbGVuZ3RoLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTkJ5dGVzIGV4dGVuZHMgU2VyaWFsaXphYmxlIHtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiTkJ5dGVzXCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWRcblxuICBzZXJpYWxpemUoZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpOiBvYmplY3Qge1xuICAgIGxldCBmaWVsZHM6IG9iamVjdCA9IHN1cGVyLnNlcmlhbGl6ZShlbmNvZGluZylcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZmllbGRzLFxuICAgICAgXCJic2l6ZVwiOiBzZXJpYWxpemF0aW9uLmVuY29kZXIodGhpcy5ic2l6ZSwgZW5jb2RpbmcsIFwibnVtYmVyXCIsIFwiZGVjaW1hbFN0cmluZ1wiLCA0KSxcbiAgICAgIFwiYnl0ZXNcIjogc2VyaWFsaXphdGlvbi5lbmNvZGVyKHRoaXMuYnl0ZXMsIGVuY29kaW5nLCBcIkJ1ZmZlclwiLCBcImhleFwiLCB0aGlzLmJzaXplKVxuICAgIH1cbiAgfVxuICBkZXNlcmlhbGl6ZShmaWVsZHM6IG9iamVjdCwgZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKVxuICAgIHRoaXMuYnNpemUgPSBzZXJpYWxpemF0aW9uLmRlY29kZXIoZmllbGRzW1wiYnNpemVcIl0sIGVuY29kaW5nLCBcImRlY2ltYWxTdHJpbmdcIiwgXCJudW1iZXJcIiwgNClcbiAgICB0aGlzLmJ5dGVzID0gc2VyaWFsaXphdGlvbi5kZWNvZGVyKGZpZWxkc1tcImJ5dGVzXCJdLCBlbmNvZGluZywgXCJoZXhcIiwgXCJCdWZmZXJcIiwgdGhpcy5ic2l6ZSlcbiAgfVxuXG4gIHByb3RlY3RlZCBieXRlczogQnVmZmVyXG4gIHByb3RlY3RlZCBic2l6ZTogbnVtYmVyXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0uXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBleGFjdCBsZW5ndGggcmVxdWlyZW1lbnQgb2YgdGhpcyBjbGFzc1xuICAgKi9cbiAgZ2V0U2l6ZSA9ICgpID0+IHRoaXMuYnNpemVcblxuICAvKipcbiAgICogVGFrZXMgYSBiYXNlLTU4IGVuY29kZWQgc3RyaW5nLCB2ZXJpZmllcyBpdHMgbGVuZ3RoLCBhbmQgc3RvcmVzIGl0LlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgc2l6ZSBvZiB0aGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn1cbiAgICovXG4gIGZyb21TdHJpbmcoYjU4c3RyOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmZyb21CdWZmZXIoYmludG9vbHMuYjU4VG9CdWZmZXIoYjU4c3RyKSlcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgY29uc3QgZW1zZzogc3RyaW5nID0gYEVycm9yIC0gTkJ5dGVzLmZyb21TdHJpbmc6ICR7ZX1gXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVtc2cpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmJzaXplXG4gIH1cblxuICAvKipcbiAgICogVGFrZXMgYSBbW0J1ZmZlcl1dLCB2ZXJpZmllcyBpdHMgbGVuZ3RoLCBhbmQgc3RvcmVzIGl0LlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgc2l6ZSBvZiB0aGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn1cbiAgICovXG4gIGZyb21CdWZmZXIoYnVmZjogQnVmZmVyLCBvZmZzZXQ6IG51bWJlciA9IDApOiBudW1iZXIge1xuICAgIHRyeSB7XG4gICAgICBpZiAoYnVmZi5sZW5ndGggLSBvZmZzZXQgPCB0aGlzLmJzaXplKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHRocm93IG5ldyBCdWZmZXJTaXplRXJyb3IoXCJFcnJvciAtIE5CeXRlcy5mcm9tQnVmZmVyOiBub3QgZW5vdWdoIHNwYWNlIGF2YWlsYWJsZSBpbiBidWZmZXIuXCIpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnl0ZXMgPSBiaW50b29scy5jb3B5RnJvbShidWZmLCBvZmZzZXQsIG9mZnNldCArIHRoaXMuYnNpemUpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGNvbnN0IGVtc2c6IHN0cmluZyA9IGBFcnJvciAtIE5CeXRlcy5mcm9tQnVmZmVyOiAke2V9YFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHRocm93IG5ldyBFcnJvcihlbXNnKVxuICAgIH1cbiAgICByZXR1cm4gb2Zmc2V0ICsgdGhpcy5ic2l6ZVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIEEgcmVmZXJlbmNlIHRvIHRoZSBzdG9yZWQge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn1cbiAgICovXG4gIHRvQnVmZmVyKCk6QnVmZmVyIHtcbiAgICByZXR1cm4gdGhpcy5ieXRlc1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIEEgYmFzZS01OCBzdHJpbmcgb2YgdGhlIHN0b3JlZCB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfVxuICAgKi9cbiAgdG9TdHJpbmcoKTpzdHJpbmcge1xuICAgIHJldHVybiBiaW50b29scy5idWZmZXJUb0I1OCh0aGlzLnRvQnVmZmVyKCkpXG4gIH1cblxuICBhYnN0cmFjdCBjbG9uZSgpOiB0aGlzXG4gIGFic3RyYWN0IGNyZWF0ZSguLi5hcmdzOiBhbnlbXSk6IHRoaXNcbn0iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9pbmRleC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FwaSc7XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECP256k1KeyChain = exports.SECP256k1KeyPair = void 0;\n/**\n * @packageDocumentation\n * @module Common-SECP256k1KeyChain\n */\nconst buffer_1 = require(\"buffer/\");\nconst elliptic = __importStar(require(\"elliptic\"));\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst keychain_1 = require(\"./keychain\");\nconst errors_1 = require(\"../utils/errors\");\n/**\n * @ignore\n */\nconst EC = elliptic.ec;\n/**\n * @ignore\n */\nconst ec = new EC('secp256k1');\n/**\n * @ignore\n */\nconst ecparams = ec.curve;\n/**\n * @ignore\n */\nconst BN = ecparams.n.constructor;\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for representing a private and public keypair on the Platform Chain.\n */\nclass SECP256k1KeyPair extends keychain_1.StandardKeyPair {\n    /**\n     * Class for representing a private and public keypair in Avalanche PlatformVM.\n     */\n    constructor() {\n        super();\n        /**\n         * @ignore\n         */\n        this._sigFromSigBuffer = (sig) => {\n            const r = new BN(bintools.copyFrom(sig, 0, 32));\n            const s = new BN(bintools.copyFrom(sig, 32, 64));\n            const recoveryParam = bintools.copyFrom(sig, 64, 65).readUIntBE(0, 1);\n            const sigOpt = {\n                r: r,\n                s: s,\n                recoveryParam: recoveryParam\n            };\n            return sigOpt;\n        };\n        /**\n           * Generates a new keypair.\n           */\n        this.generateKey = () => {\n            this.keypair = ec.genKeyPair();\n            // doing hex translation to get Buffer class\n            this.privk = buffer_1.Buffer.from(this.keypair.getPrivate('hex').padStart(64, '0'), 'hex');\n            this.pubk = buffer_1.Buffer.from(this.keypair.getPublic(true, 'hex').padStart(66, '0'), 'hex');\n        };\n        /**\n           * Imports a private key and generates the appropriate public key.\n           *\n           * @param privk A {@link https://github.com/feross/buffer|Buffer} representing the private key\n           *\n           * @returns true on success, false on failure\n           */\n        this.importKey = (privk) => {\n            this.keypair = ec.keyFromPrivate(privk.toString('hex'), 'hex');\n            // doing hex translation to get Buffer class\n            this.privk = buffer_1.Buffer.from(this.keypair.getPrivate('hex').padStart(64, '0'), 'hex');\n            this.pubk = buffer_1.Buffer.from(this.keypair.getPublic(true, 'hex').padStart(66, '0'), 'hex');\n            return true; // silly I know, but the interface requires so it returns true on success, so if Buffer fails validation...\n        };\n        /**\n         * Returns the address as a {@link https://github.com/feross/buffer|Buffer}.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} representation of the address\n         */\n        this.getAddress = () => {\n            return this.addressFromPublicKey(this.pubk);\n        };\n        /**\n           * Returns an address given a public key.\n           *\n           * @param pubk A {@link https://github.com/feross/buffer|Buffer} representing the public key\n           *\n           * @returns A {@link https://github.com/feross/buffer|Buffer} for the address of the public key.\n           */\n        this.addressFromPublicKey = (pubk) => {\n            if (pubk.length === 65) {\n                /* istanbul ignore next */\n                pubk = buffer_1.Buffer.from(ec.keyFromPublic(pubk).getPublic(true, 'hex').padStart(66, '0'), 'hex'); // make compact, stick back into buffer\n            }\n            if (pubk.length === 33) {\n                const sha256 = buffer_1.Buffer.from(create_hash_1.default('sha256').update(pubk).digest());\n                const ripesha = buffer_1.Buffer.from(create_hash_1.default('ripemd160').update(sha256).digest());\n                return ripesha;\n            }\n            /* istanbul ignore next */\n            throw new errors_1.PublicKeyError('Unable to make address.');\n        };\n        /**\n         * Returns a string representation of the private key.\n         *\n         * @returns A cb58 serialized string representation of the private key\n         */\n        this.getPrivateKeyString = () => {\n            return \"PrivateKey-\" + bintools.cb58Encode(this.privk);\n        };\n        /**\n         * Returns the public key.\n         *\n         * @returns A cb58 serialized string representation of the public key\n         */\n        this.getPublicKeyString = () => {\n            return bintools.cb58Encode(this.pubk);\n        };\n        /**\n         * Takes a message, signs it, and returns the signature.\n         *\n         * @param msg The message to sign, be sure to hash first if expected\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} containing the signature\n         */\n        this.sign = (msg) => {\n            const sigObj = this.keypair.sign(msg, undefined, { canonical: true });\n            const recovery = buffer_1.Buffer.alloc(1);\n            recovery.writeUInt8(sigObj.recoveryParam, 0);\n            const r = buffer_1.Buffer.from(sigObj.r.toArray(\"be\", 32)); //we have to skip native Buffer class, so this is the way\n            const s = buffer_1.Buffer.from(sigObj.s.toArray(\"be\", 32)); //we have to skip native Buffer class, so this is the way\n            const result = buffer_1.Buffer.concat([r, s, recovery], 65);\n            return result;\n        };\n        /**\n         * Verifies that the private key associated with the provided public key produces the signature associated with the given message.\n         *\n         * @param msg The message associated with the signature\n         * @param sig The signature of the signed message\n         *\n         * @returns True on success, false on failure\n         */\n        this.verify = (msg, sig) => {\n            const sigObj = this._sigFromSigBuffer(sig);\n            return ec.verify(msg, sigObj, this.keypair);\n        };\n        /**\n         * Recovers the public key of a message signer from a message and its associated signature.\n         *\n         * @param msg The message that's signed\n         * @param sig The signature that's signed on the message\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} containing the public key of the signer\n         */\n        this.recover = (msg, sig) => {\n            const sigObj = this._sigFromSigBuffer(sig);\n            const pubk = ec.recoverPubKey(msg, sigObj, sigObj.recoveryParam);\n            return buffer_1.Buffer.from(pubk.encodeCompressed());\n        };\n    }\n}\nexports.SECP256k1KeyPair = SECP256k1KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam SECP256k1KeyPair Class extending [[StandardKeyPair]] which is used as the key in [[SECP256k1KeyChain]]\n */\nclass SECP256k1KeyChain extends keychain_1.StandardKeyChain {\n    addKey(newKey) {\n        super.addKey(newKey);\n    }\n}\nexports.SECP256k1KeyChain = SECP256k1KeyChain;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @packageDocumentation\n * @module AvalancheCore\n */\nconst axios_1 = __importDefault(require(\"axios\"));\nconst apibase_1 = require(\"./common/apibase\");\nconst helperfunctions_1 = require(\"./utils/helperfunctions\");\n/**\n * AvalancheCore is middleware for interacting with Avalanche node RPC APIs.\n *\n * Example usage:\n * ```js\n * let avalanche = new AvalancheCore(\"127.0.0.1\", 9650, \"https\")\n * ```\n *\n */\nclass AvalancheCore {\n    /**\n    * Creates a new Avalanche instance. Sets the address and port of the main Avalanche Client.\n    *\n    * @param host The hostname to resolve to reach the Avalanche Client APIs\n    * @param port The port to resolve to reach the Avalanche Client APIs\n    * @param protocol The protocol string to use before a \"://\" in a request, ex: \"http\", \"https\", \"git\", \"ws\", etc ...\n    */\n    constructor(host, port, protocol = \"http\") {\n        this.networkID = 0;\n        this.hrp = \"\";\n        this.auth = undefined;\n        this.headers = {};\n        this.requestConfig = {};\n        this.apis = {};\n        /**\n           * Sets the address and port of the main Avalanche Client.\n           *\n           * @param host The hostname to resolve to reach the Avalanche Client RPC APIs\n           * @param port The port to resolve to reach the Avalanche Client RPC APIs\n           * @param protocol The protocol string to use before a \"://\" in a request,\n           * ex: \"http\", \"https\", \"git\", \"ws\", etc ...\n           */\n        this.setAddress = (host, port, protocol = \"http\") => {\n            this.host = host;\n            this.port = port;\n            this.protocol = protocol;\n            let url = `${protocol}://${host}`;\n            if (port != undefined && typeof port === \"number\" && port >= 0) {\n                url = `${url}:${port}`;\n            }\n            this.url = url;\n        };\n        /**\n           * Returns the protocol such as \"http\", \"https\", \"git\", \"ws\", etc.\n           */\n        this.getProtocol = () => this.protocol;\n        /**\n        * Returns the host for the Avalanche node.\n        */\n        this.getHost = () => this.host;\n        /**\n        * Returns the IP for the Avalanche node.\n        */\n        this.getIP = () => this.host;\n        /**\n        * Returns the port for the Avalanche node.\n        */\n        this.getPort = () => this.port;\n        /**\n        * Returns the URL of the Avalanche node (ip + port)\n        */\n        this.getURL = () => this.url;\n        /**\n        * Returns the custom headers\n        */\n        this.getHeaders = () => this.headers;\n        /**\n        * Returns the custom request config\n        */\n        this.getRequestConfig = () => this.requestConfig;\n        /**\n        * Returns the networkID\n        */\n        this.getNetworkID = () => this.networkID;\n        /**\n        * Sets the networkID\n        */\n        this.setNetworkID = (netid) => {\n            this.networkID = netid;\n            this.hrp = helperfunctions_1.getPreferredHRP(this.networkID);\n        };\n        /**\n        * Returns the Human-Readable-Part of the network associated with this key.\n        *\n        * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n        */\n        this.getHRP = () => this.hrp;\n        /**\n        * Sets the the Human-Readable-Part of the network associated with this key.\n        *\n        * @param hrp String for the Human-Readable-Part of Bech32 addresses\n        */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        /**\n        * Adds a new custom header to be included with all requests.\n        *\n        * @param key Header name\n        * @param value Header value\n        */\n        this.setHeader = (key, value) => {\n            this.headers[key] = value;\n        };\n        /**\n        * Removes a previously added custom header.\n        *\n        * @param key Header name\n        */\n        this.removeHeader = (key) => {\n            delete this.headers[key];\n        };\n        /**\n        * Removes all headers.\n        */\n        this.removeAllHeaders = () => {\n            for (let prop in this.headers) {\n                if (Object.prototype.hasOwnProperty.call(this.headers, prop)) {\n                    delete this.headers[prop];\n                }\n            }\n        };\n        /**\n        * Adds a new custom config value to be included with all requests.\n        *\n        * @param key Config name\n        * @param value Config value\n        */\n        this.setRequestConfig = (key, value) => {\n            this.requestConfig[key] = value;\n        };\n        /**\n        * Removes a previously added request config.\n        *\n        * @param key Header name\n        */\n        this.removeRequestConfig = (key) => {\n            delete this.requestConfig[key];\n        };\n        /**\n        * Removes all request configs.\n        */\n        this.removeAllRequestConfigs = () => {\n            for (let prop in this.requestConfig) {\n                if (Object.prototype.hasOwnProperty.call(this.requestConfig, prop)) {\n                    delete this.requestConfig[prop];\n                }\n            }\n        };\n        /**\n        * Sets the temporary auth token used for communicating with the node.\n        *\n        * @param auth A temporary token provided by the node enabling access to the endpoints on the node.\n        */\n        this.setAuthToken = (auth) => {\n            this.auth = auth;\n        };\n        this._setHeaders = (headers) => {\n            if (typeof this.headers === \"object\") {\n                for (const [key, value] of Object.entries(this.headers)) {\n                    headers[key] = value;\n                }\n            }\n            if (typeof this.auth === \"string\") {\n                headers[\"Authorization\"] = \"Bearer \" + this.auth;\n            }\n            return headers;\n        };\n        /**\n        * Adds an API to the middleware. The API resolves to a registered blockchain's RPC.\n        *\n        * In TypeScript:\n        * ```js\n        * avalanche.addAPI<MyVMClass>(\"mychain\", MyVMClass, \"/ext/bc/mychain\")\n        * ```\n        *\n        * In Javascript:\n        * ```js\n        * avalanche.addAPI(\"mychain\", MyVMClass, \"/ext/bc/mychain\")\n        * ```\n        *\n        * @typeparam GA Class of the API being added\n        * @param apiName A label for referencing the API in the future\n        * @param ConstructorFN A reference to the class which instantiates the API\n        * @param baseurl Path to resolve to reach the API\n        *\n        */\n        this.addAPI = (apiName, ConstructorFN, baseurl = undefined, ...args) => {\n            if (typeof baseurl === \"undefined\") {\n                this.apis[apiName] = new ConstructorFN(this, undefined, ...args);\n            }\n            else {\n                this.apis[apiName] = new ConstructorFN(this, baseurl, ...args);\n            }\n        };\n        /**\n        * Retrieves a reference to an API by its apiName label.\n        *\n        * @param apiName Name of the API to return\n        */\n        this.api = (apiName) => this.apis[apiName];\n        /**\n         * @ignore\n         */\n        this._request = (xhrmethod, baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let config;\n            if (axiosConfig) {\n                config = Object.assign(Object.assign({}, axiosConfig), this.requestConfig);\n            }\n            else {\n                config = Object.assign({ baseURL: `${this.protocol}://${this.ip}:${this.port}`, responseType: \"text\" }, this.requestConfig);\n            }\n            config.url = baseurl;\n            config.method = xhrmethod;\n            config.headers = headers;\n            config.data = postdata;\n            config.params = getdata;\n            const resp = yield axios_1.default.request(config);\n            // purging all that is axios\n            const xhrdata = new apibase_1.RequestResponseData();\n            xhrdata.data = resp.data;\n            xhrdata.headers = resp.headers;\n            xhrdata.request = resp.request;\n            xhrdata.status = resp.status;\n            xhrdata.statusText = resp.statusText;\n            return xhrdata;\n        });\n        /**\n        * Makes a GET call to an API.\n        *\n        * @param baseurl Path to the api\n        * @param getdata Object containing the key value pairs sent in GET\n        * @param parameters Object containing the parameters of the API call\n        * @param headers An array HTTP Request Headers\n        * @param axiosConfig Configuration for the axios javascript library that will be the\n        * foundation for the rest of the parameters\n        *\n        * @returns A promise for [[RequestResponseData]]\n        */\n        this.get = (baseurl, getdata, headers = {}, axiosConfig = undefined) => this._request(\"GET\", baseurl, getdata, {}, this._setHeaders(headers), axiosConfig);\n        /**\n        * Makes a DELETE call to an API.\n        *\n        * @param baseurl Path to the API\n        * @param getdata Object containing the key value pairs sent in DELETE\n        * @param parameters Object containing the parameters of the API call\n        * @param headers An array HTTP Request Headers\n        * @param axiosConfig Configuration for the axios javascript library that will be the\n        * foundation for the rest of the parameters\n        *\n        * @returns A promise for [[RequestResponseData]]\n        */\n        this.delete = (baseurl, getdata, headers = {}, axiosConfig = undefined) => this._request(\"DELETE\", baseurl, getdata, {}, this._setHeaders(headers), axiosConfig);\n        /**\n        * Makes a POST call to an API.\n        *\n        * @param baseurl Path to the API\n        * @param getdata Object containing the key value pairs sent in POST\n        * @param postdata Object containing the key value pairs sent in POST\n        * @param parameters Object containing the parameters of the API call\n        * @param headers An array HTTP Request Headers\n        * @param axiosConfig Configuration for the axios javascript library that will be the\n        * foundation for the rest of the parameters\n        *\n        * @returns A promise for [[RequestResponseData]]\n        */\n        this.post = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request(\"POST\", baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        /**\n        * Makes a PUT call to an API.\n        *\n        * @param baseurl Path to the baseurl\n        * @param getdata Object containing the key value pairs sent in PUT\n        * @param postdata Object containing the key value pairs sent in PUT\n        * @param parameters Object containing the parameters of the API call\n        * @param headers An array HTTP Request Headers\n        * @param axiosConfig Configuration for the axios javascript library that will be the\n        * foundation for the rest of the parameters\n        *\n        * @returns A promise for [[RequestResponseData]]\n        */\n        this.put = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request(\"PUT\", baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        /**\n        * Makes a PATCH call to an API.\n        *\n        * @param baseurl Path to the baseurl\n        * @param getdata Object containing the key value pairs sent in PATCH\n        * @param postdata Object containing the key value pairs sent in PATCH\n        * @param parameters Object containing the parameters of the API call\n        * @param headers An array HTTP Request Headers\n        * @param axiosConfig Configuration for the axios javascript library that will be the\n        * foundation for the rest of the parameters\n        *\n        * @returns A promise for [[RequestResponseData]]\n        */\n        this.patch = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request(\"PATCH\", baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        this.setAddress(host, port, protocol);\n    }\n}\nexports.default = AvalancheCore;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HealthAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n* Class for interacting with a node API that is using the node's HealthApi.\n*\n* @category RPCAPIs\n*\n* @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n*/\nclass HealthAPI extends jrpcapi_1.JRPCAPI {\n    /**\n    * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n    *\n    * @param core A reference to the Avalanche class\n    * @param baseurl Defaults to the string \"/ext/health\" as the path to blockchain's baseurl\n    */\n    constructor(core, baseurl = \"/ext/health\") {\n        super(core, baseurl);\n        /**\n        *\n        * @returns Promise for an object containing the health check response\n        */\n        this.getLiveness = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"health.getLiveness\");\n            return response.data.result;\n        });\n    }\n}\nexports.HealthAPI = HealthAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvaGVhbHRoL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFLQSxrREFBOEM7QUFJOUM7Ozs7OztFQU1FO0FBQ0YsTUFBYSxTQUFVLFNBQVEsaUJBQU87SUFVcEM7Ozs7O01BS0U7SUFDRixZQUFZLElBQW1CLEVBQUUsVUFBa0IsYUFBYTtRQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFmeEY7OztVQUdFO1FBQ0YsZ0JBQVcsR0FBRyxHQUEwQixFQUFFO1lBQ3hDLE1BQU0sUUFBUSxHQUF3QixNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtZQUNqRixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFBO1FBQzdCLENBQUMsQ0FBQSxDQUFBO0lBUXdGLENBQUM7Q0FDM0Y7QUFqQkQsOEJBaUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuKiBAbW9kdWxlIEFQSS1IZWFsdGhcbiovXG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tIFwiLi4vLi4vYXZhbGFuY2hlXCJcbmltcG9ydCB7IEpSUENBUEkgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2pycGNhcGlcIlxuaW1wb3J0IHsgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gXCIuLi8uLi9jb21tb24vYXBpYmFzZVwiXG5cblxuLyoqXG4qIENsYXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIGEgbm9kZSBBUEkgdGhhdCBpcyB1c2luZyB0aGUgbm9kZSdzIEhlYWx0aEFwaS5cbipcbiogQGNhdGVnb3J5IFJQQ0FQSXNcbipcbiogQHJlbWFya3MgVGhpcyBleHRlbmRzIHRoZSBbW0pSUENBUEldXSBjbGFzcy4gVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGRpcmVjdGx5IGNhbGxlZC4gSW5zdGVhZCwgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBmdW5jdGlvbiB0byByZWdpc3RlciB0aGlzIGludGVyZmFjZSB3aXRoIEF2YWxhbmNoZS5cbiovXG5leHBvcnQgY2xhc3MgSGVhbHRoQVBJIGV4dGVuZHMgSlJQQ0FQSSB7XG4gIC8qKlxuICAqXG4gICogQHJldHVybnMgUHJvbWlzZSBmb3IgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGhlYWx0aCBjaGVjayByZXNwb25zZVxuICAqL1xuICBnZXRMaXZlbmVzcyA9IGFzeW5jICgpOiBQcm9taXNlPG9iamVjdD4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFwiaGVhbHRoLmdldExpdmVuZXNzXCIpXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVzdWx0XG4gIH1cblxuICAvKipcbiAgKiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgaW5zdGFudGlhdGVkIGRpcmVjdGx5LiBJbnN0ZWFkIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV0gbWV0aG9kLlxuICAqXG4gICogQHBhcmFtIGNvcmUgQSByZWZlcmVuY2UgdG8gdGhlIEF2YWxhbmNoZSBjbGFzc1xuICAqIEBwYXJhbSBiYXNldXJsIERlZmF1bHRzIHRvIHRoZSBzdHJpbmcgXCIvZXh0L2hlYWx0aFwiIGFzIHRoZSBwYXRoIHRvIGJsb2NrY2hhaW4ncyBiYXNldXJsXG4gICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6IEF2YWxhbmNoZUNvcmUsIGJhc2V1cmw6IHN0cmluZyA9IFwiL2V4dC9oZWFsdGhcIikgeyBzdXBlcihjb3JlLCBiYXNldXJsKSB9XG59XG5cbiJdfQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateSubnetTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-CreateSubnetTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_1 = require(\"./constants\");\nconst constants_2 = require(\"../../utils/constants\");\nconst outputs_1 = require(\"./outputs\");\nconst errors_1 = require(\"../../utils/errors\");\nclass CreateSubnetTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Create Subnet transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param subnetOwners Optional [[SECPOwnerOutput]] class for specifying who owns the subnet.\n    */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, subnetOwners = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"SECPCredential\";\n        this._typeID = constants_1.PlatformVMConstants.CREATESUBNETTX;\n        this.subnetOwners = undefined;\n        /**\n         * Returns the id of the [[CreateSubnetTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        this.subnetOwners = subnetOwners;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"subnetOwners\": this.subnetOwners.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.subnetOwners = new outputs_1.SECPOwnerOutput();\n        this.subnetOwners.deserialize(fields[\"subnetOwners\"], encoding);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the reward address.\n     */\n    getSubnetOwners() {\n        return this.subnetOwners;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[CreateSubnetTx]], parses it, populates the class, and returns the length of the [[CreateSubnetTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[CreateSubnetTx]]\n     * @param offset A number for the starting position in the bytes.\n     *\n     * @returns The length of the raw [[CreateSubnetTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.subnetOwners = new outputs_1.SECPOwnerOutput();\n        offset = this.subnetOwners.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateSubnetTx]].\n     */\n    toBuffer() {\n        if (typeof this.subnetOwners === \"undefined\" || !(this.subnetOwners instanceof outputs_1.SECPOwnerOutput)) {\n            throw new errors_1.SubnetOwnerError(\"CreateSubnetTx.toBuffer -- this.subnetOwners is not a SECPOwnerOutput\");\n        }\n        let typeID = buffer_1.Buffer.alloc(4);\n        typeID.writeUInt32BE(this.subnetOwners.getOutputID(), 0);\n        let barr = [super.toBuffer(), typeID, this.subnetOwners.toBuffer()];\n        return buffer_1.Buffer.concat(barr);\n    }\n}\nexports.CreateSubnetTx = CreateSubnetTx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlc3VibmV0dHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2NyZWF0ZXN1Ym5ldHR4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7R0FHRztBQUNILG9DQUFnQztBQUNoQyxxQ0FBaUM7QUFDakMsMkNBQWlEO0FBQ2pELHFEQUF3RDtBQUN4RCx1Q0FBK0Q7QUFHL0QsK0NBQXFEO0FBRXJELE1BQWEsY0FBZSxTQUFRLGVBQU07SUErRHhDOzs7Ozs7Ozs7TUFTRTtJQUNGLFlBQ0UsWUFBb0IsNEJBQWdCLEVBQ3BDLGVBQXVCLGVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUMzQyxPQUE2QixTQUFTLEVBQ3RDLE1BQTJCLFNBQVMsRUFDcEMsT0FBYyxTQUFTLEVBQ3ZCLGVBQStCLFNBQVM7UUFFeEMsS0FBSyxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQWhGdkMsY0FBUyxHQUFHLGdCQUFnQixDQUFBO1FBQzVCLFlBQU8sR0FBRywrQkFBbUIsQ0FBQyxjQUFjLENBQUE7UUFlNUMsaUJBQVksR0FBb0IsU0FBUyxDQUFBO1FBRW5EOztXQUVHO1FBQ0gsY0FBUyxHQUFHLEdBQVUsRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7UUFDckIsQ0FBQyxDQUFBO1FBMERDLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFBO0lBQ2xDLENBQUM7SUEvRUQsU0FBUyxDQUFDLFdBQStCLEtBQUs7UUFDNUMsSUFBSSxNQUFNLEdBQVcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUM5Qyx1Q0FDSyxNQUFNLEtBQ1QsY0FBYyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUN0RDtJQUNILENBQUM7SUFDRCxXQUFXLENBQUMsTUFBYyxFQUFFLFdBQStCLEtBQUs7UUFDOUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFDbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLHlCQUFlLEVBQUUsQ0FBQTtRQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDakUsQ0FBQztJQVdEOztPQUVHO0lBQ0gsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQTtJQUMxQixDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0gsVUFBVSxDQUFDLEtBQWEsRUFBRSxTQUFpQixDQUFDO1FBQzFDLE1BQU0sR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUN4QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUkseUJBQWUsRUFBRSxDQUFBO1FBQ3pDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDcEQsT0FBTyxNQUFNLENBQUE7SUFDYixDQUFDO0lBRUg7O09BRUc7SUFDSCxRQUFRO1FBQ0osSUFBRyxPQUFPLElBQUksQ0FBQyxZQUFZLEtBQUssV0FBVyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxZQUFZLHlCQUFlLENBQUMsRUFBRTtZQUM5RixNQUFNLElBQUkseUJBQWdCLENBQUMsdUVBQXVFLENBQUMsQ0FBQTtTQUNwRztRQUNILElBQUksTUFBTSxHQUFXLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDcEMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3hELElBQUksSUFBSSxHQUFhLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7UUFDN0UsT0FBTyxlQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzVCLENBQUM7Q0F1QkY7QUFwRkQsd0NBb0ZDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLVBsYXRmb3JtVk0tQ3JlYXRlU3VibmV0VHhcbiAqL1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyLydcbmltcG9ydCB7IEJhc2VUeCB9IGZyb20gJy4vYmFzZXR4J1xuaW1wb3J0IHsgUGxhdGZvcm1WTUNvbnN0YW50cyB9IGZyb20gJy4vY29uc3RhbnRzJ1xuaW1wb3J0IHsgRGVmYXVsdE5ldHdvcmtJRCB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbnN0YW50cydcbmltcG9ydCB7IFRyYW5zZmVyYWJsZU91dHB1dCwgU0VDUE93bmVyT3V0cHV0IH0gZnJvbSAnLi9vdXRwdXRzJ1xuaW1wb3J0IHsgVHJhbnNmZXJhYmxlSW5wdXQgfSBmcm9tICcuL2lucHV0cydcbmltcG9ydCB7IFNlcmlhbGl6ZWRFbmNvZGluZyB9IGZyb20gJy4uLy4uL3V0aWxzL3NlcmlhbGl6YXRpb24nXG5pbXBvcnQgeyBTdWJuZXRPd25lckVycm9yIH0gZnJvbSAnLi4vLi4vdXRpbHMvZXJyb3JzJ1xuXG5leHBvcnQgY2xhc3MgQ3JlYXRlU3VibmV0VHggZXh0ZW5kcyBCYXNlVHgge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJTRUNQQ3JlZGVudGlhbFwiXG4gIHByb3RlY3RlZCBfdHlwZUlEID0gUGxhdGZvcm1WTUNvbnN0YW50cy5DUkVBVEVTVUJORVRUWFxuXG4gIHNlcmlhbGl6ZShlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIik6IG9iamVjdCB7XG4gICAgbGV0IGZpZWxkczogb2JqZWN0ID0gc3VwZXIuc2VyaWFsaXplKGVuY29kaW5nKVxuICAgIHJldHVybiB7XG4gICAgICAuLi5maWVsZHMsXG4gICAgICBcInN1Ym5ldE93bmVyc1wiOiB0aGlzLnN1Ym5ldE93bmVycy5zZXJpYWxpemUoZW5jb2RpbmcpXG4gICAgfVxuICB9XG4gIGRlc2VyaWFsaXplKGZpZWxkczogb2JqZWN0LCBlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIikge1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGZpZWxkcywgZW5jb2RpbmcpXG4gICAgdGhpcy5zdWJuZXRPd25lcnMgPSBuZXcgU0VDUE93bmVyT3V0cHV0KClcbiAgICB0aGlzLnN1Ym5ldE93bmVycy5kZXNlcmlhbGl6ZShmaWVsZHNbXCJzdWJuZXRPd25lcnNcIl0sIGVuY29kaW5nKVxuICB9XG5cbiAgcHJvdGVjdGVkIHN1Ym5ldE93bmVyczogU0VDUE93bmVyT3V0cHV0ID0gdW5kZWZpbmVkXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGlkIG9mIHRoZSBbW0NyZWF0ZVN1Ym5ldFR4XV1cbiAgICovXG4gIGdldFR4VHlwZSA9ICgpOm51bWJlciA9PiB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJRFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBmb3IgdGhlIHJld2FyZCBhZGRyZXNzLlxuICAgKi9cbiAgZ2V0U3VibmV0T3duZXJzKCk6IFNFQ1BPd25lck91dHB1dCB7XG4gICAgcmV0dXJuIHRoaXMuc3VibmV0T3duZXJzXG4gIH1cblxuICAvKipcbiAgICogVGFrZXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBjb250YWluaW5nIGFuIFtbQ3JlYXRlU3VibmV0VHhdXSwgcGFyc2VzIGl0LCBwb3B1bGF0ZXMgdGhlIGNsYXNzLCBhbmQgcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBbW0NyZWF0ZVN1Ym5ldFR4XV0gaW4gYnl0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBieXRlcyBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYSByYXcgW1tDcmVhdGVTdWJuZXRUeF1dXG4gICAqIEBwYXJhbSBvZmZzZXQgQSBudW1iZXIgZm9yIHRoZSBzdGFydGluZyBwb3NpdGlvbiBpbiB0aGUgYnl0ZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBsZW5ndGggb2YgdGhlIHJhdyBbW0NyZWF0ZVN1Ym5ldFR4XV1cbiAgICpcbiAgICogQHJlbWFya3MgYXNzdW1lIG5vdC1jaGVja3N1bW1lZFxuICAgKi9cbiAgZnJvbUJ1ZmZlcihieXRlczogQnVmZmVyLCBvZmZzZXQ6IG51bWJlciA9IDApOiBudW1iZXIge1xuICAgIG9mZnNldCA9IHN1cGVyLmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldClcbiAgICB0aGlzLnN1Ym5ldE93bmVycyA9IG5ldyBTRUNQT3duZXJPdXRwdXQoKVxuICAgIG9mZnNldCA9IHRoaXMuc3VibmV0T3duZXJzLmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldClcbiAgICByZXR1cm4gb2Zmc2V0XG4gICAgfVxuICBcbiAgLyoqXG4gICAqIFJldHVybnMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSByZXByZXNlbnRhdGlvbiBvZiB0aGUgW1tDcmVhdGVTdWJuZXRUeF1dLlxuICAgKi9cbiAgdG9CdWZmZXIoKTpCdWZmZXIge1xuICAgICAgaWYodHlwZW9mIHRoaXMuc3VibmV0T3duZXJzID09PSBcInVuZGVmaW5lZFwiIHx8ICEodGhpcy5zdWJuZXRPd25lcnMgaW5zdGFuY2VvZiBTRUNQT3duZXJPdXRwdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBTdWJuZXRPd25lckVycm9yKFwiQ3JlYXRlU3VibmV0VHgudG9CdWZmZXIgLS0gdGhpcy5zdWJuZXRPd25lcnMgaXMgbm90IGEgU0VDUE93bmVyT3V0cHV0XCIpXG4gICAgICB9XG4gICAgbGV0IHR5cGVJRDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpXG4gICAgdHlwZUlELndyaXRlVUludDMyQkUodGhpcy5zdWJuZXRPd25lcnMuZ2V0T3V0cHV0SUQoKSwgMClcbiAgICBsZXQgYmFycjogQnVmZmVyW10gPSBbc3VwZXIudG9CdWZmZXIoKSwgdHlwZUlELCB0aGlzLnN1Ym5ldE93bmVycy50b0J1ZmZlcigpXVxuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGJhcnIpXG4gIH1cblxuICAvKipcbiAgICogQ2xhc3MgcmVwcmVzZW50aW5nIGFuIHVuc2lnbmVkIENyZWF0ZSBTdWJuZXQgdHJhbnNhY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSBuZXR3b3JrSUQgT3B0aW9uYWwgbmV0d29ya0lELCBbW0RlZmF1bHROZXR3b3JrSURdXVxuICAgKiBAcGFyYW0gYmxvY2tjaGFpbklEIE9wdGlvbmFsIGJsb2NrY2hhaW5JRCwgZGVmYXVsdCBCdWZmZXIuYWxsb2MoMzIsIDE2KVxuICAgKiBAcGFyYW0gb3V0cyBPcHRpb25hbCBhcnJheSBvZiB0aGUgW1tUcmFuc2ZlcmFibGVPdXRwdXRdXXNcbiAgICogQHBhcmFtIGlucyBPcHRpb25hbCBhcnJheSBvZiB0aGUgW1tUcmFuc2ZlcmFibGVJbnB1dF1dc1xuICAgKiBAcGFyYW0gbWVtbyBPcHRpb25hbCB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBmb3IgdGhlIG1lbW8gZmllbGRcbiAgICogQHBhcmFtIHN1Ym5ldE93bmVycyBPcHRpb25hbCBbW1NFQ1BPd25lck91dHB1dF1dIGNsYXNzIGZvciBzcGVjaWZ5aW5nIHdobyBvd25zIHRoZSBzdWJuZXQuXG4gICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIG5ldHdvcmtJRDogbnVtYmVyID0gRGVmYXVsdE5ldHdvcmtJRCxcbiAgICBibG9ja2NoYWluSUQ6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygzMiwgMTYpLFxuICAgIG91dHM6IFRyYW5zZmVyYWJsZU91dHB1dFtdID0gdW5kZWZpbmVkLFxuICAgIGluczogVHJhbnNmZXJhYmxlSW5wdXRbXSA9IHVuZGVmaW5lZCxcbiAgICBtZW1vOkJ1ZmZlciA9IHVuZGVmaW5lZCxcbiAgICBzdWJuZXRPd25lcnM6U0VDUE93bmVyT3V0cHV0ID0gdW5kZWZpbmVkXG4gICkge1xuICAgIHN1cGVyKG5ldHdvcmtJRCwgYmxvY2tjaGFpbklELCBvdXRzLCBpbnMsIG1lbW8pXG4gICAgdGhpcy5zdWJuZXRPd25lcnMgPSBzdWJuZXRPd25lcnNcbiAgfVxufVxuICAiXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-APIBase\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.APIBase = exports.RequestResponseData = void 0;\nconst db_1 = __importDefault(require(\"../utils/db\"));\n/**\n * Response data for HTTP requests.\n */\nclass RequestResponseData {\n}\nexports.RequestResponseData = RequestResponseData;\n/**\n * Abstract class defining a generic endpoint that all endpoints must implement (extend).\n */\nclass APIBase {\n    /**\n       *\n       * @param core Reference to the Avalanche instance using this baseurl\n       * @param baseurl Path to the baseurl - ex: \"/ext/bc/X\"\n       */\n    constructor(core, baseurl) {\n        /**\n           * Sets the path of the APIs baseurl.\n           *\n           * @param baseurl Path of the APIs baseurl - ex: \"/ext/bc/X\"\n           */\n        this.setBaseURL = (baseurl) => {\n            if (this.db && this.baseurl !== baseurl) {\n                const backup = this.db.getAll();\n                this.db.clearAll();\n                this.baseurl = baseurl;\n                this.db = db_1.default.getNamespace(baseurl);\n                this.db.setAll(backup, true);\n            }\n            else {\n                this.baseurl = baseurl;\n                this.db = db_1.default.getNamespace(baseurl);\n            }\n        };\n        /**\n           * Returns the baseurl's path.\n           */\n        this.getBaseURL = () => this.baseurl;\n        /**\n           * Returns the baseurl's database.\n           */\n        this.getDB = () => this.db;\n        this.core = core;\n        this.setBaseURL(baseurl);\n    }\n}\nexports.APIBase = APIBase;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vYXBpYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFJSCxxREFBNkI7QUFHN0I7O0dBRUc7QUFDSCxNQUFhLG1CQUFtQjtDQU0vQjtBQU5ELGtEQU1DO0FBRUQ7O0dBRUc7QUFDSCxNQUFzQixPQUFPO0lBbUMzQjs7OztTQUlLO0lBQ0wsWUFBWSxJQUFrQixFQUFFLE9BQWM7UUFqQzlDOzs7O2FBSUs7UUFDTCxlQUFVLEdBQUcsQ0FBQyxPQUFjLEVBQUUsRUFBRTtZQUM5QixJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUU7Z0JBQ3ZDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO2dCQUN2QixJQUFJLENBQUMsRUFBRSxHQUFHLFlBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ25DLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQzthQUM5QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztnQkFDdkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxZQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3BDO1FBQ0gsQ0FBQyxDQUFDO1FBRUY7O2FBRUs7UUFDTCxlQUFVLEdBQUcsR0FBWSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUV6Qzs7YUFFSztRQUNMLFVBQUssR0FBRyxHQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBUTdCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUNGO0FBNUNELDBCQTRDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIENvbW1vbi1BUElCYXNlXG4gKi9cblxuaW1wb3J0IHsgU3RvcmVBUEkgfSBmcm9tICdzdG9yZTInO1xuaW1wb3J0IHsgQ2xpZW50UmVxdWVzdCB9IGZyb20gJ2h0dHAnO1xuaW1wb3J0IERCIGZyb20gJy4uL3V0aWxzL2RiJztcbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gJy4uL2F2YWxhbmNoZSc7XG5cbi8qKlxuICogUmVzcG9uc2UgZGF0YSBmb3IgSFRUUCByZXF1ZXN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlcXVlc3RSZXNwb25zZURhdGEge1xuICBkYXRhOiBhbnk7XG4gIGhlYWRlcnM6IGFueTtcbiAgc3RhdHVzOiBudW1iZXI7XG4gIHN0YXR1c1RleHQ6IHN0cmluZztcbiAgcmVxdWVzdDpDbGllbnRSZXF1ZXN0IHwgWE1MSHR0cFJlcXVlc3Q7XG59XG5cbi8qKlxuICogQWJzdHJhY3QgY2xhc3MgZGVmaW5pbmcgYSBnZW5lcmljIGVuZHBvaW50IHRoYXQgYWxsIGVuZHBvaW50cyBtdXN0IGltcGxlbWVudCAoZXh0ZW5kKS5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFQSUJhc2Uge1xuICBwcm90ZWN0ZWQgY29yZTpBdmFsYW5jaGVDb3JlO1xuXG4gIHByb3RlY3RlZCBiYXNldXJsOnN0cmluZztcblxuICBwcm90ZWN0ZWQgZGI6U3RvcmVBUEk7XG5cbiAgLyoqXG4gICAgICogU2V0cyB0aGUgcGF0aCBvZiB0aGUgQVBJcyBiYXNldXJsLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJhc2V1cmwgUGF0aCBvZiB0aGUgQVBJcyBiYXNldXJsIC0gZXg6IFwiL2V4dC9iYy9YXCJcbiAgICAgKi9cbiAgc2V0QmFzZVVSTCA9IChiYXNldXJsOnN0cmluZykgPT4ge1xuICAgIGlmICh0aGlzLmRiICYmIHRoaXMuYmFzZXVybCAhPT0gYmFzZXVybCkge1xuICAgICAgY29uc3QgYmFja3VwID0gdGhpcy5kYi5nZXRBbGwoKTtcbiAgICAgIHRoaXMuZGIuY2xlYXJBbGwoKTtcbiAgICAgIHRoaXMuYmFzZXVybCA9IGJhc2V1cmw7XG4gICAgICB0aGlzLmRiID0gREIuZ2V0TmFtZXNwYWNlKGJhc2V1cmwpO1xuICAgICAgdGhpcy5kYi5zZXRBbGwoYmFja3VwLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5iYXNldXJsID0gYmFzZXVybDtcbiAgICAgIHRoaXMuZGIgPSBEQi5nZXROYW1lc3BhY2UoYmFzZXVybCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGJhc2V1cmwncyBwYXRoLlxuICAgICAqL1xuICBnZXRCYXNlVVJMID0gKCkgOiBzdHJpbmcgPT4gdGhpcy5iYXNldXJsO1xuXG4gIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGJhc2V1cmwncyBkYXRhYmFzZS5cbiAgICAgKi9cbiAgZ2V0REIgPSAoKTpTdG9yZUFQSSA9PiB0aGlzLmRiO1xuXG4gIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvcmUgUmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgaW5zdGFuY2UgdXNpbmcgdGhpcyBiYXNldXJsXG4gICAgICogQHBhcmFtIGJhc2V1cmwgUGF0aCB0byB0aGUgYmFzZXVybCAtIGV4OiBcIi9leHQvYmMvWFwiXG4gICAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6QXZhbGFuY2hlQ29yZSwgYmFzZXVybDpzdHJpbmcpIHtcbiAgICB0aGlzLmNvcmUgPSBjb3JlO1xuICAgIHRoaXMuc2V0QmFzZVVSTChiYXNldXJsKTtcbiAgfVxufVxuXG4iXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-KeyChain\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardKeyChain = exports.StandardKeyPair = void 0;\nconst buffer_1 = require(\"buffer/\");\n/**\n * Class for representing a private and public keypair in Avalanche.\n * All APIs that need key pairs should extend on this class.\n */\nclass StandardKeyPair {\n    constructor() {\n        /**\n           * Returns a reference to the private key.\n           *\n           * @returns A {@link https://github.com/feross/buffer|Buffer} containing the private key\n           */\n        this.getPrivateKey = () => this.privk;\n        /**\n           * Returns a reference to the public key.\n           *\n           * @returns A {@link https://github.com/feross/buffer|Buffer} containing the public key\n           */\n        this.getPublicKey = () => this.pubk;\n    }\n}\nexports.StandardKeyPair = StandardKeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n * All endpoints that need key chains should extend on this class.\n *\n * @typeparam KPClass extending [[StandardKeyPair]] which is used as the key in [[StandardKeyChain]]\n */\nclass StandardKeyChain {\n    constructor() {\n        this.keys = {};\n        /**\n           * Gets an array of addresses stored in the [[StandardKeyChain]].\n           *\n           * @returns An array of {@link https://github.com/feross/buffer|Buffer}  representations\n           * of the addresses\n           */\n        this.getAddresses = () => Object.values(this.keys).map((kp) => kp.getAddress());\n        /**\n           * Gets an array of addresses stored in the [[StandardKeyChain]].\n           *\n           * @returns An array of string representations of the addresses\n           */\n        this.getAddressStrings = () => Object.values(this.keys)\n            .map((kp) => kp.getAddressString());\n        /**\n           * Removes the key pair from the list of they keys managed in the [[StandardKeyChain]].\n           *\n           * @param key A {@link https://github.com/feross/buffer|Buffer} for the address or\n           * KPClass to remove\n           *\n           * @returns The boolean true if a key was removed.\n           */\n        this.removeKey = (key) => {\n            let kaddr;\n            if (key instanceof buffer_1.Buffer) {\n                kaddr = key.toString('hex');\n            }\n            else {\n                kaddr = key.getAddress().toString('hex');\n            }\n            if (kaddr in this.keys) {\n                delete this.keys[kaddr];\n                return true;\n            }\n            return false;\n        };\n        /**\n           * Checks if there is a key associated with the provided address.\n           *\n           * @param address The address to check for existence in the keys database\n           *\n           * @returns True on success, false if not found\n           */\n        this.hasKey = (address) => (address.toString('hex') in this.keys);\n        /**\n           * Returns the [[StandardKeyPair]] listed under the provided address\n           *\n           * @param address The {@link https://github.com/feross/buffer|Buffer} of the address to\n           * retrieve from the keys database\n           *\n           * @returns A reference to the [[StandardKeyPair]] in the keys database\n           */\n        this.getKey = (address) => this.keys[address.toString('hex')];\n    }\n    /**\n       * Adds the key pair to the list of the keys managed in the [[StandardKeyChain]].\n       *\n       * @param newKey A key pair of the appropriate class to be added to the [[StandardKeyChain]]\n       */\n    addKey(newKey) {\n        this.keys[newKey.getAddress().toString('hex')] = newKey;\n    }\n    ;\n}\nexports.StandardKeyChain = StandardKeyChain;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9pbmZvL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardAmountInput = exports.StandardTransferableInput = exports.StandardParseableInput = exports.Input = void 0;\n/**\n * @packageDocumentation\n * @module Common-Inputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst credentials_1 = require(\"./credentials\");\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nclass Input extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Input\";\n        this._typeID = undefined;\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n         * Returns the array of [[SigIdx]] for this [[Input]]\n         */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n         * Creates and adds a [[SigIdx]] to the [[Input]].\n         *\n         * @param addressIdx The index of the address to reference in the signatures\n         * @param address The address of the source of the signature\n         */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"sigIdxs\": this.sigIdxs.map((s) => s.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sigIdxs = fields[\"sigIdxs\"].map((s) => {\n            let sidx = new credentials_1.SigIdx();\n            sidx.deserialize(s, encoding);\n            return sidx;\n        });\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.sigCount = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const sigCount = this.sigCount.readUInt32BE(0);\n        this.sigIdxs = [];\n        for (let i = 0; i < sigCount; i++) {\n            const sigidx = new credentials_1.SigIdx();\n            const sigbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            sigidx.fromBuffer(sigbuff);\n            offset += 4;\n            this.sigIdxs.push(sigidx);\n        }\n        return offset;\n    }\n    toBuffer() {\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        let bsize = this.sigCount.length;\n        const barr = [this.sigCount];\n        for (let i = 0; i < this.sigIdxs.length; i++) {\n            const b = this.sigIdxs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 representation of the [[Input]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.Input = Input;\nInput.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getInputID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getInputID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\nclass StandardParseableInput extends serialization_1.Serializable {\n    /**\n     * Class representing an [[StandardParseableInput]] for a transaction.\n     *\n     * @param input A number representing the InputID of the [[StandardParseableInput]]\n     */\n    constructor(input = undefined) {\n        super();\n        this._typeName = \"StandardParseableInput\";\n        this._typeID = undefined;\n        this.getInput = () => this.input;\n        if (input instanceof Input) {\n            this.input = input;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"input\": this.input.serialize(encoding) });\n    }\n    ;\n    toBuffer() {\n        const inbuff = this.input.toBuffer();\n        const inid = buffer_1.Buffer.alloc(4);\n        inid.writeUInt32BE(this.input.getInputID(), 0);\n        const barr = [inid, inbuff];\n        return buffer_1.Buffer.concat(barr, inid.length + inbuff.length);\n    }\n}\nexports.StandardParseableInput = StandardParseableInput;\n/**\n * Returns a function used to sort an array of [[StandardParseableInput]]s\n */\nStandardParseableInput.comparator = () => (a, b) => {\n    const sorta = a.toBuffer();\n    const sortb = b.toBuffer();\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\nclass StandardTransferableInput extends StandardParseableInput {\n    /**\n     * Class representing an [[StandardTransferableInput]] for a transaction.\n     *\n     * @param txid A {@link https://github.com/feross/buffer|Buffer} containing the transaction ID of the referenced UTXO\n     * @param outputidx A {@link https://github.com/feross/buffer|Buffer} containing the index of the output in the transaction consumed in the [[StandardTransferableInput]]\n     * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Input]]\n     * @param input An [[Input]] to be made transferable\n     */\n    constructor(txid = undefined, outputidx = undefined, assetID = undefined, input = undefined) {\n        super();\n        this._typeName = \"StandardTransferableInput\";\n        this._typeID = undefined;\n        this.txid = buffer_1.Buffer.alloc(32);\n        this.outputidx = buffer_1.Buffer.alloc(4);\n        this.assetID = buffer_1.Buffer.alloc(32);\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.\n         */\n        this.getTxID = () => this.txid;\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.\n         */\n        this.getOutputIdx = () => this.outputidx;\n        /**\n         * Returns a base-58 string representation of the UTXOID this [[StandardTransferableInput]] references.\n         */\n        this.getUTXOID = () => bintools.bufferToB58(buffer_1.Buffer.concat([this.txid, this.outputidx]));\n        /**\n         * Returns the input.\n         */\n        this.getInput = () => this.input;\n        /**\n         * Returns the assetID of the input.\n         */\n        this.getAssetID = () => this.assetID;\n        if (typeof txid !== 'undefined' && typeof outputidx !== 'undefined' && typeof assetID !== 'undefined' && input instanceof Input) {\n            this.input = input;\n            this.txid = txid;\n            this.outputidx = outputidx;\n            this.assetID = assetID;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { txid: serialization.encoder(this.txid, encoding, \"Buffer\", \"cb58\"), outputidx: serialization.encoder(this.outputidx, encoding, \"Buffer\", \"decimalString\"), assetID: serialization.encoder(this.assetID, encoding, \"Buffer\", \"cb58\") });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.txid = serialization.decoder(fields[\"txid\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.outputidx = serialization.decoder(fields[\"outputidx\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.assetID = serialization.decoder(fields[\"assetID\"], encoding, \"cb58\", \"Buffer\", 32);\n        //input deserialization must be implmented in child classes\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTransferableInput]].\n     */\n    toBuffer() {\n        const parseableBuff = super.toBuffer();\n        const bsize = this.txid.length + this.outputidx.length + this.assetID.length + parseableBuff.length;\n        const barr = [this.txid, this.outputidx, this.assetID, parseableBuff];\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Returns a base-58 representation of the [[StandardTransferableInput]].\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.StandardTransferableInput = StandardTransferableInput;\n/**\n * An [[Input]] class which specifies a token amount .\n */\nclass StandardAmountInput extends Input {\n    /**\n     * An [[AmountInput]] class which issues a payment on an assetID.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the input\n     */\n    constructor(amount = undefined) {\n        super();\n        this._typeName = \"StandardAmountInput\";\n        this._typeID = undefined;\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        /**\n         * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getAmount = () => this.amountValue.clone();\n        if (amount) {\n            this.amountValue = amount.clone();\n            this.amount = bintools.fromBNToBuffer(amount, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"amount\": serialization.encoder(this.amount, encoding, \"Buffer\", \"decimalString\", 8) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.amount = serialization.decoder(fields[\"amount\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[AmountInput]] and returns the size of the input.\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.amount = bintools.copyFrom(bytes, offset, offset + 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n        offset += 8;\n        return super.fromBuffer(bytes, offset);\n    }\n    /**\n     * Returns the buffer representing the [[AmountInput]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.amount.length + superbuff.length;\n        const barr = [this.amount, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.StandardAmountInput = StandardAmountInput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-AssetAmount\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardAssetAmountDestination = exports.AssetAmount = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst errors_1 = require(\"../utils/errors\");\n/**\n * Class for managing asset amounts in the UTXOSet fee calcuation\n */\nclass AssetAmount {\n    constructor(assetID, amount, burn) {\n        // assetID that is amount is managing.\n        this.assetID = buffer_1.Buffer.alloc(32);\n        // amount of this asset that should be sent.\n        this.amount = new bn_js_1.default(0);\n        // burn is the amount of this asset that should be burned.\n        this.burn = new bn_js_1.default(0);\n        // spent is the total amount of this asset that has been consumed.\n        this.spent = new bn_js_1.default(0);\n        // stakeableLockSpent is the amount of this asset that has been consumed that\n        // was locked.\n        this.stakeableLockSpent = new bn_js_1.default(0);\n        // change is the excess amount of this asset that was consumed over the amount\n        // requested to be consumed(amount + burn).\n        this.change = new bn_js_1.default(0);\n        // stakeableLockChange is a flag to mark if the input that generated the\n        // change was locked.\n        this.stakeableLockChange = false;\n        // finished is a convenience flag to track \"spent >= amount + burn\"\n        this.finished = false;\n        this.getAssetID = () => {\n            return this.assetID;\n        };\n        this.getAssetIDString = () => {\n            return this.assetID.toString(\"hex\");\n        };\n        this.getAmount = () => {\n            return this.amount;\n        };\n        this.getSpent = () => {\n            return this.spent;\n        };\n        this.getBurn = () => {\n            return this.burn;\n        };\n        this.getChange = () => {\n            return this.change;\n        };\n        this.getStakeableLockSpent = () => {\n            return this.stakeableLockSpent;\n        };\n        this.getStakeableLockChange = () => {\n            return this.stakeableLockChange;\n        };\n        this.isFinished = () => {\n            return this.finished;\n        };\n        // spendAmount should only be called if this asset is still awaiting more\n        // funds to consume.\n        this.spendAmount = (amt, stakeableLocked = false) => {\n            if (this.finished) {\n                /* istanbul ignore next */\n                throw new errors_1.InsufficientFundsError('Error - AssetAmount.spendAmount: attempted to spend '\n                    + 'excess funds');\n            }\n            this.spent = this.spent.add(amt);\n            if (stakeableLocked) {\n                this.stakeableLockSpent = this.stakeableLockSpent.add(amt);\n            }\n            const total = this.amount.add(this.burn);\n            if (this.spent.gte(total)) {\n                this.change = this.spent.sub(total);\n                if (stakeableLocked) {\n                    this.stakeableLockChange = true;\n                }\n                this.finished = true;\n            }\n            return this.finished;\n        };\n        this.assetID = assetID;\n        this.amount = typeof amount === \"undefined\" ? new bn_js_1.default(0) : amount;\n        this.burn = typeof burn === \"undefined\" ? new bn_js_1.default(0) : burn;\n        this.spent = new bn_js_1.default(0);\n        this.stakeableLockSpent = new bn_js_1.default(0);\n        this.stakeableLockChange = false;\n    }\n}\nexports.AssetAmount = AssetAmount;\nclass StandardAssetAmountDestination {\n    constructor(destinations, senders, changeAddresses) {\n        this.amounts = [];\n        this.destinations = [];\n        this.senders = [];\n        this.changeAddresses = [];\n        this.amountkey = {};\n        this.inputs = [];\n        this.outputs = [];\n        this.change = [];\n        // TODO: should this function allow for repeated calls with the same\n        //       assetID?\n        this.addAssetAmount = (assetID, amount, burn) => {\n            let aa = new AssetAmount(assetID, amount, burn);\n            this.amounts.push(aa);\n            this.amountkey[aa.getAssetIDString()] = aa;\n        };\n        this.addInput = (input) => {\n            this.inputs.push(input);\n        };\n        this.addOutput = (output) => {\n            this.outputs.push(output);\n        };\n        this.addChange = (output) => {\n            this.change.push(output);\n        };\n        this.getAmounts = () => {\n            return this.amounts;\n        };\n        this.getDestinations = () => {\n            return this.destinations;\n        };\n        this.getSenders = () => {\n            return this.senders;\n        };\n        this.getChangeAddresses = () => {\n            return this.changeAddresses;\n        };\n        this.getAssetAmount = (assetHexStr) => {\n            return this.amountkey[assetHexStr];\n        };\n        this.assetExists = (assetHexStr) => {\n            return (assetHexStr in this.amountkey);\n        };\n        this.getInputs = () => {\n            return this.inputs;\n        };\n        this.getOutputs = () => {\n            return this.outputs;\n        };\n        this.getChangeOutputs = () => {\n            return this.change;\n        };\n        this.getAllOutputs = () => {\n            return this.outputs.concat(this.change);\n        };\n        this.canComplete = () => {\n            for (let i = 0; i < this.amounts.length; i++) {\n                if (!this.amounts[i].isFinished()) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        this.destinations = destinations;\n        this.changeAddresses = changeAddresses;\n        this.senders = senders;\n    }\n}\nexports.StandardAssetAmountDestination = StandardAssetAmountDestination;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for representing a private and public keypair on the Platform Chain.\n */\nclass KeyPair extends secp256k1_1.SECP256k1KeyPair {\n    constructor(hrp, chainid) {\n        super();\n        this.chainid = '';\n        this.hrp = '';\n        /**\n         * Returns the address's string representation.\n         *\n         * @returns A string representation of the address\n         */\n        this.getAddressString = () => {\n            const addr = this.addressFromPublicKey(this.pubk);\n            const type = \"bech32\";\n            return serialization.bufferToType(addr, type, this.hrp, this.chainid);\n        };\n        /**\n           * Returns the chainID associated with this key.\n           *\n           * @returns The [[KeyPair]]'s chainID\n           */\n        this.getChainID = () => this.chainid;\n        /**\n         * Sets the the chainID associated with this key.\n         *\n         * @param chainid String for the chainID\n         */\n        this.setChainID = (chainid) => {\n            this.chainid = chainid;\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        this.chainid = chainid;\n        this.hrp = hrp;\n        this.generateKey();\n    }\n    clone() {\n        let newkp = new KeyPair(this.hrp, this.chainid);\n        newkp.importKey(bintools.copyFrom(this.getPrivateKey()));\n        return newkp;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyPair(args[0], args[1]);\n        }\n        return new KeyPair(this.hrp, this.chainid);\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam KeyPair Class extending [[KeyPair]] which is used as the key in [[KeyChain]]\n */\nclass KeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n     * Returns instance of KeyChain.\n     */\n    constructor(hrp, chainid) {\n        super();\n        this.hrp = '';\n        this.chainid = '';\n        /**\n         * Makes a new key pair, returns the address.\n         *\n         * @returns The new key pair\n         */\n        this.makeKey = () => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainid);\n            super.addKey(newKey);\n        };\n        /**\n         * Given a private key, makes a new key pair, returns the address.\n         *\n         * @param privk A {@link https://github.com/feross/buffer|Buffer} or cb58 serialized string representing the private key\n         *\n         * @returns The new key pair\n         */\n        this.importKey = (privk) => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            let pk;\n            if (typeof privk === 'string') {\n                pk = bintools.cb58Decode(privk.split('-')[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainid = chainid;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyChain(args[0], args[1]);\n        }\n        return new KeyChain(this.hrp, this.chainid);\n    }\n    ;\n    clone() {\n        const newkc = new KeyChain(this.hrp, this.chainid);\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n    ;\n    union(kc) {\n        let newkc = kc.clone();\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Y2hhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2tleWNoYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUtBLG9FQUE0QztBQUM1QyxzREFBNkU7QUFDN0UsdUNBQTJEO0FBRTNEOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQWEsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNsRCxNQUFNLGFBQWEsR0FBa0IscUJBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUVoRTs7R0FFRztBQUNILE1BQWEsT0FBUSxTQUFRLDRCQUFnQjtJQThEekMsWUFBWSxHQUFVLEVBQUUsT0FBYztRQUNsQyxLQUFLLEVBQUUsQ0FBQztRQTdERixZQUFPLEdBQVUsRUFBRSxDQUFDO1FBQ3BCLFFBQUcsR0FBVSxFQUFFLENBQUM7UUFFMUI7Ozs7V0FJRztRQUNMLHFCQUFnQixHQUFHLEdBQVcsRUFBRTtZQUM5QixNQUFNLElBQUksR0FBVyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ3pELE1BQU0sSUFBSSxHQUFtQixRQUFRLENBQUE7WUFDckMsT0FBTyxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDdkUsQ0FBQyxDQUFBO1FBRUM7Ozs7YUFJSztRQUNMLGVBQVUsR0FBRyxHQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBRXZDOzs7O1dBSUc7UUFDSCxlQUFVLEdBQUcsQ0FBQyxPQUFjLEVBQU8sRUFBRTtZQUNqQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUMzQixDQUFDLENBQUM7UUFHRjs7OztXQUlHO1FBQ0gsV0FBTSxHQUFHLEdBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7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QztJQUMzQixDQUFDO0lBOUJELE1BQU0sQ0FBQyxHQUFHLElBQVU7UUFDaEIsSUFBRyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBQztZQUNoQixPQUFPLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQVMsQ0FBQztTQUNqRDtRQUNELE9BQU8sSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFTLENBQUM7SUFDeEQsQ0FBQztJQUFBLENBQUM7SUFFRixLQUFLO1FBQ0QsTUFBTSxLQUFLLEdBQVksSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUQsS0FBSSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFDO1lBQ25CLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsT0FBTyxLQUFhLENBQUM7SUFDekIsQ0FBQztJQUFBLENBQUM7SUFFRixLQUFLLENBQUMsRUFBTztRQUNULElBQUksS0FBSyxHQUFZLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNoQyxLQUFJLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUM7WUFDbkIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDdEM7UUFDRCxPQUFPLEtBQWEsQ0FBQztJQUN6QixDQUFDO0NBVUo7QUExRUQsNEJBMEVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLVBsYXRmb3JtVk0tS2V5Q2hhaW5cbiAqL1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlci9cIjtcbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi8uLi91dGlscy9iaW50b29scyc7XG5pbXBvcnQgeyBTRUNQMjU2azFLZXlDaGFpbiwgU0VDUDI1NmsxS2V5UGFpciB9IGZyb20gJy4uLy4uL2NvbW1vbi9zZWNwMjU2azEnO1xuaW1wb3J0IHsgU2VyaWFsaXphdGlvbiwgU2VyaWFsaXplZFR5cGUgfSBmcm9tICcuLi8uLi91dGlscydcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzOiBCaW5Ub29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5jb25zdCBzZXJpYWxpemF0aW9uOiBTZXJpYWxpemF0aW9uID0gU2VyaWFsaXphdGlvbi5nZXRJbnN0YW5jZSgpXG5cbi8qKlxuICogQ2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIHByaXZhdGUgYW5kIHB1YmxpYyBrZXlwYWlyIG9uIHRoZSBQbGF0Zm9ybSBDaGFpbi4gXG4gKi9cbmV4cG9ydCBjbGFzcyBLZXlQYWlyIGV4dGVuZHMgU0VDUDI1NmsxS2V5UGFpciB7XG5cbiAgICBwcm90ZWN0ZWQgY2hhaW5pZDpzdHJpbmcgPSAnJztcbiAgICBwcm90ZWN0ZWQgaHJwOnN0cmluZyA9ICcnO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYWRkcmVzcydzIHN0cmluZyByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBcbiAgICAgKiBAcmV0dXJucyBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgYWRkcmVzc1xuICAgICAqL1xuICBnZXRBZGRyZXNzU3RyaW5nID0gKCk6IHN0cmluZyA9PiB7XG4gICAgY29uc3QgYWRkcjogQnVmZmVyID0gdGhpcy5hZGRyZXNzRnJvbVB1YmxpY0tleSh0aGlzLnB1YmspXG4gICAgY29uc3QgdHlwZTogU2VyaWFsaXplZFR5cGUgPSBcImJlY2gzMlwiXG4gICAgcmV0dXJuIHNlcmlhbGl6YXRpb24uYnVmZmVyVG9UeXBlKGFkZHIsIHR5cGUsIHRoaXMuaHJwLCB0aGlzLmNoYWluaWQpXG4gIH1cblxuICAgIC8qKlxuICAgICAgICogUmV0dXJucyB0aGUgY2hhaW5JRCBhc3NvY2lhdGVkIHdpdGggdGhpcyBrZXkuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMgVGhlIFtbS2V5UGFpcl1dJ3MgY2hhaW5JRFxuICAgICAgICovXG4gICAgZ2V0Q2hhaW5JRCA9ICgpOnN0cmluZyA9PiB0aGlzLmNoYWluaWQ7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0aGUgY2hhaW5JRCBhc3NvY2lhdGVkIHdpdGggdGhpcyBrZXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2hhaW5pZCBTdHJpbmcgZm9yIHRoZSBjaGFpbklEXG4gICAgICovXG4gICAgc2V0Q2hhaW5JRCA9IChjaGFpbmlkOnN0cmluZyk6dm9pZCA9PiB7XG4gICAgICAgIHRoaXMuY2hhaW5pZCA9IGNoYWluaWQ7XG4gICAgfTtcbiAgICBcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIEh1bWFuLVJlYWRhYmxlLVBhcnQgb2YgdGhlIG5ldHdvcmsgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIFtbS2V5UGFpcl1dJ3MgSHVtYW4tUmVhZGFibGUtUGFydCBvZiB0aGUgbmV0d29yaydzIEJlY2gzMiBhZGRyZXNzaW5nIHNjaGVtZVxuICAgICAqL1xuICAgIGdldEhSUCA9ICgpOnN0cmluZyA9PiB0aGlzLmhycDtcbiAgXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGhlIEh1bWFuLVJlYWRhYmxlLVBhcnQgb2YgdGhlIG5ldHdvcmsgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGhycCBTdHJpbmcgZm9yIHRoZSBIdW1hbi1SZWFkYWJsZS1QYXJ0IG9mIEJlY2gzMiBhZGRyZXNzZXNcbiAgICAgKi9cbiAgICBzZXRIUlAgPSAoaHJwOnN0cmluZyk6dm9pZCA9PiB7XG4gICAgICB0aGlzLmhycCA9IGhycDtcbiAgICB9O1xuXG4gICAgY2xvbmUoKTp0aGlzIHtcbiAgICAgICAgbGV0IG5ld2twOktleVBhaXIgPSBuZXcgS2V5UGFpcih0aGlzLmhycCwgdGhpcy5jaGFpbmlkKTtcbiAgICAgICAgbmV3a3AuaW1wb3J0S2V5KGJpbnRvb2xzLmNvcHlGcm9tKHRoaXMuZ2V0UHJpdmF0ZUtleSgpKSk7XG4gICAgICAgIHJldHVybiBuZXdrcCBhcyB0aGlzO1xuICAgIH1cblxuICAgIGNyZWF0ZSguLi5hcmdzOmFueVtdKTp0aGlzIHtcbiAgICAgICAgaWYoYXJncy5sZW5ndGggPT0gMil7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEtleVBhaXIoYXJnc1swXSwgYXJnc1sxXSkgYXMgdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEtleVBhaXIodGhpcy5ocnAsIHRoaXMuY2hhaW5pZCkgYXMgdGhpcztcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihocnA6c3RyaW5nLCBjaGFpbmlkOnN0cmluZykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNoYWluaWQgPSBjaGFpbmlkO1xuICAgICAgICB0aGlzLmhycCA9IGhycDtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUtleSgpO1xuICAgIH1cbiAgICBcbn1cblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEga2V5IGNoYWluIGluIEF2YWxhbmNoZS4gXG4gKiBcbiAqIEB0eXBlcGFyYW0gS2V5UGFpciBDbGFzcyBleHRlbmRpbmcgW1tLZXlQYWlyXV0gd2hpY2ggaXMgdXNlZCBhcyB0aGUga2V5IGluIFtbS2V5Q2hhaW5dXVxuICovXG5leHBvcnQgY2xhc3MgS2V5Q2hhaW4gZXh0ZW5kcyBTRUNQMjU2azFLZXlDaGFpbjxLZXlQYWlyPiB7XG5cbiAgICBocnA6c3RyaW5nID0gJyc7XG4gICAgY2hhaW5pZDpzdHJpbmcgPSAnJztcblxuICAgIC8qKlxuICAgICAqIE1ha2VzIGEgbmV3IGtleSBwYWlyLCByZXR1cm5zIHRoZSBhZGRyZXNzLlxuICAgICAqIFxuICAgICAqIEByZXR1cm5zIFRoZSBuZXcga2V5IHBhaXJcbiAgICAgKi9cbiAgICBtYWtlS2V5ID0gKCk6S2V5UGFpciA9PiB7XG4gICAgICAgIGxldCBrZXlwYWlyOktleVBhaXIgPSBuZXcgS2V5UGFpcih0aGlzLmhycCwgdGhpcy5jaGFpbmlkKTtcbiAgICAgICAgdGhpcy5hZGRLZXkoa2V5cGFpcik7XG4gICAgICAgIHJldHVybiBrZXlwYWlyO1xuICAgIH1cblxuICAgIGFkZEtleSA9IChuZXdLZXk6S2V5UGFpcikgPT4ge1xuICAgICAgICBuZXdLZXkuc2V0Q2hhaW5JRCh0aGlzLmNoYWluaWQpO1xuICAgICAgICBzdXBlci5hZGRLZXkobmV3S2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIHByaXZhdGUga2V5LCBtYWtlcyBhIG5ldyBrZXkgcGFpciwgcmV0dXJucyB0aGUgYWRkcmVzcy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gcHJpdmsgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBvciBjYjU4IHNlcmlhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcHJpdmF0ZSBrZXkgXG4gICAgICogXG4gICAgICogQHJldHVybnMgVGhlIG5ldyBrZXkgcGFpclxuICAgICAqL1xuICAgIGltcG9ydEtleSA9IChwcml2azpCdWZmZXIgfCBzdHJpbmcpOktleVBhaXIgPT4ge1xuICAgICAgICBsZXQga2V5cGFpcjpLZXlQYWlyID0gbmV3IEtleVBhaXIodGhpcy5ocnAsIHRoaXMuY2hhaW5pZCk7XG4gICAgICAgIGxldCBwazpCdWZmZXI7XG4gICAgICAgIGlmKHR5cGVvZiBwcml2ayA9PT0gJ3N0cmluZycpe1xuICAgICAgICAgICAgcGsgPSBiaW50b29scy5jYjU4RGVjb2RlKHByaXZrLnNwbGl0KCctJylbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGsgPSBiaW50b29scy5jb3B5RnJvbShwcml2ayk7XG4gICAgICAgIH1cbiAgICAgICAga2V5cGFpci5pbXBvcnRLZXkocGspO1xuICAgICAgICBpZighKGtleXBhaXIuZ2V0QWRkcmVzcygpLnRvU3RyaW5nKFwiaGV4XCIpIGluIHRoaXMua2V5cykpe1xuICAgICAgICAgICAgdGhpcy5hZGRLZXkoa2V5cGFpcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleXBhaXI7XG4gICAgfVxuXG4gICAgY3JlYXRlKC4uLmFyZ3M6YW55W10pOnRoaXMge1xuICAgICAgICBpZihhcmdzLmxlbmd0aCA9PSAyKXtcbiAgICAgICAgICAgIHJldHVybiBuZXcgS2V5Q2hhaW4oYXJnc1swXSwgYXJnc1sxXSkgYXMgdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEtleUNoYWluKHRoaXMuaHJwLCB0aGlzLmNoYWluaWQpIGFzIHRoaXM7XG4gICAgfTtcblxuICAgIGNsb25lKCk6dGhpcyB7XG4gICAgICAgIGNvbnN0IG5ld2tjOktleUNoYWluID0gbmV3IEtleUNoYWluKHRoaXMuaHJwLCB0aGlzLmNoYWluaWQpO1xuICAgICAgICBmb3IobGV0IGsgaW4gdGhpcy5rZXlzKXtcbiAgICAgICAgICAgIG5ld2tjLmFkZEtleSh0aGlzLmtleXNba10uY2xvbmUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld2tjIGFzIHRoaXM7XG4gICAgfTtcblxuICAgIHVuaW9uKGtjOnRoaXMpOnRoaXMge1xuICAgICAgICBsZXQgbmV3a2M6S2V5Q2hhaW4gPSBrYy5jbG9uZSgpO1xuICAgICAgICBmb3IobGV0IGsgaW4gdGhpcy5rZXlzKXtcbiAgICAgICAgICAgIG5ld2tjLmFkZEtleSh0aGlzLmtleXNba10uY2xvbmUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld2tjIGFzIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbnN0YW5jZSBvZiBLZXlDaGFpbi5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihocnA6c3RyaW5nLCBjaGFpbmlkOnN0cmluZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaHJwID0gaHJwO1xuICAgICAgICB0aGlzLmNoYWluaWQgPSBjaGFpbmlkO1xuICAgIH1cbn0iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StakeableLockIn = exports.SECPTransferInput = exports.AmountInput = exports.TransferableInput = exports.ParseableInput = exports.SelectInputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Inputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nexports.SelectInputClass = (inputid, ...args) => {\n    if (inputid === constants_1.PlatformVMConstants.SECPINPUTID) {\n        return new SECPTransferInput(...args);\n    }\n    else if (inputid === constants_1.PlatformVMConstants.STAKEABLELOCKINID) {\n        return new StakeableLockIn(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.InputIdError(\"Error - SelectInputClass: unknown inputid\");\n};\nclass ParseableInput extends input_1.StandardParseableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"ParseableInput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = exports.SelectInputClass(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        const inputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.input = exports.SelectInputClass(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.ParseableInput = ParseableInput;\nclass TransferableInput extends input_1.StandardTransferableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableInput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = exports.SelectInputClass(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.PlatformVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.input = exports.SelectInputClass(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountInput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    select(id, ...args) {\n        return exports.SelectInputClass(id, ...args);\n    }\n}\nexports.AmountInput = AmountInput;\nclass SECPTransferInput extends AmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferInput\";\n        this._typeID = constants_1.PlatformVMConstants.SECPINPUTID;\n        this.getCredentialID = () => constants_1.PlatformVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the inputID for this input\n     */\n    getInputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferInput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferInput = SECPTransferInput;\n/**\n * An [[Input]] class which specifies an input that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n */\nclass StakeableLockIn extends AmountInput {\n    /**\n     * A [[Output]] class which specifies an [[Input]] that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the input\n     * @param stakeableLocktime A {@link https://github.com/indutny/bn.js/|BN} representing the stakeable locktime\n     * @param transferableInput A [[ParseableInput]] which is embedded into this input.\n     */\n    constructor(amount = undefined, stakeableLocktime = undefined, transferableInput = undefined) {\n        super(amount);\n        this._typeName = \"StakeableLockIn\";\n        this._typeID = constants_1.PlatformVMConstants.STAKEABLELOCKINID;\n        this.getCredentialID = () => constants_1.PlatformVMConstants.SECPCREDENTIAL;\n        if (typeof stakeableLocktime !== \"undefined\") {\n            this.stakeableLocktime = bintools.fromBNToBuffer(stakeableLocktime, 8);\n        }\n        if (typeof transferableInput !== \"undefined\") {\n            this.transferableInput = transferableInput;\n            this.synchronize();\n        }\n    }\n    //serialize and deserialize both are inherited\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        let outobj = Object.assign(Object.assign({}, fields), { \"stakeableLocktime\": serialization.encoder(this.stakeableLocktime, encoding, \"Buffer\", \"decimalString\", 8), \"transferableInput\": this.transferableInput.serialize(encoding) });\n        delete outobj[\"sigIdxs\"];\n        delete outobj[\"sigCount\"];\n        delete outobj[\"amount\"];\n        return outobj;\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        fields[\"sigIdxs\"] = [];\n        fields[\"sigCount\"] = \"0\";\n        fields[\"amount\"] = \"98\";\n        super.deserialize(fields, encoding);\n        this.stakeableLocktime = serialization.decoder(fields[\"stakeableLocktime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.transferableInput = new ParseableInput();\n        this.transferableInput.deserialize(fields[\"transferableInput\"], encoding);\n        this.synchronize();\n    }\n    synchronize() {\n        let input = this.transferableInput.getInput();\n        this.sigIdxs = input.getSigIdxs();\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        this.amount = bintools.fromBNToBuffer(input.getAmount(), 8);\n        this.amountValue = input.getAmount();\n    }\n    getStakeableLocktime() {\n        return bintools.fromBufferToBN(this.stakeableLocktime);\n    }\n    getTransferablInput() {\n        return this.transferableInput;\n    }\n    /**\n     * Returns the inputID for this input\n     */\n    getInputID() {\n        return this._typeID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[StakeableLockIn]] and returns the size of the output.\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.stakeableLocktime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.transferableInput = new ParseableInput();\n        offset = this.transferableInput.fromBuffer(bytes, offset);\n        this.synchronize();\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[StakeableLockIn]] instance.\n     */\n    toBuffer() {\n        const xferinBuff = this.transferableInput.toBuffer();\n        const bsize = this.stakeableLocktime.length + xferinBuff.length;\n        const barr = [this.stakeableLocktime, xferinBuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    create(...args) {\n        return new StakeableLockIn(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    select(id, ...args) {\n        return exports.SelectInputClass(id, ...args);\n    }\n}\nexports.StakeableLockIn = StakeableLockIn;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ImportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param sourceChain Optiona chainid for the source inputs to import. Default platform chainid.\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, sourceChain = undefined, importIns = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ImportTx\";\n        this._typeID = constants_1.PlatformVMConstants.IMPORTTX;\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        /**\n           * Returns the id of the [[ImportTx]]\n           */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        this.sourceChain = sourceChain; // do no correct, if it's wrong it'll bomb on toBuffer\n        if (typeof importIns !== 'undefined' && Array.isArray(importIns)) {\n            for (let i = 0; i < importIns.length; i++) {\n                if (!(importIns[i] instanceof inputs_1.TransferableInput)) {\n                    throw new errors_1.TransferableInputError(\"Error - ImportTx.constructor: invalid TransferableInput in array parameter 'importIns'\");\n                }\n            }\n            this.importIns = importIns;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"sourceChain\": serialization.encoder(this.sourceChain, encoding, \"Buffer\", \"cb58\"), \"importIns\": this.importIns.map((i) => i.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sourceChain = serialization.decoder(fields[\"sourceChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.importIns = fields[\"importIns\"].map((i) => {\n            let ii = new inputs_1.TransferableInput();\n            ii.deserialize(i, encoding);\n            return ii;\n        });\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it, populates the class, and returns the length of the [[ImportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n       *\n       * @returns The length of the raw [[ImportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        for (let i = 0; i < this.importIns.length; i++) {\n            barr.push(this.importIns[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n       * Returns an array of [[TransferableInput]]s in this transaction.\n       */\n    getImportInputs() {\n        return this.importIns;\n    }\n    /**\n       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n       *\n       * @param msg A Buffer for the [[UnsignedTx]]\n       * @param kc An [[KeyChain]] used in signing\n       *\n       * @returns An array of [[Credential]]s\n       */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.importIns.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.importIns[i].getInput().getCredentialID());\n            const sigidxs = this.importIns[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new ImportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ImportTx(...args);\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./apibase\"), exports);\n__exportStar(require(\"./assetamount\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./evmtx\"), exports);\n__exportStar(require(\"./input\"), exports);\n__exportStar(require(\"./interfaces\"), exports);\n__exportStar(require(\"./jrpcapi\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./nbytes\"), exports);\n__exportStar(require(\"./output\"), exports);\n__exportStar(require(\"./restapi\"), exports);\n__exportStar(require(\"./secp256k1\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDRDQUEwQjtBQUMxQixnREFBOEI7QUFDOUIsZ0RBQThCO0FBQzlCLDBDQUF3QjtBQUN4QiwwQ0FBd0I7QUFDeEIsK0NBQTZCO0FBQzdCLDRDQUEwQjtBQUMxQiw2Q0FBMkI7QUFDM0IsMkNBQXlCO0FBQ3pCLDJDQUF5QjtBQUN6Qiw0Q0FBMEI7QUFDMUIsOENBQTRCO0FBQzVCLHVDQUFxQjtBQUNyQiwwQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FwaWJhc2UnO1xuZXhwb3J0ICogZnJvbSAnLi9hc3NldGFtb3VudCc7XG5leHBvcnQgKiBmcm9tICcuL2NyZWRlbnRpYWxzJztcbmV4cG9ydCAqIGZyb20gJy4vZXZtdHgnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnB1dCc7XG5leHBvcnQgKiBmcm9tICcuL2ludGVyZmFjZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9qcnBjYXBpJztcbmV4cG9ydCAqIGZyb20gJy4va2V5Y2hhaW4nO1xuZXhwb3J0ICogZnJvbSAnLi9uYnl0ZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9vdXRwdXQnO1xuZXhwb3J0ICogZnJvbSAnLi9yZXN0YXBpJztcbmV4cG9ydCAqIGZyb20gJy4vc2VjcDI1NmsxJztcbmV4cG9ydCAqIGZyb20gJy4vdHgnO1xuZXhwb3J0ICogZnJvbSAnLi91dHhvcyc7XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9oZWFsdGgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9hcGknO1xuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardUTXOSet = exports.StandardUTXO = void 0;\n/**\n * @packageDocumentation\n * @module Common-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst output_1 = require(\"./output\");\nconst helperfunctions_1 = require(\"../utils/helperfunctions\");\nconst serialization_1 = require(\"../utils/serialization\");\nconst errors_1 = require(\"../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single StandardUTXO.\n */\nclass StandardUTXO extends serialization_1.Serializable {\n    /**\n       * Class for representing a single StandardUTXO.\n       *\n       * @param codecID Optional number which specifies the codeID of the UTXO. Default 0\n       * @param txID Optional {@link https://github.com/feross/buffer|Buffer} of transaction ID for the StandardUTXO\n       * @param txidx Optional {@link https://github.com/feross/buffer|Buffer} or number for the index of the transaction's [[Output]]\n       * @param assetID Optional {@link https://github.com/feross/buffer|Buffer} of the asset ID for the StandardUTXO\n       * @param outputid Optional {@link https://github.com/feross/buffer|Buffer} or number of the output ID for the StandardUTXO\n       */\n    constructor(codecID = 0, txID = undefined, outputidx = undefined, assetID = undefined, output = undefined) {\n        super();\n        this._typeName = \"StandardUTXO\";\n        this._typeID = undefined;\n        this.codecID = buffer_1.Buffer.alloc(2);\n        this.txid = buffer_1.Buffer.alloc(32);\n        this.outputidx = buffer_1.Buffer.alloc(4);\n        this.assetID = buffer_1.Buffer.alloc(32);\n        this.output = undefined;\n        /**\n           * Returns the numeric representation of the CodecID.\n           */\n        this.getCodecID = () => this.codecID.readUInt8(0);\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n          */\n        this.getCodecIDBuffer = () => this.codecID;\n        /**\n           * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.\n           */\n        this.getTxID = () => this.txid;\n        /**\n           * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.\n           */\n        this.getOutputIdx = () => this.outputidx;\n        /**\n           * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.\n           */\n        this.getAssetID = () => this.assetID;\n        /**\n           * Returns the UTXOID as a base-58 string (UTXOID is a string )\n           */\n        this.getUTXOID = () => bintools.bufferToB58(buffer_1.Buffer.concat([this.getTxID(), this.getOutputIdx()]));\n        /**\n         * Returns a reference to the output\n        */\n        this.getOutput = () => this.output;\n        if (typeof codecID !== 'undefined') {\n            this.codecID.writeUInt8(codecID, 0);\n        }\n        if (typeof txID !== 'undefined') {\n            this.txid = txID;\n        }\n        if (typeof outputidx === 'number') {\n            this.outputidx.writeUInt32BE(outputidx, 0);\n        }\n        else if (outputidx instanceof buffer_1.Buffer) {\n            this.outputidx = outputidx;\n        }\n        if (typeof assetID !== 'undefined') {\n            this.assetID = assetID;\n        }\n        if (typeof output !== 'undefined') {\n            this.output = output;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { codecID: serialization.encoder(this.codecID, encoding, \"Buffer\", \"decimalString\"), txid: serialization.encoder(this.txid, encoding, \"Buffer\", \"cb58\"), outputidx: serialization.encoder(this.outputidx, encoding, \"Buffer\", \"decimalString\"), assetID: serialization.encoder(this.assetID, encoding, \"Buffer\", \"cb58\"), output: this.output.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.codecID = serialization.decoder(fields[\"codecID\"], encoding, \"decimalString\", \"Buffer\", 2);\n        this.txid = serialization.decoder(fields[\"txid\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.outputidx = serialization.decoder(fields[\"outputidx\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.assetID = serialization.decoder(fields[\"assetID\"], encoding, \"cb58\", \"Buffer\", 32);\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardUTXO]].\n       */\n    toBuffer() {\n        const outbuff = this.output.toBuffer();\n        const outputidbuffer = buffer_1.Buffer.alloc(4);\n        outputidbuffer.writeUInt32BE(this.output.getOutputID(), 0);\n        const barr = [this.codecID, this.txid, this.outputidx, this.assetID, outputidbuffer, outbuff];\n        return buffer_1.Buffer.concat(barr, this.codecID.length + this.txid.length\n            + this.outputidx.length + this.assetID.length\n            + outputidbuffer.length + outbuff.length);\n    }\n}\nexports.StandardUTXO = StandardUTXO;\n/**\n * Class representing a set of [[StandardUTXO]]s.\n */\nclass StandardUTXOSet extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"StandardUTXOSet\";\n        this._typeID = undefined;\n        this.utxos = {};\n        this.addressUTXOs = {}; // maps address to utxoids:locktime\n        /**\n         * Returns true if the [[StandardUTXO]] is in the StandardUTXOSet.\n         *\n         * @param utxo Either a [[StandardUTXO]] a cb58 serialized string representing a StandardUTXO\n         */\n        this.includes = (utxo) => {\n            let utxoX = undefined;\n            let utxoid = undefined;\n            try {\n                utxoX = this.parseUTXO(utxo);\n                utxoid = utxoX.getUTXOID();\n            }\n            catch (e) {\n                if (e instanceof Error) {\n                    console.log(e.message);\n                }\n                else {\n                    console.log(e);\n                }\n                return false;\n            }\n            return (utxoid in this.utxos);\n        };\n        /**\n           * Removes a [[StandardUTXO]] from the [[StandardUTXOSet]] if it exists.\n           *\n           * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n           *\n           * @returns A [[StandardUTXO]] if it was removed and undefined if nothing was removed.\n           */\n        this.remove = (utxo) => {\n            let utxovar = undefined;\n            try {\n                utxovar = this.parseUTXO(utxo);\n            }\n            catch (e) {\n                if (e instanceof Error) {\n                    console.log(e.message);\n                }\n                else {\n                    console.log(e);\n                }\n                return undefined;\n            }\n            const utxoid = utxovar.getUTXOID();\n            if (!(utxoid in this.utxos)) {\n                return undefined;\n            }\n            delete this.utxos[utxoid];\n            const addresses = Object.keys(this.addressUTXOs);\n            for (let i = 0; i < addresses.length; i++) {\n                if (utxoid in this.addressUTXOs[addresses[i]]) {\n                    delete this.addressUTXOs[addresses[i]][utxoid];\n                }\n            }\n            return utxovar;\n        };\n        /**\n           * Removes an array of [[StandardUTXO]]s to the [[StandardUTXOSet]].\n           *\n           * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n           * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n           *\n           * @returns An array of UTXOs which were removed.\n           */\n        this.removeArray = (utxos) => {\n            const removed = [];\n            for (let i = 0; i < utxos.length; i++) {\n                const result = this.remove(utxos[i]);\n                if (typeof result !== 'undefined') {\n                    removed.push(result);\n                }\n            }\n            return removed;\n        };\n        /**\n           * Gets a [[StandardUTXO]] from the [[StandardUTXOSet]] by its UTXOID.\n           *\n           * @param utxoid String representing the UTXOID\n           *\n           * @returns A [[StandardUTXO]] if it exists in the set.\n           */\n        this.getUTXO = (utxoid) => this.utxos[utxoid];\n        /**\n           * Gets all the [[StandardUTXO]]s, optionally that match with UTXOIDs in an array\n           *\n           * @param utxoids An optional array of UTXOIDs, returns all [[StandardUTXO]]s if not provided\n           *\n           * @returns An array of [[StandardUTXO]]s.\n           */\n        this.getAllUTXOs = (utxoids = undefined) => {\n            let results = [];\n            if (typeof utxoids !== 'undefined' && Array.isArray(utxoids)) {\n                for (let i = 0; i < utxoids.length; i++) {\n                    if (utxoids[i] in this.utxos && !(utxoids[i] in results)) {\n                        results.push(this.utxos[utxoids[i]]);\n                    }\n                }\n            }\n            else {\n                results = Object.values(this.utxos);\n            }\n            return results;\n        };\n        /**\n           * Gets all the [[StandardUTXO]]s as strings, optionally that match with UTXOIDs in an array.\n           *\n           * @param utxoids An optional array of UTXOIDs, returns all [[StandardUTXO]]s if not provided\n           *\n           * @returns An array of [[StandardUTXO]]s as cb58 serialized strings.\n           */\n        this.getAllUTXOStrings = (utxoids = undefined) => {\n            const results = [];\n            const utxos = Object.keys(this.utxos);\n            if (typeof utxoids !== 'undefined' && Array.isArray(utxoids)) {\n                for (let i = 0; i < utxoids.length; i++) {\n                    if (utxoids[i] in this.utxos) {\n                        results.push(this.utxos[utxoids[i]].toString());\n                    }\n                }\n            }\n            else {\n                for (const u of utxos) {\n                    results.push(this.utxos[u].toString());\n                }\n            }\n            return results;\n        };\n        /**\n           * Given an address or array of addresses, returns all the UTXOIDs for those addresses\n           *\n           * @param address An array of address {@link https://github.com/feross/buffer|Buffer}s\n           * @param spendable If true, only retrieves UTXOIDs whose locktime has passed\n           *\n           * @returns An array of addresses.\n           */\n        this.getUTXOIDs = (addresses = undefined, spendable = true) => {\n            if (typeof addresses !== 'undefined') {\n                const results = [];\n                const now = helperfunctions_1.UnixNow();\n                for (let i = 0; i < addresses.length; i++) {\n                    if (addresses[i].toString('hex') in this.addressUTXOs) {\n                        const entries = Object.entries(this.addressUTXOs[addresses[i].toString('hex')]);\n                        for (const [utxoid, locktime] of entries) {\n                            if ((results.indexOf(utxoid) === -1\n                                && (spendable && locktime.lte(now)))\n                                || !spendable) {\n                                results.push(utxoid);\n                            }\n                        }\n                    }\n                }\n                return results;\n            }\n            return Object.keys(this.utxos);\n        };\n        /**\n           * Gets the addresses in the [[StandardUTXOSet]] and returns an array of {@link https://github.com/feross/buffer|Buffer}.\n           */\n        this.getAddresses = () => Object.keys(this.addressUTXOs)\n            .map((k) => buffer_1.Buffer.from(k, 'hex'));\n        /**\n           * Returns the balance of a set of addresses in the StandardUTXOSet.\n           *\n           * @param addresses An array of addresses\n           * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized representation of an AssetID\n           * @param asOf The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n           *\n           * @returns Returns the total balance as a {@link https://github.com/indutny/bn.js/|BN}.\n           */\n        this.getBalance = (addresses, assetID, asOf = undefined) => {\n            const utxoids = this.getUTXOIDs(addresses);\n            const utxos = this.getAllUTXOs(utxoids);\n            let spend = new bn_js_1.default(0);\n            let asset;\n            if (typeof assetID === 'string') {\n                asset = bintools.cb58Decode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            for (let i = 0; i < utxos.length; i++) {\n                if (utxos[i].getOutput() instanceof output_1.StandardAmountOutput\n                    && utxos[i].getAssetID().toString('hex') === asset.toString('hex')\n                    && utxos[i].getOutput().meetsThreshold(addresses, asOf)) {\n                    spend = spend.add(utxos[i].getOutput().getAmount());\n                }\n            }\n            return spend;\n        };\n        /**\n           * Gets all the Asset IDs, optionally that match with Asset IDs in an array\n           *\n           * @param utxoids An optional array of Addresses as string or Buffer, returns all Asset IDs if not provided\n           *\n           * @returns An array of {@link https://github.com/feross/buffer|Buffer} representing the Asset IDs.\n           */\n        this.getAssetIDs = (addresses = undefined) => {\n            const results = new Set();\n            let utxoids = [];\n            if (typeof addresses !== 'undefined') {\n                utxoids = this.getUTXOIDs(addresses);\n            }\n            else {\n                utxoids = this.getUTXOIDs();\n            }\n            for (let i = 0; i < utxoids.length; i++) {\n                if (utxoids[i] in this.utxos && !(utxoids[i] in results)) {\n                    results.add(this.utxos[utxoids[i]].getAssetID());\n                }\n            }\n            return [...results];\n        };\n        /**\n           * Returns a new set with copy of UTXOs in this and set parameter.\n           *\n           * @param utxoset The [[StandardUTXOSet]] to merge with this one\n           * @param hasUTXOIDs Will subselect a set of [[StandardUTXO]]s which have the UTXOIDs provided in this array, defults to all UTXOs\n           *\n           * @returns A new StandardUTXOSet that contains all the filtered elements.\n           */\n        this.merge = (utxoset, hasUTXOIDs = undefined) => {\n            const results = this.create();\n            const utxos1 = this.getAllUTXOs(hasUTXOIDs);\n            const utxos2 = utxoset.getAllUTXOs(hasUTXOIDs);\n            const process = (utxo) => {\n                results.add(utxo);\n            };\n            utxos1.forEach(process);\n            utxos2.forEach(process);\n            return results;\n        };\n        /**\n           * Set intersetion between this set and a parameter.\n           *\n           * @param utxoset The set to intersect\n           *\n           * @returns A new StandardUTXOSet containing the intersection\n           */\n        this.intersection = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => us2.includes(utxoid));\n            return this.merge(utxoset, results);\n        };\n        /**\n           * Set difference between this set and a parameter.\n           *\n           * @param utxoset The set to difference\n           *\n           * @returns A new StandardUTXOSet containing the difference\n           */\n        this.difference = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => !us2.includes(utxoid));\n            return this.merge(utxoset, results);\n        };\n        /**\n           * Set symmetrical difference between this set and a parameter.\n           *\n           * @param utxoset The set to symmetrical difference\n           *\n           * @returns A new StandardUTXOSet containing the symmetrical difference\n           */\n        this.symDifference = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => !us2.includes(utxoid))\n                .concat(us2.filter((utxoid) => !us1.includes(utxoid)));\n            return this.merge(utxoset, results);\n        };\n        /**\n           * Set union between this set and a parameter.\n           *\n           * @param utxoset The set to union\n           *\n           * @returns A new StandardUTXOSet containing the union\n           */\n        this.union = (utxoset) => this.merge(utxoset);\n        /**\n           * Merges a set by the rule provided.\n           *\n           * @param utxoset The set to merge by the MergeRule\n           * @param mergeRule The [[MergeRule]] to apply\n           *\n           * @returns A new StandardUTXOSet containing the merged data\n           *\n           * @remarks\n           * The merge rules are as follows:\n           *   * \"intersection\" - the intersection of the set\n           *   * \"differenceSelf\" - the difference between the existing data and new set\n           *   * \"differenceNew\" - the difference between the new data and the existing set\n           *   * \"symDifference\" - the union of the differences between both sets of data\n           *   * \"union\" - the unique set of all elements contained in both sets\n           *   * \"unionMinusNew\" - the unique set of all elements contained in both sets, excluding values only found in the new set\n           *   * \"unionMinusSelf\" - the unique set of all elements contained in both sets, excluding values only found in the existing set\n           */\n        this.mergeByRule = (utxoset, mergeRule) => {\n            let uSet;\n            switch (mergeRule) {\n                case 'intersection':\n                    return this.intersection(utxoset);\n                case 'differenceSelf':\n                    return this.difference(utxoset);\n                case 'differenceNew':\n                    return utxoset.difference(this);\n                case 'symDifference':\n                    return this.symDifference(utxoset);\n                case 'union':\n                    return this.union(utxoset);\n                case 'unionMinusNew':\n                    uSet = this.union(utxoset);\n                    return uSet.difference(utxoset);\n                case 'unionMinusSelf':\n                    uSet = this.union(utxoset);\n                    return uSet.difference(this);\n                default:\n                    throw new errors_1.MergeRuleError(\"Error - StandardUTXOSet.mergeByRule: bad MergeRule\");\n            }\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        let utxos = {};\n        for (let utxoid in this.utxos) {\n            let utxoidCleaned = serialization.encoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[utxoidCleaned] = this.utxos[utxoid].serialize(encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in this.addressUTXOs) {\n            let addressCleaned = serialization.encoder(address, encoding, \"hex\", \"cb58\");\n            let utxobalance = {};\n            for (let utxoid in this.addressUTXOs[address]) {\n                let utxoidCleaned = serialization.encoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[utxoidCleaned] = serialization.encoder(this.addressUTXOs[address][utxoid], encoding, \"BN\", \"decimalString\");\n            }\n            addressUTXOs[addressCleaned] = utxobalance;\n        }\n        return Object.assign(Object.assign({}, fields), { utxos,\n            addressUTXOs });\n    }\n    /**\n       * Adds a [[StandardUTXO]] to the StandardUTXOSet.\n       *\n       * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n       * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n       *\n       * @returns A [[StandardUTXO]] if one was added and undefined if nothing was added.\n       */\n    add(utxo, overwrite = false) {\n        let utxovar = undefined;\n        try {\n            utxovar = this.parseUTXO(utxo);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                console.log(e.message);\n            }\n            else {\n                console.log(e);\n            }\n            return undefined;\n        }\n        const utxoid = utxovar.getUTXOID();\n        if (!(utxoid in this.utxos) || overwrite === true) {\n            this.utxos[utxoid] = utxovar;\n            const addresses = utxovar.getOutput().getAddresses();\n            const locktime = utxovar.getOutput().getLocktime();\n            for (let i = 0; i < addresses.length; i++) {\n                const address = addresses[i].toString('hex');\n                if (!(address in this.addressUTXOs)) {\n                    this.addressUTXOs[address] = {};\n                }\n                this.addressUTXOs[address][utxoid] = locktime;\n            }\n            return utxovar;\n        }\n        return undefined;\n    }\n    /**\n       * Adds an array of [[StandardUTXO]]s to the [[StandardUTXOSet]].\n       *\n       * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n       * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n       *\n       * @returns An array of StandardUTXOs which were added.\n       */\n    addArray(utxos, overwrite = false) {\n        const added = [];\n        for (let i = 0; i < utxos.length; i++) {\n            let result = this.add(utxos[i], overwrite);\n            if (typeof result !== 'undefined') {\n                added.push(result);\n            }\n        }\n        return added;\n    }\n    filter(args, lambda) {\n        let newset = this.clone();\n        let utxos = this.getAllUTXOs();\n        for (let i = 0; i < utxos.length; i++) {\n            if (lambda(utxos[i], ...args) === false) {\n                newset.remove(utxos[i]);\n            }\n        }\n        return newset;\n    }\n}\nexports.StandardUTXOSet = StandardUTXOSet;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9rZXlzdG9yZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FwaSc7XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./createsubnettx\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n__exportStar(require(\"./validationtx\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQjtBQUN0QiwyQ0FBeUI7QUFDekIsOENBQTRCO0FBQzVCLG1EQUFpQztBQUNqQyxnREFBOEI7QUFDOUIsNkNBQTJCO0FBQzNCLDZDQUEyQjtBQUMzQiwyQ0FBeUI7QUFDekIsNkNBQTJCO0FBQzNCLDRDQUEwQjtBQUMxQix1Q0FBcUI7QUFDckIsMENBQXdCO0FBQ3hCLGlEQUErQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbmV4cG9ydCAqIGZyb20gJy4vYmFzZXR4JztcbmV4cG9ydCAqIGZyb20gJy4vY29uc3RhbnRzJztcbmV4cG9ydCAqIGZyb20gJy4vY3JlYXRlc3VibmV0dHgnO1xuZXhwb3J0ICogZnJvbSAnLi9jcmVkZW50aWFscyc7XG5leHBvcnQgKiBmcm9tICcuL2V4cG9ydHR4JztcbmV4cG9ydCAqIGZyb20gJy4vaW1wb3J0dHgnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnB1dHMnO1xuZXhwb3J0ICogZnJvbSAnLi9rZXljaGFpbic7XG5leHBvcnQgKiBmcm9tICcuL291dHB1dHMnO1xuZXhwb3J0ICogZnJvbSAnLi90eCc7XG5leHBvcnQgKiBmcm9tICcuL3V0eG9zJztcbmV4cG9ydCAqIGZyb20gJy4vdmFsaWRhdGlvbnR4JztcbiJdfQ==","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Interfaces\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vaW50ZXJmYWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQ29tbW9uLUludGVyZmFjZXNcbiAqL1xuXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJztcbmltcG9ydCBCTiBmcm9tICdibi5qcyc7XG5pbXBvcnQgeyBUcmFuc2ZlcmFibGVPdXRwdXQgfSBmcm9tICcuLi9hcGlzL3BsYXRmb3Jtdm0nO1xuaW1wb3J0IHsgU2VyaWFsaXplZEVuY29kaW5nIH0gZnJvbSAnc3JjL3V0aWxzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEluZGV4IHtcbiAgYWRkcmVzczogc3RyaW5nXG4gIHV0eG86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVUWE9SZXNwb25zZSB7XG4gIG51bUZldGNoZWQ6IG51bWJlclxuICB1dHhvczogYW55XG4gIGVuZEluZGV4OiBJbmRleFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFzc2V0IHtcbiAgbmFtZTogc3RyaW5nXG4gIHN5bWJvbDogc3RyaW5nXG4gIGFzc2V0SUQ6IEJ1ZmZlclxuICBkZW5vbWluYXRpb246IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YWtlZE91dHMge1xuICBub2RlSUQ6IHN0cmluZ1xuICBzdGFrZWRVbnRpbDogc3RyaW5nXG4gIHN0YWtlT25seVVudGlsOiBzdHJpbmdcbiAgb3duZXJzOiBzdHJpbmdbXVxuICB0aHJlc2hvbGQ6IHN0cmluZ1xuICBhbW91bnQ6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFN0YWtlUGFyYW1zIHtcbiAgYWRkcmVzc2VzOiBzdHJpbmdbXVxuICBlbmNvZGluZzogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0U3Rha2VSZXNwb25zZSB7XG4gIHN0YWtlZDogQk5cbiAgc3Rha2VkT3V0cHV0czogVHJhbnNmZXJhYmxlT3V0cHV0W11cbn1cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUluZGV4UGFyYW1zIHtcbiAgZW5jb2Rpbmc6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VJbmRleFJlc3BvbnNlIHtcbiAgaWQ6IHN0cmluZ1xuICBieXRlczogc3RyaW5nXG4gIHRpbWVzdGFtcDogc3RyaW5nXG4gIGVuY29kaW5nOiBzdHJpbmdcbiAgaW5kZXg6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldExhc3RBY2NlcHRlZFBhcmFtcyBleHRlbmRzIEJhc2VJbmRleFBhcmFtcyB7IH1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRMYXN0QWNjZXB0ZWRSZXNwb25zZSBleHRlbmRzIEJhc2VJbmRleFJlc3BvbnNlIHsgfVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldENvbnRhaW5lckJ5SW5kZXhQYXJhbXMgZXh0ZW5kcyBCYXNlSW5kZXhQYXJhbXMge1xuICBpbmRleDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0Q29udGFpbmVyQnlJbmRleFJlc3BvbnNlIGV4dGVuZHMgQmFzZUluZGV4UmVzcG9uc2UgeyB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0Q29udGFpbmVyQnlJRFBhcmFtcyBleHRlbmRzIEJhc2VJbmRleFBhcmFtcyB7XG4gIGNvbnRhaW5lcklEOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRDb250YWluZXJCeUlEUmVzcG9uc2UgZXh0ZW5kcyBCYXNlSW5kZXhSZXNwb25zZSB7IH1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRDb250YWluZXJSYW5nZVBhcmFtcyBleHRlbmRzIEJhc2VJbmRleFBhcmFtcyB7XG4gIHN0YXJ0SW5kZXg6IG51bWJlcixcbiAgbnVtVG9GZXRjaDogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0Q29udGFpbmVyUmFuZ2VSZXNwb25zZSBleHRlbmRzIEJhc2VJbmRleFJlc3BvbnNlIHsgfVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldEluZGV4UGFyYW1zIGV4dGVuZHMgQmFzZUluZGV4UGFyYW1zIHtcbiAgY29udGFpbmVySUQ6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldElzQWNjZXB0ZWRQYXJhbXMgZXh0ZW5kcyBCYXNlSW5kZXhQYXJhbXMge1xuICBjb250YWluZXJJRDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0QmxvY2tjaGFpbklEUGFyYW1zIHtcbiAgYWxpYXM6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElzQm9vdHN0cmFwcGVkUGFyYW1zIHtcbiAgY2hhaW46IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBlZXJzUGFyYW1zIHtcbiAgbm9kZUlEczogc3RyaW5nW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBQZWVyc1Jlc3BvbnNlIHtcbiAgaXA6IHN0cmluZ1xuICBwdWJsaWNJUDogc3RyaW5nXG4gIG5vZGVJRDogc3RyaW5nXG4gIHZlcnNpb246IHN0cmluZ1xuICBsYXN0U2VudDogc3RyaW5nXG4gIGxhc3RSZWNlaXZlZDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0UmV3YXJkVVRYT3NQYXJhbXMge1xuICB0eElEOiBzdHJpbmdcbiAgZW5jb2Rpbmc6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFJld2FyZFVUWE9zUmVzcG9uc2Uge1xuICBudW1GZXRjaGVkOiBudW1iZXJcbiAgdXR4b3M6IHN0cmluZ1tdXG4gIGVuY29kaW5nOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXb3JkTGlzdHMge1xuICBjemVjaDogc3RyaW5nW11cbiAgY2hpbmVzZV9zaW1wbGlmaWVkOiBzdHJpbmdbXVxuICBjaGluZXNlX3RyYWRpdGlvbmFsOiBzdHJpbmdbXVxuICBrb3JlYW46IHN0cmluZ1tdXG4gIGZyZW5jaDogc3RyaW5nW11cbiAgaXRhbGlhbjogc3RyaW5nW11cbiAgc3BhbmlzaDogc3RyaW5nW11cbiAgamFwYW5lc2U6IHN0cmluZ1tdXG4gIEpBOiBzdHJpbmdbXVxuICBwb3J0dWd1ZXNlOiBzdHJpbmdbXVxuICBlbmdsaXNoOiBzdHJpbmdbXVxuICBFTjogc3RyaW5nW11cbn1cbmV4cG9ydCBpbnRlcmZhY2UgR2V0QXRvbWljVHhTdGF0dXNQYXJhbXMge1xuICB0eElEOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXJpYWxpemVkIHtcbiAgdm06IHN0cmluZ1xuICBlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nXG4gIHZlcnNpb246IG51bWJlclxuICBub3Rlczogc3RyaW5nXG4gIGZpZWxkczogb2JqZWN0XG59Il19","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MetricsAPI = void 0;\nconst restapi_1 = require(\"../../common/restapi\");\n/**\n* Class for interacting with a node API that is using the node's MetricsApi.\n*\n* @category RPCAPIs\n*\n* @remarks This extends the [[RESTAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n*/\nclass MetricsAPI extends restapi_1.RESTAPI {\n    /**\n    * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n    *\n    * @param core A reference to the Avalanche class\n    * @param baseurl Defaults to the string \"/ext/metrics\" as the path to blockchain's baseurl\n    */\n    constructor(core, baseurl = \"/ext/metrics\") {\n        super(core, baseurl);\n        this.axConf = () => {\n            return {\n                baseURL: `${this.core.getProtocol()}://${this.core.getHost()}:${this.core.getPort()}`,\n                responseType: \"text\",\n            };\n        };\n        /**\n        *\n        * @returns Promise for an object containing the metrics response\n        */\n        this.getMetrics = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.post(\"\");\n            return response.data;\n        });\n    }\n}\nexports.MetricsAPI = MetricsAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvbWV0cmljcy9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBS0Esa0RBQThDO0FBSTlDOzs7Ozs7RUFNRTtBQUNGLE1BQWEsVUFBVyxTQUFRLGlCQUFPO0lBaUJyQzs7Ozs7TUFLRTtJQUNGLFlBQVksSUFBbUIsRUFBRSxVQUFrQixjQUFjO1FBQUksS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtRQXRCL0UsV0FBTSxHQUFHLEdBQXVCLEVBQUU7WUFDMUMsT0FBUTtnQkFDTixPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDckYsWUFBWSxFQUFFLE1BQU07YUFDckIsQ0FBQTtRQUNILENBQUMsQ0FBQTtRQUVEOzs7VUFHRTtRQUNGLGVBQVUsR0FBRyxHQUEwQixFQUFFO1lBQ3ZDLE1BQU0sUUFBUSxHQUF3QixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDekQsT0FBTyxRQUFRLENBQUMsSUFBYyxDQUFBO1FBQ2hDLENBQUMsQ0FBQSxDQUFBO0lBUXlGLENBQUM7Q0FDNUY7QUF4QkQsZ0NBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuKiBAbW9kdWxlIEFQSS1NZXRyaWNzXG4qL1xuaW1wb3J0IEF2YWxhbmNoZUNvcmUgZnJvbSBcIi4uLy4uL2F2YWxhbmNoZVwiXG5pbXBvcnQgeyBSRVNUQVBJIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9yZXN0YXBpXCJcbmltcG9ydCB7IFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2FwaWJhc2VcIlxuaW1wb3J0IHsgQXhpb3NSZXF1ZXN0Q29uZmlnIH0gZnJvbSBcImF4aW9zXCJcblxuLyoqXG4qIENsYXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIGEgbm9kZSBBUEkgdGhhdCBpcyB1c2luZyB0aGUgbm9kZSdzIE1ldHJpY3NBcGkuXG4qXG4qIEBjYXRlZ29yeSBSUENBUElzXG4qXG4qIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tSRVNUQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuIEluc3RlYWQsIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV0gZnVuY3Rpb24gdG8gcmVnaXN0ZXIgdGhpcyBpbnRlcmZhY2Ugd2l0aCBBdmFsYW5jaGUuXG4qL1xuZXhwb3J0IGNsYXNzIE1ldHJpY3NBUEkgZXh0ZW5kcyBSRVNUQVBJIHtcbiAgcHJvdGVjdGVkIGF4Q29uZiA9ICgpOiBBeGlvc1JlcXVlc3RDb25maWcgPT4ge1xuICAgIHJldHVybiAge1xuICAgICAgYmFzZVVSTDogYCR7dGhpcy5jb3JlLmdldFByb3RvY29sKCl9Oi8vJHt0aGlzLmNvcmUuZ2V0SG9zdCgpfToke3RoaXMuY29yZS5nZXRQb3J0KCl9YCxcbiAgICAgIHJlc3BvbnNlVHlwZTogXCJ0ZXh0XCIsXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICpcbiAgKiBAcmV0dXJucyBQcm9taXNlIGZvciBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgbWV0cmljcyByZXNwb25zZVxuICAqL1xuICBnZXRNZXRyaWNzID0gYXN5bmMgKCk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2U6IFJlcXVlc3RSZXNwb25zZURhdGEgPSBhd2FpdCB0aGlzLnBvc3QoXCJcIilcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YSBhcyBzdHJpbmdcbiAgfVxuXG4gIC8qKlxuICAqIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuIEluc3RlYWQgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBtZXRob2QuXG4gICpcbiAgKiBAcGFyYW0gY29yZSBBIHJlZmVyZW5jZSB0byB0aGUgQXZhbGFuY2hlIGNsYXNzXG4gICogQHBhcmFtIGJhc2V1cmwgRGVmYXVsdHMgdG8gdGhlIHN0cmluZyBcIi9leHQvbWV0cmljc1wiIGFzIHRoZSBwYXRoIHRvIGJsb2NrY2hhaW4ncyBiYXNldXJsXG4gICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6IEF2YWxhbmNoZUNvcmUsIGJhc2V1cmw6IHN0cmluZyA9IFwiL2V4dC9tZXRyaWNzXCIpIHsgc3VwZXIoY29yZSwgYmFzZXVybCkgfVxufVxuXG4iXX0=","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlatformVMAPI = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM\n */\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst keychain_1 = require(\"./keychain\");\nconst constants_1 = require(\"../../utils/constants\");\nconst constants_2 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst payload_1 = require(\"../../utils/payload\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../platformvm/utxos\");\nconst errors_1 = require(\"../../utils/errors\");\nconst outputs_1 = require(\"../platformvm/outputs\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for interacting with a node's PlatformVMAPI\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass PlatformVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly.\n     * Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseurl Defaults to the string \"/ext/P\" as the path to blockchain\"s baseurl\n     */\n    constructor(core, baseurl = \"/ext/bc/P\") {\n        super(core, baseurl);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.KeyChain(\"\", \"\");\n        this.blockchainID = constants_1.PlatformChainID;\n        this.blockchainAlias = undefined;\n        this.DJTXAssetID = undefined;\n        this.txFee = undefined;\n        this.creationTxFee = undefined;\n        this.minValidatorStake = undefined;\n        this.minDelegatorStake = undefined;\n        /**\n         * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n         *\n         * @returns The alias for the blockchainID\n         */\n        this.getBlockchainAlias = () => {\n            if (typeof this.blockchainAlias === \"undefined\") {\n                const netid = this.core.getNetworkID();\n                if (netid in constants_1.Defaults.network && this.blockchainID in constants_1.Defaults.network[netid]) {\n                    this.blockchainAlias = constants_1.Defaults.network[netid][this.blockchainID].alias;\n                    return this.blockchainAlias;\n                }\n                else {\n                    /* istanbul ignore next */\n                    return undefined;\n                }\n            }\n            return this.blockchainAlias;\n        };\n        /**\n         * Sets the alias for the blockchainID.\n         *\n         * @param alias The alias for the blockchainID.\n         *\n         */\n        this.setBlockchainAlias = (alias) => {\n            this.blockchainAlias = alias;\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n         * Gets the blockchainID and returns it.\n         *\n         * @returns The blockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Refresh blockchainID, and if a blockchainID is passed in, use that.\n         *\n         * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n         *\n         * @returns The blockchainID\n         */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netid = this.core.getNetworkID();\n            if (typeof blockchainID === \"undefined\" && typeof constants_1.Defaults.network[netid] !== \"undefined\") {\n                this.blockchainID = constants_1.PlatformChainID; //default to P-Chain\n                return true;\n            }\n            if (typeof blockchainID === \"string\") {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n         */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_2.PlatformVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n            const type = \"bech32\";\n            return serialization.bufferToType(address, type, this.core.getHRP(), chainid);\n        };\n        /**\n         * Fetches the DJTX AssetID and returns it in a Promise.\n         *\n         * @param refresh This function caches the response. Refresh = true will bust the cache.\n         *\n         * @returns The the provided string representing the DJTX AssetID\n         */\n        this.getDJTXAssetID = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.DJTXAssetID === \"undefined\" || refresh) {\n                const assetID = yield this.getStakingAssetID();\n                this.DJTXAssetID = bintools.cb58Decode(assetID);\n            }\n            return this.DJTXAssetID;\n        });\n        /**\n         * Overrides the defaults and sets the cache to a specific DJTX AssetID\n         *\n         * @param djtxAssetID A cb58 string or Buffer representing the DJTX AssetID\n         *\n         * @returns The the provided string representing the DJTX AssetID\n         */\n        this.setDJTXAssetID = (djtxAssetID) => {\n            if (typeof djtxAssetID === \"string\") {\n                djtxAssetID = bintools.cb58Decode(djtxAssetID);\n            }\n            this.DJTXAssetID = djtxAssetID;\n        };\n        /**\n         * Gets the default tx fee for this chain.\n         *\n         * @returns The default tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultTxFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"P\"][\"txFee\"]) : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the tx fee for this chain.\n         *\n         * @returns The tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getTxFee = () => {\n            if (typeof this.txFee === \"undefined\") {\n                this.txFee = this.getDefaultTxFee();\n            }\n            return this.txFee;\n        };\n        /**\n         * Sets the tx fee for this chain.\n         *\n         * @param fee The tx fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setTxFee = (fee) => {\n            this.txFee = fee;\n        };\n        /**\n         * Gets the default creation fee for this chain.\n         *\n         * @returns The default creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultCreationTxFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"P\"][\"creationTxFee\"]) : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the creation fee for this chain.\n         *\n         * @returns The creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getCreationTxFee = () => {\n            if (typeof this.creationTxFee === \"undefined\") {\n                this.creationTxFee = this.getDefaultCreationTxFee();\n            }\n            return this.creationTxFee;\n        };\n        /**\n         * Sets the creation fee for this chain.\n         *\n         * @param fee The creation fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setCreationTxFee = (fee) => {\n            this.creationTxFee = fee;\n        };\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        /**\n         * @ignore\n         */\n        this.newKeyChain = () => {\n            // warning, overwrites the old keychain\n            const alias = this.getBlockchainAlias();\n            if (alias) {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n            }\n            else {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n            }\n            return this.keychain;\n        };\n        /**\n         * Helper function which determines if a tx is a goose egg transaction.\n         *\n         * @param utx An UnsignedTx\n         *\n         * @returns boolean true if passes goose egg test and false if fails.\n         *\n         * @remarks\n         * A \"Goose Egg Transaction\" is when the fee far exceeds a reasonable amount\n         */\n        this.checkGooseEgg = (utx, outTotal = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            const djtxAssetID = yield this.getDJTXAssetID();\n            let outputTotal = outTotal.gt(new bn_js_1.default(0)) ? outTotal : utx.getOutputTotal(djtxAssetID);\n            const fee = utx.getBurn(djtxAssetID);\n            if (fee.lte(constants_1.ONEDJTX.mul(new bn_js_1.default(10))) || fee.lte(outputTotal)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        /**\n         * Retrieves an assetID for a subnet\"s staking assset.\n         *\n         * @returns Returns a Promise<string> with cb58 encoded value of the assetID.\n         */\n        this.getStakingAssetID = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"platform.getStakingAssetID\");\n            return response.data.result.assetID;\n        });\n        /**\n         * Creates a new blockchain.\n         *\n         * @param username The username of the Keystore user that controls the new account\n         * @param password The password of the Keystore user that controls the new account\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized string for the SubnetID or its alias.\n         * @param vmID The ID of the Virtual Machine the blockchain runs. Can also be an alias of the Virtual Machine.\n         * @param FXIDs The ids of the FXs the VM is running.\n         * @param name A human-readable name for the new blockchain\n         * @param genesis The base 58 (with checksum) representation of the genesis state of the new blockchain. Virtual Machines should have a static API method named buildGenesis that can be used to generate genesisData.\n         *\n         * @returns Promise for the unsigned transaction to create this blockchain. Must be signed by a sufficient number of the Subnet’s control keys and by the account paying the transaction fee.\n         */\n        this.createBlockchain = (username, password, subnetID = undefined, vmID, fxIDs, name, genesis) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                fxIDs,\n                vmID,\n                name,\n                genesisData: genesis,\n            };\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.createBlockchain\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Gets the status of a blockchain.\n         *\n         * @param blockchainID The blockchainID requesting a status update\n         *\n         * @returns Promise for a string of one of: \"Validating\", \"Created\", \"Preferred\", \"Unknown\".\n         */\n        this.getBlockchainStatus = (blockchainID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                blockchainID,\n            };\n            const response = yield this.callMethod(\"platform.getBlockchainStatus\", params);\n            return response.data.result.status;\n        });\n        /**\n         * Create an address in the node's keystore.\n         *\n         * @param username The username of the Keystore user that controls the new account\n         * @param password The password of the Keystore user that controls the new account\n         *\n         * @returns Promise for a string of the newly created account address.\n         */\n        this.createAddress = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n            };\n            const response = yield this.callMethod(\"platform.createAddress\", params);\n            return response.data.result.address;\n        });\n        /**\n         * Gets the balance of a particular asset.\n         *\n         * @param address The address to pull the asset balance from\n         *\n         * @returns Promise with the balance as a {@link https://github.com/indutny/bn.js/|BN} on the provided address.\n         */\n        this.getBalance = (address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - PlatformVMAPI.getBalance: Invalid address format\");\n            }\n            const params = {\n                address\n            };\n            const response = yield this.callMethod(\"platform.getBalance\", params);\n            return response.data.result;\n        });\n        /**\n         * List the addresses controlled by the user.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         *\n         * @returns Promise for an array of addresses.\n         */\n        this.listAddresses = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"platform.listAddresses\", params);\n            return response.data.result.addresses;\n        });\n        /**\n         * Lists the set of current validators.\n         *\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an\n         * cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validators that are currently staking, see: {@link https://docs.djtx.network/v1.0/en/api/platform/#platformgetcurrentvalidators|platform.getCurrentValidators documentation}.\n         *\n         */\n        this.getCurrentValidators = (subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.getCurrentValidators\", params);\n            return response.data.result;\n        });\n        /**\n         * Lists the set of pending validators.\n         *\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer}\n         * or a cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validators that are pending staking, see: {@link https://docs.djtx.network/v1.0/en/api/platform/#platformgetpendingvalidators|platform.getPendingValidators documentation}.\n         *\n         */\n        this.getPendingValidators = (subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.getPendingValidators\", params);\n            return response.data.result;\n        });\n        /**\n         * Samples `Size` validators from the current validator set.\n         *\n         * @param sampleSize Of the total universe of validators, select this many at random\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an\n         * cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validator\"s stakingIDs.\n         */\n        this.sampleValidators = (sampleSize, subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                size: sampleSize.toString()\n            };\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.sampleValidators\", params);\n            return response.data.result.validators;\n        });\n        /**\n         * Add a validator to the Primary Network.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the validator\n         * @param startTime Javascript Date object for the start time to validate\n         * @param endTime Javascript Date object for the end time to validate\n         * @param stakeAmount The amount of nDJTX the validator is staking as\n         * a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddress The address the validator reward will go to, if there is one.\n         * @param delegationFeeRate Optional. A {@link https://github.com/indutny/bn.js/|BN} for the percent fee this validator\n         * charges when others delegate stake to them. Up to 4 decimal places allowed additional decimal places are ignored.\n         * Must be between 0 and 100, inclusive. For example, if delegationFeeRate is 1.2345 and someone delegates to this\n         * validator, then when the delegation period is over, 1.2345% of the reward goes to the validator and the rest goes\n         * to the delegator.\n         *\n         * @returns Promise for a base58 string of the unsigned transaction.\n         */\n        this.addValidator = (username, password, nodeID, startTime, endTime, stakeAmount, rewardAddress, delegationFeeRate = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                stakeAmount: stakeAmount.toString(10),\n                rewardAddress,\n            };\n            if (typeof delegationFeeRate !== \"undefined\") {\n                params.delegationFeeRate = delegationFeeRate.toString(10);\n            }\n            const response = yield this.callMethod(\"platform.addValidator\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Add a validator to a Subnet other than the Primary Network. The validator must validate the Primary Network for the entire duration they validate this Subnet.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the validator\n         * @param subnetID Either a {@link https://github.com/feross/buffer|Buffer} or a cb58 serialized string for the SubnetID or its alias.\n         * @param startTime Javascript Date object for the start time to validate\n         * @param endTime Javascript Date object for the end time to validate\n         * @param weight The validator’s weight used for sampling\n         *\n         * @returns Promise for the unsigned transaction. It must be signed (using sign) by the proper number of the Subnet’s control keys and by the key of the account paying the transaction fee before it can be issued.\n         */\n        this.addSubnetValidator = (username, password, nodeID, subnetID, startTime, endTime, weight) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                weight\n            };\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.addSubnetValidator\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Add a delegator to the Primary Network.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the delegatee\n         * @param startTime Javascript Date object for when the delegator starts delegating\n         * @param endTime Javascript Date object for when the delegator starts delegating\n         * @param stakeAmount The amount of nDJTX the delegator is staking as\n         * a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddress The address of the account the staked DJTX and validation reward\n         * (if applicable) are sent to at endTime\n         *\n         * @returns Promise for an array of validator\"s stakingIDs.\n         */\n        this.addDelegator = (username, password, nodeID, startTime, endTime, stakeAmount, rewardAddress) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                stakeAmount: stakeAmount.toString(10),\n                rewardAddress\n            };\n            const response = yield this.callMethod(\"platform.addDelegator\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Create an unsigned transaction to create a new Subnet. The unsigned transaction must be\n         * signed with the key of the account paying the transaction fee. The Subnet’s ID is the ID of the transaction that creates it (ie the response from issueTx when issuing the signed transaction).\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param controlKeys Array of platform addresses as strings\n         * @param threshold To add a validator to this Subnet, a transaction must have threshold\n         * signatures, where each signature is from a key whose address is an element of `controlKeys`\n         *\n         * @returns Promise for a string with the unsigned transaction encoded as base58.\n         */\n        this.createSubnet = (username, password, controlKeys, threshold) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                controlKeys,\n                threshold\n            };\n            const response = yield this.callMethod(\"platform.createSubnet\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Get the Subnet that validates a given blockchain.\n         *\n         * @param blockchainID Either a {@link https://github.com/feross/buffer|Buffer} or a cb58\n         * encoded string for the blockchainID or its alias.\n         *\n         * @returns Promise for a string of the subnetID that validates the blockchain.\n         */\n        this.validatedBy = (blockchainID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                blockchainID,\n            };\n            const response = yield this.callMethod(\"platform.validatedBy\", params);\n            return response.data.result.subnetID;\n        });\n        /**\n         * Get the IDs of the blockchains a Subnet validates.\n         *\n         * @param subnetID Either a {@link https://github.com/feross/buffer|Buffer} or an DJTX\n         * serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of blockchainIDs the subnet validates.\n         */\n        this.validates = (subnetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                subnetID,\n            };\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.validates\", params);\n            return response.data.result.blockchainIDs;\n        });\n        /**\n         * Get all the blockchains that exist (excluding the P-Chain).\n         *\n         * @returns Promise for an array of objects containing fields \"id\", \"subnetID\", and \"vmID\".\n         */\n        this.getBlockchains = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"platform.getBlockchains\");\n            return response.data.result.blockchains;\n        });\n        /**\n         * Send DJTX from an account on the P-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the DJTX is sent from and which pays the\n         * transaction fee. After issuing this transaction, you must call the X-Chain’s importDJTX\n         * method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address on the X-Chain to send the DJTX to. Do not include X- in the address\n         * @param amount Amount of DJTX to export as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns Promise for an unsigned transaction to be signed by the account the the DJTX is\n         * sent from and pays the transaction fee.\n         */\n        this.exportDJTX = (username, password, amount, to) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                to,\n                amount: amount.toString(10)\n            };\n            const response = yield this.callMethod(\"platform.exportDJTX\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Send DJTX from an account on the P-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the DJTX is sent from and which pays\n         * the transaction fee. After issuing this transaction, you must call the X-Chain’s\n         * importDJTX method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The ID of the account the DJTX is sent to. This must be the same as the to\n         * argument in the corresponding call to the X-Chain’s exportDJTX\n         * @param sourceChain The chainID where the funds are coming from.\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.importDJTX = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"platform.importDJTX\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise<string> representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = \"\";\n            if (typeof tx === \"string\") {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toString();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toString();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new errors_1.TransactionError(\"Error - platform.issueTx: provided tx is not expected type of string, Buffer, or Tx\");\n            }\n            const params = {\n                tx: Transaction.toString()\n            };\n            const response = yield this.callMethod(\"platform.issueTx\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Returns an upper bound on the amount of tokens that exist. Not monotonically increasing because this number can go down if a staker\"s reward is denied.\n         */\n        this.getCurrentSupply = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"platform.getCurrentSupply\");\n            return new bn_js_1.default(response.data.result.supply, 10);\n        });\n        /**\n         * Returns the height of the platform chain.\n         */\n        this.getHeight = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"platform.getHeight\");\n            return new bn_js_1.default(response.data.result.height, 10);\n        });\n        /**\n         * Gets the minimum staking amount.\n         *\n         * @param refresh A boolean to bypass the local cached value of Minimum Stake Amount, polling the node instead.\n         */\n        this.getMinStake = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (refresh !== true && typeof this.minValidatorStake !== \"undefined\" && typeof this.minDelegatorStake !== \"undefined\") {\n                return {\n                    minValidatorStake: this.minValidatorStake,\n                    minDelegatorStake: this.minDelegatorStake\n                };\n            }\n            const response = yield this.callMethod(\"platform.getMinStake\");\n            this.minValidatorStake = new bn_js_1.default(response.data.result.minValidatorStake, 10);\n            this.minDelegatorStake = new bn_js_1.default(response.data.result.minDelegatorStake, 10);\n            return {\n                minValidatorStake: this.minValidatorStake,\n                minDelegatorStake: this.minDelegatorStake\n            };\n        });\n        /**\n         * Sets the minimum stake cached in this class.\n         * @param minValidatorStake A {@link https://github.com/indutny/bn.js/|BN} to set the minimum stake amount cached in this class.\n         * @param minDelegatorStake A {@link https://github.com/indutny/bn.js/|BN} to set the minimum delegation amount cached in this class.\n         */\n        this.setMinStake = (minValidatorStake = undefined, minDelegatorStake = undefined) => {\n            if (typeof minValidatorStake !== \"undefined\") {\n                this.minValidatorStake = minValidatorStake;\n            }\n            if (typeof minDelegatorStake !== \"undefined\") {\n                this.minDelegatorStake = minDelegatorStake;\n            }\n        };\n        /**\n         * Gets the total amount staked for an array of addresses.\n         */\n        this.getStake = (addresses, encoding = \"cb58\") => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                addresses,\n                encoding\n            };\n            const response = yield this.callMethod(\"platform.getStake\", params);\n            return {\n                staked: new bn_js_1.default(response.data.result.staked, 10),\n                stakedOutputs: response.data.result.stakedOutputs.map((stakedOutput) => {\n                    const transferableOutput = new outputs_1.TransferableOutput();\n                    let buf;\n                    if (encoding === \"cb58\") {\n                        buf = bintools.cb58Decode(stakedOutput);\n                    }\n                    else {\n                        buf = buffer_1.Buffer.from(stakedOutput.replace(/0x/g, \"\"), \"hex\");\n                    }\n                    transferableOutput.fromBuffer(buf, 2);\n                    return transferableOutput;\n                })\n            };\n        });\n        /**\n         * Get all the subnets that exist.\n         *\n         * @param ids IDs of the subnets to retrieve information about. If omitted, gets all subnets\n         *\n         * @returns Promise for an array of objects containing fields \"id\",\n         * \"controlKeys\", and \"threshold\".\n         */\n        this.getSubnets = (ids = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof ids !== undefined) {\n                params.ids = ids;\n            }\n            const response = yield this.callMethod(\"platform.getSubnets\", params);\n            return response.data.result.subnets;\n        });\n        /**\n         * Exports the private key for an address.\n         *\n         * @param username The name of the user with the private key\n         * @param password The password used to decrypt the private key\n         * @param address The address whose private key should be exported\n         *\n         * @returns Promise with the decrypted private key as store in the database\n         */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                address\n            };\n            const response = yield this.callMethod(\"platform.exportKey\", params);\n            return response.data.result.privateKey;\n        });\n        /**\n         * Give a user control over an address by providing the private key that controls the address.\n         *\n         * @param username The name of the user to store the private key\n         * @param password The password that unlocks the user\n         * @param privateKey A string representing the private key in the vm\"s format\n         *\n         * @returns The address for the imported private key.\n         */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey\n            };\n            const response = yield this.callMethod(\"platform.importKey\", params);\n            return response.data.result.address;\n        });\n        /**\n         * Returns the treansaction data of a provided transaction ID by calling the node's `getTx` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the bytes retrieved from the node\n         */\n        this.getTx = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid\n            };\n            const response = yield this.callMethod(\"platform.getTx\", params);\n            return response.data.result.tx;\n        });\n        /**\n         * Returns the status of a provided transaction ID by calling the node's `getTxStatus` method.\n         *\n         * @param txid The string representation of the transaction ID\n         * @param includeReason Return the reason tx was dropped, if applicable. Defaults to true\n         *\n         * @returns Returns a Promise<string> containing the status retrieved from the node and the reason a tx was dropped, if applicable.\n         */\n        this.getTxStatus = (txid, includeReason = true) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n                includeReason: includeReason\n            };\n            const response = yield this.callMethod(\"platform.getTxStatus\", params);\n            return response.data.result;\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param sourceChain A string for the chain to look for the UTXO\"s. Default is to use this chain, but if exported UTXOs exist from other chains, this can used to pull them instead.\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         * @param persistOpts Options available to persist these UTXOs in local storage\n         *\n         * @remarks\n         * persistOpts is optional and must be of type [[PersistanceOptions]]\n         *\n         */\n        this.getUTXOs = (addresses, sourceChain = undefined, limit = 0, startIndex = undefined, persistOpts = undefined) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof addresses === \"string\") {\n                addresses = [addresses];\n            }\n            const params = {\n                addresses: addresses,\n                limit\n            };\n            if (typeof startIndex !== \"undefined\" && startIndex) {\n                params.startIndex = startIndex;\n            }\n            if (typeof sourceChain !== \"undefined\") {\n                params.sourceChain = sourceChain;\n            }\n            const response = yield this.callMethod(\"platform.getUTXOs\", params);\n            const utxos = new utxos_1.UTXOSet();\n            let data = response.data.result.utxos;\n            if (persistOpts && typeof persistOpts === \"object\") {\n                if (this.db.has(persistOpts.getName())) {\n                    const selfArray = this.db.get(persistOpts.getName());\n                    if (Array.isArray(selfArray)) {\n                        utxos.addArray(data);\n                        const self = new utxos_1.UTXOSet();\n                        self.addArray(selfArray);\n                        self.mergeByRule(utxos, persistOpts.getMergeRule());\n                        data = self.getAllUTXOStrings();\n                    }\n                }\n                this.db.set(persistOpts.getName(), data, persistOpts.getOverwrite());\n            }\n            utxos.addArray(data, false);\n            response.data.result.utxos = utxos;\n            response.data.result.numFetched = parseInt(response.data.result.numFetched);\n            return response.data.result;\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, ownerAddresses, sourceChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildBaseTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildBaseTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildBaseTx\").map((a) => bintools.stringToAddress(a));\n            let srcChain = undefined;\n            if (typeof sourceChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildImportTx: Source ChainID is undefined.\");\n            }\n            else if (typeof sourceChain === \"string\") {\n                srcChain = sourceChain;\n                sourceChain = bintools.cb58Decode(sourceChain);\n            }\n            else if (!(sourceChain instanceof buffer_1.Buffer)) {\n                srcChain = bintools.cb58Encode(sourceChain);\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildImportTx: Invalid destinationChain type: \" + (typeof sourceChain));\n            }\n            const atomicUTXOs = yield (yield this.getUTXOs(ownerAddresses, srcChain, 0, undefined)).utxos;\n            const djtxAssetID = yield this.getDJTXAssetID();\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const atomics = atomicUTXOs.getAllUTXOs();\n            const builtUnsignedTx = utxoset.buildImportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, atomics, sourceChain, this.getTxFee(), djtxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param destinationChain The chainid for where the assets will be sent.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (utxoset, amount, destinationChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            let prefixes = {};\n            toAddresses.map((a) => {\n                prefixes[a.split(\"-\")[0]] = true;\n            });\n            if (Object.keys(prefixes).length !== 1) {\n                throw new errors_1.AddressError(\"Error - PlatformVMAPI.buildExportTx: To addresses must have the same chainID prefix.\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID is undefined.\");\n            }\n            else if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(destinationChain); //\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildExportTx: Invalid destinationChain type: \" + (typeof destinationChain));\n            }\n            if (destinationChain.length !== 32) {\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID must be 32 bytes in length.\");\n            }\n            /*\n            if(bintools.cb58Encode(destinationChain) !== Defaults.network[this.core.getNetworkID()].X[\"blockchainID\"]) {\n              throw new Error(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID must The X-Chain ID in the current version of AvalancheJS.\")\n            }*/\n            let to = [];\n            toAddresses.map((a) => {\n                to.push(bintools.stringToAddress(a));\n            });\n            const from = this._cleanAddressArray(fromAddresses, \"buildExportTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildExportTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const builtUnsignedTx = utxoset.buildExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, djtxAssetID, to, from, change, destinationChain, this.getTxFee(), djtxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n        * Helper function which creates an unsigned [[AddSubnetValidatorTx]]. For more granular control, you may create your own\n        * [[UnsignedTx]] manually and import the [[AddSubnetValidatorTx]] class directly.\n        *\n        * @param utxoset A set of UTXOs that the transaction is built on.\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees in DJTX\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n        * @param weight The amount of weight for this subnet validator.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        /* Re-implement when subnetValidator signing process is clearer\n        buildAddSubnetValidatorTx = async (\n          utxoset:UTXOSet,\n          fromAddresses:string[],\n          changeAddresses:string[],\n          nodeID:string,\n          startTime:BN,\n          endTime:BN,\n          weight:BN,\n          memo:PayloadBase|Buffer = undefined,\n          asOf:BN = UnixNow()\n        ):Promise<UnsignedTx> => {\n          const from:Buffer[] = this._cleanAddressArray(fromAddresses, \"buildAddSubnetValidatorTx\").map((a): Buffer => bintools.stringToAddress(a))\n          const change:Buffer[] = this._cleanAddressArray(changeAddresses, \"buildAddSubnetValidatorTx\").map((a): Buffer => bintools.stringToAddress(a))\n      \n          if( memo instanceof PayloadBase) {\n            memo = memo.getPayload()\n          }\n      \n          const djtxAssetID:Buffer = await this.getDJTXAssetID()\n      \n          const now:BN = UnixNow()\n          if (startTime.lt(now) || endTime.lte(startTime)) {\n            throw new Error(\"PlatformVMAPI.buildAddSubnetValidatorTx -- startTime must be in the future and endTime must come after startTime\")\n          }\n      \n          const builtUnsignedTx:UnsignedTx = utxoset.buildAddSubnetValidatorTx(\n            this.core.getNetworkID(),\n            bintools.cb58Decode(this.blockchainID),\n            from,\n            change,\n            NodeIDStringToBuffer(nodeID),\n            startTime, endTime,\n            weight,\n            this.getFee(),\n            djtxAssetID,\n            memo, asOf\n          )\n      \n          if(! await this.checkGooseEgg(builtUnsignedTx)) {\n            /* istanbul ignore next */ /*\n  throw new Error(\"Failed Goose Egg Check\")\n  }\n  \n  return builtUnsignedTx\n  }\n  \n  */\n        /**\n        * Helper function which creates an unsigned [[AddDelegatorTx]]. For more granular control, you may create your own\n        * [[UnsignedTx]] manually and import the [[AddDelegatorTx]] class directly.\n        *\n        * @param utxoset A set of UTXOs that the transaction is built on\n        * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who received the staked tokens at the end of the staking period\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who own the staking UTXOs the fees in DJTX\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n        * @param stakeAmount The amount being delegated as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param rewardAddresses The addresses which will recieve the rewards from the delegated stake.\n        * @param rewardLocktime Optional. The locktime field created in the resulting reward outputs\n        * @param rewardThreshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        this.buildAddDelegatorTx = (utxoset, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardAddresses, rewardLocktime = new bn_js_1.default(0), rewardThreshold = 1, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildAddDelegatorTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildAddDelegatorTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildAddDelegatorTx\").map((a) => bintools.stringToAddress(a));\n            const rewards = this._cleanAddressArray(rewardAddresses, \"buildAddValidatorTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const minStake = (yield this.getMinStake())[\"minDelegatorStake\"];\n            if (stakeAmount.lt(minStake)) {\n                throw new errors_1.StakeError(\"PlatformVMAPI.buildAddDelegatorTx -- stake amount must be at least \" + minStake.toString(10));\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const now = helperfunctions_1.UnixNow();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new errors_1.TimeError(\"PlatformVMAPI.buildAddDelegatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const builtUnsignedTx = utxoset.buildAddDelegatorTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), djtxAssetID, to, from, change, helperfunctions_1.NodeIDStringToBuffer(nodeID), startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewards, new bn_js_1.default(0), djtxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n        * Helper function which creates an unsigned [[AddValidatorTx]]. For more granular control, you may create your own\n        * [[UnsignedTx]] manually and import the [[AddValidatorTx]] class directly.\n        *\n        * @param utxoset A set of UTXOs that the transaction is built on\n        * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who received the staked tokens at the end of the staking period\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who own the staking UTXOs the fees in DJTX\n        * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n        * @param nodeID The node ID of the validator being added.\n        * @param startTime The Unix time when the validator starts validating the Primary Network.\n        * @param endTime The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n        * @param stakeAmount The amount being delegated as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param rewardAddresses The addresses which will recieve the rewards from the delegated stake.\n        * @param delegationFee A number for the percentage of reward to be given to the validator when someone delegates to them. Must be between 0 and 100.\n        * @param rewardLocktime Optional. The locktime field created in the resulting reward outputs\n        * @param rewardThreshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        */\n        this.buildAddValidatorTx = (utxoset, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardAddresses, delegationFee, rewardLocktime = new bn_js_1.default(0), rewardThreshold = 1, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildAddValidatorTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildAddValidatorTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildAddValidatorTx\").map((a) => bintools.stringToAddress(a));\n            const rewards = this._cleanAddressArray(rewardAddresses, \"buildAddValidatorTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const minStake = (yield this.getMinStake())[\"minValidatorStake\"];\n            if (stakeAmount.lt(minStake)) {\n                throw new errors_1.StakeError(\"PlatformVMAPI.buildAddValidatorTx -- stake amount must be at least \" + minStake.toString(10));\n            }\n            if (typeof delegationFee !== \"number\" || delegationFee > 100 || delegationFee < 0) {\n                throw new errors_1.DelegationFeeError(\"PlatformVMAPI.buildAddValidatorTx -- delegationFee must be a number between 0 and 100\");\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const now = helperfunctions_1.UnixNow();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new errors_1.TimeError(\"PlatformVMAPI.buildAddValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const builtUnsignedTx = utxoset.buildAddValidatorTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), djtxAssetID, to, from, change, helperfunctions_1.NodeIDStringToBuffer(nodeID), startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewards, delegationFee, new bn_js_1.default(0), djtxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n          * Class representing an unsigned [[CreateSubnetTx]] transaction.\n          *\n          * @param utxoset A set of UTXOs that the transaction is built on\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n          * @param subnetOwnerAddresses An array of addresses for owners of the new subnet\n          * @param subnetOwnerThreshold A number indicating the amount of signatures required to add validators to a subnet\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          *\n          * @returns An unsigned transaction created from the passed in parameters.\n          */\n        this.buildCreateSubnetTx = (utxoset, fromAddresses, changeAddresses, subnetOwnerAddresses, subnetOwnerThreshold, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, \"buildCreateSubnetTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildCreateSubnetTx\").map((a) => bintools.stringToAddress(a));\n            const owners = this._cleanAddressArray(subnetOwnerAddresses, \"buildCreateSubnetTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateSubnetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, change, owners, subnetOwnerThreshold, this.getCreationTxFee(), djtxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx, this.getCreationTxFee()))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * @returns the UTXOs that were rewarded after the provided transaction\"s staking or delegation period ended.\n         *\n         * @returns the number fetched, an array of UTXOs and the encoding.\n         */\n        this.getRewardUTXOs = (txID, encoding) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID,\n                encoding\n            };\n            const response = yield this.callMethod(\"platform.getRewardUTXOs\", params);\n            return response.data.result;\n        });\n        this.blockchainID = constants_1.PlatformChainID;\n        const netid = core.getNetworkID();\n        if (netid in constants_1.Defaults.network && this.blockchainID in constants_1.Defaults.network[netid]) {\n            const { alias } = constants_1.Defaults.network[netid][this.blockchainID];\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[i] === \"string\") {\n                    if (typeof this.parseAddress(addresses[i]) === \"undefined\") {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - Invalid address format\");\n                    }\n                    addrs.push(addresses[i]);\n                }\n                else {\n                    const bech32 = \"bech32\";\n                    addrs.push(serialization.bufferToType(addresses[i], bech32, this.core.getHRP(), chainid));\n                }\n            }\n        }\n        return addrs;\n    }\n}\nexports.PlatformVMAPI = PlatformVMAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Transactions\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMStandardTx = exports.EVMStandardUnsignedTx = exports.EVMStandardBaseTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst input_1 = require(\"./input\");\nconst output_1 = require(\"./output\");\nconst constants_1 = require(\"../utils/constants\");\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass EVMStandardBaseTx extends serialization_1.Serializable {\n    /**\n     * Class representing a StandardBaseTx which is the foundation for all transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     */\n    constructor(networkID = constants_1.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16)) {\n        super();\n        this._typeName = \"EVMStandardBaseTx\";\n        this._typeID = undefined;\n        this.networkID = buffer_1.Buffer.alloc(4);\n        this.blockchainID = buffer_1.Buffer.alloc(32);\n        /**\n         * Returns the NetworkID as a number\n         */\n        this.getNetworkID = () => this.networkID.readUInt32BE(0);\n        /**\n         * Returns the Buffer representation of the BlockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        this.networkID.writeUInt32BE(networkID, 0);\n        this.blockchainID = blockchainID;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"networkID\": serializer.encoder(this.networkID, encoding, \"Buffer\", \"decimalString\"), \"blockchainID\": serializer.encoder(this.blockchainID, encoding, \"Buffer\", \"cb58\") });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.networkID = serializer.decoder(fields[\"networkID\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.blockchainID = serializer.decoder(fields[\"blockchainID\"], encoding, \"cb58\", \"Buffer\", 32);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardBaseTx]].\n     */\n    toBuffer() {\n        let bsize = this.networkID.length + this.blockchainID.length;\n        const barr = [this.networkID, this.blockchainID];\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Returns a base-58 representation of the [[StandardBaseTx]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.EVMStandardBaseTx = EVMStandardBaseTx;\n/**\n * Class representing an unsigned transaction.\n */\nclass EVMStandardUnsignedTx extends serialization_1.Serializable {\n    constructor(transaction = undefined, codecID = 0) {\n        super();\n        this._typeName = \"StandardUnsignedTx\";\n        this._typeID = undefined;\n        this.codecID = 0;\n        /**\n         * Returns the CodecID as a number\n         */\n        this.getCodecID = () => this.codecID;\n        /**\n        * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n        */\n        this.getCodecIDBuffer = () => {\n            let codecBuf = buffer_1.Buffer.alloc(2);\n            codecBuf.writeUInt16BE(this.codecID, 0);\n            return codecBuf;\n        };\n        /**\n         * Returns the inputTotal as a BN\n         */\n        this.getInputTotal = (assetID) => {\n            const ins = [];\n            const aIDHex = assetID.toString('hex');\n            let total = new bn_js_1.default(0);\n            ins.forEach((input) => {\n                // only check StandardAmountInputs\n                if (input.getInput() instanceof input_1.StandardAmountInput && aIDHex === input.getAssetID().toString('hex')) {\n                    const i = input.getInput();\n                    total = total.add(i.getAmount());\n                }\n            });\n            return total;\n        };\n        /**\n         * Returns the outputTotal as a BN\n         */\n        this.getOutputTotal = (assetID) => {\n            const outs = [];\n            const aIDHex = assetID.toString('hex');\n            let total = new bn_js_1.default(0);\n            outs.forEach((out) => {\n                // only check StandardAmountOutput\n                if (out.getOutput() instanceof output_1.StandardAmountOutput && aIDHex === out.getAssetID().toString('hex')) {\n                    const output = out.getOutput();\n                    total = total.add(output.getAmount());\n                }\n            });\n            return total;\n        };\n        /**\n         * Returns the number of burned tokens as a BN\n         */\n        this.getBurn = (assetID) => {\n            return this.getInputTotal(assetID).sub(this.getOutputTotal(assetID));\n        };\n        this.codecID = codecID;\n        this.transaction = transaction;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"codecID\": serializer.encoder(this.codecID, encoding, \"number\", \"decimalString\", 2), \"transaction\": this.transaction.serialize(encoding) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.codecID = serializer.decoder(fields[\"codecID\"], encoding, \"decimalString\", \"number\");\n    }\n    toBuffer() {\n        const codecID = this.getCodecIDBuffer();\n        const txtype = buffer_1.Buffer.alloc(4);\n        txtype.writeUInt32BE(this.transaction.getTxType(), 0);\n        const basebuff = this.transaction.toBuffer();\n        return buffer_1.Buffer.concat([codecID, txtype, basebuff], codecID.length + txtype.length + basebuff.length);\n    }\n}\nexports.EVMStandardUnsignedTx = EVMStandardUnsignedTx;\n/**\n * Class representing a signed transaction.\n */\nclass EVMStandardTx extends serialization_1.Serializable {\n    /**\n     * Class representing a signed transaction.\n     *\n     * @param unsignedTx Optional [[StandardUnsignedTx]]\n     * @param signatures Optional array of [[Credential]]s\n     */\n    constructor(unsignedTx = undefined, credentials = undefined) {\n        super();\n        this._typeName = \"StandardTx\";\n        this._typeID = undefined;\n        this.unsignedTx = undefined;\n        this.credentials = [];\n        /**\n         * Returns the [[StandardUnsignedTx]]\n         */\n        this.getUnsignedTx = () => {\n            return this.unsignedTx;\n        };\n        if (typeof unsignedTx !== 'undefined') {\n            this.unsignedTx = unsignedTx;\n            if (typeof credentials !== 'undefined') {\n                this.credentials = credentials;\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"unsignedTx\": this.unsignedTx.serialize(encoding), \"credentials\": this.credentials.map((c) => c.serialize(encoding)) });\n    }\n    ;\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTx]].\n     */\n    toBuffer() {\n        const txbuff = this.unsignedTx.toBuffer();\n        let bsize = txbuff.length;\n        const credlen = buffer_1.Buffer.alloc(4);\n        credlen.writeUInt32BE(this.credentials.length, 0);\n        const barr = [txbuff, credlen];\n        bsize += credlen.length;\n        this.credentials.forEach((credential) => {\n            const credid = buffer_1.Buffer.alloc(4);\n            credid.writeUInt32BE(credential.getCredentialID(), 0);\n            barr.push(credid);\n            bsize += credid.length;\n            const credbuff = credential.toBuffer();\n            bsize += credbuff.length;\n            barr.push(credbuff);\n        });\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Takes a base-58 string containing an [[StandardTx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[StandardTx]]\n     *\n     * @returns The length of the raw [[StandardTx]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a cb58 representation of the [[StandardTx]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n}\nexports.EVMStandardTx = EVMStandardTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ExportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Export transaction.\n */\nclass ExportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Export transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param destinationChain Optional chainid which identifies where the funds will send to.\n     * @param exportOuts Array of [[TransferableOutputs]]s used in the transaction\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, destinationChain = undefined, exportOuts = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ExportTx\";\n        this._typeID = constants_1.PlatformVMConstants.EXPORTTX;\n        this.destinationChain = buffer_1.Buffer.alloc(32);\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.exportOuts = [];\n        /**\n         * Returns the id of the [[ExportTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.EXPORTTX;\n        };\n        this.destinationChain = destinationChain; //do not correct, it should bomb on toBuffer if not provided\n        if (typeof exportOuts !== 'undefined' && Array.isArray(exportOuts)) {\n            for (let i = 0; i < exportOuts.length; i++) {\n                if (!(exportOuts[i] instanceof outputs_1.TransferableOutput)) {\n                    throw new errors_1.TransferableOutputError(\"Error - ExportTx.constructor: invalid TransferableOutput in array parameter 'exportOuts'\");\n                }\n            }\n            this.exportOuts = exportOuts;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"destinationChain\": serialization.encoder(this.destinationChain, encoding, \"Buffer\", \"cb58\"), \"exportOuts\": this.exportOuts.map((e) => e.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.destinationChain = serialization.decoder(fields[\"destinationChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.exportOuts = fields[\"exportOuts\"].map((e) => {\n            let eo = new outputs_1.TransferableOutput();\n            eo.deserialize(e, encoding);\n            return eo;\n        });\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n    }\n    /**\n     * Returns an array of [[TransferableOutput]]s in this transaction.\n     */\n    getExportOutputs() {\n        return this.exportOuts;\n    }\n    /**\n     * Returns the total exported amount as a {@link https://github.com/indutny/bn.js/|BN}.\n     */\n    getExportTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            val = val.add(this.exportOuts[i].getOutput().getAmount());\n        }\n        return val;\n    }\n    getTotalOuts() {\n        return [...this.getOuts(), ...this.getExportOutputs()];\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ExportTx]], parses it, populates the class, and returns the length of the [[ExportTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ExportTx]]\n     *\n     * @returns The length of the raw [[ExportTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportOuts.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n     */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n        let barr = [super.toBuffer(), this.destinationChain, this.numOuts];\n        this.exportOuts = this.exportOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            barr.push(this.exportOuts[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    clone() {\n        let newbase = new ExportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ExportTx(...args);\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0dHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2V4cG9ydHR4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7R0FHRztBQUNILG9DQUFpQztBQUNqQyxvRUFBNEM7QUFDNUMsMkNBQWtEO0FBQ2xELHVDQUErQztBQUUvQyxxQ0FBa0M7QUFDbEMscURBQXlEO0FBQ3pELGtEQUF1QjtBQUV2Qiw2REFBOEU7QUFDOUUsK0NBQTJFO0FBRTNFOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQWEsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUNqRCxNQUFNLGFBQWEsR0FBa0IsNkJBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUVqRTs7R0FFRztBQUNILE1BQWEsUUFBUyxTQUFRLGVBQU07SUEyR2xDOzs7Ozs7Ozs7O09BVUc7SUFDSCxZQUNFLFlBQW9CLDRCQUFnQixFQUFFLGVBQXVCLGVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUNqRixPQUE2QixTQUFTLEVBQUUsTUFBMkIsU0FBUyxFQUM1RSxPQUFlLFNBQVMsRUFBRSxtQkFBMkIsU0FBUyxFQUFFLGFBQW1DLFNBQVM7UUFFNUcsS0FBSyxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQTFIeEMsY0FBUyxHQUFHLFVBQVUsQ0FBQztRQUN2QixZQUFPLEdBQUcsK0JBQW1CLENBQUMsUUFBUSxDQUFDO1FBc0J2QyxxQkFBZ0IsR0FBVSxlQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLFlBQU8sR0FBVSxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLGVBQVUsR0FBeUIsRUFBRSxDQUFDO1FBRWhEOztXQUVHO1FBQ0gsY0FBUyxHQUFHLEdBQVUsRUFBRTtZQUN0QixPQUFP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QVEsRUFBRSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyw0QkFBa0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3hFLEtBQUksSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUM1QztRQUNELE9BQU8sZUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksT0FBTyxHQUFZLElBQUksUUFBUSxFQUFFLENBQUM7UUFDdEMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNwQyxPQUFPLE9BQWUsQ0FBQztJQUN6QixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBVTtRQUNsQixPQUFPLElBQUksUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFTLENBQUM7SUFDdkMsQ0FBQztDQTZCRjtBQXRJRCw0QkFzSUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktUGxhdGZvcm1WTS1FeHBvcnRUeFxuICovXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJztcbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi8uLi91dGlscy9iaW50b29scyc7XG5pbXBvcnQgeyBQbGF0Zm9ybVZNQ29uc3RhbnRzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgVHJhbnNmZXJhYmxlT3V0cHV0IH0gZnJvbSAnLi9vdXRwdXRzJztcbmltcG9ydCB7IFRyYW5zZmVyYWJsZUlucHV0IH0gZnJvbSAnLi9pbnB1dHMnO1xuaW1wb3J0IHsgQmFzZVR4IH0gZnJvbSAnLi9iYXNldHgnO1xuaW1wb3J0IHsgRGVmYXVsdE5ldHdvcmtJRCB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgQk4gZnJvbSAnYm4uanMnO1xuaW1wb3J0IHsgQW1vdW50T3V0cHV0IH0gZnJvbSAnLi4vcGxhdGZvcm12bS9vdXRwdXRzJztcbmltcG9ydCB7IFNlcmlhbGl6YXRpb24sIFNlcmlhbGl6ZWRFbmNvZGluZyB9IGZyb20gJy4uLy4uL3V0aWxzL3NlcmlhbGl6YXRpb24nO1xuaW1wb3J0IHsgQ2hhaW5JZEVycm9yLCBUcmFuc2ZlcmFibGVPdXRwdXRFcnJvciB9IGZyb20gJy4uLy4uL3V0aWxzL2Vycm9ycyc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29sczogQmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpXG5jb25zdCBzZXJpYWxpemF0aW9uOiBTZXJpYWxpemF0aW9uID0gU2VyaWFsaXphdGlvbi5nZXRJbnN0YW5jZSgpO1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhbiB1bnNpZ25lZCBFeHBvcnQgdHJhbnNhY3Rpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHBvcnRUeCBleHRlbmRzIEJhc2VUeCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIkV4cG9ydFR4XCI7XG4gIHByb3RlY3RlZCBfdHlwZUlEID0gUGxhdGZvcm1WTUNvbnN0YW50cy5FWFBPUlRUWDtcblxuICBzZXJpYWxpemUoZW5jb2Rpbmc6U2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIik6b2JqZWN0IHtcbiAgICBsZXQgZmllbGRzOm9iamVjdCA9IHN1cGVyLnNlcmlhbGl6ZShlbmNvZGluZyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpZWxkcyxcbiAgICAgIFwiZGVzdGluYXRpb25DaGFpblwiOiBzZXJpYWxpemF0aW9uLmVuY29kZXIodGhpcy5kZXN0aW5hdGlvbkNoYWluLCBlbmNvZGluZywgXCJCdWZmZXJcIiwgXCJjYjU4XCIpLFxuICAgICAgXCJleHBvcnRPdXRzXCI6IHRoaXMuZXhwb3J0T3V0cy5tYXAoKGUpID0+IGUuc2VyaWFsaXplKGVuY29kaW5nKSlcbiAgICB9XG4gIH07XG4gIGRlc2VyaWFsaXplKGZpZWxkczpvYmplY3QsIGVuY29kaW5nOlNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKTtcbiAgICB0aGlzLmRlc3RpbmF0aW9uQ2hhaW4gPSBzZXJpYWxpemF0aW9uLmRlY29kZXIoZmllbGRzW1wiZGVzdGluYXRpb25DaGFpblwiXSwgZW5jb2RpbmcsIFwiY2I1OFwiLCBcIkJ1ZmZlclwiLCAzMik7XG4gICAgdGhpcy5leHBvcnRPdXRzID0gZmllbGRzW1wiZXhwb3J0T3V0c1wiXS5tYXAoKGU6b2JqZWN0KSA9PiB7XG4gICAgICBsZXQgZW86VHJhbnNmZXJhYmxlT3V0cHV0ID0gbmV3IFRyYW5zZmVyYWJsZU91dHB1dCgpO1xuICAgICAgZW8uZGVzZXJpYWxpemUoZSwgZW5jb2RpbmcpO1xuICAgICAgcmV0dXJuIGVvO1xuICAgIH0pO1xuICAgIHRoaXMubnVtT3V0cyA9IEJ1ZmZlci5hbGxvYyg0KTtcbiAgICB0aGlzLm51bU91dHMud3JpdGVVSW50MzJCRSh0aGlzLmV4cG9ydE91dHMubGVuZ3RoLCAwKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBkZXN0aW5hdGlvbkNoYWluOkJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygzMik7XG4gIHByb3RlY3RlZCBudW1PdXRzOkJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KTtcbiAgcHJvdGVjdGVkIGV4cG9ydE91dHM6IFRyYW5zZmVyYWJsZU91dHB1dFtdID0gW107XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGlkIG9mIHRoZSBbW0V4cG9ydFR4XV1cbiAgICovXG4gIGdldFR4VHlwZSA9ICgpOm51bWJlciA9PiB7XG4gICAgcmV0dXJuIFBsYXRmb3JtVk1Db25zdGFudHMuRVhQT1JUVFg7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiBbW1RyYW5zZmVyYWJsZU91dHB1dF1dcyBpbiB0aGlzIHRyYW5zYWN0aW9uLlxuICAgKi9cbiAgZ2V0RXhwb3J0T3V0cHV0cygpOiBUcmFuc2ZlcmFibGVPdXRwdXRbXSB7XG4gICAgcmV0dXJuIHRoaXMuZXhwb3J0T3V0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB0b3RhbCBleHBvcnRlZCBhbW91bnQgYXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfS5cbiAgICovXG4gIGdldEV4cG9ydFRvdGFsKCk6Qk4ge1xuICAgIGxldCB2YWw6Qk4gPSBuZXcgQk4oMCk7XG4gICAgZm9yKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5leHBvcnRPdXRzLmxlbmd0aDsgaSsrKXtcbiAgICAgIHZhbCA9IHZhbC5hZGQoKHRoaXMuZXhwb3J0T3V0c1tpXS5nZXRPdXRwdXQoKSBhcyBBbW91bnRPdXRwdXQpLmdldEFtb3VudCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIGdldFRvdGFsT3V0cygpOiBUcmFuc2ZlcmFibGVPdXRwdXRbXSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLmdldE91dHMoKSBhcyBUcmFuc2ZlcmFibGVPdXRwdXRbXSwgLi4udGhpcy5nZXRFeHBvcnRPdXRwdXRzKCldO1xuICB9XG5cbiAgLyoqXG4gICAqIFRha2VzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhbiBbW0V4cG9ydFR4XV0sIHBhcnNlcyBpdCwgcG9wdWxhdGVzIHRoZSBjbGFzcywgYW5kIHJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgW1tFeHBvcnRUeF1dIGluIGJ5dGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYnl0ZXMgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBjb250YWluaW5nIGEgcmF3IFtbRXhwb3J0VHhdXVxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgbGVuZ3RoIG9mIHRoZSByYXcgW1tFeHBvcnRUeF1dXG4gICAqXG4gICAqIEByZW1hcmtzIGFzc3VtZSBub3QtY2hlY2tzdW1tZWRcbiAgICovXG4gIGZyb21CdWZmZXIoYnl0ZXM6QnVmZmVyLCBvZmZzZXQ6bnVtYmVyID0gMCk6bnVtYmVyIHtcbiAgICBvZmZzZXQgPSBzdXBlci5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpO1xuICAgIHRoaXMuZGVzdGluYXRpb25DaGFpbiA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDMyKTtcbiAgICBvZmZzZXQgKz0gMzI7XG4gICAgdGhpcy5udW1PdXRzID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCk7XG4gICAgb2Zmc2V0ICs9IDQ7XG4gICAgY29uc3QgbnVtT3V0czpudW1iZXIgPSB0aGlzLm51bU91dHMucmVhZFVJbnQzMkJFKDApO1xuICAgIGZvciAobGV0IGk6bnVtYmVyID0gMDsgaSA8IG51bU91dHM7IGkrKykge1xuICAgICAgY29uc3QgYW5PdXQ6VHJhbnNmZXJhYmxlT3V0cHV0ID0gbmV3IFRyYW5zZmVyYWJsZU91dHB1dCgpO1xuICAgICAgb2Zmc2V0ID0gYW5PdXQuZnJvbUJ1ZmZlcihieXRlcywgb2Zmc2V0KTtcbiAgICAgIHRoaXMuZXhwb3J0T3V0cy5wdXNoKGFuT3V0KTtcbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50YXRpb24gb2YgdGhlIFtbRXhwb3J0VHhdXS5cbiAgICovXG4gIHRvQnVmZmVyKCk6QnVmZmVyIHtcbiAgICBpZih0eXBlb2YgdGhpcy5kZXN0aW5hdGlvbkNoYWluID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgQ2hhaW5JZEVycm9yKFwiRXhwb3J0VHgudG9CdWZmZXIgLS0gdGhpcy5kZXN0aW5hdGlvbkNoYWluIGlzIHVuZGVmaW5lZFwiKTtcbiAgICB9XG4gICAgdGhpcy5udW1PdXRzLndyaXRlVUludDMyQkUodGhpcy5leHBvcnRPdXRzLmxlbmd0aCwgMCk7XG4gICAgbGV0IGJhcnI6IEJ1ZmZlcltdID0gW3N1cGVyLnRvQnVmZmVyKCksIHRoaXMuZGVzdGluYXRpb25DaGFpbiwgdGhpcy5udW1PdXRzXTtcbiAgICB0aGlzLmV4cG9ydE91dHMgPSB0aGlzLmV4cG9ydE91dHMuc29ydChUcmFuc2ZlcmFibGVPdXRwdXQuY29tcGFyYXRvcigpKTtcbiAgICBmb3IobGV0IGk6IG51bWJlciA9IDA7IGkgPCB0aGlzLmV4cG9ydE91dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYmFyci5wdXNoKHRoaXMuZXhwb3J0T3V0c1tpXS50b0J1ZmZlcigpKTtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoYmFycik7XG4gIH1cblxuICBjbG9uZSgpOnRoaXMge1xuICAgIGxldCBuZXdiYXNlOkV4cG9ydFR4ID0gbmV3IEV4cG9ydFR4KCk7XG4gICAgbmV3YmFzZS5mcm9tQnVmZmVyKHRoaXMudG9CdWZmZXIoKSk7XG4gICAgcmV0dXJuIG5ld2Jhc2UgYXMgdGhpcztcbiAgfVxuXG4gIGNyZWF0ZSguLi5hcmdzOmFueVtdKTp0aGlzIHtcbiAgICByZXR1cm4gbmV3IEV4cG9ydFR4KC4uLmFyZ3MpIGFzIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2xhc3MgcmVwcmVzZW50aW5nIGFuIHVuc2lnbmVkIEV4cG9ydCB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIG5ldHdvcmtJRCBPcHRpb25hbCBuZXR3b3JrSUQsIFtbRGVmYXVsdE5ldHdvcmtJRF1dXG4gICAqIEBwYXJhbSBibG9ja2NoYWluSUQgT3B0aW9uYWwgYmxvY2tjaGFpbklELCBkZWZhdWx0IEJ1ZmZlci5hbGxvYygzMiwgMTYpXG4gICAqIEBwYXJhbSBvdXRzIE9wdGlvbmFsIGFycmF5IG9mIHRoZSBbW1RyYW5zZmVyYWJsZU91dHB1dF1dc1xuICAgKiBAcGFyYW0gaW5zIE9wdGlvbmFsIGFycmF5IG9mIHRoZSBbW1RyYW5zZmVyYWJsZUlucHV0XV1zXG4gICAqIEBwYXJhbSBtZW1vIE9wdGlvbmFsIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGZvciB0aGUgbWVtbyBmaWVsZFxuICAgKiBAcGFyYW0gZGVzdGluYXRpb25DaGFpbiBPcHRpb25hbCBjaGFpbmlkIHdoaWNoIGlkZW50aWZpZXMgd2hlcmUgdGhlIGZ1bmRzIHdpbGwgc2VuZCB0by5cbiAgICogQHBhcmFtIGV4cG9ydE91dHMgQXJyYXkgb2YgW1tUcmFuc2ZlcmFibGVPdXRwdXRzXV1zIHVzZWQgaW4gdGhlIHRyYW5zYWN0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBuZXR3b3JrSUQ6IG51bWJlciA9IERlZmF1bHROZXR3b3JrSUQsIGJsb2NrY2hhaW5JRDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDMyLCAxNiksXG4gICAgb3V0czogVHJhbnNmZXJhYmxlT3V0cHV0W10gPSB1bmRlZmluZWQsIGluczogVHJhbnNmZXJhYmxlSW5wdXRbXSA9IHVuZGVmaW5lZCxcbiAgICBtZW1vOiBCdWZmZXIgPSB1bmRlZmluZWQsIGRlc3RpbmF0aW9uQ2hhaW46IEJ1ZmZlciA9IHVuZGVmaW5lZCwgZXhwb3J0T3V0czogVHJhbnNmZXJhYmxlT3V0cHV0W10gPSB1bmRlZmluZWRcbiAgKSB7XG4gICAgc3VwZXIobmV0d29ya0lELCBibG9ja2NoYWluSUQsIG91dHMsIGlucywgbWVtbyk7XG4gICAgdGhpcy5kZXN0aW5hdGlvbkNoYWluID0gZGVzdGluYXRpb25DaGFpbjsgLy9kbyBub3QgY29ycmVjdCwgaXQgc2hvdWxkIGJvbWIgb24gdG9CdWZmZXIgaWYgbm90IHByb3ZpZGVkXG4gICAgaWYgKHR5cGVvZiBleHBvcnRPdXRzICE9PSAndW5kZWZpbmVkJyAmJiBBcnJheS5pc0FycmF5KGV4cG9ydE91dHMpKSB7XG4gICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgZXhwb3J0T3V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIShleHBvcnRPdXRzW2ldIGluc3RhbmNlb2YgVHJhbnNmZXJhYmxlT3V0cHV0KSkge1xuICAgICAgICAgIHRocm93IG5ldyBUcmFuc2ZlcmFibGVPdXRwdXRFcnJvcihcIkVycm9yIC0gRXhwb3J0VHguY29uc3RydWN0b3I6IGludmFsaWQgVHJhbnNmZXJhYmxlT3V0cHV0IGluIGFycmF5IHBhcmFtZXRlciAnZXhwb3J0T3V0cydcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuZXhwb3J0T3V0cyA9IGV4cG9ydE91dHM7XG4gICAgfVxuICB9XG59Il19","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9tZXRyaWNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tx = exports.UnsignedTx = exports.SelectTxClass = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst basetx_1 = require(\"./basetx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst validationtx_1 = require(\"./validationtx\");\nconst createsubnettx_1 = require(\"./createsubnettx\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[BaseTx]] instance.\n *\n * @param txtype The id of the transaction type\n *\n * @returns An instance of an [[BaseTx]]-extended class.\n */\nexports.SelectTxClass = (txtype, ...args) => {\n    if (txtype === constants_1.PlatformVMConstants.BASETX) {\n        return new basetx_1.BaseTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.IMPORTTX) {\n        return new importtx_1.ImportTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.EXPORTTX) {\n        return new exporttx_1.ExportTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.ADDDELEGATORTX) {\n        return new validationtx_1.AddDelegatorTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.ADDVALIDATORTX) {\n        return new validationtx_1.AddValidatorTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.CREATESUBNETTX) {\n        return new createsubnettx_1.CreateSubnetTx(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.TransactionError(\"Error - SelectTxClass: unknown txtype\");\n};\nclass UnsignedTx extends tx_1.StandardUnsignedTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UnsignedTx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.transaction = exports.SelectTxClass(fields[\"transaction\"][\"_typeID\"]);\n        this.transaction.deserialize(fields[\"transaction\"], encoding);\n    }\n    getTransaction() {\n        return this.transaction;\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.transaction = exports.SelectTxClass(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from(create_hash_1.default('sha256').update(txbuff).digest());\n        const sigs = this.transaction.sign(msg, kc);\n        return new Tx(this, sigs);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends tx_1.StandardTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Tx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.unsignedTx = new UnsignedTx();\n        this.unsignedTx.deserialize(fields[\"unsignedTx\"], encoding);\n        this.credentials = [];\n        for (let i = 0; i < fields[\"credentials\"].length; i++) {\n            const cred = credentials_1.SelectCredentialClass(fields[\"credentials\"][i][\"_typeID\"]);\n            cred.deserialize(fields[\"credentials\"][i], encoding);\n            this.credentials.push(cred);\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n            offset += 4;\n            const cred = credentials_1.SelectCredentialClass(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Constants\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlatformVMConstants = void 0;\nclass PlatformVMConstants {\n}\nexports.PlatformVMConstants = PlatformVMConstants;\nPlatformVMConstants.LATESTCODEC = 0;\nPlatformVMConstants.SECPFXID = 0;\nPlatformVMConstants.SECPXFEROUTPUTID = 7;\nPlatformVMConstants.SUBNETAUTHID = 10;\nPlatformVMConstants.SECPOWNEROUTPUTID = 11;\nPlatformVMConstants.STAKEABLELOCKOUTID = 22;\nPlatformVMConstants.SECPINPUTID = 5;\nPlatformVMConstants.STAKEABLELOCKINID = 21;\nPlatformVMConstants.LOCKEDSTAKEABLES = [PlatformVMConstants.STAKEABLELOCKINID, PlatformVMConstants.STAKEABLELOCKOUTID];\nPlatformVMConstants.BASETX = 0;\nPlatformVMConstants.ADDVALIDATORTX = 12;\nPlatformVMConstants.ADDSUBNETVALIDATORTX = 13;\nPlatformVMConstants.ADDDELEGATORTX = 14;\nPlatformVMConstants.CREATECHAINTX = 15;\nPlatformVMConstants.CREATESUBNETTX = 16;\nPlatformVMConstants.IMPORTTX = 17;\nPlatformVMConstants.EXPORTTX = 18;\nPlatformVMConstants.ADVANCETIMETX = 19;\nPlatformVMConstants.REWARDVALIDATORTX = 20;\nPlatformVMConstants.SECPCREDENTIAL = 9;\nPlatformVMConstants.ASSETIDLEN = 32;\nPlatformVMConstants.BLOCKCHAINIDLEN = 32;\nPlatformVMConstants.SYMBOLMAXLEN = 4;\nPlatformVMConstants.ASSETNAMELEN = 128;\nPlatformVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvcGxhdGZvcm12bS9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgsTUFBYSxtQkFBbUI7O0FBQWhDLGtEQWtEQztBQWpEUSwrQkFBVyxHQUFVLENBQUMsQ0FBQztBQUV2Qiw0QkFBUSxHQUFVLENBQUMsQ0FBQztBQUVwQixvQ0FBZ0IsR0FBVSxDQUFDLENBQUM7QUFFNUIsZ0NBQVksR0FBVSxFQUFFLENBQUM7QUFFekIscUNBQWlCLEdBQVUsRUFBRSxDQUFDO0FBRTlCLHNDQUFrQixHQUFVLEVBQUUsQ0FBQztBQUUvQiwrQkFBVyxHQUFVLENBQUMsQ0FBQztBQUV2QixxQ0FBaUIsR0FBVSxFQUFFLENBQUM7QUFFOUIsb0NBQWdCLEdBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsRUFBRSxtQkFBbUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRTdHLDBCQUFNLEdBQVUsQ0FBQyxDQUFDO0FBRWxCLGtDQUFjLEdBQVUsRUFBRSxDQUFDO0FBRTNCLHdDQUFvQixHQUFVLEVBQUUsQ0FBQztBQUVqQyxrQ0FBYyxHQUFVLEVBQUUsQ0FBQztBQUUzQixpQ0FBYSxHQUFVLEVBQUUsQ0FBQztBQUUxQixrQ0FBYyxHQUFVLEVBQUUsQ0FBQztBQUUzQiw0QkFBUSxHQUFVLEVBQUUsQ0FBQztBQUVyQiw0QkFBUSxHQUFVLEVBQUUsQ0FBQztBQUVyQixpQ0FBYSxHQUFVLEVBQUUsQ0FBQztBQUUxQixxQ0FBaUIsR0FBVSxFQUFFLENBQUM7QUFFOUIsa0NBQWMsR0FBVSxDQUFDLENBQUM7QUFFMUIsOEJBQVUsR0FBVSxFQUFFLENBQUM7QUFFdkIsbUNBQWUsR0FBVSxFQUFFLENBQUM7QUFFNUIsZ0NBQVksR0FBVSxDQUFDLENBQUM7QUFFeEIsZ0NBQVksR0FBVSxHQUFHLENBQUM7QUFFMUIsaUNBQWEsR0FBVSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktUGxhdGZvcm1WTS1Db25zdGFudHNcbiAqL1xuXG5leHBvcnQgY2xhc3MgUGxhdGZvcm1WTUNvbnN0YW50cyB7XG4gIHN0YXRpYyBMQVRFU1RDT0RFQzpudW1iZXIgPSAwO1xuXG4gIHN0YXRpYyBTRUNQRlhJRDpudW1iZXIgPSAwO1xuXG4gIHN0YXRpYyBTRUNQWEZFUk9VVFBVVElEOm51bWJlciA9IDc7XG4gIFxuICBzdGF0aWMgU1VCTkVUQVVUSElEOm51bWJlciA9IDEwO1xuXG4gIHN0YXRpYyBTRUNQT1dORVJPVVRQVVRJRDpudW1iZXIgPSAxMTtcblxuICBzdGF0aWMgU1RBS0VBQkxFTE9DS09VVElEOm51bWJlciA9IDIyO1xuXG4gIHN0YXRpYyBTRUNQSU5QVVRJRDpudW1iZXIgPSA1O1xuXG4gIHN0YXRpYyBTVEFLRUFCTEVMT0NLSU5JRDpudW1iZXIgPSAyMTtcblxuICBzdGF0aWMgTE9DS0VEU1RBS0VBQkxFUzogbnVtYmVyW10gPSBbUGxhdGZvcm1WTUNvbnN0YW50cy5TVEFLRUFCTEVMT0NLSU5JRCwgUGxhdGZvcm1WTUNvbnN0YW50cy5TVEFLRUFCTEVMT0NLT1VUSURdO1xuXG4gIHN0YXRpYyBCQVNFVFg6bnVtYmVyID0gMDtcblxuICBzdGF0aWMgQUREVkFMSURBVE9SVFg6bnVtYmVyID0gMTI7XG5cbiAgc3RhdGljIEFERFNVQk5FVFZBTElEQVRPUlRYOm51bWJlciA9IDEzO1xuXG4gIHN0YXRpYyBBRERERUxFR0FUT1JUWDpudW1iZXIgPSAxNDtcblxuICBzdGF0aWMgQ1JFQVRFQ0hBSU5UWDpudW1iZXIgPSAxNTtcblxuICBzdGF0aWMgQ1JFQVRFU1VCTkVUVFg6bnVtYmVyID0gMTY7XG5cbiAgc3RhdGljIElNUE9SVFRYOm51bWJlciA9IDE3O1xuXG4gIHN0YXRpYyBFWFBPUlRUWDpudW1iZXIgPSAxODtcblxuICBzdGF0aWMgQURWQU5DRVRJTUVUWDpudW1iZXIgPSAxOTtcblxuICBzdGF0aWMgUkVXQVJEVkFMSURBVE9SVFg6bnVtYmVyID0gMjA7XG5cbiAgc3RhdGljIFNFQ1BDUkVERU5USUFMOm51bWJlciA9IDk7XG5cbiAgc3RhdGljIEFTU0VUSURMRU46bnVtYmVyID0gMzI7XG5cbiAgc3RhdGljIEJMT0NLQ0hBSU5JRExFTjpudW1iZXIgPSAzMjtcblxuICBzdGF0aWMgU1lNQk9MTUFYTEVOOm51bWJlciA9IDQ7XG5cbiAgc3RhdGljIEFTU0VUTkFNRUxFTjpudW1iZXIgPSAxMjg7XG5cbiAgc3RhdGljIEFERFJFU1NMRU5HVEg6bnVtYmVyID0gMjA7XG59XG4iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardTx = exports.StandardUnsignedTx = exports.StandardBaseTx = void 0;\n/**\n * @packageDocumentation\n * @module Common-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst input_1 = require(\"./input\");\nconst output_1 = require(\"./output\");\nconst constants_1 = require(\"../utils/constants\");\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst cb58 = \"cb58\";\nconst hex = \"hex\";\nconst decimalString = \"decimalString\";\nconst buffer = \"Buffer\";\n/**\n * Class representing a base for all transactions.\n */\nclass StandardBaseTx extends serialization_1.Serializable {\n    /**\n     * Class representing a StandardBaseTx which is the foundation for all transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkID = constants_1.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super();\n        this._typeName = \"StandardBaseTx\";\n        this._typeID = undefined;\n        this.networkID = buffer_1.Buffer.alloc(4);\n        this.blockchainID = buffer_1.Buffer.alloc(32);\n        this.numouts = buffer_1.Buffer.alloc(4);\n        this.numins = buffer_1.Buffer.alloc(4);\n        this.memo = buffer_1.Buffer.alloc(0);\n        /**\n         * Returns the NetworkID as a number\n         */\n        this.getNetworkID = () => this.networkID.readUInt32BE(0);\n        /**\n         * Returns the Buffer representation of the BlockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the memo\n         */\n        this.getMemo = () => this.memo;\n        this.networkID.writeUInt32BE(networkID, 0);\n        this.blockchainID = blockchainID;\n        if (typeof memo != \"undefined\") {\n            this.memo = memo;\n        }\n        if (typeof ins !== \"undefined\" && typeof outs !== \"undefined\") {\n            this.numouts.writeUInt32BE(outs.length, 0);\n            this.outs = outs.sort(output_1.StandardTransferableOutput.comparator());\n            this.numins.writeUInt32BE(ins.length, 0);\n            this.ins = ins.sort(input_1.StandardTransferableInput.comparator());\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { networkID: serialization.encoder(this.networkID, encoding, buffer, decimalString), blockchainID: serialization.encoder(this.blockchainID, encoding, buffer, cb58), outs: this.outs.map((o) => o.serialize(encoding)), ins: this.ins.map((i) => i.serialize(encoding)), memo: serialization.encoder(this.memo, encoding, buffer, hex) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.networkID = serialization.decoder(fields[\"networkID\"], encoding, decimalString, buffer, 4);\n        this.blockchainID = serialization.decoder(fields[\"blockchainID\"], encoding, cb58, buffer, 32);\n        this.memo = serialization.decoder(fields[\"memo\"], encoding, hex, buffer);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardBaseTx]].\n     */\n    toBuffer() {\n        this.outs.sort(output_1.StandardTransferableOutput.comparator());\n        this.ins.sort(input_1.StandardTransferableInput.comparator());\n        this.numouts.writeUInt32BE(this.outs.length, 0);\n        this.numins.writeUInt32BE(this.ins.length, 0);\n        let bsize = this.networkID.length + this.blockchainID.length + this.numouts.length;\n        const barr = [this.networkID, this.blockchainID, this.numouts];\n        for (let i = 0; i < this.outs.length; i++) {\n            const b = this.outs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        barr.push(this.numins);\n        bsize += this.numins.length;\n        for (let i = 0; i < this.ins.length; i++) {\n            const b = this.ins[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        let memolen = buffer_1.Buffer.alloc(4);\n        memolen.writeUInt32BE(this.memo.length, 0);\n        barr.push(memolen);\n        bsize += 4;\n        barr.push(this.memo);\n        bsize += this.memo.length;\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Returns a base-58 representation of the [[StandardBaseTx]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.StandardBaseTx = StandardBaseTx;\n/**\n * Class representing an unsigned transaction.\n */\nclass StandardUnsignedTx extends serialization_1.Serializable {\n    constructor(transaction = undefined, codecID = 0) {\n        super();\n        this._typeName = \"StandardUnsignedTx\";\n        this._typeID = undefined;\n        this.codecID = 0;\n        /**\n         * Returns the CodecID as a number\n         */\n        this.getCodecID = () => this.codecID;\n        /**\n        * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n        */\n        this.getCodecIDBuffer = () => {\n            let codecBuf = buffer_1.Buffer.alloc(2);\n            codecBuf.writeUInt16BE(this.codecID, 0);\n            return codecBuf;\n        };\n        /**\n         * Returns the inputTotal as a BN\n         */\n        this.getInputTotal = (assetID) => {\n            const ins = this.getTransaction().getIns();\n            const aIDHex = assetID.toString(\"hex\");\n            let total = new bn_js_1.default(0);\n            for (let i = 0; i < ins.length; i++) {\n                // only check StandardAmountInputs\n                if (ins[i].getInput() instanceof input_1.StandardAmountInput && aIDHex === ins[i].getAssetID().toString(\"hex\")) {\n                    const input = ins[i].getInput();\n                    total = total.add(input.getAmount());\n                }\n            }\n            return total;\n        };\n        /**\n         * Returns the outputTotal as a BN\n         */\n        this.getOutputTotal = (assetID) => {\n            const outs = this.getTransaction().getTotalOuts();\n            const aIDHex = assetID.toString(\"hex\");\n            let total = new bn_js_1.default(0);\n            for (let i = 0; i < outs.length; i++) {\n                // only check StandardAmountOutput\n                if (outs[i].getOutput() instanceof output_1.StandardAmountOutput && aIDHex === outs[i].getAssetID().toString(\"hex\")) {\n                    const output = outs[i].getOutput();\n                    total = total.add(output.getAmount());\n                }\n            }\n            return total;\n        };\n        /**\n         * Returns the number of burned tokens as a BN\n         */\n        this.getBurn = (assetID) => {\n            return this.getInputTotal(assetID).sub(this.getOutputTotal(assetID));\n        };\n        this.codecID = codecID;\n        this.transaction = transaction;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { codecID: serialization.encoder(this.codecID, encoding, \"number\", \"decimalString\", 2), transaction: this.transaction.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.codecID = serialization.decoder(fields[\"codecID\"], encoding, \"decimalString\", \"number\");\n    }\n    toBuffer() {\n        const codecBuf = buffer_1.Buffer.alloc(2);\n        codecBuf.writeUInt16BE(this.transaction.getCodecID(), 0);\n        const txtype = buffer_1.Buffer.alloc(4);\n        txtype.writeUInt32BE(this.transaction.getTxType(), 0);\n        const basebuff = this.transaction.toBuffer();\n        return buffer_1.Buffer.concat([codecBuf, txtype, basebuff], codecBuf.length + txtype.length + basebuff.length);\n    }\n}\nexports.StandardUnsignedTx = StandardUnsignedTx;\n/**\n * Class representing a signed transaction.\n */\nclass StandardTx extends serialization_1.Serializable {\n    /**\n     * Class representing a signed transaction.\n     *\n     * @param unsignedTx Optional [[StandardUnsignedTx]]\n     * @param signatures Optional array of [[Credential]]s\n     */\n    constructor(unsignedTx = undefined, credentials = undefined) {\n        super();\n        this._typeName = \"StandardTx\";\n        this._typeID = undefined;\n        this.unsignedTx = undefined;\n        this.credentials = [];\n        /**\n         * Returns the [[Credential[]]]\n         */\n        this.getCredentials = () => {\n            return this.credentials;\n        };\n        /**\n         * Returns the [[StandardUnsignedTx]]\n         */\n        this.getUnsignedTx = () => {\n            return this.unsignedTx;\n        };\n        if (typeof unsignedTx !== \"undefined\") {\n            this.unsignedTx = unsignedTx;\n            if (typeof credentials !== \"undefined\") {\n                this.credentials = credentials;\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"unsignedTx\": this.unsignedTx.serialize(encoding), \"credentials\": this.credentials.map((c) => c.serialize(encoding)) });\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTx]].\n     */\n    toBuffer() {\n        const tx = this.unsignedTx.getTransaction();\n        const codecID = tx.getCodecID();\n        const txbuff = this.unsignedTx.toBuffer();\n        let bsize = txbuff.length;\n        const credlen = buffer_1.Buffer.alloc(4);\n        credlen.writeUInt32BE(this.credentials.length, 0);\n        const barr = [txbuff, credlen];\n        bsize += credlen.length;\n        for (let i = 0; i < this.credentials.length; i++) {\n            this.credentials[i].setCodecID(codecID);\n            const credID = buffer_1.Buffer.alloc(4);\n            credID.writeUInt32BE(this.credentials[i].getCredentialID(), 0);\n            barr.push(credID);\n            bsize += credID.length;\n            const credbuff = this.credentials[i].toBuffer();\n            bsize += credbuff.length;\n            barr.push(credbuff);\n        }\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Takes a base-58 string containing an [[StandardTx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[StandardTx]]\n     *\n     * @returns The length of the raw [[StandardTx]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a cb58 representation of the [[StandardTx]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n}\nexports.StandardTx = StandardTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Credential = exports.Signature = exports.SigIdx = void 0;\n/**\n * @packageDocumentation\n * @module Common-Signature\n */\nconst nbytes_1 = require(\"./nbytes\");\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Type representing a [[Signature]] index used in [[Input]]\n */\nclass SigIdx extends nbytes_1.NBytes {\n    /**\n     * Type representing a [[Signature]] index used in [[Input]]\n     */\n    constructor() {\n        super();\n        this._typeName = \"SigIdx\";\n        this._typeID = undefined;\n        this.source = buffer_1.Buffer.alloc(20);\n        this.bytes = buffer_1.Buffer.alloc(4);\n        this.bsize = 4;\n        /**\n         * Sets the source address for the signature\n         */\n        this.setSource = (address) => {\n            this.source = address;\n        };\n        /**\n         * Retrieves the source address for the signature\n         */\n        this.getSource = () => this.source;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"source\": serialization.encoder(this.source, encoding, \"Buffer\", \"hex\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.source = serialization.decoder(fields[\"source\"], encoding, \"hex\", \"Buffer\");\n    }\n    clone() {\n        let newbase = new SigIdx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SigIdx();\n    }\n}\nexports.SigIdx = SigIdx;\n/**\n * Signature for a [[Tx]]\n */\nclass Signature extends nbytes_1.NBytes {\n    /**\n     * Signature for a [[Tx]]\n     */\n    constructor() {\n        super();\n        this._typeName = \"Signature\";\n        this._typeID = undefined;\n        //serialize and deserialize both are inherited\n        this.bytes = buffer_1.Buffer.alloc(65);\n        this.bsize = 65;\n    }\n    clone() {\n        let newbase = new Signature();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new Signature();\n    }\n}\nexports.Signature = Signature;\nclass Credential extends serialization_1.Serializable {\n    constructor(sigarray = undefined) {\n        super();\n        this._typeName = \"Credential\";\n        this._typeID = undefined;\n        this.sigArray = [];\n        /**\n           * Adds a signature to the credentials and returns the index off the added signature.\n           */\n        this.addSignature = (sig) => {\n            this.sigArray.push(sig);\n            return this.sigArray.length - 1;\n        };\n        if (typeof sigarray !== \"undefined\") {\n            /* istanbul ignore next */\n            this.sigArray = sigarray;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sigArray: this.sigArray.map((s) => s.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sigArray = fields[\"sigArray\"].map((s) => {\n            let sig = new Signature();\n            sig.deserialize(s, encoding);\n            return sig;\n        });\n    }\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) { }\n    fromBuffer(bytes, offset = 0) {\n        const siglen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.sigArray = [];\n        for (let i = 0; i < siglen; i++) {\n            const sig = new Signature();\n            offset = sig.fromBuffer(bytes, offset);\n            this.sigArray.push(sig);\n        }\n        return offset;\n    }\n    toBuffer() {\n        const siglen = buffer_1.Buffer.alloc(4);\n        siglen.writeInt32BE(this.sigArray.length, 0);\n        const barr = [siglen];\n        let bsize = siglen.length;\n        for (let i = 0; i < this.sigArray.length; i++) {\n            const sigbuff = this.sigArray[i].toBuffer();\n            bsize += sigbuff.length;\n            barr.push(sigbuff);\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.Credential = Credential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2NyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7R0FHRztBQUNILHFDQUFpQztBQUNqQyxvQ0FBZ0M7QUFDaEMsaUVBQXdDO0FBQ3hDLDBEQUF3RjtBQUd4Rjs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFhLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUE7QUFDakQsTUFBTSxhQUFhLEdBQWtCLDZCQUFhLENBQUMsV0FBVyxFQUFFLENBQUE7QUFFaEU7O0dBRUc7QUFDSCxNQUFhLE1BQU8sU0FBUSxlQUFNO0lBMkNoQzs7T0FFRztJQUNIO1FBQ0UsS0FBSyxFQUFFLENBQUE7UUE5Q0MsY0FBUyxHQUFHLFFBQVEsQ0FBQTtRQUNwQixZQUFPLEdBQUcsU0FBUyxDQUFBO1FBY25CLFdBQU0sR0FBVyxlQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ2pDLFVBQUssR0FBRyxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3ZCLFVBQUssR0FBRyxDQUFDLENBQUE7UUFFbkI7O1dBRUc7UUFDSCxjQUFTLEdBQUcsQ0FBQyxPQUFjLEVBQUUsRUFBRTtZQUM3QixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQTtRQUN2QixDQUFDLENBQUE7UUFFRDs7V0FFRztRQUNILGNBQVMsR0FBRyxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBa0JyQyxDQUFDO0lBNUNELFNBQVMsQ0FBQyxXQUErQixLQUFLO1FBQzVDLElBQUksTUFBTSxHQUFXLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDOUMsdUNBQ0ssTUFBTSxLQUNULFFBQVEsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFB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QUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFBO1lBQ25ELEtBQUssSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFBO1lBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7U0FDbkI7UUFDRCxPQUFPLGVBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ25DLENBQUM7Q0FZRjtBQTFFRCxnQ0EwRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBDb21tb24tU2lnbmF0dXJlXG4gKi9cbmltcG9ydCB7IE5CeXRlcyB9IGZyb20gXCIuL25ieXRlc1wiXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5pbXBvcnQgQmluVG9vbHMgZnJvbSBcIi4uL3V0aWxzL2JpbnRvb2xzXCJcbmltcG9ydCB7IFNlcmlhbGl6YWJsZSwgU2VyaWFsaXphdGlvbiwgU2VyaWFsaXplZEVuY29kaW5nIH0gZnJvbSBcIi4uL3V0aWxzL3NlcmlhbGl6YXRpb25cIlxuXG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29sczogQmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpXG5jb25zdCBzZXJpYWxpemF0aW9uOiBTZXJpYWxpemF0aW9uID0gU2VyaWFsaXphdGlvbi5nZXRJbnN0YW5jZSgpXG5cbi8qKlxuICogVHlwZSByZXByZXNlbnRpbmcgYSBbW1NpZ25hdHVyZV1dIGluZGV4IHVzZWQgaW4gW1tJbnB1dF1dXG4gKi9cbmV4cG9ydCBjbGFzcyBTaWdJZHggZXh0ZW5kcyBOQnl0ZXMge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJTaWdJZHhcIlxuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHVuZGVmaW5lZFxuXG4gIHNlcmlhbGl6ZShlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIik6IG9iamVjdCB7XG4gICAgbGV0IGZpZWxkczogb2JqZWN0ID0gc3VwZXIuc2VyaWFsaXplKGVuY29kaW5nKVxuICAgIHJldHVybiB7XG4gICAgICAuLi5maWVsZHMsXG4gICAgICBcInNvdXJjZVwiOiBzZXJpYWxpemF0aW9uLmVuY29kZXIodGhpcy5zb3VyY2UsIGVuY29kaW5nLCBcIkJ1ZmZlclwiLCBcImhleFwiKVxuICAgIH1cbiAgfVxuICBkZXNlcmlhbGl6ZShmaWVsZHM6IG9iamVjdCwgZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKVxuICAgIHRoaXMuc291cmNlID0gc2VyaWFsaXphdGlvbi5kZWNvZGVyKGZpZWxkc1tcInNvdXJjZVwiXSwgZW5jb2RpbmcsIFwiaGV4XCIsIFwiQnVmZmVyXCIpXG4gIH1cblxuICBwcm90ZWN0ZWQgc291cmNlOiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoMjApXG4gIHByb3RlY3RlZCBieXRlcyA9IEJ1ZmZlci5hbGxvYyg0KVxuICBwcm90ZWN0ZWQgYnNpemUgPSA0XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHNvdXJjZSBhZGRyZXNzIGZvciB0aGUgc2lnbmF0dXJlXG4gICAqL1xuICBzZXRTb3VyY2UgPSAoYWRkcmVzczpCdWZmZXIpID0+IHtcbiAgICB0aGlzLnNvdXJjZSA9IGFkZHJlc3NcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIHNvdXJjZSBhZGRyZXNzIGZvciB0aGUgc2lnbmF0dXJlXG4gICAqL1xuICBnZXRTb3VyY2UgPSAoKTogQnVmZmVyID0+IHRoaXMuc291cmNlXG5cbiAgY2xvbmUoKTogdGhpcyB7XG4gICAgbGV0IG5ld2Jhc2U6IFNpZ0lkeCA9IG5ldyBTaWdJZHgoKVxuICAgIG5ld2Jhc2UuZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpXG4gICAgcmV0dXJuIG5ld2Jhc2UgYXMgdGhpc1xuICB9XG5cbiAgY3JlYXRlKC4uLmFyZ3M6YW55W10pOnRoaXMge1xuICAgIHJldHVybiBuZXcgU2lnSWR4KCkgYXMgdGhpc1xuICB9XG5cblxuICAvKipcbiAgICogVHlwZSByZXByZXNlbnRpbmcgYSBbW1NpZ25hdHVyZV1dIGluZGV4IHVzZWQgaW4gW1tJbnB1dF1dXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpXG4gIH1cbn1cblxuLyoqXG4gKiBTaWduYXR1cmUgZm9yIGEgW1tUeF1dXG4gKi9cbmV4cG9ydCBjbGFzcyBTaWduYXR1cmUgZXh0ZW5kcyBOQnl0ZXMge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJTaWduYXR1cmVcIlxuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHVuZGVmaW5lZFxuXG4gIC8vc2VyaWFsaXplIGFuZCBkZXNlcmlhbGl6ZSBib3RoIGFyZSBpbmhlcml0ZWRcblxuICBwcm90ZWN0ZWQgYnl0ZXMgPSBCdWZmZXIuYWxsb2MoNjUpXG4gIHByb3RlY3RlZCBic2l6ZSA9IDY1XG5cbiAgY2xvbmUoKTp0aGlzIHtcbiAgICBsZXQgbmV3YmFzZTogU2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZSgpXG4gICAgbmV3YmFzZS5mcm9tQnVmZmVyKHRoaXMudG9CdWZmZXIoKSlcbiAgICByZXR1cm4gbmV3YmFzZSBhcyB0aGlzXG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczogYW55W10pOiB0aGlzIHtcbiAgICByZXR1cm4gbmV3IFNpZ25hdHVyZSgpIGFzIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWduYXR1cmUgZm9yIGEgW1tUeF1dXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpXG4gIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENyZWRlbnRpYWwgZXh0ZW5kcyBTZXJpYWxpemFibGV7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIkNyZWRlbnRpYWxcIlxuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHVuZGVmaW5lZFxuXG4gIHNlcmlhbGl6ZShlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIik6IG9iamVjdCB7XG4gICAgbGV0IGZpZWxkczogb2JqZWN0ID0gc3VwZXIuc2VyaWFsaXplKGVuY29kaW5nKVxuICAgIHJldHVybiB7XG4gICAgICAuLi5maWVsZHMsXG4gICAgICBzaWdBcnJheTogdGhpcy5zaWdBcnJheS5tYXAoKHMpID0+IHMuc2VyaWFsaXplKGVuY29kaW5nKSlcbiAgICB9XG4gIH1cbiAgZGVzZXJpYWxpemUoZmllbGRzOiBvYmplY3QsIGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKSB7XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZmllbGRzLCBlbmNvZGluZylcbiAgICB0aGlzLnNpZ0FycmF5ID0gZmllbGRzW1wic2lnQXJyYXlcIl0ubWFwKChzOm9iamVjdCkgPT4ge1xuICAgICAgbGV0IHNpZzogU2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZSgpXG4gICAgICBzaWcuZGVzZXJpYWxpemUocywgZW5jb2RpbmcpXG4gICAgICByZXR1cm4gc2lnXG4gICAgfSlcbiAgfVxuXG4gIHByb3RlY3RlZCBzaWdBcnJheTogU2lnbmF0dXJlW10gPSBbXVxuXG4gIGFic3RyYWN0IGdldENyZWRlbnRpYWxJRCgpOiBudW1iZXJcblxuICAvKipcbiAgKiBTZXQgdGhlIGNvZGVjSURcbiAgKlxuICAqIEBwYXJhbSBjb2RlY0lEIFRoZSBjb2RlY0lEIHRvIHNldFxuICAqL1xuICBzZXRDb2RlY0lEKGNvZGVjSUQ6IG51bWJlcik6IHZvaWQgeyB9XG5cbiAgLyoqXG4gICAgICogQWRkcyBhIHNpZ25hdHVyZSB0byB0aGUgY3JlZGVudGlhbHMgYW5kIHJldHVybnMgdGhlIGluZGV4IG9mZiB0aGUgYWRkZWQgc2lnbmF0dXJlLlxuICAgICAqL1xuICBhZGRTaWduYXR1cmUgPSAoc2lnOlNpZ25hdHVyZSk6bnVtYmVyID0+IHtcbiAgICB0aGlzLnNpZ0FycmF5LnB1c2goc2lnKVxuICAgIHJldHVybiB0aGlzLnNpZ0FycmF5Lmxlbmd0aCAtIDFcbiAgfVxuXG4gIGZyb21CdWZmZXIoYnl0ZXM6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICBjb25zdCBzaWdsZW46IG51bWJlciA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDQpLnJlYWRVSW50MzJCRSgwKVxuICAgIG9mZnNldCArPSA0XG4gICAgdGhpcy5zaWdBcnJheSA9IFtdXG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IHNpZ2xlbjsgaSsrKSB7XG4gICAgICBjb25zdCBzaWc6IFNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoKVxuICAgICAgb2Zmc2V0ID0gc2lnLmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldClcbiAgICAgIHRoaXMuc2lnQXJyYXkucHVzaChzaWcpXG4gICAgfVxuICAgIHJldHVybiBvZmZzZXRcbiAgfVxuXG4gIHRvQnVmZmVyKCk6IEJ1ZmZlciB7XG4gICAgY29uc3Qgc2lnbGVuOiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoNClcbiAgICBzaWdsZW4ud3JpdGVJbnQzMkJFKHRoaXMuc2lnQXJyYXkubGVuZ3RoLCAwKVxuICAgIGNvbnN0IGJhcnI6IEJ1ZmZlcltdID0gW3NpZ2xlbl1cbiAgICBsZXQgYnNpemU6IG51bWJlciA9IHNpZ2xlbi5sZW5ndGhcbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5zaWdBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc2lnYnVmZjogQnVmZmVyID0gdGhpcy5zaWdBcnJheVtpXS50b0J1ZmZlcigpXG4gICAgICBic2l6ZSArPSBzaWdidWZmLmxlbmd0aFxuICAgICAgYmFyci5wdXNoKHNpZ2J1ZmYpXG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGJhcnIsIGJzaXplKVxuICB9XG5cbiAgYWJzdHJhY3QgY2xvbmUoKTogdGhpc1xuICBhYnN0cmFjdCBjcmVhdGUoLi4uYXJnczogYW55W10pOiB0aGlzXG4gIGFic3RyYWN0IHNlbGVjdChpZDogbnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6IENyZWRlbnRpYWxcbiAgY29uc3RydWN0b3Ioc2lnYXJyYXk6IFNpZ25hdHVyZVtdID0gdW5kZWZpbmVkKSB7XG4gICAgc3VwZXIoKVxuICAgIGlmICh0eXBlb2Ygc2lnYXJyYXkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICB0aGlzLnNpZ0FycmF5ID0gc2lnYXJyYXlcbiAgICB9XG4gIH1cbn0iXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Credentials\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPCredential = exports.SelectCredentialClass = void 0;\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nexports.SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.PlatformVMConstants.SECPCREDENTIAL) {\n        return new SECPCredential(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.CredIdError(\"Error - SelectCredentialClass: unknown credid\");\n};\nclass SECPCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPCredential\";\n        this._typeID = constants_1.PlatformVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new SECPCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SECPCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = exports.SelectCredentialClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.SECPCredential = SECPCredential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2NyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7OztBQUVILDJDQUFrRDtBQUNsRCwwREFBc0Q7QUFDdEQsK0NBQWlEO0FBRWpEOzs7Ozs7R0FNRztBQUNVLFFBQUEscUJBQXFCLEdBQUcsQ0FBQyxNQUFjLEVBQUUsR0FBRyxJQUFXLEVBQWMsRUFBRTtJQUNsRixJQUFJLE1BQU0sS0FBSywrQkFBbUIsQ0FBQyxjQUFjLEVBQUU7UUFDakQsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0tBQ3BDO0lBQ0QsMEJBQTBCO0lBQzFCLE1BQU0sSUFBSSxvQkFBVyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDekUsQ0FBQyxDQUFDO0FBRUYsTUFBYSxjQUFlLFNBQVEsd0JBQVU7SUFBOUM7O1FBQ1ksY0FBUyxHQUFHLGdCQUFnQixDQUFDO1FBQzdCLFlBQU8sR0FBRywrQkFBbUIsQ0FBQyxjQUFjLENBQUM7SUF1QnpELENBQUM7SUFyQkMsOENBQThDO0lBRTlDLGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUdELEtBQUs7UUFDSCxJQUFJLE9BQU8sR0FBa0IsSUFBSSxjQUFjLEVBQUUsQ0FBQztRQUNsRCxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sT0FBZSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxJQUFVO1FBQ2xCLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQVMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQVMsRUFBRSxHQUFHLElBQVU7UUFDN0IsSUFBSSxTQUFTLEdBQWMsNkJBQXFCLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDOUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGO0FBekJELHdDQXlCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1QbGF0Zm9ybVZNLUNyZWRlbnRpYWxzXG4gKi9cblxuaW1wb3J0IHsgUGxhdGZvcm1WTUNvbnN0YW50cyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IENyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi9jb21tb24vY3JlZGVudGlhbHMnO1xuaW1wb3J0IHsgQ3JlZElkRXJyb3IgfSBmcm9tICcuLi8uLi91dGlscy9lcnJvcnMnO1xuXG4vKipcbiAqIFRha2VzIGEgYnVmZmVyIHJlcHJlc2VudGluZyB0aGUgY3JlZGVudGlhbCBhbmQgcmV0dXJucyB0aGUgcHJvcGVyIFtbQ3JlZGVudGlhbF1dIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBjcmVkaWQgQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBjcmVkZW50aWFsIElEIHBhcnNlZCBwcmlvciB0byB0aGUgYnl0ZXMgcGFzc2VkIGluXG4gKlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYW4gW1tDcmVkZW50aWFsXV0tZXh0ZW5kZWQgY2xhc3MuXG4gKi9cbmV4cG9ydCBjb25zdCBTZWxlY3RDcmVkZW50aWFsQ2xhc3MgPSAoY3JlZGlkOiBudW1iZXIsIC4uLmFyZ3M6IGFueVtdKTogQ3JlZGVudGlhbCA9PiB7XG4gIGlmIChjcmVkaWQgPT09IFBsYXRmb3JtVk1Db25zdGFudHMuU0VDUENSRURFTlRJQUwpIHtcbiAgICByZXR1cm4gbmV3IFNFQ1BDcmVkZW50aWFsKC4uLmFyZ3MpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHRocm93IG5ldyBDcmVkSWRFcnJvcihcIkVycm9yIC0gU2VsZWN0Q3JlZGVudGlhbENsYXNzOiB1bmtub3duIGNyZWRpZFwiKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBTRUNQQ3JlZGVudGlhbCBleHRlbmRzIENyZWRlbnRpYWwge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJTRUNQQ3JlZGVudGlhbFwiO1xuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IFBsYXRmb3JtVk1Db25zdGFudHMuU0VDUENSRURFTlRJQUw7XG5cbiAgLy9zZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIGJvdGggYXJlIGluaGVyaXRlZFxuXG4gIGdldENyZWRlbnRpYWxJRCgpOm51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJRDtcbiAgfVxuXG5cbiAgY2xvbmUoKTp0aGlzIHtcbiAgICBsZXQgbmV3YmFzZTpTRUNQQ3JlZGVudGlhbCA9IG5ldyBTRUNQQ3JlZGVudGlhbCgpO1xuICAgIG5ld2Jhc2UuZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpO1xuICAgIHJldHVybiBuZXdiYXNlIGFzIHRoaXM7XG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczphbnlbXSk6dGhpcyB7XG4gICAgcmV0dXJuIG5ldyBTRUNQQ3JlZGVudGlhbCguLi5hcmdzKSBhcyB0aGlzO1xuICB9XG5cbiAgc2VsZWN0KGlkOm51bWJlciwgLi4uYXJnczphbnlbXSk6Q3JlZGVudGlhbCB7XG4gICAgbGV0IG5ld2Jhc2V0eDpDcmVkZW50aWFsID0gU2VsZWN0Q3JlZGVudGlhbENsYXNzKGlkLCAuLi5hcmdzKTtcbiAgICByZXR1cm4gbmV3YmFzZXR4O1xuICB9XG59XG5cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-BaseTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst tx_2 = require(\"../platformvm/tx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass BaseTx extends tx_1.StandardBaseTx {\n    /**\n     * Class representing a BaseTx which is the foundation for all transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"BaseTx\";\n        this._typeID = constants_1.PlatformVMConstants.CREATESUBNETTX;\n        /**\n         * Returns the id of the [[BaseTx]]\n         */\n        this.getTxType = () => {\n            return constants_1.PlatformVMConstants.BASETX;\n        };\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.outs = fields[\"outs\"].map((o) => {\n            let newOut = new outputs_1.TransferableOutput();\n            newOut.deserialize(o, encoding);\n            return newOut;\n        });\n        this.ins = fields[\"ins\"].map((i) => {\n            let newIn = new inputs_1.TransferableInput();\n            newIn.deserialize(i, encoding);\n            return newIn;\n        });\n        this.numouts = buffer_1.Buffer.alloc(4);\n        this.numouts.writeUInt32BE(this.outs.length, 0);\n        this.numins = buffer_1.Buffer.alloc(4);\n        this.numins.writeUInt32BE(this.ins.length, 0);\n    }\n    getOuts() {\n        return this.outs;\n    }\n    getIns() {\n        return this.ins;\n    }\n    getTotalOuts() {\n        return this.getOuts();\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = this.numouts.readUInt32BE(0);\n        this.outs = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.outs.push(xferout);\n        }\n        this.numins = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const incount = this.numins.readUInt32BE(0);\n        this.ins = [];\n        for (let i = 0; i < incount; i++) {\n            const xferin = new inputs_1.TransferableInput();\n            offset = xferin.fromBuffer(bytes, offset);\n            this.ins.push(xferin);\n        }\n        let memolen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.memo = bintools.copyFrom(bytes, offset, offset + memolen);\n        offset += memolen;\n        return offset;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = [];\n        for (let i = 0; i < this.ins.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.ins[i].getInput().getCredentialID());\n            const sigidxs = this.ins[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new BaseTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new BaseTx(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = tx_2.SelectTxClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.BaseTx = BaseTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-RESTAPI\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RESTAPI = void 0;\nconst apibase_1 = require(\"./apibase\");\nclass RESTAPI extends apibase_1.APIBase {\n    /**\n    *\n    * @param core Reference to the Avalanche instance using this endpoint\n    * @param baseurl Path of the APIs baseurl - ex: \"/ext/bc/avm\"\n    * @param contentType Optional Determines the type of the entity attached to the\n    * incoming request\n    * @param acceptType Optional Determines the type of representation which is\n    * desired on the client side\n    */\n    constructor(core, baseurl, contentType = \"application/json;charset=UTF-8\", acceptType = undefined) {\n        super(core, baseurl);\n        this.prepHeaders = (contentType, acceptType) => {\n            const headers = {};\n            if (contentType !== undefined) {\n                headers[\"Content-Type\"] = contentType;\n            }\n            else {\n                headers[\"Content-Type\"] = this.contentType;\n            }\n            if (acceptType !== undefined) {\n                headers[\"Accept\"] = acceptType;\n            }\n            else if (this.acceptType !== undefined) {\n                headers[\"Accept\"] = this.acceptType;\n            }\n            return headers;\n        };\n        this.axConf = () => {\n            return {\n                baseURL: `${this.core.getProtocol()}://${this.core.getHost()}:${this.core.getPort()}`,\n                responseType: \"json\",\n            };\n        };\n        this.get = (baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.get(ep, {}, headers, this.axConf());\n            return resp;\n        });\n        this.post = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.post(ep, {}, JSON.stringify(rpc), headers, this.axConf());\n            return resp;\n        });\n        this.put = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.put(ep, {}, JSON.stringify(rpc), headers, this.axConf());\n            return resp;\n        });\n        this.delete = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.delete(ep, {}, headers, this.axConf());\n            return resp;\n        });\n        this.patch = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseurl || this.baseurl;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.patch(ep, {}, JSON.stringify(rpc), headers, this.axConf());\n            return resp;\n        });\n        /**\n        * Returns the type of the entity attached to the incoming request\n        */\n        this.getContentType = () => this.contentType;\n        /**\n        * Returns what type of representation is desired at the client side\n        */\n        this.getAcceptType = () => this.acceptType;\n        this.contentType = contentType;\n        this.acceptType = acceptType;\n    }\n}\nexports.RESTAPI = RESTAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdGFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vcmVzdGFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7Ozs7Ozs7QUFJSCx1Q0FBd0Q7QUFFeEQsTUFBYSxPQUFRLFNBQVEsaUJBQU87SUErR2xDOzs7Ozs7OztNQVFFO0lBQ0YsWUFBWSxJQUFtQixFQUM3QixPQUFlLEVBQ2YsY0FBc0IsZ0NBQWdDLEVBQ3RELGFBQXFCLFNBQVM7UUFDOUIsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtRQXhIWixnQkFBVyxHQUFHLENBQUMsV0FBb0IsRUFBRSxVQUFtQixFQUFVLEVBQUU7WUFDNUUsTUFBTSxPQUFPLEdBQVcsRUFBRSxDQUFBO1lBQzFCLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRTtnQkFDN0IsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLFdBQVcsQ0FBQTthQUN0QztpQkFBTTtnQkFDTCxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQTthQUMzQztZQUVELElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtnQkFDNUIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLFVBQVUsQ0FBQTthQUMvQjtpQkFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO2dCQUN4QyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQTthQUNwQztZQUNELE9BQU8sT0FBTyxDQUFBO1FBQ2hCLENBQUMsQ0FBQTtRQUVTLFdBQU0sR0FBRyxHQUF1QixFQUFFO1lBQzFDLE9BQVE7Z0JBQ04sT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7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RCwwQkFnSUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBDb21tb24tUkVTVEFQSVxuICovXG5cbmltcG9ydCB7IEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gXCJheGlvc1wiXG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tIFwiLi4vYXZhbGFuY2hlXCJcbmltcG9ydCB7IEFQSUJhc2UsIFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tIFwiLi9hcGliYXNlXCJcblxuZXhwb3J0IGNsYXNzIFJFU1RBUEkgZXh0ZW5kcyBBUElCYXNlIHtcbiAgcHJvdGVjdGVkIGNvbnRlbnRUeXBlOiBzdHJpbmdcbiAgcHJvdGVjdGVkIGFjY2VwdFR5cGU6IHN0cmluZ1xuXG4gIHByb3RlY3RlZCBwcmVwSGVhZGVycyA9IChjb250ZW50VHlwZT86IHN0cmluZywgYWNjZXB0VHlwZT86IHN0cmluZyk6IG9iamVjdCA9PiB7XG4gICAgY29uc3QgaGVhZGVyczogb2JqZWN0ID0ge31cbiAgICBpZiAoY29udGVudFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSA9IGNvbnRlbnRUeXBlXG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0gPSB0aGlzLmNvbnRlbnRUeXBlXG4gICAgfVxuXG4gICAgaWYgKGFjY2VwdFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGVhZGVyc1tcIkFjY2VwdFwiXSA9IGFjY2VwdFR5cGVcbiAgICB9IGVsc2UgaWYgKHRoaXMuYWNjZXB0VHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoZWFkZXJzW1wiQWNjZXB0XCJdID0gdGhpcy5hY2NlcHRUeXBlXG4gICAgfVxuICAgIHJldHVybiBoZWFkZXJzXG4gIH1cblxuICBwcm90ZWN0ZWQgYXhDb25mID0gKCk6IEF4aW9zUmVxdWVzdENvbmZpZyA9PiB7XG4gICAgcmV0dXJuICB7XG4gICAgICBiYXNlVVJMOiBgJHt0aGlzLmNvcmUuZ2V0UHJvdG9jb2woKX06Ly8ke3RoaXMuY29yZS5nZXRIb3N0KCl9OiR7dGhpcy5jb3JlLmdldFBvcnQoKX1gLFxuICAgICAgcmVzcG9uc2VUeXBlOiBcImpzb25cIixcbiAgICB9XG4gIH1cblxuICBnZXQgPSBhc3luYyAoYmFzZXVybD86IHN0cmluZywgY29udGVudFR5cGU/OiBzdHJpbmcsIGFjY2VwdFR5cGU/OiBzdHJpbmcpOiBQcm9taXNlPFJlcXVlc3RSZXNwb25zZURhdGE+ID0+IHtcbiAgICBjb25zdCBlcDogc3RyaW5nID0gYmFzZXVybCB8fCB0aGlzLmJhc2V1cmxcbiAgICBjb25zdCBoZWFkZXJzOiBvYmplY3QgPSB0aGlzLnByZXBIZWFkZXJzKGNvbnRlbnRUeXBlLCBhY2NlcHRUeXBlKVxuICAgIGNvbnN0IHJlc3A6IFJlcXVlc3RSZXNwb25zZURhdGEgPSBhd2FpdCB0aGlzLmNvcmUuZ2V0KGVwLCB7fSwgaGVhZGVycywgdGhpcy5heENvbmYoKSlcbiAgICByZXR1cm4gcmVzcFxuICB9XG5cbiAgcG9zdCA9IGFzeW5jIChtZXRob2Q6IHN0cmluZywgcGFyYW1zPzogb2JqZWN0W10gfCBvYmplY3QsIGJhc2V1cmw/OiBzdHJpbmcsXG4gICAgY29udGVudFR5cGU/OiBzdHJpbmcsIGFjY2VwdFR5cGU/OiBzdHJpbmcpOiBQcm9taXNlPFJlcXVlc3RSZXNwb25zZURhdGE+ID0+IHtcbiAgICBjb25zdCBlcDogc3RyaW5nID0gYmFzZXVybCB8fCB0aGlzLmJhc2V1cmxcbiAgICBjb25zdCBycGM6IGFueSA9IHt9XG4gICAgcnBjLm1ldGhvZCA9IG1ldGhvZFxuXG4gICAgLy8gU2V0IHBhcmFtZXRlcnMgaWYgZXhpc3RzXG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgcnBjLnBhcmFtcyA9IHBhcmFtc1xuICAgIH1cblxuICAgIGNvbnN0IGhlYWRlcnM6IG9iamVjdCA9IHRoaXMucHJlcEhlYWRlcnMoY29udGVudFR5cGUsIGFjY2VwdFR5cGUpXG4gICAgY29uc3QgcmVzcDogUmVxdWVzdFJlc3BvbnNlRGF0YSA9IGF3YWl0IHRoaXMuY29yZS5wb3N0KGVwLCB7fSwgSlNPTi5zdHJpbmdpZnkocnBjKSwgaGVhZGVycywgdGhpcy5heENvbmYoKSlcbiAgICByZXR1cm4gcmVzcFxuICB9XG5cbiAgcHV0ID0gYXN5bmMgKG1ldGhvZDogc3RyaW5nLFxuICAgIHBhcmFtcz86IG9iamVjdFtdIHwgb2JqZWN0LFxuICAgIGJhc2V1cmw/OiBzdHJpbmcsXG4gICAgY29udGVudFR5cGU/OnN0cmluZyxcbiAgICBhY2NlcHRUeXBlPzogc3RyaW5nKTogUHJvbWlzZTxSZXF1ZXN0UmVzcG9uc2VEYXRhPiA9PiB7XG4gICAgY29uc3QgZXA6IHN0cmluZyA9IGJhc2V1cmwgfHwgdGhpcy5iYXNldXJsXG4gICAgY29uc3QgcnBjOiBhbnkgPSB7fVxuICAgIHJwYy5tZXRob2QgPSBtZXRob2RcblxuICAgIC8vIFNldCBwYXJhbWV0ZXJzIGlmIGV4aXN0c1xuICAgIGlmIChwYXJhbXMpIHtcbiAgICAgIHJwYy5wYXJhbXMgPSBwYXJhbXNcbiAgICB9XG5cbiAgICBjb25zdCBoZWFkZXJzOiBvYmplY3QgPSB0aGlzLnByZXBIZWFkZXJzKGNvbnRlbnRUeXBlLCBhY2NlcHRUeXBlKVxuICAgIGNvbnN0IHJlc3A6IFJlcXVlc3RSZXNwb25zZURhdGEgPSBhd2FpdCB0aGlzLmNvcmUucHV0KGVwLCB7fSwgSlNPTi5zdHJpbmdpZnkocnBjKSwgaGVhZGVycywgdGhpcy5heENvbmYoKSlcbiAgICByZXR1cm4gcmVzcFxuICB9XG5cbiAgZGVsZXRlID0gYXN5bmMgKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM/OiBvYmplY3RbXSB8IG9iamVjdCwgYmFzZXVybD86IHN0cmluZyxcbiAgICBjb250ZW50VHlwZT86IHN0cmluZywgYWNjZXB0VHlwZT86IHN0cmluZyk6IFByb21pc2U8UmVxdWVzdFJlc3BvbnNlRGF0YT4gPT4ge1xuICAgIGNvbnN0IGVwOiBzdHJpbmcgPSBiYXNldXJsIHx8IHRoaXMuYmFzZXVybFxuICAgIGNvbnN0IHJwYzogYW55ID0ge31cbiAgICBycGMubWV0aG9kID0gbWV0aG9kXG5cbiAgICAvLyBTZXQgcGFyYW1ldGVycyBpZiBleGlzdHNcbiAgICBpZiAocGFyYW1zKSB7XG4gICAgICBycGMucGFyYW1zID0gcGFyYW1zXG4gICAgfVxuXG4gICAgY29uc3QgaGVhZGVyczogb2JqZWN0ID0gdGhpcy5wcmVwSGVhZGVycyhjb250ZW50VHlwZSwgYWNjZXB0VHlwZSlcbiAgICBjb25zdCByZXNwOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jb3JlLmRlbGV0ZShlcCwge30sIGhlYWRlcnMsIHRoaXMuYXhDb25mKCkpXG4gICAgcmV0dXJuIHJlc3BcbiAgfVxuXG4gIHBhdGNoID0gYXN5bmMgKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM/OiBvYmplY3RbXSB8IG9iamVjdCwgYmFzZXVybD86IHN0cmluZyxcbiAgICBjb250ZW50VHlwZT86IHN0cmluZywgYWNjZXB0VHlwZT86IHN0cmluZyk6IFByb21pc2U8UmVxdWVzdFJlc3BvbnNlRGF0YT4gPT4ge1xuICAgIGNvbnN0IGVwOiBzdHJpbmcgPSBiYXNldXJsIHx8IHRoaXMuYmFzZXVybFxuICAgIGNvbnN0IHJwYzogYW55ID0ge31cbiAgICBycGMubWV0aG9kID0gbWV0aG9kXG5cbiAgICAvLyBTZXQgcGFyYW1ldGVycyBpZiBleGlzdHNcbiAgICBpZiAocGFyYW1zKSB7XG4gICAgICBycGMucGFyYW1zID0gcGFyYW1zXG4gICAgfVxuXG4gICAgY29uc3QgaGVhZGVyczogb2JqZWN0ID0gdGhpcy5wcmVwSGVhZGVycyhjb250ZW50VHlwZSwgYWNjZXB0VHlwZSlcbiAgICBjb25zdCByZXNwOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jb3JlLnBhdGNoKGVwLCB7fSwgSlNPTi5zdHJpbmdpZnkocnBjKSwgaGVhZGVycywgdGhpcy5heENvbmYoKSlcbiAgICByZXR1cm4gcmVzcFxuICB9XG5cbiAgLyoqXG4gICogUmV0dXJucyB0aGUgdHlwZSBvZiB0aGUgZW50aXR5IGF0dGFjaGVkIHRvIHRoZSBpbmNvbWluZyByZXF1ZXN0XG4gICovXG4gIGdldENvbnRlbnRUeXBlID0gKCk6IHN0cmluZyA9PiB0aGlzLmNvbnRlbnRUeXBlXG5cbiAgLyoqXG4gICogUmV0dXJucyB3aGF0IHR5cGUgb2YgcmVwcmVzZW50YXRpb24gaXMgZGVzaXJlZCBhdCB0aGUgY2xpZW50IHNpZGVcbiAgKi9cbiAgZ2V0QWNjZXB0VHlwZSA9ICgpOiBzdHJpbmcgPT4gdGhpcy5hY2NlcHRUeXBlXG5cbiAgLyoqXG4gICpcbiAgKiBAcGFyYW0gY29yZSBSZWZlcmVuY2UgdG8gdGhlIEF2YWxhbmNoZSBpbnN0YW5jZSB1c2luZyB0aGlzIGVuZHBvaW50XG4gICogQHBhcmFtIGJhc2V1cmwgUGF0aCBvZiB0aGUgQVBJcyBiYXNldXJsIC0gZXg6IFwiL2V4dC9iYy9hdm1cIlxuICAqIEBwYXJhbSBjb250ZW50VHlwZSBPcHRpb25hbCBEZXRlcm1pbmVzIHRoZSB0eXBlIG9mIHRoZSBlbnRpdHkgYXR0YWNoZWQgdG8gdGhlXG4gICogaW5jb21pbmcgcmVxdWVzdFxuICAqIEBwYXJhbSBhY2NlcHRUeXBlIE9wdGlvbmFsIERldGVybWluZXMgdGhlIHR5cGUgb2YgcmVwcmVzZW50YXRpb24gd2hpY2ggaXNcbiAgKiBkZXNpcmVkIG9uIHRoZSBjbGllbnQgc2lkZVxuICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBBdmFsYW5jaGVDb3JlLFxuICAgIGJhc2V1cmw6IHN0cmluZyxcbiAgICBjb250ZW50VHlwZTogc3RyaW5nID0gXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIixcbiAgICBhY2NlcHRUeXBlOiBzdHJpbmcgPSB1bmRlZmluZWQpIHtcbiAgICBzdXBlcihjb3JlLCBiYXNldXJsKVxuICAgIHRoaXMuY29udGVudFR5cGUgPSBjb250ZW50VHlwZVxuICAgIHRoaXMuYWNjZXB0VHlwZSA9IGFjY2VwdFR5cGVcbiAgfVxufVxuXG5cblxuXG5cblxuIl19","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IndexAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node's IndexAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass IndexAPI extends jrpcapi_1.JRPCAPI {\n    constructor(core, baseurl = \"/ext/index/X/tx\") {\n        super(core, baseurl);\n        /**\n         * Get last accepted tx, vtx or block\n         *\n         * @param encoding\n         * @param baseurl\n         *\n         * @returns Returns a Promise<GetLastAcceptedResponse>.\n         */\n        this.getLastAccepted = (encoding = \"cb58\", baseurl = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseurl);\n            const params = {\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getLastAccepted\", params);\n                return response['data']['result'];\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Get container by index\n         *\n         * @param index\n         * @param encoding\n         * @param baseurl\n         *\n         * @returns Returns a Promise<GetContainerByIndexResponse>.\n         */\n        this.getContainerByIndex = (index = \"0\", encoding = \"cb58\", baseurl = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseurl);\n            const params = {\n                index,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getContainerByIndex\", params);\n                return response['data']['result'];\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Get contrainer by ID\n         *\n         * @param containerID\n         * @param encoding\n         * @param baseurl\n         *\n         * @returns Returns a Promise<GetContainerByIDResponse>.\n         */\n        this.getContainerByID = (containerID = \"0\", encoding = \"cb58\", baseurl = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseurl);\n            const params = {\n                containerID,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getContainerByID\", params);\n                return response['data']['result'];\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Get container range\n         *\n         * @param startIndex\n         * @param numToFetch\n         * @param encoding\n         * @param baseurl\n         *\n         * @returns Returns a Promise<GetContainerRangeResponse>.\n         */\n        this.getContainerRange = (startIndex = 0, numToFetch = 100, encoding = \"cb58\", baseurl = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseurl);\n            const params = {\n                startIndex,\n                numToFetch,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getContainerRange\", params);\n                return response['data']['result'];\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Get index by containerID\n         *\n         * @param containerID\n         * @param encoding\n         * @param baseurl\n         *\n         * @returns Returns a Promise<GetIndexResponse>.\n         */\n        this.getIndex = (containerID = \"\", encoding = \"cb58\", baseurl = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseurl);\n            const params = {\n                containerID,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getIndex\", params);\n                return response['data']['result']['index'];\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Check if container is accepted\n         *\n         * @param containerID\n         * @param encoding\n         * @param baseurl\n         *\n         * @returns Returns a Promise<GetIsAcceptedResponse>.\n         */\n        this.isAccepted = (containerID = \"\", encoding = \"cb58\", baseurl = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseurl);\n            const params = {\n                containerID,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.isAccepted\", params);\n                return response['data']['result'];\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n    }\n}\nexports.IndexAPI = IndexAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeystoreAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node API that is using the node's KeystoreAPI.\n *\n * **WARNING**: The KeystoreAPI is to be used by the node-owner as the data is stored locally on the node. Do not trust the root user. If you are not the node-owner, do not use this as your wallet.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass KeystoreAPI extends jrpcapi_1.JRPCAPI {\n    /**\n       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n       *\n       * @param core A reference to the Avalanche class\n       * @param baseurl Defaults to the string \"/ext/keystore\" as the path to blockchain\"s baseurl\n       */\n    constructor(core, baseurl = \"/ext/keystore\") {\n        super(core, baseurl);\n        /**\n           * Creates a user in the node's database.\n           *\n           * @param username Name of the user to create\n           * @param password Password for the user\n           *\n           * @returns Promise for a boolean with true on success\n           */\n        this.createUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"keystore.createUser\", params);\n            return response.data.result.success;\n        });\n        /**\n           * Exports a user. The user can be imported to another node with keystore.importUser .\n           *\n           * @param username The name of the user to export\n           * @param password The password of the user to export\n           *\n           * @returns Promise with a string importable using importUser\n           */\n        this.exportUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"keystore.exportUser\", params);\n            return response.data.result.user;\n        });\n        /**\n           * Imports a user file into the node's user database and assigns it to a username.\n           *\n           * @param username The name the user file should be imported into\n           * @param user cb58 serialized string represetning a user\"s data\n           * @param password The user\"s password\n           *\n           * @returns A promise with a true-value on success.\n           */\n        this.importUser = (username, user, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                user,\n                password\n            };\n            const response = yield this.callMethod(\"keystore.importUser\", params);\n            return response.data.result.success;\n        });\n        /**\n           * Lists the names of all users on the node.\n           *\n           * @returns Promise of an array with all user names.\n           */\n        this.listUsers = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"keystore.listUsers\");\n            return response.data.result.users;\n        });\n        /**\n           * Deletes a user in the node's database.\n           *\n           * @param username Name of the user to delete\n           * @param password Password for the user\n           *\n           * @returns Promise for a boolean with true on success\n           */\n        this.deleteUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"keystore.deleteUser\", params);\n            return response.data.result.success;\n        });\n    }\n}\nexports.KeystoreAPI = KeystoreAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMva2V5c3RvcmUvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUtBLGtEQUE4QztBQUc5Qzs7Ozs7Ozs7R0FRRztBQUNILE1BQWEsV0FBWSxTQUFRLGlCQUFPO0lBaUZ0Qzs7Ozs7U0FLSztJQUNMLFlBQVksSUFBbUIsRUFBRSxVQUFrQixlQUFlO1FBQUksS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtRQXRGMUY7Ozs7Ozs7YUFPSztRQUNMLGVBQVUsR0FBRyxDQUFPLFFBQWdCLEVBQUUsUUFBZ0IsRUFBb0IsRUFBRTtZQUMxRSxNQUFNLE1BQU0sR0FBUTtnQkFDbEIsUUFBUTtnQkFDUixRQUFRO2FBQ1QsQ0FBQTtZQUNELE1BQU0sUUFBUSxHQUF3QixNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDLENBQUE7WUFDMUYsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUE7UUFDckMsQ0FBQyxDQUFBLENBQUE7UUFFRDs7Ozs7OzthQU9LO1FBQ0wsZUFBVSxHQUFHLENBQU8sUUFBZ0IsRUFBRSxRQUFnQixFQUFtQixFQUFFO1lBQ3pFLE1BQU0sTUFBTSxHQUFRO2dCQUNsQixRQUFRO2dCQUNSLFFBQVE7YUFDVCxDQUFBO1lBQ0QsTUFBTSxRQUFRLEdBQXdCLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUMxRixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQTtRQUNsQyxDQUFDLENBQUEsQ0FBQTtRQUVEOzs7Ozs7OzthQVFLO1FBQ0wsZUFBVSxHQUFHLENBQU8sUUFBZ0IsRUFBRSxJQUFZLEVBQUUsUUFBZ0IsRUFBb0IsRUFBRTtZQUN4RixNQUFNLE1BQU0sR0FBUTtnQkFDbEIsUUFBUTtnQkFDUixJQUFJO2dCQUNKLFFBQVE7YUFDVCxDQUFBO1lBQ0QsTUFBTSxRQUFRLEdBQXdCLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUMxRixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQTtRQUNyQyxDQUFDLENBQUEsQ0FBQTtRQUVEOzs7O2FBSUs7UUFDTCxjQUFTLEdBQUcsR0FBNEIsRUFBRTtZQUN4QyxNQUFNLFFBQVEsR0FBd0IsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUE7WUFDakYsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUE7UUFDbkMsQ0FBQyxDQUFBLENBQUE7UUFFRDs7Ozs7OzthQU9LO1FBQ0wsZUFBVSxHQUFHLENBQU8sUUFBZ0IsRUFBRSxRQUFnQixFQUFvQixFQUFFO1lBQzFFLE1BQU0sTUFBTSxHQUFRO2dCQUNsQixRQUFRO2dCQUNSLFFBQVE7YUFDVCxDQUFBO1lBQ0QsTUFBTSxRQUFRLEdBQXdCLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUMxRixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQTtRQUNyQyxDQUFDLENBQUEsQ0FBQTtJQVEwRixDQUFDO0NBQzdGO0FBeEZELGtDQXdGQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1LZXlzdG9yZVxuICovXG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tIFwiLi4vLi4vYXZhbGFuY2hlXCJcbmltcG9ydCB7IEpSUENBUEkgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2pycGNhcGlcIlxuaW1wb3J0IHsgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gXCIuLi8uLi9jb21tb24vYXBpYmFzZVwiXG5cbi8qKlxuICogQ2xhc3MgZm9yIGludGVyYWN0aW5nIHdpdGggYSBub2RlIEFQSSB0aGF0IGlzIHVzaW5nIHRoZSBub2RlJ3MgS2V5c3RvcmVBUEkuXG4gKlxuICogKipXQVJOSU5HKio6IFRoZSBLZXlzdG9yZUFQSSBpcyB0byBiZSB1c2VkIGJ5IHRoZSBub2RlLW93bmVyIGFzIHRoZSBkYXRhIGlzIHN0b3JlZCBsb2NhbGx5IG9uIHRoZSBub2RlLiBEbyBub3QgdHJ1c3QgdGhlIHJvb3QgdXNlci4gSWYgeW91IGFyZSBub3QgdGhlIG5vZGUtb3duZXIsIGRvIG5vdCB1c2UgdGhpcyBhcyB5b3VyIHdhbGxldC5cbiAqXG4gKiBAY2F0ZWdvcnkgUlBDQVBJc1xuICpcbiAqIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tKUlBDQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuIEluc3RlYWQsIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV0gZnVuY3Rpb24gdG8gcmVnaXN0ZXIgdGhpcyBpbnRlcmZhY2Ugd2l0aCBBdmFsYW5jaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBLZXlzdG9yZUFQSSBleHRlbmRzIEpSUENBUEkge1xuICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdXNlciBpbiB0aGUgbm9kZSdzIGRhdGFiYXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHVzZXJuYW1lIE5hbWUgb2YgdGhlIHVzZXIgdG8gY3JlYXRlXG4gICAgICogQHBhcmFtIHBhc3N3b3JkIFBhc3N3b3JkIGZvciB0aGUgdXNlclxuICAgICAqXG4gICAgICogQHJldHVybnMgUHJvbWlzZSBmb3IgYSBib29sZWFuIHdpdGggdHJ1ZSBvbiBzdWNjZXNzXG4gICAgICovXG4gIGNyZWF0ZVVzZXIgPSBhc3luYyAodXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczogYW55ID0ge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZFxuICAgIH1cbiAgICBjb25zdCByZXNwb25zZTogUmVxdWVzdFJlc3BvbnNlRGF0YSA9IGF3YWl0IHRoaXMuY2FsbE1ldGhvZChcImtleXN0b3JlLmNyZWF0ZVVzZXJcIiwgcGFyYW1zKVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhLnJlc3VsdC5zdWNjZXNzXG4gIH1cblxuICAvKipcbiAgICAgKiBFeHBvcnRzIGEgdXNlci4gVGhlIHVzZXIgY2FuIGJlIGltcG9ydGVkIHRvIGFub3RoZXIgbm9kZSB3aXRoIGtleXN0b3JlLmltcG9ydFVzZXIgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHVzZXJuYW1lIFRoZSBuYW1lIG9mIHRoZSB1c2VyIHRvIGV4cG9ydFxuICAgICAqIEBwYXJhbSBwYXNzd29yZCBUaGUgcGFzc3dvcmQgb2YgdGhlIHVzZXIgdG8gZXhwb3J0XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHdpdGggYSBzdHJpbmcgaW1wb3J0YWJsZSB1c2luZyBpbXBvcnRVc2VyXG4gICAgICovXG4gIGV4cG9ydFVzZXIgPSBhc3luYyAodXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOiBhbnkgPSB7XG4gICAgICB1c2VybmFtZSxcbiAgICAgIHBhc3N3b3JkXG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFwia2V5c3RvcmUuZXhwb3J0VXNlclwiLCBwYXJhbXMpXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVzdWx0LnVzZXJcbiAgfVxuXG4gIC8qKlxuICAgICAqIEltcG9ydHMgYSB1c2VyIGZpbGUgaW50byB0aGUgbm9kZSdzIHVzZXIgZGF0YWJhc2UgYW5kIGFzc2lnbnMgaXQgdG8gYSB1c2VybmFtZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2VybmFtZSBUaGUgbmFtZSB0aGUgdXNlciBmaWxlIHNob3VsZCBiZSBpbXBvcnRlZCBpbnRvXG4gICAgICogQHBhcmFtIHVzZXIgY2I1OCBzZXJpYWxpemVkIHN0cmluZyByZXByZXNldG5pbmcgYSB1c2VyXCJzIGRhdGFcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmQgVGhlIHVzZXJcInMgcGFzc3dvcmRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgcHJvbWlzZSB3aXRoIGEgdHJ1ZS12YWx1ZSBvbiBzdWNjZXNzLlxuICAgICAqL1xuICBpbXBvcnRVc2VyID0gYXN5bmMgKHVzZXJuYW1lOiBzdHJpbmcsIHVzZXI6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczogYW55ID0ge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICB1c2VyLFxuICAgICAgcGFzc3dvcmRcbiAgICB9XG4gICAgY29uc3QgcmVzcG9uc2U6IFJlcXVlc3RSZXNwb25zZURhdGEgPSBhd2FpdCB0aGlzLmNhbGxNZXRob2QoXCJrZXlzdG9yZS5pbXBvcnRVc2VyXCIsIHBhcmFtcylcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzc1xuICB9XG5cbiAgLyoqXG4gICAgICogTGlzdHMgdGhlIG5hbWVzIG9mIGFsbCB1c2VycyBvbiB0aGUgbm9kZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2Ugb2YgYW4gYXJyYXkgd2l0aCBhbGwgdXNlciBuYW1lcy5cbiAgICAgKi9cbiAgbGlzdFVzZXJzID0gYXN5bmMgKCk6IFByb21pc2U8c3RyaW5nW10+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZTogUmVxdWVzdFJlc3BvbnNlRGF0YSA9IGF3YWl0IHRoaXMuY2FsbE1ldGhvZChcImtleXN0b3JlLmxpc3RVc2Vyc1wiKVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhLnJlc3VsdC51c2Vyc1xuICB9XG5cbiAgLyoqXG4gICAgICogRGVsZXRlcyBhIHVzZXIgaW4gdGhlIG5vZGUncyBkYXRhYmFzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2VybmFtZSBOYW1lIG9mIHRoZSB1c2VyIHRvIGRlbGV0ZVxuICAgICAqIEBwYXJhbSBwYXNzd29yZCBQYXNzd29yZCBmb3IgdGhlIHVzZXJcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB3aXRoIHRydWUgb24gc3VjY2Vzc1xuICAgICAqL1xuICBkZWxldGVVc2VyID0gYXN5bmMgKHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6IGFueSA9IHtcbiAgICAgIHVzZXJuYW1lLFxuICAgICAgcGFzc3dvcmRcbiAgICB9XG4gICAgY29uc3QgcmVzcG9uc2U6IFJlcXVlc3RSZXNwb25zZURhdGEgPSBhd2FpdCB0aGlzLmNhbGxNZXRob2QoXCJrZXlzdG9yZS5kZWxldGVVc2VyXCIsIHBhcmFtcylcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzc1xuICB9XG5cbiAgLyoqXG4gICAgICogVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS4gSW5zdGVhZCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb3JlIEEgcmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgY2xhc3NcbiAgICAgKiBAcGFyYW0gYmFzZXVybCBEZWZhdWx0cyB0byB0aGUgc3RyaW5nIFwiL2V4dC9rZXlzdG9yZVwiIGFzIHRoZSBwYXRoIHRvIGJsb2NrY2hhaW5cInMgYmFzZXVybFxuICAgICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBBdmFsYW5jaGVDb3JlLCBiYXNldXJsOiBzdHJpbmcgPSBcIi9leHQva2V5c3RvcmVcIikgeyBzdXBlcihjb3JlLCBiYXNldXJsKSB9XG59Il19"],"sourceRoot":""}