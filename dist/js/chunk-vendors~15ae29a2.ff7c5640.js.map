{"version":3,"sources":["webpack:///./node_modules/avalanche/dist/apis/avm/utxos.js","webpack:///./node_modules/asn1.js/lib/asn1/constants/index.js","webpack:///./node_modules/avalanche/dist/apis/evm/importtx.js","webpack:///./node_modules/avalanche/dist/apis/avm/operationtx.js","webpack:///./node_modules/avalanche/dist/apis/evm/api.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/tx.js","webpack:///./node_modules/avalanche/dist/apis/evm/tx.js","webpack:///./node_modules/avalanche/dist/apis/avm/credentials.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/api.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/der.js","webpack:///./node_modules/asn1.js/lib/asn1/base/index.js","webpack:///./node_modules/avalanche/dist/apis/evm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/avm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/avm/importtx.js","webpack:///./node_modules/avalanche/dist/apis/avm/ops.js","webpack:///./node_modules/avalanche/dist/apis/evm/credentials.js","webpack:///./node_modules/avalanche/dist/apis/avm/createassettx.js","webpack:///./node_modules/asn1.js/lib/asn1/base/buffer.js","webpack:///./node_modules/avalanche/dist/apis/avm/genesisasset.js","webpack:///./node_modules/avalanche/dist/apis/avm/initialstates.js","webpack:///./node_modules/asn1.js/lib/asn1.js","webpack:///./node_modules/asn1.js/lib/asn1/base/node.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/pem.js","webpack:///./node_modules/asn1.js/lib/asn1/constants/der.js","webpack:///./node_modules/avalanche/dist/apis/avm/keychain.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/pem.js","webpack:///./node_modules/avalanche/dist/apis/avm/constants.js","webpack:///./node_modules/avalanche/dist/apis/evm/keychain.js","webpack:///./node_modules/avalanche/dist/apis/auth/api.js","webpack:///./node_modules/avalanche/dist/apis/auth/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/outputs.js","webpack:///./node_modules/avalanche/dist/apis/evm/constants.js","webpack:///./node_modules/avalanche/dist/apis/evm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/avm/minterset.js","webpack:///./node_modules/asn1.js/node_modules/bn.js/lib/bn.js","webpack:///./node_modules/avalanche/dist/apis/evm/basetx.js","webpack:///./node_modules/avalanche/dist/apis/avm/genesisdata.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/der.js","webpack:///./node_modules/asn1.js/lib/asn1/base/reporter.js","webpack:///./node_modules/avalanche/dist/apis/avm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/evm/outputs.js","webpack:///./node_modules/asn1.js/lib/asn1/api.js","webpack:///./node_modules/avalanche/dist/apis/avm/index.js","webpack:///./node_modules/avalanche/dist/apis/admin/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/basetx.js","webpack:///./node_modules/assert/assert.js","webpack:///./node_modules/avalanche/dist/apis/evm/index.js","webpack:///./node_modules/avalanche/dist/apis/admin/api.js","webpack:///./node_modules/avalanche/dist/apis/evm/utxos.js"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","UTXOSet","AssetAmountDestination","UTXO","buffer_1","bintools_1","bn_js_1","outputs_1","constants_1","tx_1","inputs_1","ops_1","helperfunctions_1","initialstates_1","utxos_1","createassettx_1","operationtx_1","basetx_1","exporttx_1","importtx_1","constants_2","assetamount_1","serialization_1","errors_1","bintools","default","getInstance","serialization","Serialization","StandardUTXO","super","arguments","_typeName","_typeID","undefined","fields","encoding","deserialize","output","SelectOutputClass","bytes","offset","codecID","copyFrom","txid","outputidx","assetID","outputid","readUInt32BE","fromBuffer","serialized","cb58Decode","cb58Encode","toBuffer","utxo","AVMConstants","LATESTCODEC","StandardAssetAmountDestination","StandardUTXOSet","getMinimumSpendable","aad","asOf","UnixNow","locktime","threshold","utxoArray","getAllUTXOs","outids","i","length","canComplete","u","assetKey","getAssetID","toString","fromAddresses","getSenders","getOutput","AmountOutput","assetExists","meetsThreshold","am","getAssetAmount","isFinished","uout","getOutputID","amount","getAmount","spendAmount","getTxID","getOutputIdx","input","SECPTransferInput","xferin","TransferableInput","spenders","getSpenders","j","idx","getAddressIdx","AddressError","getInput","addSignatureIdx","addInput","InsufficientFundsError","amounts","getAmounts","zero","getAssetIDString","gt","spendout","getDestinations","xferout","TransferableOutput","addOutput","change","getChange","changeout","getChangeAddresses","chgxferout","addChange","buildBaseTx","networkID","blockchainID","toAddresses","changeAddresses","fee","feeAssetID","memo","ThresholdError","eq","addAssetAmount","_feeCheck","ins","outs","success","getInputs","getAllOutputs","baseTx","BaseTx","UnsignedTx","buildCreateAssetTx","initialState","name","symbol","denomination","mintOutputs","SECPMintOutput","SECPMintOutputError","CAtx","CreateAssetTx","buildSECPMintTx","mintOwner","transferOwner","mintUTXOID","ops","mintOp","SECPMintOperation","getUTXO","UTXOError","SECPMINTOUTPUTID","out","Error","transferableOperation","TransferableOperation","push","operationTx","OperationTx","buildCreateNFTAssetTx","minterSets","InitialStates","nftMintOutput","NFTMintOutput","getMinters","getThreshold","NFTFXID","buildCreateNFTMintTx","owners","utxoids","groupID","payload","nftMintOperation","NFTMintOperation","buildNFTTransferTx","outbound","NFTTransferOutput","getGroupID","getPayload","op","NFTTransferOperation","xferop","OpTx","buildImportTx","atomics","sourceChain","clone","importIns","feepaid","feeAssetStr","amt","infeeamount","assetStr","lt","add","sub","from","getAddresses","feeRemaining","importTx","ImportTx","buildExportTx","destinationChain","exportouts","PlatformChainID","getChangeOutputs","getOutputs","exportTx","ExportTx","utxos","utxoid","utxoidCleaned","decoder","addressUTXOs","address","addressCleaned","utxobalance","utxovar","args","newset","create","allUTXOs","addArray","Buffer","constants","_reverse","map","res","keys","forEach","key","der","credentials_1","credentials_2","input_1","serializer","EVMBaseTx","DefaultNetworkID","alloc","sourceChainID","EVMConstants","IMPORTTX","numIns","numOuts","getTxType","getSourceChain","inputsPassed","outputsPassed","Array","isArray","importIn","TransferableInputError","EVMOutput","EVMOutputError","sort","comparator","validateOuts","serialize","assign","encoder","ii","writeUInt32BE","anIn","anOut","ChainIdError","barr","bsize","concat","newImportTx","msg","kc","sigs","sign","cred","SelectCredentialClass","getCredentialID","sigidxs","getSigIdxs","sigidx","keypair","getKey","getSource","signval","sig","Signature","addSignature","seenAssetSends","Map","evmOutput","getAddressString","assetId","has","assetsSentToAddress","get","includes","errorMessage","set","selectedNetwork","getNetworkID","requiredFee","Defaults","network","C","txFee","feeDiff","djtxAssetID","X","StandardAmountInput","ui","iadd","isub","EVMFeeError","_codecID","OPERATIONTX","OPERATIONTX_CODECONE","numOps","OperationError","o","CodecIdError","getOperation","newbase","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","EVMAPI","jrpcapi_1","keychain_1","utils_1","JRPCAPI","core","baseurl","keychain","KeyChain","blockchainAlias","DJTXAssetID","getBlockchainAlias","netID","alias","setBlockchainAlias","getBlockchainID","refreshBlockchainID","parseAddress","addr","ADDRESSLENGTH","addressFromBuffer","chainID","type","bufferToType","getHRP","getAssetDescription","asset","params","tmpBaseURL","getBaseURL","setBaseURL","response","callMethod","data","parseInt","getDJTXAssetID","refresh","PrimaryAssetAlias","setDJTXAssetID","getDefaultTxFee","getAssetBalance","hexAddress","blockHeight","method","path","getAtomicTxStatus","txID","status","getTxFee","export","username","password","to","exportDJTX","getUTXOs","addresses","limit","startIndex","import","importDJTX","importKey","privateKey","issueTx","tx","Transaction","txobj","Tx","TransactionError","exportKey","utxoset","toAddress","ownerAddresses","_cleanAddressArray","a","stringToAddress","srcChain","utxoResponse","atomicUTXOs","djtxAssetIDBuf","NoAtomicUTXOsError","builtUnsignedTx","fromAddressHex","fromAddressBech","nonce","prefixes","split","assetDescription","evmInputs","evmInput","EVMInput","evmDJTXInput","evmANTInput","exportedOuts","secpTransferOutput","SECPTransferOutput","transferableOutput","unsignedTx","keyChain","caller","addrs","chainid","decoders","pem","SelectTxClass","create_hash_1","txtype","BASETX","CREATEASSETTX","EXPORTTX","StandardUnsignedTx","transaction","readUInt16BE","txbuff","update","digest","StandardTx","credentials","numcreds","credid","evmtx_1","txTypeID","EVMStandardUnsignedTx","EVMStandardTx","NFTCredential","SECPCredential","SECPCREDENTIAL","SECPCREDENTIAL_CODECONE","NFTCREDENTIAL","NFTCREDENTIAL_CODECONE","CredIdError","Credential","id","newbasetx","encoders","AVMAPI","payload_1","output_1","creationTxFee","netid","setTxFee","getDefaultCreationTxFee","getCreationTxFee","setCreationTxFee","newKeyChain","checkGooseEgg","utx","outTotal","outputTotal","getOutputTotal","getBurn","lte","ONEDJTX","mul","getBalance","createAddress","createFixedCapAsset","initialHolders","createVariableCapAsset","mint","minters","amnt","listAddresses","getAllBalances","balances","getTx","getTxStatus","persistOpts","db","getName","selfArray","self","mergeByRule","getMergeRule","getAllUTXOStrings","getOverwrite","PayloadBase","GooseEggCheckError","utxoidArray","join","initialStates","SYMBOLMAXLEN","SymbolError","ASSETNAMELEN","NameError","OutputOwners","signTx","send","changeAddr","sendMultiple","sendOutputs","sOutputs","outputs","buildGenesis","genesisData","inherits","Node","DEREncoder","entity","enc","tree","DERNode","_init","body","parent","call","two","num","encodeTag","tag","primitive","cls","reporter","tagByName","hasOwnProperty","error","tagClassByName","module","prototype","encode","_encode","_encodeComposite","content","encodedTag","header","_createEncoderBuffer","lenOctets","_encodeStr","str","unused","buf","writeUInt16BE","charCodeAt","_isNumstr","_isPrintstr","test","_encodeObjid","values","relative","slice","JSON","stringify","splice","size","ident","objid","_encodeTime","time","date","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","_encodeNull","_encodeInt","isBuffer","numArray","toArray","unshift","copy","_encodeBool","_use","obj","_getEncoder","_skipDefault","dataBuffer","state","_baseState","defaultBuffer","_encodeValue","base","Reporter","DecoderBuffer","EncoderBuffer","AmountInput","SelectInputClass","inputID","SECPINPUTID","InputIdError","StandardTransferableInput","ASSETIDLEN","inputid","newout","nonceValue","sigCount","sigIdxs","addressIdx","SigIdx","b","setSource","getNonce","n","fromBNToBuffer","superbuff","bufferToB58","newEVMInput","SECPINPUTID_CODECONE","cb58","buffer","IMPORTTX_CODECONE","UTXOID","Operation","SelectOperationClass","nbytes_1","hex","decimalString","opid","SECPMINTOPID","SECPMINTOPID_CODECONE","NFTMINTOPID","NFTMINTOPID_CODECONE","NFTXFEROPID","NFTXFEROPID_CODECONE","InvalidOperationIdError","Serializable","s","sidx","sigbuff","aoutid","getOperationID","abuff","boutid","bbuff","asort","bsort","compare","operation","utxoIDs","getUTXOIDs","fromString","numutxoIDs","mintOutput","transferOutput","transferOutputs","mintoutBuff","transferOutBuff","outputOwners","getPayloadBuffer","payloadlen","getOutputOwners","oo","payloadLen","numoutputs","outputOwner","outputownerslen","outbuff","NBytes","utxoidbuff","b58ToBuffer","validateChecksum","newbuff","ChecksumError","getSize","credential","utf8","CREATEASSETTX_CODECONE","getInitialStates","getSymbol","getDenomination","readUInt8","getDenominationBuffer","writeUInt8","namesize","symsize","inits","initstatebuff","namebuff","write","symbuff","options","item","isEncoderBuffer","byteLength","isDecoderBuffer","isCompatible","constructor","save","restore","isEmpty","skip","raw","fail","_reporterState","GenesisAsset","assetAlias","getAssetAlias","assetAliasSize","assetAliasbuffSize","assetAliasbuff","networkIDBuff","toNumber","getMemo","memobuffSize","namebuffSize","symbolbuffSize","symbolbuff","denominationbuffSize","fxs","flatfxs","fxid","unflat","SECPFXID","klen","klennum","fxidbuff","statelenbuff","statelen","buff","k","Output","writeInt32BE","asn1","bignum","define","assert","tags","methods","overrided","children","reverseArgs","choice","optional","any","use","useDecoder","explicit","implicit","contains","_wrap","stateProps","cstate","prop","filter","child","equal","_useArgs","arg","def","val","newKey","_decode","wrapResult","prevObj","present","prevKey","enterKey","_peekTag","isError","_decodeGeneric","_decodeChoice","enterObject","_decodeTag","start","track","_getUse","leaveObject","exitKey","leaveKey","_decodeList","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeBool","_decodeInt","match","some","node","_encodeChoice","_encodePrimitive","PEMEncoder","p","label","reverse","tagClass","0","1","2","3","KeyPair","secp256k1_1","SECP256k1KeyPair","hrp","addressFromPublicKey","pubk","getChainID","setChainID","setHRP","generateKey","newkp","getPrivateKey","SECP256k1KeyChain","makeKey","addKey","privk","pk","getAddress","newkc","DERDecoder","PEMDecoder","decode","lines","toUpperCase","re","end","base64","replace","SECPMINTOUTPUTID_CODECONE","SECPXFEROUTPUTID","SECPXFEROUTPUTID_CODECONE","NFTXFEROUTPUTID","NFTXFEROUTPUTID_CODECONE","NFTMINTOUTPUTID","NFTMINTOUTPUTID_CODECONE","BASETX_CODECONE","EXPORTTX_CODECONE","BLOCKCHAINIDLEN","AuthAPI","newToken","endpoints","token","revokeToken","changePassword","oldPassword","newPassword","__createBinding","m","k2","enumerable","__exportStar","NFTOutput","OutputIdError","StandardTransferableOutput","StandardAmountOutput","BaseNFTOutput","utxobuff","sizePayload","psize","inputs","exportedOutputs","numInputs","numExportedOutputs","getDestinationChain","getExportedOutputs","EVMInputError","exportedOutput","TransferableOutputError","eo","MinterSet","_cleanAddresses","ctor","superCtor","super_","TempCtor","BN","number","endian","isBN","negative","words","red","wordSize","window","parseHex4Bits","string","index","c","parseHexByte","lowerBound","r","parseBase","len","Math","min","max","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","ceil","w","off","strip","parseLength","limbLen","limbPow","total","word","imuln","_iaddn","pow","dest","_expand","_normSign","inspect","zeros","groupSizes","groupBases","toBitArray","bitLength","bit","wbit","smallMulTo","lo","carry","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","ret","toJSON","toArrayLike","ArrayType","reqLength","littleEndian","q","andln","iushrn","clz32","_countBits","t","_zeroBits","hi","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","imul","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","bigMulTo","hncarry","jumboMulTo","fftm","FFTM","mulp","x","y","mulTo","makeRBT","N","l","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","mode","bhi","bhiBits","diff","qj","div","divmod","positive","divn","umod","divRound","dm","half","r2","acc","egcd","A","B","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","gte","ltn","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","_strip","outLen","prev","mod3","one","nOne","lpow","z","inv","windowSize","wnd","current","currentLen","mont","EVMStandardBaseTx","newEVMBaseTx","GenesisData","_1","genesisAssets","getGenesisAssets","genesisAsset","numGenesisAssets","assetCount","codecbuffSize","numAssetsbuffSize","derDecodeTag","oct","tagStr","derDecodeLen","decodedTag","_skipUntilEnd","possibleEnd","String","fromCharCode","numstr","printstr","identifiers","subident","first","second","year","mon","day","hour","sec","UTC","_getDecoder","errors","ReporterError","rethrow","pathLen","now","err","inherited","elem","message","stack","partial","captureStackTrace","exportOuts","getOuts","getExportOutputs","outputID","amountValue","prefix","substring","newEVMOutput","sorta","sortb","equals","api","Entity","_createNamed","Base","Generated","_initNamed","tx_2","display","StandardBaseTx","newOut","newIn","numouts","numins","outcount","incount","memolen","objectAssign","global","_isBuffer","util","hasOwn","pSlice","functionsHaveNames","pToString","isView","arrbuf","ArrayBuffer","DataView","ok","regex","func","isFunction","truncate","something","rawname","getMessage","actual","operator","expected","stackStartFunction","AssertionError","_deepEqual","strict","memos","isDate","getTime","isRegExp","source","multiline","lastIndex","ignoreCase","Float32Array","Float64Array","Uint8Array","actualIndex","indexOf","objEquiv","isArguments","object","actualVisitedObjects","isPrimitive","getPrototypeOf","aIsArgs","bIsArgs","ka","objectKeys","kb","notDeepStrictEqual","expectedException","isPrototypeOf","_tryBlock","block","_throws","shouldThrow","TypeError","userProvidedMessage","isUnwantedException","isUnexpectedException","generatedMessage","fn_name","next_line","notEqual","deepEqual","deepStrictEqual","notDeepEqual","strictEqual","notStrictEqual","throws","doesNotThrow","ifError","AdminAPI","endpoint","aliasChain","chain","getChainAliases","aliases","lockProfile","memoryProfile","startCPUProfiler","stopCPUProfiler","spender","atomic","assetIDBuf","FeeAssetError"],"mappings":"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","file":"js/chunk-vendors~15ae29a2.ff7c5640.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.UTXO = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-UTXOs\n  */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst inputs_1 = require(\"./inputs\");\nconst ops_1 = require(\"./ops\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst initialstates_1 = require(\"./initialstates\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst createassettx_1 = require(\"./createassettx\");\nconst operationtx_1 = require(\"./operationtx\");\nconst basetx_1 = require(\"./basetx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst importtx_1 = require(\"./importtx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst assetamount_1 = require(\"../../common/assetamount\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXO\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = outputs_1.SelectOutputClass(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = outputs_1.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.AVMConstants.LATESTCODEC, txid = undefined, outputidx = undefined, assetID = undefined, output = undefined) {\n        return new UTXO(codecID, txid, outputidx, assetID, output);\n    }\n}\nexports.UTXO = UTXO;\nclass AssetAmountDestination extends assetamount_1.StandardAssetAmountDestination {\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXOSet\";\n        this._typeID = undefined;\n        this.getMinimumSpendable = (aad, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const utxoArray = this.getAllUTXOs();\n            const outids = {};\n            for (let i = 0; i < utxoArray.length && !aad.canComplete(); i++) {\n                const u = utxoArray[i];\n                const assetKey = u.getAssetID().toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                if (u.getOutput() instanceof outputs_1.AmountOutput && aad.assetExists(assetKey) && u.getOutput().meetsThreshold(fromAddresses, asOf)) {\n                    const am = aad.getAssetAmount(assetKey);\n                    if (!am.isFinished()) {\n                        const uout = u.getOutput();\n                        outids[assetKey] = uout.getOutputID();\n                        const amount = uout.getAmount();\n                        am.spendAmount(amount);\n                        const txid = u.getTxID();\n                        const outputidx = u.getOutputIdx();\n                        const input = new inputs_1.SECPTransferInput(amount);\n                        const xferin = new inputs_1.TransferableInput(txid, outputidx, u.getAssetID(), input);\n                        const spenders = uout.getSpenders(fromAddresses, asOf);\n                        for (let j = 0; j < spenders.length; j++) {\n                            const idx = uout.getAddressIdx(spenders[j]);\n                            if (idx === -1) {\n                                /* istanbul ignore next */\n                                throw new errors_1.AddressError('Error - UTXOSet.getMinimumSpendable: no such '\n                                    + `address in output: ${spenders[j]}`);\n                            }\n                            xferin.getInput().addSignatureIdx(idx, spenders[j]);\n                        }\n                        aad.addInput(xferin);\n                    }\n                    else if (aad.assetExists(assetKey) && !(u.getOutput() instanceof outputs_1.AmountOutput)) {\n                        /**\n                         * Leaving the below lines, not simply for posterity, but for clarification.\n                         * AssetIDs may have mixed OutputTypes.\n                         * Some of those OutputTypes may implement AmountOutput.\n                         * Others may not.\n                         * Simply continue in this condition.\n                         */\n                        /*return new Error('Error - UTXOSet.getMinimumSpendable: outputID does not '\n                          + `implement AmountOutput: ${u.getOutput().getOutputID}`)*/\n                        continue;\n                    }\n                }\n            }\n            if (!aad.canComplete()) {\n                return new errors_1.InsufficientFundsError('Error - UTXOSet.getMinimumSpendable: insufficient '\n                    + 'funds to create the transaction');\n            }\n            const amounts = aad.getAmounts();\n            const zero = new bn_js_1.default(0);\n            for (let i = 0; i < amounts.length; i++) {\n                const assetKey = amounts[i].getAssetIDString();\n                const amount = amounts[i].getAmount();\n                if (amount.gt(zero)) {\n                    const spendout = outputs_1.SelectOutputClass(outids[assetKey], amount, aad.getDestinations(), locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), spendout);\n                    aad.addOutput(xferout);\n                }\n                const change = amounts[i].getChange();\n                if (change.gt(zero)) {\n                    const changeout = outputs_1.SelectOutputClass(outids[assetKey], change, aad.getChangeAddresses());\n                    const chgxferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), changeout);\n                    aad.addChange(chgxferout);\n                }\n            }\n            return undefined;\n        };\n        /**\n         * Creates an [[UnsignedTx]] wrapping a [[BaseTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] wrapping a [[BaseTx]] manually (with their corresponding [[TransferableInput]]s and [[TransferableOutput]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount of the asset to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned. Default: assetID\n         * @param memo Optional. Contains arbitrary data, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildBaseTx = (networkID, blockchainID, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            if (threshold > toAddresses.length) {\n                /* istanbul ignore next */\n                throw new errors_1.ThresholdError(\"Error - UTXOSet.buildBaseTx: threshold is greater than number of addresses\");\n            }\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            let ins = [];\n            let outs = [];\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getAllOutputs();\n            }\n            else {\n                throw success;\n            }\n            const baseTx = new basetx_1.BaseTx(networkID, blockchainID, outs, ins, memo);\n            return new tx_1.UnsignedTx(baseTx);\n        };\n        /**\n         * Creates an unsigned Create Asset transaction. For more granular control, you may create your own\n         * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs\n         * @param initialState The [[InitialStates]] that represent the intial state of a created asset\n         * @param name String for the descriptive name of the asset\n         * @param symbol String for the ticker symbol of the asset\n         * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 DJTX = 10^9 $nDJTX\n         * @param mintOutputs Optional. Array of [[SECPMintOutput]]s to be included in the transaction. These outputs can be spent to mint more tokens.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildCreateAssetTx = (networkID, blockchainID, fromAddresses, changeAddresses, initialState, name, symbol, denomination, mintOutputs = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            if (typeof mintOutputs !== \"undefined\") {\n                for (let i = 0; i < mintOutputs.length; i++) {\n                    if (mintOutputs[i] instanceof outputs_1.SECPMintOutput) {\n                        initialState.addOutput(mintOutputs[i]);\n                    }\n                    else {\n                        throw new errors_1.SECPMintOutputError(\"Error - UTXOSet.buildCreateAssetTx: A submitted mintOutput was not of type SECPMintOutput\");\n                    }\n                }\n            }\n            let CAtx = new createassettx_1.CreateAssetTx(networkID, blockchainID, outs, ins, memo, name, symbol, denomination, initialState);\n            return new tx_1.UnsignedTx(CAtx);\n        };\n        /**\n         * Creates an unsigned Secp mint transaction. For more granular control, you may create your own\n         * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param mintOwner A [[SECPMintOutput]] which specifies the new set of minters\n         * @param transferOwner A [[SECPTransferOutput]] which specifies where the minted tokens will go\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param mintUTXOID The UTXOID for the [[SCPMintOutput]] being spent to produce more tokens\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.buildSECPMintTx = (networkID, blockchainID, mintOwner, transferOwner, fromAddresses, changeAddresses, mintUTXOID, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let ops = [];\n            let mintOp = new ops_1.SECPMintOperation(mintOwner, transferOwner);\n            let utxo = this.getUTXO(mintUTXOID);\n            if (typeof utxo === \"undefined\") {\n                throw new errors_1.UTXOError(\"Error - UTXOSet.buildSECPMintTx: UTXOID not found\");\n            }\n            if (utxo.getOutput().getOutputID() !== constants_1.AVMConstants.SECPMINTOUTPUTID) {\n                throw new errors_1.SECPMintOutputError(\"Error - UTXOSet.buildSECPMintTx: UTXO is not a SECPMINTOUTPUTID\");\n            }\n            let out = utxo.getOutput();\n            let spenders = out.getSpenders(fromAddresses, asOf);\n            for (let j = 0; j < spenders.length; j++) {\n                let idx = out.getAddressIdx(spenders[j]);\n                if (idx == -1) {\n                    /* istanbul ignore next */\n                    throw new Error(\"Error - UTXOSet.buildSECPMintTx: no such address in output\");\n                }\n                mintOp.addSignatureIdx(idx, spenders[j]);\n            }\n            let transferableOperation = new ops_1.TransferableOperation(utxo.getAssetID(), [mintUTXOID], mintOp);\n            ops.push(transferableOperation);\n            let operationTx = new operationtx_1.OperationTx(networkID, blockchainID, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(operationTx);\n        };\n        /**\n        * Creates an unsigned Create Asset transaction. For more granular control, you may create your own\n        * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n        *\n        * @param networkID The number representing NetworkID of the node\n        * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n        * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n        * @param minterSets The minters and thresholds required to mint this nft asset\n        * @param name String for the descriptive name of the nft asset\n        * @param symbol String for the ticker symbol of the nft asset\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting mint output\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildCreateNFTAssetTx = (networkID, blockchainID, fromAddresses, changeAddresses, minterSets, name, symbol, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = undefined) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let initialState = new initialstates_1.InitialStates();\n            for (let i = 0; i < minterSets.length; i++) {\n                let nftMintOutput = new outputs_1.NFTMintOutput(i, minterSets[i].getMinters(), locktime, minterSets[i].getThreshold());\n                initialState.addOutput(nftMintOutput, constants_1.AVMConstants.NFTFXID);\n            }\n            let denomination = 0; // NFTs are non-fungible\n            let CAtx = new createassettx_1.CreateAssetTx(networkID, blockchainID, outs, ins, memo, name, symbol, denomination, initialState);\n            return new tx_1.UnsignedTx(CAtx);\n        };\n        /**\n        * Creates an unsigned NFT mint transaction. For more granular control, you may create your own\n        * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n        *\n        * @param networkID The number representing NetworkID of the node\n        * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param owners An array of [[OutputOwners]] who will be given the NFTs.\n        * @param fromAddresses The addresses being used to send the funds from the UTXOs\n        * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n        * @param utxoids An array of strings for the NFTs being transferred\n        * @param groupID Optional. The group this NFT is issued to.\n        * @param payload Optional. Data for NFT Payload.\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildCreateNFTMintTx = (networkID, blockchainID, owners, fromAddresses, changeAddresses, utxoids, groupID = 0, payload = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let ops = [];\n            let nftMintOperation = new ops_1.NFTMintOperation(groupID, payload, owners);\n            for (let i = 0; i < utxoids.length; i++) {\n                let utxo = this.getUTXO(utxoids[i]);\n                let out = utxo.getOutput();\n                let spenders = out.getSpenders(fromAddresses, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    let idx;\n                    idx = out.getAddressIdx(spenders[j]);\n                    if (idx == -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - UTXOSet.buildCreateNFTMintTx: no such address in output\");\n                    }\n                    nftMintOperation.addSignatureIdx(idx, spenders[j]);\n                }\n                let transferableOperation = new ops_1.TransferableOperation(utxo.getAssetID(), utxoids, nftMintOperation);\n                ops.push(transferableOperation);\n            }\n            let operationTx = new operationtx_1.OperationTx(networkID, blockchainID, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(operationTx);\n        };\n        /**\n        * Creates an unsigned NFT transfer transaction. For more granular control, you may create your own\n        * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n        *\n        * @param networkID The number representing NetworkID of the node\n        * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param toAddresses An array of {@link https://github.com/feross/buffer|Buffer}s which indicate who recieves the NFT\n        * @param fromAddresses An array for {@link https://github.com/feross/buffer|Buffer} who owns the NFT\n        * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n        * @param utxoids An array of strings for the NFTs being transferred\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting outputs\n        * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n        *\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildNFTTransferTx = (networkID, blockchainID, toAddresses, fromAddresses, changeAddresses, utxoids, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            const ops = [];\n            for (let i = 0; i < utxoids.length; i++) {\n                const utxo = this.getUTXO(utxoids[i]);\n                const out = utxo.getOutput();\n                const spenders = out.getSpenders(fromAddresses, asOf);\n                const outbound = new outputs_1.NFTTransferOutput(out.getGroupID(), out.getPayload(), toAddresses, locktime, threshold);\n                const op = new ops_1.NFTTransferOperation(outbound);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = out.getAddressIdx(spenders[j]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError('Error - UTXOSet.buildNFTTransferTx: '\n                            + `no such address in output: ${spenders[j]}`);\n                    }\n                    op.addSignatureIdx(idx, spenders[j]);\n                }\n                const xferop = new ops_1.TransferableOperation(utxo.getAssetID(), [utxoids[i]], op);\n                ops.push(xferop);\n            }\n            const OpTx = new operationtx_1.OperationTx(networkID, blockchainID, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(OpTx);\n        };\n        /**\n          * Creates an unsigned ImportTx transaction.\n          *\n          * @param networkID The number representing NetworkID of the node\n          * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param toAddresses The addresses to send the funds\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n          * @param importIns An array of [[TransferableInput]]s being imported\n          * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}. Fee will come from the inputs first, if they can.\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting outputs\n          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildImportTx = (networkID, blockchainID, toAddresses, fromAddresses, changeAddresses, atomics, sourceChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (typeof fee === \"undefined\") {\n                fee = zero.clone();\n            }\n            const importIns = [];\n            let feepaid = new bn_js_1.default(0);\n            let feeAssetStr = feeAssetID.toString(\"hex\");\n            for (let i = 0; i < atomics.length; i++) {\n                const utxo = atomics[i];\n                const assetID = utxo.getAssetID();\n                const output = utxo.getOutput();\n                let amt = output.getAmount().clone();\n                let infeeamount = amt.clone();\n                let assetStr = assetID.toString(\"hex\");\n                if (typeof feeAssetID !== \"undefined\" &&\n                    fee.gt(zero) &&\n                    feepaid.lt(fee) &&\n                    assetStr === feeAssetStr) {\n                    feepaid = feepaid.add(infeeamount);\n                    if (feepaid.gt(fee)) {\n                        infeeamount = feepaid.sub(fee);\n                        feepaid = fee.clone();\n                    }\n                    else {\n                        infeeamount = zero.clone();\n                    }\n                }\n                const txid = utxo.getTxID();\n                const outputidx = utxo.getOutputIdx();\n                const input = new inputs_1.SECPTransferInput(amt);\n                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);\n                const from = output.getAddresses();\n                const spenders = output.getSpenders(from, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = output.getAddressIdx(spenders[j]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError('Error - UTXOSet.buildImportTx: no such '\n                            + `address in output: ${spenders[j]}`);\n                    }\n                    xferin.getInput().addSignatureIdx(idx, spenders[j]);\n                }\n                importIns.push(xferin);\n                //add extra outputs for each amount (calculated from the imported inputs), minus fees\n                if (infeeamount.gt(zero)) {\n                    const spendout = outputs_1.SelectOutputClass(output.getOutputID(), infeeamount, toAddresses, locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(assetID, spendout);\n                    outs.push(xferout);\n                }\n            }\n            // get remaining fees from the provided addresses\n            let feeRemaining = fee.sub(feepaid);\n            if (feeRemaining.gt(zero) && this._feeCheck(feeRemaining, feeAssetID)) {\n                const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, feeRemaining);\n                const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            const importTx = new importtx_1.ImportTx(networkID, blockchainID, outs, ins, memo, sourceChain, importIns);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n        * Creates an unsigned ExportTx transaction.\n        *\n        * @param networkID The number representing NetworkID of the node\n        * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param djtxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for DJTX\n        * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the DJTX\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the DJTX\n        * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param memo Optional contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting outputs\n        * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildExportTx = (networkID, blockchainID, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let outs = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw success;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkID, blockchainID, outs, ins, memo, destinationChain, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let utxos = {};\n        for (let utxoid in fields[\"utxos\"]) {\n            let utxoidCleaned = serialization.decoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[utxoidCleaned] = new UTXO();\n            utxos[utxoidCleaned].deserialize(fields[\"utxos\"][utxoid], encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in fields[\"addressUTXOs\"]) {\n            let addressCleaned = serialization.decoder(address, encoding, \"cb58\", \"hex\");\n            let utxobalance = {};\n            for (let utxoid in fields[\"addressUTXOs\"][address]) {\n                let utxoidCleaned = serialization.decoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[utxoidCleaned] = serialization.decoder(fields[\"addressUTXOs\"][address][utxoid], encoding, \"decimalString\", \"BN\");\n            }\n            addressUTXOs[addressCleaned] = utxobalance;\n        }\n        this.utxos = utxos;\n        this.addressUTXOs = addressUTXOs;\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === 'string') {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof UTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.UTXOError(\"Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string\");\n        }\n        return utxovar;\n    }\n    create(...args) {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) && feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst constants = exports;\n\n// Helper\nconstants._reverse = function reverse(map) {\n  const res = {};\n\n  Object.keys(map).forEach(function(key) {\n    // Convert key to integer if it is stringified\n    if ((key | 0) == key)\n      key = key | 0;\n\n    const value = map[key];\n    res[value] = key;\n  });\n\n  return res;\n};\n\nconstants.der = require('./der');\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-ImportTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst basetx_1 = require(\"./basetx\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst input_1 = require(\"../../common/input\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.EVMBaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param sourceChainID Optional chainID for the source inputs to import. Default platform chainid.\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     * @param outs Optional array of the [[EVMOutput]]s\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), sourceChainID = buffer_1.Buffer.alloc(32, 16), importIns = undefined, outs = undefined) {\n        super(networkID, blockchainID);\n        this._typeName = \"ImportTx\";\n        this._typeID = constants_1.EVMConstants.IMPORTTX;\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.outs = [];\n        /**\n           * Returns the id of the [[ImportTx]]\n           */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} for the source chainid.\n         */\n        this.getSourceChain = () => {\n            return this.sourceChain;\n        };\n        this.sourceChain = sourceChainID;\n        let inputsPassed = false;\n        let outputsPassed = false;\n        if (typeof importIns !== 'undefined' && Array.isArray(importIns) && importIns.length > 0) {\n            importIns.forEach((importIn) => {\n                if (!(importIn instanceof inputs_1.TransferableInput)) {\n                    throw new errors_1.TransferableInputError(\"Error - ImportTx.constructor: invalid TransferableInput in array parameter 'importIns'\");\n                }\n            });\n            inputsPassed = true;\n            this.importIns = importIns;\n        }\n        if (typeof outs !== 'undefined' && Array.isArray(outs) && outs.length > 0) {\n            outs.forEach((out) => {\n                if (!(out instanceof outputs_1.EVMOutput)) {\n                    throw new errors_1.EVMOutputError(\"Error - ImportTx.constructor: invalid EVMOutput in array parameter 'outs'\");\n                }\n            });\n            if (outs.length > 1) {\n                outs = outs.sort(outputs_1.EVMOutput.comparator());\n            }\n            outputsPassed = true;\n            this.outs = outs;\n        }\n        if (inputsPassed && outputsPassed) {\n            this.validateOuts();\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"sourceChain\": serializer.encoder(this.sourceChain, encoding, \"Buffer\", \"cb58\"), \"importIns\": this.importIns.map((i) => i.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sourceChain = serializer.decoder(fields[\"sourceChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.importIns = fields[\"importIns\"].map((i) => {\n            let ii = new inputs_1.TransferableInput();\n            ii.deserialize(i, encoding);\n            return ii;\n        });\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it,\n       * populates the class, and returns the length of the [[ImportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n       * @param offset A number representing the byte offset. Defaults to 0.\n       *\n       * @returns The length of the raw [[ImportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.EVMOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.outs.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        this.numOuts.writeUInt32BE(this.outs.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        let bsize = super.toBuffer().length + this.sourceChain.length + this.numIns.length;\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        this.importIns.forEach((importIn) => {\n            bsize += importIn.toBuffer().length;\n            barr.push(importIn.toBuffer());\n        });\n        bsize += this.numOuts.length;\n        barr.push(this.numOuts);\n        this.outs.forEach((out) => {\n            bsize += out.toBuffer().length;\n            barr.push(out.toBuffer());\n        });\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n       * Returns an array of [[TransferableInput]]s in this transaction.\n       */\n    getImportInputs() {\n        return this.importIns;\n    }\n    /**\n       * Returns an array of [[EVMOutput]]s in this transaction.\n       */\n    getOuts() {\n        return this.outs;\n    }\n    clone() {\n        let newImportTx = new ImportTx();\n        newImportTx.fromBuffer(this.toBuffer());\n        return newImportTx;\n    }\n    create(...args) {\n        return new ImportTx(...args);\n    }\n    /**\n       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n       *\n       * @param msg A Buffer for the [[UnsignedTx]]\n       * @param kc An [[KeyChain]] used in signing\n       *\n       * @returns An array of [[Credential]]s\n       */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        this.importIns.forEach((importIn) => {\n            const cred = credentials_1.SelectCredentialClass(importIn.getInput().getCredentialID());\n            const sigidxs = importIn.getInput().getSigIdxs();\n            sigidxs.forEach((sigidx) => {\n                const keypair = kc.getKey(sigidx.getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            });\n            sigs.push(cred);\n        });\n        return sigs;\n    }\n    validateOuts() {\n        // This Map enforces uniqueness of pair(address, assetId) for each EVMOutput.\n        // For each imported assetID, each ETH-style C-Chain address can \n        // have exactly 1 EVMOutput.\n        // Map(2) {\n        //   '0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC' => [\n        //     'FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z',\n        //     'F4MyJcUvq3Rxbqgd4Zs8sUpvwLHApyrp4yxJXe2bAV86Vvp38'\n        //   ],\n        //   '0xecC3B2968B277b837a81A7181e0b94EB1Ca54EdE' => [\n        //     'FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z',\n        //     '2Df96yHyhNc3vooieNNhyKwrjEfTsV2ReMo5FKjMpr8vwN4Jqy',\n        //     'SfSXBzDb9GZ9R2uH61qZKe8nxQHW9KERW9Kq9WRe4vHJZRN3e'\n        //   ]\n        // }\n        const seenAssetSends = new Map();\n        this.outs.forEach((evmOutput) => {\n            const address = evmOutput.getAddressString();\n            const assetId = bintools.cb58Encode(evmOutput.getAssetID());\n            if (seenAssetSends.has(address)) {\n                const assetsSentToAddress = seenAssetSends.get(address);\n                if (assetsSentToAddress.includes(assetId)) {\n                    const errorMessage = `Error - ImportTx: duplicate (address, assetId) pair found in outputs: (0x${address}, ${assetId})`;\n                    throw new errors_1.EVMOutputError(errorMessage);\n                }\n                assetsSentToAddress.push(assetId);\n            }\n            else {\n                seenAssetSends.set(address, [assetId]);\n            }\n        });\n        // make sure this transaction pays the required djtx fee\n        const selectedNetwork = this.getNetworkID();\n        const requiredFee = constants_2.Defaults.network[selectedNetwork].C.txFee;\n        const feeDiff = new bn_js_1.default(0);\n        const djtxAssetID = constants_2.Defaults.network[selectedNetwork].X.djtxAssetID;\n        // sum incoming DJTX\n        this.importIns.forEach((input) => {\n            // only check StandardAmountInputs\n            if (input.getInput() instanceof input_1.StandardAmountInput && djtxAssetID === bintools.cb58Encode(input.getAssetID())) {\n                const ui = input.getInput();\n                const i = ui;\n                feeDiff.iadd(i.getAmount());\n            }\n        });\n        // subtract all outgoing DJTX\n        this.outs.forEach((evmOutput) => {\n            if (djtxAssetID === bintools.cb58Encode(evmOutput.getAssetID())) {\n                feeDiff.isub(evmOutput.getAmount());\n            }\n        });\n        if (feeDiff.lt(requiredFee)) {\n            const errorMessage = `Error - ${requiredFee} DJTX required for fee and only ${feeDiff} DJTX provided`;\n            throw new errors_1.EVMFeeError(errorMessage);\n        }\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OperationTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-OperationTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst ops_1 = require(\"./ops\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing an unsigned Operation transaction.\n */\nclass OperationTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Operation transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param ops Array of [[Operation]]s used in the transaction\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, ops = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"OperationTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.OPERATIONTX : constants_1.AVMConstants.OPERATIONTX_CODECONE;\n        this.numOps = buffer_1.Buffer.alloc(4);\n        this.ops = [];\n        /**\n         * Returns the id of the [[OperationTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        if (typeof ops !== \"undefined\" && Array.isArray(ops)) {\n            for (let i = 0; i < ops.length; i++) {\n                if (!(ops[i] instanceof ops_1.TransferableOperation)) {\n                    throw new errors_1.OperationError(`Error - OperationTx.constructor: invalid op in array parameter ${ops}`);\n                }\n            }\n            this.ops = ops;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { ops: this.ops.map((o) => o.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.ops = fields[\"ops\"].map((o) => {\n            let op = new ops_1.TransferableOperation();\n            op.deserialize(o, encoding);\n            return op;\n        });\n        this.numOps = buffer_1.Buffer.alloc(4);\n        this.numOps.writeUInt32BE(this.ops.length, 0);\n    }\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - OperationTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.OPERATIONTX : constants_1.AVMConstants.OPERATIONTX_CODECONE;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[OperationTx]], parses it, populates the class, and returns the length of the [[OperationTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[OperationTx]]\n     *\n     * @returns The length of the raw [[OperationTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.numOps = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOps = this.numOps.readUInt32BE(0);\n        for (let i = 0; i < numOps; i++) {\n            const op = new ops_1.TransferableOperation();\n            offset = op.fromBuffer(bytes, offset);\n            this.ops.push(op);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[OperationTx]].\n     */\n    toBuffer() {\n        this.numOps.writeUInt32BE(this.ops.length, 0);\n        let barr = [super.toBuffer(), this.numOps];\n        this.ops = this.ops.sort(ops_1.TransferableOperation.comparator());\n        for (let i = 0; i < this.ops.length; i++) {\n            barr.push(this.ops[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n     * Returns an array of [[TransferableOperation]]s in this transaction.\n     */\n    getOperations() {\n        return this.ops;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.ops.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.ops[i].getOperation().getCredentialID());\n            const sigidxs = this.ops[i].getOperation().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new OperationTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new OperationTx(...args);\n    }\n}\nexports.OperationTx = OperationTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMAPI = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst utxos_1 = require(\"./utxos\");\nconst keychain_1 = require(\"./keychain\");\nconst constants_1 = require(\"../../utils/constants\");\nconst tx_1 = require(\"./tx\");\nconst constants_2 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst outputs_1 = require(\"./outputs\");\nconst exporttx_1 = require(\"./exporttx\");\nconst errors_1 = require(\"../../utils/errors\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for interacting with a node's EVMAPI\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass EVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly.\n     * Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseurl Defaults to the string \"/ext/bc/C/djtx\" as the path to blockchain's baseurl\n     * @param blockchainID The Blockchain's ID. Defaults to an empty string: \"\"\n     */\n    constructor(core, baseurl = \"/ext/bc/C/djtx\", blockchainID = \"\") {\n        super(core, baseurl);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.KeyChain(\"\", \"\");\n        this.blockchainID = \"\";\n        this.blockchainAlias = undefined;\n        this.DJTXAssetID = undefined;\n        this.txFee = undefined;\n        /**\n         * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n         *\n         * @returns The alias for the blockchainID\n         */\n        this.getBlockchainAlias = () => {\n            if (typeof this.blockchainAlias === \"undefined\") {\n                const netID = this.core.getNetworkID();\n                if (netID in constants_1.Defaults.network && this.blockchainID in constants_1.Defaults.network[netID]) {\n                    this.blockchainAlias = constants_1.Defaults.network[netID][this.blockchainID].alias;\n                    return this.blockchainAlias;\n                }\n                else {\n                    /* istanbul ignore next */\n                    return undefined;\n                }\n            }\n            return this.blockchainAlias;\n        };\n        /**\n         * Sets the alias for the blockchainID.\n         *\n         * @param alias The alias for the blockchainID.\n         *\n         */\n        this.setBlockchainAlias = (alias) => {\n            this.blockchainAlias = alias;\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n         * Gets the blockchainID and returns it.\n         *\n         * @returns The blockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Refresh blockchainID, and if a blockchainID is passed in, use that.\n         *\n         * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n         *\n         * @returns A boolean if the blockchainID was successfully refreshed.\n         */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netID = this.core.getNetworkID();\n            if (typeof blockchainID === \"undefined\" && typeof constants_1.Defaults.network[netID] !== \"undefined\") {\n                this.blockchainID = constants_1.Defaults.network[netID].C.blockchainID; //default to C-Chain\n                return true;\n            }\n            if (typeof blockchainID === \"string\") {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n         */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_2.EVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainID = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n            const type = \"bech32\";\n            return serialization.bufferToType(address, type, this.core.getHRP(), chainID);\n        };\n        /**\n           * Retrieves an assets name and symbol.\n           *\n           * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an b58 serialized string for the AssetID or its alias.\n           *\n           * @returns Returns a Promise<Asset> with keys \"name\", \"symbol\", \"assetID\" and \"denomination\".\n           */\n        this.getAssetDescription = (assetID) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            const params = {\n                assetID: asset,\n            };\n            const tmpBaseURL = this.getBaseURL();\n            // set base url to get asset description\n            this.setBaseURL(\"/ext/bc/X\");\n            const response = yield this.callMethod(\"avm.getAssetDescription\", params);\n            // set base url back what it originally was\n            this.setBaseURL(tmpBaseURL);\n            return {\n                name: response.data.result.name,\n                symbol: response.data.result.symbol,\n                assetID: bintools.cb58Decode(response.data.result.assetID),\n                denomination: parseInt(response.data.result.denomination, 10),\n            };\n        });\n        /**\n         * Fetches the DJTX AssetID and returns it in a Promise.\n         *\n         * @param refresh This function caches the response. Refresh = true will bust the cache.\n         *\n         * @returns The the provided string representing the DJTX AssetID\n         */\n        this.getDJTXAssetID = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.DJTXAssetID === \"undefined\" || refresh) {\n                const asset = yield this.getAssetDescription(constants_1.PrimaryAssetAlias);\n                this.DJTXAssetID = asset.assetID;\n            }\n            return this.DJTXAssetID;\n        });\n        /**\n         * Overrides the defaults and sets the cache to a specific DJTX AssetID\n         *\n         * @param djtxAssetID A cb58 string or Buffer representing the DJTX AssetID\n         *\n         * @returns The the provided string representing the DJTX AssetID\n         */\n        this.setDJTXAssetID = (djtxAssetID) => {\n            if (typeof djtxAssetID === \"string\") {\n                djtxAssetID = bintools.cb58Decode(djtxAssetID);\n            }\n            this.DJTXAssetID = djtxAssetID;\n        };\n        /**\n         * Gets the default tx fee for this chain.\n         *\n         * @returns The default tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultTxFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"C\"][\"txFee\"]) : new bn_js_1.default(0);\n        };\n        /**\n         * returns the amount of [assetID] for the given address in the state of the given block number.\n         * \"latest\", \"pending\", and \"accepted\" meta block numbers are also allowed.\n         *\n         * @param hexAddress The hex representation of the address\n         * @param blockHeight The block height\n         * @param assetID The asset ID\n         *\n         * @returns Returns a Promise<string> containing the balance\n         */\n        this.getAssetBalance = (hexAddress, blockHeight, assetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = [\n                hexAddress,\n                blockHeight,\n                assetID\n            ];\n            const method = \"eth_getAssetBalance\";\n            const path = \"ext/bc/C/rpc\";\n            const response = yield this.callMethod(method, params, path);\n            return response.data.result;\n        });\n        /**\n         * Returns the status of a provided atomic transaction ID by calling the node's `getAtomicTxStatus` method.\n         *\n         * @param txID The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the status retrieved from the node\n         */\n        this.getAtomicTxStatus = (txID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID\n            };\n            const response = yield this.callMethod(\"djtx.getAtomicTxStatus\", params);\n            return response.data.result.status;\n        });\n        /**\n         * Gets the tx fee for this chain.\n         *\n         * @returns The tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getTxFee = () => {\n            if (typeof this.txFee === \"undefined\") {\n                this.txFee = this.getDefaultTxFee();\n            }\n            return this.txFee;\n        };\n        /**\n         * Send ANT (Avalanche Native Token) assets including DJTX from the C-Chain to an account on the X-Chain.\n          *\n          * After calling this method, you must call the X-Chain’s import method to complete the transfer.\n          *\n          * @param username The Keystore user that controls the X-Chain account specified in `to`\n          * @param password The password of the Keystore user\n          * @param to The account on the X-Chain to send the DJTX to.\n          * @param amount Amount of asset to export as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param assetID The asset id which is being sent\n          *\n          * @returns String representing the transaction id\n          */\n        this.export = (username, password, to, amount, assetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                amount: amount.toString(10),\n                username,\n                password,\n                assetID\n            };\n            const response = yield this.callMethod(\"djtx.export\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Send DJTX from the C-Chain to an account on the X-Chain.\n          *\n          * After calling this method, you must call the X-Chain’s importDJTX method to complete the transfer.\n          *\n          * @param username The Keystore user that controls the X-Chain account specified in `to`\n          * @param password The password of the Keystore user\n          * @param to The account on the X-Chain to send the DJTX to.\n          * @param amount Amount of DJTX to export as a {@link https://github.com/indutny/bn.js/|BN}\n          *\n          * @returns String representing the transaction id\n          */\n        this.exportDJTX = (username, password, to, amount) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                amount: amount.toString(10),\n                username,\n                password,\n            };\n            const response = yield this.callMethod(\"djtx.exportDJTX\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param sourceChain A string for the chain to look for the UTXO's. Default is to use this chain, but if exported UTXOs exist\n         * from other chains, this can used to pull them instead.\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         */\n        this.getUTXOs = (addresses, sourceChain = undefined, limit = 0, startIndex = undefined) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof addresses === \"string\") {\n                addresses = [addresses];\n            }\n            const params = {\n                addresses: addresses,\n                limit\n            };\n            if (typeof startIndex !== \"undefined\" && startIndex) {\n                params.startIndex = startIndex;\n            }\n            if (typeof sourceChain !== \"undefined\") {\n                params.sourceChain = sourceChain;\n            }\n            const response = yield this.callMethod(\"djtx.getUTXOs\", params);\n            const utxos = new utxos_1.UTXOSet();\n            const data = response.data.result.utxos;\n            utxos.addArray(data, false);\n            response.data.result.utxos = utxos;\n            return response.data.result;\n        });\n        /**\n         * Send ANT (Avalanche Native Token) assets including DJTX from an account on the X-Chain to an address on the C-Chain. This transaction\n         * must be signed with the key of the account that the asset is sent from and which pays\n         * the transaction fee.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address of the account the asset is sent to.\n         * @param sourceChain The chainID where the funds are coming from. Ex: \"X\"\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.import = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"djtx.import\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Send DJTX from an account on the X-Chain to an address on the C-Chain. This transaction\n         * must be signed with the key of the account that the DJTX is sent from and which pays\n         * the transaction fee.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address of the account the DJTX is sent to. This must be the same as the to\n         * argument in the corresponding call to the X-Chain’s exportDJTX\n         * @param sourceChain The chainID where the funds are coming from.\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.importDJTX = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password,\n            };\n            const response = yield this.callMethod(\"djtx.importDJTX\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Give a user control over an address by providing the private key that controls the address.\n         *\n         * @param username The name of the user to store the private key\n         * @param password The password that unlocks the user\n         * @param privateKey A string representing the private key in the vm\"s format\n         *\n         * @returns The address for the imported private key.\n         */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey,\n            };\n            const response = yield this.callMethod(\"djtx.importKey\", params);\n            return response.data.result.address;\n        });\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise<string> representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = \"\";\n            if (typeof tx === \"string\") {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toString();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toString();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new errors_1.TransactionError(\"Error - djtx.issueTx: provided tx is not expected type of string, Buffer, or Tx\");\n            }\n            const params = {\n                tx: Transaction.toString(),\n            };\n            const response = yield this.callMethod(\"djtx.issueTx\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Exports the private key for an address.\n         *\n         * @param username The name of the user with the private key\n         * @param password The password used to decrypt the private key\n         * @param address The address whose private key should be exported\n         *\n         * @returns Promise with the decrypted private key as store in the database\n         */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                address\n            };\n            const response = yield this.callMethod(\"djtx.exportKey\", params);\n            return response.data.result.privateKey;\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param toAddress The address to send the funds\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, toAddress, ownerAddresses, sourceChain, fromAddresses) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, \"buildImportTx\").map((a) => bintools.stringToAddress(a));\n            let srcChain = undefined;\n            if (typeof sourceChain === \"string\") {\n                // if there is a sourceChain passed in and it's a string then save the string value and cast the original\n                // variable from a string to a Buffer\n                srcChain = sourceChain;\n                sourceChain = bintools.cb58Decode(sourceChain);\n            }\n            else if (typeof sourceChain === \"undefined\" || !(sourceChain instanceof buffer_1.Buffer)) {\n                // if there is no sourceChain passed in or the sourceChain is any data type other than a Buffer then throw an error\n                throw new errors_1.ChainIdError(\"Error - EVMAPI.buildImportTx: sourceChain is undefined or invalid sourceChain type.\");\n            }\n            const utxoResponse = yield this.getUTXOs(ownerAddresses, srcChain, 0, undefined);\n            const atomicUTXOs = utxoResponse.utxos;\n            const networkID = this.core.getNetworkID();\n            const djtxAssetID = constants_1.Defaults.network[networkID].X.djtxAssetID;\n            const djtxAssetIDBuf = bintools.cb58Decode(djtxAssetID);\n            const atomics = atomicUTXOs.getAllUTXOs();\n            if (atomics.length === 0) {\n                throw new errors_1.NoAtomicUTXOsError(\"Error - EVMAPI.buildImportTx: no atomic utxos to import\");\n            }\n            const builtUnsignedTx = utxoset.buildImportTx(networkID, bintools.cb58Decode(this.blockchainID), toAddress, from, atomics, sourceChain, this.getTxFee(), djtxAssetIDBuf);\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param assetID The asset id which is being sent\n         * @param destinationChain The chainid for where the assets will be sent.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (amount, assetID, destinationChain, fromAddressHex, fromAddressBech, toAddresses, nonce = 0, locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            let prefixes = {};\n            toAddresses.map((address) => {\n                prefixes[address.split(\"-\")[0]] = true;\n            });\n            if (Object.keys(prefixes).length !== 1) {\n                throw new errors_1.AddressError(\"Error - EVMAPI.buildExportTx: To addresses must have the same chainID prefix.\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - EVMAPI.buildExportTx: Destination ChainID is undefined.\");\n            }\n            else if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(destinationChain);\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new errors_1.ChainIdError(\"Error - EVMAPI.buildExportTx: Invalid destinationChain type\");\n            }\n            if (destinationChain.length !== 32) {\n                throw new errors_1.ChainIdError(\"Error - EVMAPI.buildExportTx: Destination ChainID must be 32 bytes in length.\");\n            }\n            const fee = this.getTxFee();\n            const assetDescription = yield this.getAssetDescription(\"DJTX\");\n            const evmInputs = [];\n            if (bintools.cb58Encode(assetDescription.assetID) === assetID) {\n                const evmInput = new inputs_1.EVMInput(fromAddressHex, amount.add(fee), assetID, nonce);\n                evmInput.addSignatureIdx(0, bintools.stringToAddress(fromAddressBech));\n                evmInputs.push(evmInput);\n            }\n            else {\n                // if asset id isn\"t DJTX asset id then create 2 inputs\n                // first input will be DJTX and will be for the amount of the fee\n                // second input will be the ANT\n                const evmDJTXInput = new inputs_1.EVMInput(fromAddressHex, fee, assetDescription.assetID, nonce);\n                evmDJTXInput.addSignatureIdx(0, bintools.stringToAddress(fromAddressBech));\n                evmInputs.push(evmDJTXInput);\n                const evmANTInput = new inputs_1.EVMInput(fromAddressHex, amount, assetID, nonce);\n                evmANTInput.addSignatureIdx(0, bintools.stringToAddress(fromAddressBech));\n                evmInputs.push(evmANTInput);\n            }\n            const to = [];\n            toAddresses.map((address) => {\n                to.push(bintools.stringToAddress(address));\n            });\n            let exportedOuts = [];\n            const secpTransferOutput = new outputs_1.SECPTransferOutput(amount, to, locktime, threshold);\n            const transferableOutput = new outputs_1.TransferableOutput(bintools.cb58Decode(assetID), secpTransferOutput);\n            exportedOuts.push(transferableOutput);\n            // lexicographically sort array\n            exportedOuts = exportedOuts.sort(outputs_1.TransferableOutput.comparator());\n            const exportTx = new exporttx_1.ExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), destinationChain, evmInputs, exportedOuts);\n            const unsignedTx = new tx_1.UnsignedTx(exportTx);\n            return unsignedTx;\n        });\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[KeyChain]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        this.blockchainID = blockchainID;\n        const netID = core.getNetworkID();\n        if (netID in constants_1.Defaults.network && blockchainID in constants_1.Defaults.network[netID]) {\n            const { alias } = constants_1.Defaults.network[netID][blockchainID];\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            addresses.forEach((address) => {\n                if (typeof address === \"string\") {\n                    if (typeof this.parseAddress(address) === \"undefined\") {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - Invalid address format\");\n                    }\n                    addrs.push(address);\n                }\n                else {\n                    const type = \"bech32\";\n                    addrs.push(serialization.bufferToType(address, type, this.core.getHRP(), chainid));\n                }\n            });\n        }\n        return addrs;\n    }\n}\nexports.EVMAPI = EVMAPI;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst decoders = exports;\n\ndecoders.der = require('./der');\ndecoders.pem = require('./pem');\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tx = exports.UnsignedTx = exports.SelectTxClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst basetx_1 = require(\"./basetx\");\nconst createassettx_1 = require(\"./createassettx\");\nconst operationtx_1 = require(\"./operationtx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[BaseTx]] instance.\n *\n * @param txtype The id of the transaction type\n *\n * @returns An instance of an [[BaseTx]]-extended class.\n */\nexports.SelectTxClass = (txtype, ...args) => {\n    if (txtype === constants_1.AVMConstants.BASETX) {\n        return new basetx_1.BaseTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.CREATEASSETTX) {\n        return new createassettx_1.CreateAssetTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.OPERATIONTX) {\n        return new operationtx_1.OperationTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.IMPORTTX) {\n        return new importtx_1.ImportTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.EXPORTTX) {\n        return new exporttx_1.ExportTx(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.TransactionError(\"Error - SelectTxClass: unknown txtype\");\n};\nclass UnsignedTx extends tx_1.StandardUnsignedTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UnsignedTx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.transaction = exports.SelectTxClass(fields[\"transaction\"][\"_typeID\"]);\n        this.transaction.deserialize(fields[\"transaction\"], encoding);\n    }\n    getTransaction() {\n        return this.transaction;\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.transaction = exports.SelectTxClass(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from(create_hash_1.default('sha256').update(txbuff).digest());\n        const sigs = this.transaction.sign(msg, kc);\n        return new Tx(this, sigs);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends tx_1.StandardTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Tx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.unsignedTx = new UnsignedTx();\n        this.unsignedTx.deserialize(fields[\"unsignedTx\"], encoding);\n        this.credentials = [];\n        for (let i = 0; i < fields[\"credentials\"].length; i++) {\n            const cred = credentials_1.SelectCredentialClass(fields[\"credentials\"][i][\"_typeID\"]);\n            cred.deserialize(fields[\"credentials\"][i], encoding);\n            this.credentials.push(cred);\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n            offset += 4;\n            const cred = credentials_1.SelectCredentialClass(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0vdHgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7OztHQUdHO0FBQ0gsb0NBQWdDO0FBQ2hDLG9FQUEyQztBQUMzQywyQ0FBMEM7QUFDMUMsK0NBQXFEO0FBR3JELHdDQUFnRTtBQUNoRSw4REFBb0M7QUFDcEMscUNBQWlDO0FBQ2pDLG1EQUErQztBQUMvQywrQ0FBMkM7QUFDM0MseUNBQXFDO0FBQ3JDLHlDQUFxQztBQUVyQywrQ0FBcUQ7QUFFckQ7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBYSxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBRWpEOzs7Ozs7R0FNRztBQUNVLFFBQUEsYUFBYSxHQUFHLENBQUMsTUFBYyxFQUFFLEdBQUcsSUFBVyxFQUFVLEVBQUU7SUFDdEUsSUFBSSxNQUFNLEtBQUssd0JBQVksQ0FBQyxNQUFNLEVBQUU7UUFDbEMsT0FBTyxJQUFJLGVBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO0tBQzNCO1NBQU0sSUFBSSxNQUFNLEtBQUssd0JBQVksQ0FBQyxhQUFhLEVBQUU7UUFDaEQsT0FBTyxJQUFJLDZCQUFhLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQTtLQUNsQztTQUFNLElBQUksTUFBTSxLQUFLLHdCQUFZLENBQUMsV0FBVyxFQUFFO1FBQzlDLE9BQU8sSUFBSSx5QkFBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7S0FDaEM7U0FBTSxJQUFJLE1BQU0sS0FBSyx3QkFBWSxDQUFDLFFBQVEsRUFBRTtRQUMzQyxPQUFPLElBQUksbUJBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO0tBQzdCO1NBQU0sSUFBSSxNQUFNLEtBQUssd0JBQVksQ0FBQyxRQUFRLEVBQUU7UUFDM0MsT0FBTyxJQUFJLG1CQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQTtLQUM3QjtJQUNELDBCQUEwQjtJQUMx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QUM7Q0FFRjtBQTFDRCxnQkEwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktQVZNLVRyYW5zYWN0aW9uc1xuICovXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJ1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uLy4uL3V0aWxzL2JpbnRvb2xzJ1xuaW1wb3J0IHsgQVZNQ29uc3RhbnRzIH0gZnJvbSAnLi9jb25zdGFudHMnXG5pbXBvcnQgeyBTZWxlY3RDcmVkZW50aWFsQ2xhc3MgfSBmcm9tICcuL2NyZWRlbnRpYWxzJ1xuaW1wb3J0IHsgS2V5Q2hhaW4sIEtleVBhaXIgfSBmcm9tICcuL2tleWNoYWluJ1xuaW1wb3J0IHsgQ3JlZGVudGlhbCB9IGZyb20gJy4uLy4uL2NvbW1vbi9jcmVkZW50aWFscydcbmltcG9ydCB7IFN0YW5kYXJkVHgsIFN0YW5kYXJkVW5zaWduZWRUeCB9IGZyb20gJy4uLy4uL2NvbW1vbi90eCdcbmltcG9ydCBjcmVhdGVIYXNoIGZyb20gJ2NyZWF0ZS1oYXNoJ1xuaW1wb3J0IHsgQmFzZVR4IH0gZnJvbSAnLi9iYXNldHgnXG5pbXBvcnQgeyBDcmVhdGVBc3NldFR4IH0gZnJvbSAnLi9jcmVhdGVhc3NldHR4J1xuaW1wb3J0IHsgT3BlcmF0aW9uVHggfSBmcm9tICcuL29wZXJhdGlvbnR4J1xuaW1wb3J0IHsgSW1wb3J0VHggfSBmcm9tICcuL2ltcG9ydHR4J1xuaW1wb3J0IHsgRXhwb3J0VHggfSBmcm9tICcuL2V4cG9ydHR4J1xuaW1wb3J0IHsgU2VyaWFsaXplZEVuY29kaW5nIH0gZnJvbSAnLi4vLi4vdXRpbHMvc2VyaWFsaXphdGlvbidcbmltcG9ydCB7IFRyYW5zYWN0aW9uRXJyb3IgfSBmcm9tICcuLi8uLi91dGlscy9lcnJvcnMnXG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29sczogQmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpXG5cbi8qKlxuICogVGFrZXMgYSBidWZmZXIgcmVwcmVzZW50aW5nIHRoZSBvdXRwdXQgYW5kIHJldHVybnMgdGhlIHByb3BlciBbW0Jhc2VUeF1dIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB0eHR5cGUgVGhlIGlkIG9mIHRoZSB0cmFuc2FjdGlvbiB0eXBlXG4gKlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYW4gW1tCYXNlVHhdXS1leHRlbmRlZCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNvbnN0IFNlbGVjdFR4Q2xhc3MgPSAodHh0eXBlOiBudW1iZXIsIC4uLmFyZ3M6IGFueVtdKTogQmFzZVR4ID0+IHtcbiAgaWYgKHR4dHlwZSA9PT0gQVZNQ29uc3RhbnRzLkJBU0VUWCkge1xuICAgIHJldHVybiBuZXcgQmFzZVR4KC4uLmFyZ3MpXG4gIH0gZWxzZSBpZiAodHh0eXBlID09PSBBVk1Db25zdGFudHMuQ1JFQVRFQVNTRVRUWCkge1xuICAgIHJldHVybiBuZXcgQ3JlYXRlQXNzZXRUeCguLi5hcmdzKVxuICB9IGVsc2UgaWYgKHR4dHlwZSA9PT0gQVZNQ29uc3RhbnRzLk9QRVJBVElPTlRYKSB7XG4gICAgcmV0dXJuIG5ldyBPcGVyYXRpb25UeCguLi5hcmdzKVxuICB9IGVsc2UgaWYgKHR4dHlwZSA9PT0gQVZNQ29uc3RhbnRzLklNUE9SVFRYKSB7XG4gICAgcmV0dXJuIG5ldyBJbXBvcnRUeCguLi5hcmdzKVxuICB9IGVsc2UgaWYgKHR4dHlwZSA9PT0gQVZNQ29uc3RhbnRzLkVYUE9SVFRYKSB7XG4gICAgcmV0dXJuIG5ldyBFeHBvcnRUeCguLi5hcmdzKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHRocm93IG5ldyBUcmFuc2FjdGlvbkVycm9yKFwiRXJyb3IgLSBTZWxlY3RUeENsYXNzOiB1bmtub3duIHR4dHlwZVwiKVxufVxuXG5cbmV4cG9ydCBjbGFzcyBVbnNpZ25lZFR4IGV4dGVuZHMgU3RhbmRhcmRVbnNpZ25lZFR4PEtleVBhaXIsIEtleUNoYWluLCBCYXNlVHg+IHtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiVW5zaWduZWRUeFwiXG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkXG5cbiAgLy9zZXJpYWxpemUgaXMgaW5oZXJpdGVkXG5cbiAgZGVzZXJpYWxpemUoZmllbGRzOiBvYmplY3QsIGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKSB7XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZmllbGRzLCBlbmNvZGluZylcbiAgICB0aGlzLnRyYW5zYWN0aW9uID0gU2VsZWN0VHhDbGFzcyhmaWVsZHNbXCJ0cmFuc2FjdGlvblwiXVtcIl90eXBlSURcIl0pXG4gICAgdGhpcy50cmFuc2FjdGlvbi5kZXNlcmlhbGl6ZShmaWVsZHNbXCJ0cmFuc2FjdGlvblwiXSwgZW5jb2RpbmcpXG4gIH1cblxuICBnZXRUcmFuc2FjdGlvbigpOkJhc2VUeHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbiBhcyBCYXNlVHhcbiAgfVxuXG4gIGZyb21CdWZmZXIoYnl0ZXM6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICB0aGlzLmNvZGVjSUQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyAyKS5yZWFkVUludDE2QkUoMClcbiAgICBvZmZzZXQgKz0gMlxuICAgIGNvbnN0IHR4dHlwZTogbnVtYmVyID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCkucmVhZFVJbnQzMkJFKDApXG4gICAgb2Zmc2V0ICs9IDRcbiAgICB0aGlzLnRyYW5zYWN0aW9uID0gU2VsZWN0VHhDbGFzcyh0eHR5cGUpXG4gICAgcmV0dXJuIHRoaXMudHJhbnNhY3Rpb24uZnJvbUJ1ZmZlcihieXRlcywgb2Zmc2V0KVxuICB9XG4gIFxuICAvKipcbiAgICogU2lnbnMgdGhpcyBbW1Vuc2lnbmVkVHhdXSBhbmQgcmV0dXJucyBzaWduZWQgW1tTdGFuZGFyZFR4XV1cbiAgICpcbiAgICogQHBhcmFtIGtjIEFuIFtbS2V5Q2hhaW5dXSB1c2VkIGluIHNpZ25pbmdcbiAgICpcbiAgICogQHJldHVybnMgQSBzaWduZWQgW1tTdGFuZGFyZFR4XV1cbiAgICovXG4gIHNpZ24oa2M6IEtleUNoYWluKTogVHgge1xuICAgIGNvbnN0IHR4YnVmZiA9IHRoaXMudG9CdWZmZXIoKVxuICAgIGNvbnN0IG1zZzogQnVmZmVyID0gQnVmZmVyLmZyb20oY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKHR4YnVmZikuZGlnZXN0KCkpXG4gICAgY29uc3Qgc2lnczogQ3JlZGVudGlhbFtdID0gdGhpcy50cmFuc2FjdGlvbi5zaWduKG1zZywga2MpXG4gICAgcmV0dXJuIG5ldyBUeCh0aGlzLCBzaWdzKVxuICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIFR4IGV4dGVuZHMgU3RhbmRhcmRUeDxLZXlQYWlyLCBLZXlDaGFpbiwgVW5zaWduZWRUeD4ge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJUeFwiXG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkXG5cbiAgLy9zZXJpYWxpemUgaXMgaW5oZXJpdGVkXG5cbiAgZGVzZXJpYWxpemUoZmllbGRzOiBvYmplY3QsIGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKSB7XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZmllbGRzLCBlbmNvZGluZylcbiAgICB0aGlzLnVuc2lnbmVkVHggPSBuZXcgVW5zaWduZWRUeCgpXG4gICAgdGhpcy51bnNpZ25lZFR4LmRlc2VyaWFsaXplKGZpZWxkc1tcInVuc2lnbmVkVHhcIl0sIGVuY29kaW5nKVxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBbXVxuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBmaWVsZHNbXCJjcmVkZW50aWFsc1wiXS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY3JlZDogQ3JlZGVudGlhbCA9IFNlbGVjdENyZWRlbnRpYWxDbGFzcyhmaWVsZHNbXCJjcmVkZW50aWFsc1wiXVtpXVtcIl90eXBlSURcIl0pXG4gICAgICBjcmVkLmRlc2VyaWFsaXplKGZpZWxkc1tcImNyZWRlbnRpYWxzXCJdW2ldLCBlbmNvZGluZylcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMucHVzaChjcmVkKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUYWtlcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYW4gW1tUeF1dLCBwYXJzZXMgaXQsIHBvcHVsYXRlcyB0aGUgY2xhc3MsIGFuZCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIFR4IGluIGJ5dGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYnl0ZXMgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBjb250YWluaW5nIGEgcmF3IFtbVHhdXVxuICAgKiBAcGFyYW0gb2Zmc2V0IEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgc3RhcnRpbmcgcG9pbnQgb2YgdGhlIGJ5dGVzIHRvIGJlZ2luIHBhcnNpbmdcbiAgICpcbiAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGUgcmF3IFtbVHhdXVxuICAgKi9cbiAgZnJvbUJ1ZmZlcihieXRlczogQnVmZmVyLCBvZmZzZXQ6IG51bWJlciA9IDApOiBudW1iZXIge1xuICAgIHRoaXMudW5zaWduZWRUeCA9IG5ldyBVbnNpZ25lZFR4KClcbiAgICBvZmZzZXQgPSB0aGlzLnVuc2lnbmVkVHguZnJvbUJ1ZmZlcihieXRlcywgb2Zmc2V0KVxuICAgIGNvbnN0IG51bWNyZWRzOiBudW1iZXIgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KS5yZWFkVUludDMyQkUoMClcbiAgICBvZmZzZXQgKz0gNFxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBbXVxuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBudW1jcmVkczsgaSsrKSB7XG4gICAgICBjb25zdCBjcmVkaWQ6IG51bWJlciA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDQpLnJlYWRVSW50MzJCRSgwKVxuICAgICAgb2Zmc2V0ICs9IDRcbiAgICAgIGNvbnN0IGNyZWQ6IENyZWRlbnRpYWwgPSBTZWxlY3RDcmVkZW50aWFsQ2xhc3MoY3JlZGlkKVxuICAgICAgb2Zmc2V0ID0gY3JlZC5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpXG4gICAgICB0aGlzLmNyZWRlbnRpYWxzLnB1c2goY3JlZClcbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldFxuICB9XG5cbn1cbiJdfQ==","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-Transactions\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tx = exports.UnsignedTx = exports.SelectTxClass = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst evmtx_1 = require(\"../../common/evmtx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[EVMBaseTx]] instance.\n *\n * @param txTypeID The id of the transaction type\n *\n * @returns An instance of an [[EVMBaseTx]]-extended class.\n */\nexports.SelectTxClass = (txTypeID, ...args) => {\n    if (txTypeID === constants_1.EVMConstants.IMPORTTX) {\n        return new importtx_1.ImportTx(...args);\n    }\n    else if (txTypeID === constants_1.EVMConstants.EXPORTTX) {\n        return new exporttx_1.ExportTx(...args);\n    }\n    /* istanbul ignore next */\n    throw new Error(\"TransactionError - SelectTxClass: unknown txType\");\n};\nclass UnsignedTx extends evmtx_1.EVMStandardUnsignedTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UnsignedTx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.transaction = exports.SelectTxClass(fields[\"transaction\"][\"_typeID\"]);\n        this.transaction.deserialize(fields[\"transaction\"], encoding);\n    }\n    getTransaction() {\n        return this.transaction;\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.transaction = exports.SelectTxClass(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from(create_hash_1.default('sha256').update(txbuff).digest());\n        const sigs = this.transaction.sign(msg, kc);\n        return new Tx(this, sigs);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends evmtx_1.EVMStandardTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Tx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.unsignedTx = new UnsignedTx();\n        this.unsignedTx.deserialize(fields[\"unsignedTx\"], encoding);\n        this.credentials = [];\n        for (let i = 0; i < fields[\"credentials\"].length; i++) {\n            const cred = credentials_1.SelectCredentialClass(fields[\"credentials\"][i][\"_typeID\"]);\n            cred.deserialize(fields[\"credentials\"][i], encoding);\n            this.credentials.push(cred);\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it,\n     * populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n            offset += 4;\n            const cred = credentials_1.SelectCredentialClass(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-Credentials\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NFTCredential = exports.SECPCredential = exports.SelectCredentialClass = void 0;\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nexports.SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.AVMConstants.SECPCREDENTIAL || credid === constants_1.AVMConstants.SECPCREDENTIAL_CODECONE) {\n        return new SECPCredential(...args);\n    }\n    if (credid === constants_1.AVMConstants.NFTCREDENTIAL || credid === constants_1.AVMConstants.NFTCREDENTIAL_CODECONE) {\n        return new NFTCredential(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.CredIdError(\"Error - SelectCredentialClass: unknown credid\");\n};\nclass SECPCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPCredential\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.SECPCREDENTIAL : constants_1.AVMConstants.SECPCREDENTIAL_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPCredential.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.SECPCREDENTIAL : constants_1.AVMConstants.SECPCREDENTIAL_CODECONE;\n    }\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new SECPCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SECPCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = exports.SelectCredentialClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.SECPCredential = SECPCredential;\nclass NFTCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"NFTCredential\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.NFTCREDENTIAL : constants_1.AVMConstants.NFTCREDENTIAL_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTCredential.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.NFTCREDENTIAL : constants_1.AVMConstants.NFTCREDENTIAL_CODECONE;\n    }\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new NFTCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new NFTCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = exports.SelectCredentialClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.NFTCredential = NFTCredential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0vY3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgsMkNBQTBDO0FBQzFDLDBEQUFxRDtBQUNyRCwrQ0FBOEQ7QUFFOUQ7Ozs7OztHQU1HO0FBQ1UsUUFBQSxxQkFBcUIsR0FBRyxDQUFDLE1BQWMsRUFBRSxHQUFHLElBQVcsRUFBYyxFQUFFO0lBQ2xGLElBQUksTUFBTSxLQUFLLHdCQUFZLENBQUMsY0FBYyxJQUFJLE1BQU0sS0FBSyx3QkFBWSxDQUFDLHVCQUF1QixFQUFFO1FBQzdGLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQTtLQUNuQztJQUFDLElBQUksTUFBTSxLQUFLLHdCQUFZLENBQUMsYUFBYSxJQUFJLE1BQU0sS0FBSyx3QkFBWSxDQUFDLHNCQUFzQixFQUFFO1FBQzdGLE9BQU8sSUFBSSxhQUFhLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQTtLQUNsQztJQUNELDBCQUEwQjtJQUMxQixNQUFNLElBQUksb0JBQVcsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFBO0FBQ3hFLENBQUMsQ0FBQTtBQUVELE1BQWEsY0FBZSxTQUFRLHdCQUFVO0lBQTlDOztRQUNZLGNBQVMsR0FBRyxnQkFBZ0IsQ0FBQTtRQUM1QixhQUFRLEdBQUcsd0JBQVksQ0FBQyxXQUFXLENBQUE7UUFDbkMsWUFBTyxHQUFHLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsd0JBQVksQ0FBQyx1QkFBdUIsQ0FBQTtJQXFDOUcsQ0FBQztJQW5DQyw4Q0FBOEM7SUFFOUM7Ozs7TUFJRTtJQUNGLFVBQVUsQ0FBQyxPQUFlO1FBQ3hCLElBQUcsT0FBTyxLQUFLLENBQUMsSUFBSSxPQUFPLEtBQUssQ0FBQyxFQUFFO1lBQ2pDLDBCQUEwQjtZQUMxQixNQUFNLElBQUkscUJBQVksQ0FBQyxpRkFBaUYsQ0FBQyxDQUFBO1NBQzFHO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUE7UUFDdkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsd0JBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLHdCQUFZLENBQUMsdUJBQXVCLENBQUE7SUFDekcsQ0FBQztJQUVELGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDckIsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLE9BQU8sR0FBbUIsSUFBSSxjQUFjLEVBQUUsQ0FBQTtRQUNsRCxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQ25DLE9BQU8sT0FBZSxDQUFBO0lBQ3hCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxJQUFXO1FBQ25CLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQVMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQVUsRUFBRSxHQUFHLElBQVc7UUFDL0IsSUFBSSxTQUFTLEdBQWUsNkJBQXFCLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDOUQsT0FBTyxTQUFTLENBQUE7SUFDbEIsQ0FBQztDQUVGO0FBeENELHdDQXdDQztBQUVELE1BQWEsYUFBYyxTQUFRLHdCQUFVO0lBQTdDOztRQUNZLGNBQVMsR0FBRyxlQUFlLENBQUE7UUFDM0IsYUFBUSxHQUFHLHdCQUFZLENBQUMsV0FBVyxDQUFBO1FBQ25DLFlBQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsd0JBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLHdCQUFZLENBQUMsc0JBQXNCLENBQUE7SUFxQzVHLENBQUM7SUFuQ0MsOENBQThDO0lBRTlDOzs7O01BSUU7SUFDRixVQUFVLENBQUMsT0FBZTtRQUN4QixJQUFHLE9BQU8sS0FBSyxDQUFDLElBQUksT0FBTyxLQUFLLENBQUMsRUFBRTtZQUNqQywwQkFBMEI7WUFDMUIsTUFBTSxJQUFJLHFCQUFZLENBQUMsZ0ZBQWdGLENBQUMsQ0FBQTtTQUN6RztRQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFBO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLHdCQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyx3QkFBWSxDQUFDLHNCQUFzQixDQUFBO0lBQ3ZHLENBQUM7SUFFRCxlQUFlO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFBO0lBQ3JCLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxPQUFPLEdBQWtCLElBQUksYUFBYSxFQUFFLENBQUE7UUFDaEQsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtRQUNuQyxPQUFPLE9BQWUsQ0FBQTtJQUN4QixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBVztRQUNuQixPQUFPLElBQUksYUFBYSxDQUFDLEdBQUcsSUFBSSxDQUFTLENBQUE7SUFDM0MsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFVLEVBQUUsR0FBRyxJQUFXO1FBQy9CLElBQUksU0FBUyxHQUFlLDZCQUFxQixDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO1FBQzlELE9BQU8sU0FBUyxDQUFBO0lBQ2xCLENBQUM7Q0FFRjtBQXhDRCxzQ0F3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktQVZNLUNyZWRlbnRpYWxzXG4gKi9cblxuaW1wb3J0IHsgQVZNQ29uc3RhbnRzIH0gZnJvbSAnLi9jb25zdGFudHMnXG5pbXBvcnQgeyBDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NyZWRlbnRpYWxzJ1xuaW1wb3J0IHsgQ3JlZElkRXJyb3IsIENvZGVjSWRFcnJvciB9IGZyb20gJy4uLy4uL3V0aWxzL2Vycm9ycydcblxuLyoqXG4gKiBUYWtlcyBhIGJ1ZmZlciByZXByZXNlbnRpbmcgdGhlIGNyZWRlbnRpYWwgYW5kIHJldHVybnMgdGhlIHByb3BlciBbW0NyZWRlbnRpYWxdXSBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gY3JlZGlkIEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgY3JlZGVudGlhbCBJRCBwYXJzZWQgcHJpb3IgdG8gdGhlIGJ5dGVzIHBhc3NlZCBpblxuICpcbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIGFuIFtbQ3JlZGVudGlhbF1dLWV4dGVuZGVkIGNsYXNzLlxuICovXG5leHBvcnQgY29uc3QgU2VsZWN0Q3JlZGVudGlhbENsYXNzID0gKGNyZWRpZDogbnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6IENyZWRlbnRpYWwgPT4ge1xuICBpZiAoY3JlZGlkID09PSBBVk1Db25zdGFudHMuU0VDUENSRURFTlRJQUwgfHwgY3JlZGlkID09PSBBVk1Db25zdGFudHMuU0VDUENSRURFTlRJQUxfQ09ERUNPTkUpIHtcbiAgICByZXR1cm4gbmV3IFNFQ1BDcmVkZW50aWFsKC4uLmFyZ3MpXG4gIH0gaWYgKGNyZWRpZCA9PT0gQVZNQ29uc3RhbnRzLk5GVENSRURFTlRJQUwgfHwgY3JlZGlkID09PSBBVk1Db25zdGFudHMuTkZUQ1JFREVOVElBTF9DT0RFQ09ORSkge1xuICAgIHJldHVybiBuZXcgTkZUQ3JlZGVudGlhbCguLi5hcmdzKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHRocm93IG5ldyBDcmVkSWRFcnJvcihcIkVycm9yIC0gU2VsZWN0Q3JlZGVudGlhbENsYXNzOiB1bmtub3duIGNyZWRpZFwiKVxufVxuXG5leHBvcnQgY2xhc3MgU0VDUENyZWRlbnRpYWwgZXh0ZW5kcyBDcmVkZW50aWFsIHtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiU0VDUENyZWRlbnRpYWxcIlxuICBwcm90ZWN0ZWQgX2NvZGVjSUQgPSBBVk1Db25zdGFudHMuTEFURVNUQ09ERUNcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB0aGlzLl9jb2RlY0lEID09PSAwID8gQVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMIDogQVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMX0NPREVDT05FXG5cbiAgLy9zZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIGJvdGggYXJlIGluaGVyaXRlZFxuXG4gIC8qKlxuICAqIFNldCB0aGUgY29kZWNJRFxuICAqXG4gICogQHBhcmFtIGNvZGVjSUQgVGhlIGNvZGVjSUQgdG8gc2V0XG4gICovXG4gIHNldENvZGVjSUQoY29kZWNJRDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYoY29kZWNJRCAhPT0gMCAmJiBjb2RlY0lEICE9PSAxKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgdGhyb3cgbmV3IENvZGVjSWRFcnJvcihcIkVycm9yIC0gU0VDUENyZWRlbnRpYWwuc2V0Q29kZWNJRDogaW52YWxpZCBjb2RlY0lELiBWYWxpZCBjb2RlY0lEcyBhcmUgMCBhbmQgMS5cIilcbiAgICB9XG4gICAgdGhpcy5fY29kZWNJRCA9IGNvZGVjSURcbiAgICB0aGlzLl90eXBlSUQgPSB0aGlzLl9jb2RlY0lEID09PSAwID8gQVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMIDogQVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMX0NPREVDT05FXG4gIH1cblxuICBnZXRDcmVkZW50aWFsSUQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUlEXG4gIH1cblxuICBjbG9uZSgpOnRoaXMge1xuICAgIGxldCBuZXdiYXNlOiBTRUNQQ3JlZGVudGlhbCA9IG5ldyBTRUNQQ3JlZGVudGlhbCgpXG4gICAgbmV3YmFzZS5mcm9tQnVmZmVyKHRoaXMudG9CdWZmZXIoKSlcbiAgICByZXR1cm4gbmV3YmFzZSBhcyB0aGlzXG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczogYW55W10pOiB0aGlzIHtcbiAgICByZXR1cm4gbmV3IFNFQ1BDcmVkZW50aWFsKC4uLmFyZ3MpIGFzIHRoaXNcbiAgfVxuXG4gIHNlbGVjdChpZDogbnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6IENyZWRlbnRpYWwge1xuICAgIGxldCBuZXdiYXNldHg6IENyZWRlbnRpYWwgPSBTZWxlY3RDcmVkZW50aWFsQ2xhc3MoaWQsIC4uLmFyZ3MpXG4gICAgcmV0dXJuIG5ld2Jhc2V0eFxuICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIE5GVENyZWRlbnRpYWwgZXh0ZW5kcyBDcmVkZW50aWFsIHtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiTkZUQ3JlZGVudGlhbFwiXG4gIHByb3RlY3RlZCBfY29kZWNJRCA9IEFWTUNvbnN0YW50cy5MQVRFU1RDT0RFQ1xuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHRoaXMuX2NvZGVjSUQgPT09IDAgPyBBVk1Db25zdGFudHMuTkZUQ1JFREVOVElBTCA6IEFWTUNvbnN0YW50cy5ORlRDUkVERU5USUFMX0NPREVDT05FXG5cbiAgLy9zZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIGJvdGggYXJlIGluaGVyaXRlZFxuXG4gIC8qKlxuICAqIFNldCB0aGUgY29kZWNJRFxuICAqXG4gICogQHBhcmFtIGNvZGVjSUQgVGhlIGNvZGVjSUQgdG8gc2V0XG4gICovXG4gIHNldENvZGVjSUQoY29kZWNJRDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYoY29kZWNJRCAhPT0gMCAmJiBjb2RlY0lEICE9PSAxKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgdGhyb3cgbmV3IENvZGVjSWRFcnJvcihcIkVycm9yIC0gTkZUQ3JlZGVudGlhbC5zZXRDb2RlY0lEOiBpbnZhbGlkIGNvZGVjSUQuIFZhbGlkIGNvZGVjSURzIGFyZSAwIGFuZCAxLlwiKVxuICAgIH1cbiAgICB0aGlzLl9jb2RlY0lEID0gY29kZWNJRFxuICAgIHRoaXMuX3R5cGVJRCA9IHRoaXMuX2NvZGVjSUQgPT09IDAgPyBBVk1Db25zdGFudHMuTkZUQ1JFREVOVElBTCA6IEFWTUNvbnN0YW50cy5ORlRDUkVERU5USUFMX0NPREVDT05FXG4gIH1cblxuICBnZXRDcmVkZW50aWFsSUQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUlEXG4gIH1cblxuICBjbG9uZSgpOnRoaXMge1xuICAgIGxldCBuZXdiYXNlOiBORlRDcmVkZW50aWFsID0gbmV3IE5GVENyZWRlbnRpYWwoKVxuICAgIG5ld2Jhc2UuZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpXG4gICAgcmV0dXJuIG5ld2Jhc2UgYXMgdGhpc1xuICB9XG5cbiAgY3JlYXRlKC4uLmFyZ3M6IGFueVtdKTogdGhpcyB7XG4gICAgcmV0dXJuIG5ldyBORlRDcmVkZW50aWFsKC4uLmFyZ3MpIGFzIHRoaXNcbiAgfVxuXG4gIHNlbGVjdChpZDogbnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6IENyZWRlbnRpYWwge1xuICAgIGxldCBuZXdiYXNldHg6IENyZWRlbnRpYWwgPSBTZWxlY3RDcmVkZW50aWFsQ2xhc3MoaWQsIC4uLmFyZ3MpXG4gICAgcmV0dXJuIG5ld2Jhc2V0eFxuICB9XG5cbn1cbiJdfQ==","'use strict';\n\nconst encoders = exports;\n\nencoders.der = require('./der');\nencoders.pem = require('./pem');\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AVMAPI = void 0;\n/**\n* @packageDocumentation\n* @module API-AVM\n*/\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst utxos_1 = require(\"./utxos\");\nconst constants_1 = require(\"./constants\");\nconst keychain_1 = require(\"./keychain\");\nconst tx_1 = require(\"./tx\");\nconst payload_1 = require(\"../../utils/payload\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst constants_2 = require(\"../../utils/constants\");\nconst output_1 = require(\"../../common/output\");\nconst errors_1 = require(\"../../utils/errors\");\nconst utils_1 = require(\"../../utils\");\n/**\n* @ignore\n*/\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n* Class for interacting with a node endpoint that is using the AVM.\n*\n* @category RPCAPIs\n*\n* @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n*/\nclass AVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseurl Defaults to the string \"/ext/bc/X\" as the path to blockchain\"s baseurl\n     * @param blockchainID The Blockchain\"s ID. Defaults to an empty string: \"\"\n     */\n    constructor(core, baseurl = \"/ext/bc/X\", blockchainID = \"\") {\n        super(core, baseurl);\n        /**\n        * @ignore\n        */\n        this.keychain = new keychain_1.KeyChain(\"\", \"\");\n        this.blockchainID = \"\";\n        this.blockchainAlias = undefined;\n        this.DJTXAssetID = undefined;\n        this.txFee = undefined;\n        this.creationTxFee = undefined;\n        /**\n         * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n         *\n         * @returns The alias for the blockchainID\n         */\n        this.getBlockchainAlias = () => {\n            if (typeof this.blockchainAlias === \"undefined\") {\n                const netid = this.core.getNetworkID();\n                if (netid in constants_2.Defaults.network && this.blockchainID in constants_2.Defaults.network[netid]) {\n                    this.blockchainAlias = constants_2.Defaults.network[netid][this.blockchainID].alias;\n                    return this.blockchainAlias;\n                }\n                else {\n                    /* istanbul ignore next */\n                    return undefined;\n                }\n            }\n            return this.blockchainAlias;\n        };\n        /**\n         * Sets the alias for the blockchainID.\n         *\n         * @param alias The alias for the blockchainID.\n         *\n         */\n        this.setBlockchainAlias = (alias) => {\n            this.blockchainAlias = alias;\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n         * Gets the blockchainID and returns it.\n         *\n         * @returns The blockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Refresh blockchainID, and if a blockchainID is passed in, use that.\n         *\n         * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n         *\n         * @returns The blockchainID\n         */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netid = this.core.getNetworkID();\n            if (typeof blockchainID === \"undefined\" && typeof constants_2.Defaults.network[netid] !== \"undefined\") {\n                this.blockchainID = constants_2.Defaults.network[netid].X.blockchainID; //default to X-Chain\n                return true;\n            }\n            if (typeof blockchainID === \"string\") {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n         */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_1.AVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n            const type = \"bech32\";\n            return serialization.bufferToType(address, type, this.core.getHRP(), chainid);\n        };\n        /**\n         * Fetches the DJTX AssetID and returns it in a Promise.\n         *\n         * @param refresh This function caches the response. Refresh = true will bust the cache.\n         *\n         * @returns The the provided string representing the DJTX AssetID\n         */\n        this.getDJTXAssetID = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.DJTXAssetID === \"undefined\" || refresh) {\n                const asset = yield this.getAssetDescription(constants_2.PrimaryAssetAlias);\n                this.DJTXAssetID = asset.assetID;\n            }\n            return this.DJTXAssetID;\n        });\n        /**\n         * Overrides the defaults and sets the cache to a specific DJTX AssetID\n         *\n         * @param djtxAssetID A cb58 string or Buffer representing the DJTX AssetID\n         *\n         * @returns The the provided string representing the DJTX AssetID\n         */\n        this.setDJTXAssetID = (djtxAssetID) => {\n            if (typeof djtxAssetID === \"string\") {\n                djtxAssetID = bintools.cb58Decode(djtxAssetID);\n            }\n            this.DJTXAssetID = djtxAssetID;\n        };\n        /**\n         * Gets the default tx fee for this chain.\n         *\n         * @returns The default tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultTxFee = () => {\n            return this.core.getNetworkID() in constants_2.Defaults.network ? new bn_js_1.default(constants_2.Defaults.network[this.core.getNetworkID()][\"X\"][\"txFee\"]) : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the tx fee for this chain.\n         *\n         * @returns The tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getTxFee = () => {\n            if (typeof this.txFee === \"undefined\") {\n                this.txFee = this.getDefaultTxFee();\n            }\n            return this.txFee;\n        };\n        /**\n         * Sets the tx fee for this chain.\n         *\n         * @param fee The tx fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setTxFee = (fee) => {\n            this.txFee = fee;\n        };\n        /**\n         * Gets the default creation fee for this chain.\n         *\n         * @returns The default creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultCreationTxFee = () => {\n            return this.core.getNetworkID() in constants_2.Defaults.network ? new bn_js_1.default(constants_2.Defaults.network[this.core.getNetworkID()][\"X\"][\"creationTxFee\"]) : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the creation fee for this chain.\n         *\n         * @returns The creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getCreationTxFee = () => {\n            if (typeof this.creationTxFee === \"undefined\") {\n                this.creationTxFee = this.getDefaultCreationTxFee();\n            }\n            return this.creationTxFee;\n        };\n        /**\n         * Sets the creation fee for this chain.\n         *\n         * @param fee The creation fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setCreationTxFee = (fee) => {\n            this.creationTxFee = fee;\n        };\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[KeyChain]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        /**\n         * @ignore\n         */\n        this.newKeyChain = () => {\n            // warning, overwrites the old keychain\n            const alias = this.getBlockchainAlias();\n            if (alias) {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n            }\n            else {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n            }\n            return this.keychain;\n        };\n        /**\n         * Helper function which determines if a tx is a goose egg transaction.\n         *\n         * @param utx An UnsignedTx\n         *\n         * @returns boolean true if passes goose egg test and false if fails.\n         *\n         * @remarks\n         * A \"Goose Egg Transaction\" is when the fee far exceeds a reasonable amount\n         */\n        this.checkGooseEgg = (utx, outTotal = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            const djtxAssetID = yield this.getDJTXAssetID();\n            let outputTotal = outTotal.gt(new bn_js_1.default(0)) ? outTotal : utx.getOutputTotal(djtxAssetID);\n            const fee = utx.getBurn(djtxAssetID);\n            if (fee.lte(constants_2.ONEDJTX.mul(new bn_js_1.default(10))) || fee.lte(outputTotal)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        /**\n           * Gets the balance of a particular asset on a blockchain.\n           *\n           * @param address The address to pull the asset balance from\n           * @param assetID The assetID to pull the balance from\n           *\n           * @returns Promise with the balance of the assetID as a {@link https://github.com/indutny/bn.js/|BN} on the provided address for the blockchain.\n           */\n        this.getBalance = (address, assetID) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - AVMAPI.getBalance: Invalid address format\");\n            }\n            const params = {\n                address,\n                assetID\n            };\n            const response = yield this.callMethod(\"avm.getBalance\", params);\n            return response.data.result;\n        });\n        /**\n           * Creates an address (and associated private keys) on a user on a blockchain.\n           *\n           * @param username Name of the user to create the address under\n           * @param password Password to unlock the user and encrypt the private key\n           *\n           * @returns Promise for a string representing the address created by the vm.\n           */\n        this.createAddress = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"avm.createAddress\", params);\n            return response.data.result.address;\n        });\n        /**\n         * Create a new fixed-cap, fungible asset. A quantity of it is created at initialization and there no more is ever created.\n         *\n         * @param username The user paying the transaction fee (in $DJTX) for asset creation\n         * @param password The password for the user paying the transaction fee (in $DJTX) for asset creation\n         * @param name The human-readable name for the asset\n         * @param symbol Optional. The shorthand symbol for the asset. Between 0 and 4 characters\n         * @param denomination Optional. Determines how balances of this asset are displayed by user interfaces. Default is 0\n         * @param initialHolders An array of objects containing the field \"address\" and \"amount\" to establish the genesis values for the new asset\n         *\n         * ```js\n         * Example initialHolders:\n         * [\n         *     {\n         *         \"address\": \"X-djtx1kj06lhgx84h39snsljcey3tpc046ze68mek3g5\",\n         *         \"amount\": 10000\n         *     },\n         *     {\n         *         \"address\": \"X-djtx1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\",\n         *         \"amount\": 50000\n         *     }\n         * ]\n         * ```\n         *\n         * @returns Returns a Promise<string> containing the base 58 string representation of the ID of the newly created asset.\n         */\n        this.createFixedCapAsset = (username, password, name, symbol, denomination, initialHolders) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                name,\n                symbol,\n                denomination,\n                username,\n                password,\n                initialHolders\n            };\n            const response = yield this.callMethod(\"avm.createFixedCapAsset\", params);\n            return response.data.result.assetID;\n        });\n        /**\n           * Create a new variable-cap, fungible asset. No units of the asset exist at initialization. Minters can mint units of this asset using createMintTx, signMintTx and sendMintTx.\n           *\n           * @param username The user paying the transaction fee (in $DJTX) for asset creation\n           * @param password The password for the user paying the transaction fee (in $DJTX) for asset creation\n           * @param name The human-readable name for the asset\n           * @param symbol Optional. The shorthand symbol for the asset -- between 0 and 4 characters\n           * @param denomination Optional. Determines how balances of this asset are displayed by user interfaces. Default is 0\n           * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction\n           *\n           * ```js\n           * Example minterSets:\n           * [\n           *      {\n           *          \"minters\":[\n           *              \"X-djtx1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\"\n           *          ],\n           *          \"threshold\": 1\n           *      },\n           *      {\n           *          \"minters\": [\n           *              \"X-djtx1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\",\n           *              \"X-djtx1kj06lhgx84h39snsljcey3tpc046ze68mek3g5\",\n           *              \"X-djtx1yell3e4nln0m39cfpdhgqprsd87jkh4qnakklx\"\n           *          ],\n           *          \"threshold\": 2\n           *      }\n           * ]\n           * ```\n           *\n           * @returns Returns a Promise<string> containing the base 58 string representation of the ID of the newly created asset.\n           */\n        this.createVariableCapAsset = (username, password, name, symbol, denomination, minterSets) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                name,\n                symbol,\n                denomination,\n                username,\n                password,\n                minterSets\n            };\n            const response = yield this.callMethod(\"avm.createVariableCapAsset\", params);\n            return response.data.result.assetID;\n        });\n        /**\n           * Create an unsigned transaction to mint more of an asset.\n           *\n           * @param amount The units of the asset to mint\n           * @param assetID The ID of the asset to mint\n           * @param to The address to assign the units of the minted asset\n           * @param minters Addresses of the minters responsible for signing the transaction\n           *\n           * @returns Returns a Promise<string> containing the base 58 string representation of the unsigned transaction.\n           */\n        this.mint = (username, password, amount, assetID, to, minters) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            if (typeof amount === \"number\") {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            const params = {\n                username: username,\n                password: password,\n                amount: amnt.toString(10),\n                assetID: asset,\n                to,\n                minters\n            };\n            const response = yield this.callMethod(\"avm.mint\", params);\n            return response.data.result.txID;\n        });\n        /**\n           * Exports the private key for an address.\n           *\n           * @param username The name of the user with the private key\n           * @param password The password used to decrypt the private key\n           * @param address The address whose private key should be exported\n           *\n           * @returns Promise with the decrypted private key as store in the database\n           */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - AVMAPI.exportKey: Invalid address format\");\n            }\n            const params = {\n                username,\n                password,\n                address\n            };\n            const response = yield this.callMethod(\"avm.exportKey\", params);\n            return response.data.result.privateKey;\n        });\n        /**\n           * Imports a private key into the node's keystore under an user and for a blockchain.\n           *\n           * @param username The name of the user to store the private key\n           * @param password The password that unlocks the user\n           * @param privateKey A string representing the private key in the vm's format\n           *\n           * @returns The address for the imported private key.\n           */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey\n            };\n            const response = yield this.callMethod(\"avm.importKey\", params);\n            return response.data.result.address;\n        });\n        /**\n          * Send ANT (Avalanche Native Token) assets including DJTX from the X-Chain to an account on the P-Chain or C-Chain.\n          *\n          * After calling this method, you must call the P-Chain's `importDJTX` or the C-Chain’s `import` method to complete the transfer.\n          *\n          * @param username The Keystore user that controls the P-Chain or C-Chain account specified in `to`\n          * @param password The password of the Keystore user\n          * @param to The account on the P-Chain or C-Chain to send the asset to.\n          * @param amount Amount of asset to export as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param assetID The asset id which is being sent\n          *\n          * @returns String representing the transaction id\n          */\n        this.export = (username, password, to, amount, assetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                amount: amount.toString(10),\n                username,\n                password,\n                assetID\n            };\n            const response = yield this.callMethod(\"avm.export\", params);\n            return response.data.result.txID;\n        });\n        /**\n           * Send DJTX from the X-Chain to an account on the P-Chain or C-Chain.\n           *\n           * After calling this method, you must call the P-Chain’s or C-Chain's importDJTX method to complete the transfer.\n           *\n           * @param username The Keystore user that controls the P-Chain account specified in `to`\n           * @param password The password of the Keystore user\n           * @param to The account on the P-Chain or C-Chain to send the DJTX to.\n           * @param amount Amount of DJTX to export as a {@link https://github.com/indutny/bn.js/|BN}\n           *\n           * @returns String representing the transaction id\n           */\n        this.exportDJTX = (username, password, to, amount) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                amount: amount.toString(10),\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"avm.exportDJTX\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Send ANT (Avalanche Native Token) assets including DJTX from an account on the P-Chain or C-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the asset is sent from and which pays\n         * the transaction fee.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address of the account the asset is sent to.\n         * @param sourceChain The chainID where the funds are coming from. Ex: \"C\"\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.import = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"avm.import\", params);\n            return response.data.result.txID;\n        });\n        /**\n           * Finalize a transfer of DJTX from the P-Chain to the X-Chain.\n           *\n           * Before this method is called, you must call the P-Chain’s `exportDJTX` method to initiate the transfer.\n           * @param username The Keystore user that controls the address specified in `to`\n           * @param password The password of the Keystore user\n           * @param to The address the DJTX is sent to. This must be the same as the to argument in the corresponding call to the P-Chain’s exportDJTX, except that the prepended X- should be included in this argument\n           * @param sourceChain Chain the funds are coming from.\n           *\n           * @returns String representing the transaction id\n           */\n        this.importDJTX = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"avm.importDJTX\", params);\n            return response.data.result.txID;\n        });\n        /**\n           * Lists all the addresses under a user.\n           *\n           * @param username The user to list addresses\n           * @param password The password of the user to list the addresses\n           *\n           * @returns Promise of an array of address strings in the format specified by the blockchain.\n           */\n        this.listAddresses = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"avm.listAddresses\", params);\n            return response.data.result.addresses;\n        });\n        /**\n           * Retrieves all assets for an address on a server and their associated balances.\n           *\n           * @param address The address to get a list of assets\n           *\n           * @returns Promise of an object mapping assetID strings with {@link https://github.com/indutny/bn.js/|BN} balance for the address on the blockchain.\n           */\n        this.getAllBalances = (address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - AVMAPI.getAllBalances: Invalid address format\");\n            }\n            const params = {\n                address\n            };\n            const response = yield this.callMethod(\"avm.getAllBalances\", params);\n            return response.data.result.balances;\n        });\n        /**\n        * Retrieves an assets name and symbol.\n        *\n        * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an b58 serialized string for the AssetID or its alias.\n        *\n        * @returns Returns a Promise<object> with keys \"name\" and \"symbol\".\n        */\n        this.getAssetDescription = (assetID) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            const params = {\n                assetID: asset\n            };\n            const response = yield this.callMethod(\"avm.getAssetDescription\", params);\n            return {\n                name: response.data.result.name,\n                symbol: response.data.result.symbol,\n                assetID: bintools.cb58Decode(response.data.result.assetID),\n                denomination: parseInt(response.data.result.denomination, 10)\n            };\n        });\n        /**\n         * Returns the treansaction data of a provided transaction ID by calling the node's `getTx` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the bytes retrieved from the node\n         */\n        this.getTx = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid\n            };\n            const response = yield this.callMethod(\"avm.getTx\", params);\n            return response.data.result.tx;\n        });\n        /**\n         * Returns the status of a provided transaction ID by calling the node's `getTxStatus` method.\n         *\n         * @param txid The string representation of the transaction ID\n         *\n         * @returns Returns a Promise<string> containing the status retrieved from the node\n         */\n        this.getTxStatus = (txid) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid\n            };\n            const response = yield this.callMethod(\"avm.getTxStatus\", params);\n            return response.data.result.status;\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param sourceChain A string for the chain to look for the UTXO's. Default is to use this chain, but if exported UTXOs exist from other chains, this can used to pull them instead.\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         * @param persistOpts Options available to persist these UTXOs in local storage\n         *\n         * @remarks\n         * persistOpts is optional and must be of type [[PersistanceOptions]]\n         *\n         */\n        this.getUTXOs = (addresses, sourceChain = undefined, limit = 0, startIndex = undefined, persistOpts = undefined) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof addresses === \"string\") {\n                addresses = [addresses];\n            }\n            const params = {\n                addresses: addresses,\n                limit\n            };\n            if (typeof startIndex !== \"undefined\" && startIndex) {\n                params.startIndex = startIndex;\n            }\n            if (typeof sourceChain !== \"undefined\") {\n                params.sourceChain = sourceChain;\n            }\n            const response = yield this.callMethod(\"avm.getUTXOs\", params);\n            const utxos = new utxos_1.UTXOSet();\n            let data = response.data.result.utxos;\n            if (persistOpts && typeof persistOpts === \"object\") {\n                if (this.db.has(persistOpts.getName())) {\n                    const selfArray = this.db.get(persistOpts.getName());\n                    if (Array.isArray(selfArray)) {\n                        utxos.addArray(data);\n                        const self = new utxos_1.UTXOSet();\n                        self.addArray(selfArray);\n                        self.mergeByRule(utxos, persistOpts.getMergeRule());\n                        data = self.getAllUTXOStrings();\n                    }\n                }\n                this.db.set(persistOpts.getName(), data, persistOpts.getOverwrite());\n            }\n            utxos.addArray(data, false);\n            response.data.result.utxos = utxos;\n            return response.data.result;\n        });\n        /**\n         * Helper function which creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount of AssetID to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID The assetID of the value being sent\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[BaseTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildBaseTx = (utxoset, amount, assetID = undefined, toAddresses, fromAddresses, changeAddresses, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildBaseTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildBaseTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildBaseTx\").map((a) => bintools.stringToAddress(a));\n            if (typeof assetID === \"string\") {\n                assetID = bintools.cb58Decode(assetID);\n            }\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const builtUnsignedTx = utxoset.buildBaseTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, assetID, to, from, change, this.getTxFee(), yield this.getDJTXAssetID(), memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildBaseTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned NFT Transfer. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset  A set of UTXOs that the transaction is built on\n         * @param toAddresses The addresses to send the NFT\n         * @param fromAddresses The addresses being used to send the NFT from the utxoID provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the nfts this transaction is sending\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[NFTTransferTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildNFTTransferTx = (utxoset, toAddresses, fromAddresses, changeAddresses, utxoid, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildNFTTransferTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildNFTTransferTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTAssetTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            let utxoidArray = [];\n            if (typeof utxoid === \"string\") {\n                utxoidArray = [utxoid];\n            }\n            else if (Array.isArray(utxoid)) {\n                utxoidArray = utxoid;\n            }\n            const builtUnsignedTx = utxoset.buildNFTTransferTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, utxoidArray, this.getTxFee(), djtxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildNFTTransferTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset  A set of UTXOs that the transaction is built on\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, ownerAddresses, sourceChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildImportTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildImportTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildImportTx\").map((a) => bintools.stringToAddress(a));\n            let srcChain = undefined;\n            if (typeof sourceChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildImportTx: Source ChainID is undefined.\");\n            }\n            else if (typeof sourceChain === \"string\") {\n                srcChain = sourceChain;\n                sourceChain = bintools.cb58Decode(sourceChain);\n            }\n            else if (!(sourceChain instanceof buffer_1.Buffer)) {\n                srcChain = bintools.cb58Encode(sourceChain);\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildImportTx: Invalid destinationChain type: \" + (typeof sourceChain));\n            }\n            const atomicUTXOs = (yield this.getUTXOs(ownerAddresses, srcChain, 0, undefined)).utxos;\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const atomics = atomicUTXOs.getAllUTXOs();\n            if (atomics.length === 0) {\n                throw new errors_1.NoAtomicUTXOsError(\"Error - AVMAPI.buildImportTx: No atomic UTXOs to import from \" + srcChain + \" using addresses: \" + ownerAddresses.join(\", \"));\n            }\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const builtUnsignedTx = utxoset.buildImportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, atomics, sourceChain, this.getTxFee(), djtxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildImportTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param destinationChain The chainid for where the assets will be sent.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         * @param assetID Optional. The assetID of the asset to send. Defaults to DJTX assetID.\n         * Regardless of the asset which you\"re exporting, all fees are paid in DJTX.\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (utxoset, amount, destinationChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1, assetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let prefixes = {};\n            toAddresses.map((a) => {\n                prefixes[a.split(\"-\")[0]] = true;\n            });\n            if (Object.keys(prefixes).length !== 1) {\n                throw new errors_1.AddressError(\"Error - AVMAPI.buildExportTx: To addresses must have the same chainID prefix.\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildExportTx: Destination ChainID is undefined.\");\n            }\n            else if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(destinationChain); //\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildExportTx: Invalid destinationChain type: \" + (typeof destinationChain));\n            }\n            if (destinationChain.length !== 32) {\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildExportTx: Destination ChainID must be 32 bytes in length.\");\n            }\n            let to = [];\n            toAddresses.map((a) => {\n                to.push(bintools.stringToAddress(a));\n            });\n            const from = this._cleanAddressArray(fromAddresses, \"buildExportTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildExportTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            if (typeof assetID === \"undefined\") {\n                assetID = bintools.cb58Encode(djtxAssetID);\n            }\n            const builtUnsignedTx = utxoset.buildExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, bintools.cb58Decode(assetID), to, from, change, destinationChain, this.getTxFee(), djtxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildExportTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param initialState The [[InitialStates]] that represent the intial state of a created asset\n         * @param name String for the descriptive name of the asset\n         * @param symbol String for the ticker symbol of the asset\n         * @param denomination Number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 DJTX = 10^9 $nDJTX\n         * @param mintOutputs Optional. Array of [[SECPMintOutput]]s to be included in the transaction. These outputs can be spent to mint more tokens.\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[CreateAssetTx]].\n         *\n         */\n        this.buildCreateAssetTx = (utxoset, fromAddresses, changeAddresses, initialStates, name, symbol, denomination, mintOutputs = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            let from = this._cleanAddressArray(fromAddresses, \"buildCreateAssetTx\").map((a) => bintools.stringToAddress(a));\n            let change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTAssetTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            /* istanbul ignore next */\n            if (symbol.length > constants_1.AVMConstants.SYMBOLMAXLEN) {\n                /* istanbul ignore next */\n                throw new errors_1.SymbolError(\"Error - AVMAPI.buildCreateAssetTx: Symbols may not exceed length of \" + constants_1.AVMConstants.SYMBOLMAXLEN);\n            }\n            /* istanbul ignore next */\n            if (name.length > constants_1.AVMConstants.ASSETNAMELEN) {\n                /* istanbul ignore next */\n                throw new errors_1.NameError(\"Error - AVMAPI.buildCreateAssetTx: Names may not exceed length of \" + constants_1.AVMConstants.ASSETNAMELEN);\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateAssetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, change, initialStates, name, symbol, denomination, mintOutputs, this.getCreationTxFee(), djtxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx, this.getCreationTxFee()))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildCreateAssetTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        this.buildSECPMintTx = (utxoset, mintOwner, transferOwner, fromAddresses, changeAddresses, mintUTXOID, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            let from = this._cleanAddressArray(fromAddresses, \"buildSECPMintTx\").map((a) => bintools.stringToAddress(a));\n            let change = this._cleanAddressArray(changeAddresses, \"buildSECPMintTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            let djtxAssetID = yield this.getDJTXAssetID();\n            const builtUnsignedTx = utxoset.buildSECPMintTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), mintOwner, transferOwner, from, change, mintUTXOID, this.getTxFee(), djtxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildSECPMintTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n        * Creates an unsigned transaction. For more granular control, you may create your own\n        * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n        *\n        * @param utxoset A set of UTXOs that the transaction is built on\n        * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n        * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n        * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction\n        * @param name String for the descriptive name of the asset\n        * @param symbol String for the ticker symbol of the asset\n        * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting mint output\n        *\n        * ```js\n        * Example minterSets:\n        * [\n        *      {\n        *          \"minters\":[\n        *              \"X-djtx1ghstjukrtw8935lryqtnh643xe9a94u3tc75c7\"\n        *          ],\n        *          \"threshold\": 1\n        *      },\n        *      {\n        *          \"minters\": [\n        *              \"X-djtx1yell3e4nln0m39cfpdhgqprsd87jkh4qnakklx\",\n        *              \"X-djtx1k4nr26c80jaquzm9369j5a4shmwcjn0vmemcjz\",\n        *              \"X-djtx1ztkzsrjnkn0cek5ryvhqswdtcg23nhge3nnr5e\"\n        *          ],\n        *          \"threshold\": 2\n        *      }\n        * ]\n        * ```\n        *\n        * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[CreateAssetTx]].\n        *\n        */\n        this.buildCreateNFTAssetTx = (utxoset, fromAddresses, changeAddresses, minterSets, name, symbol, memo = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            let from = this._cleanAddressArray(fromAddresses, \"buildCreateNFTAssetTx\").map(a => bintools.stringToAddress(a));\n            let change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTAssetTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (name.length > constants_1.AVMConstants.ASSETNAMELEN) {\n                /* istanbul ignore next */\n                throw new errors_1.NameError(\"Error - AVMAPI.buildCreateNFTAssetTx: Names may not exceed length of \" + constants_1.AVMConstants.ASSETNAMELEN);\n            }\n            if (symbol.length > constants_1.AVMConstants.SYMBOLMAXLEN) {\n                /* istanbul ignore next */\n                throw new errors_1.SymbolError(\"Error - AVMAPI.buildCreateNFTAssetTx: Symbols may not exceed length of \" + constants_1.AVMConstants.SYMBOLMAXLEN);\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateNFTAssetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, change, minterSets, name, symbol, this.getCreationTxFee(), djtxAssetID, memo, asOf, locktime);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx, this.getCreationTxFee()))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildCreateNFTAssetTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n        * Creates an unsigned transaction. For more granular control, you may create your own\n        * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n        *\n        * @param utxoset  A set of UTXOs that the transaction is built on\n        * @param owners Either a single or an array of [[OutputOwners]] to send the nft output\n        * @param fromAddresses The addresses being used to send the NFT from the utxoID provided\n        * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n        * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the nft mint output this transaction is sending\n        * @param groupID Optional. The group this NFT is issued to.\n        * @param payload Optional. Data for NFT Payload as either a [[PayloadBase]] or a {@link https://github.com/feross/buffer|Buffer}\n        * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        *\n        * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[OperationTx]].\n        *\n        */\n        this.buildCreateNFTMintTx = (utxoset, owners, fromAddresses, changeAddresses, utxoid, groupID = 0, payload = undefined, memo = undefined, asOf = helperfunctions_1.UnixNow()) => __awaiter(this, void 0, void 0, function* () {\n            let from = this._cleanAddressArray(fromAddresses, \"buildCreateNFTMintTx\").map(a => bintools.stringToAddress(a));\n            let change = this._cleanAddressArray(changeAddresses, \"buildCreateNFTMintTx\").map(a => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (payload instanceof payload_1.PayloadBase) {\n                payload = payload.getPayload();\n            }\n            if (typeof utxoid === \"string\") {\n                utxoid = [utxoid];\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            if (owners instanceof output_1.OutputOwners) {\n                owners = [owners];\n            }\n            const builtUnsignedTx = utxoset.buildCreateNFTMintTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), owners, from, change, utxoid, groupID, payload, this.getTxFee(), djtxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildCreateNFTMintTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which takes an unsigned transaction and signs it, returning the resulting [[Tx]].\n        *\n        * @param utx The unsigned transaction of type [[UnsignedTx]]\n        *\n        * @returns A signed transaction of type [[Tx]]\n        */\n        this.signTx = (utx) => utx.sign(this.keychain);\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise<string> representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = \"\";\n            if (typeof tx === \"string\") {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toString();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toString();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new errors_1.TransactionError(\"Error - AVMAPI.issueTx: provided tx is not expected type of string, Buffer, or Tx\");\n            }\n            const params = {\n                tx: Transaction.toString(),\n            };\n            const response = yield this.callMethod(\"avm.issueTx\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Sends an amount of assetID to the specified address from a list of owned of addresses.\n         *\n         * @param username The user that owns the private keys associated with the `from` addresses\n         * @param password The password unlocking the user\n         * @param assetID The assetID of the asset to send\n         * @param amount The amount of the asset to be sent\n         * @param to The address of the recipient\n         * @param from Optional. An array of addresses managed by the node's keystore for this blockchain which will fund this transaction\n         * @param changeAddr Optional. An address to send the change\n         * @param memo Optional. CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         *\n         * @returns Promise for the string representing the transaction's ID.\n         */\n        this.send = (username, password, assetID, amount, to, from = undefined, changeAddr = undefined, memo = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            if (typeof this.parseAddress(to) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - AVMAPI.send: Invalid address format\");\n            }\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            if (typeof amount === \"number\") {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            const params = {\n                username: username,\n                password: password,\n                assetID: asset,\n                amount: amnt.toString(10),\n                to: to\n            };\n            from = this._cleanAddressArray(from, \"send\");\n            if (typeof from !== \"undefined\") {\n                params[\"from\"] = from;\n            }\n            if (typeof changeAddr !== \"undefined\") {\n                if (typeof this.parseAddress(changeAddr) === \"undefined\") {\n                    /* istanbul ignore next */\n                    throw new errors_1.AddressError(\"Error - AVMAPI.send: Invalid address format\");\n                }\n                params[\"changeAddr\"] = changeAddr;\n            }\n            if (typeof memo !== \"undefined\") {\n                if (typeof memo !== \"string\") {\n                    params[\"memo\"] = bintools.cb58Encode(memo);\n                }\n                else {\n                    params[\"memo\"] = memo;\n                }\n            }\n            const response = yield this.callMethod(\"avm.send\", params);\n            return response.data.result;\n        });\n        /**\n         * Sends an amount of assetID to an array of specified addresses from a list of owned of addresses.\n         *\n         * @param username The user that owns the private keys associated with the `from` addresses\n         * @param password The password unlocking the user\n         * @param sendOutputs The array of SendOutputs. A SendOutput is an object literal which contains an assetID, amount, and to.\n         * @param from Optional. An array of addresses managed by the node's keystore for this blockchain which will fund this transaction\n         * @param changeAddr Optional. An address to send the change\n         * @param memo Optional. CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         *\n         * @returns Promise for the string representing the transaction\"s ID.\n         */\n        this.sendMultiple = (username, password, sendOutputs, from = undefined, changeAddr = undefined, memo = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            let sOutputs = [];\n            sendOutputs.forEach((output) => {\n                if (typeof this.parseAddress(output.to) === \"undefined\") {\n                    /* istanbul ignore next */\n                    throw new errors_1.AddressError(\"Error - AVMAPI.sendMultiple: Invalid address format\");\n                }\n                if (typeof output.assetID !== \"string\") {\n                    asset = bintools.cb58Encode(output.assetID);\n                }\n                else {\n                    asset = output.assetID;\n                }\n                if (typeof output.amount === \"number\") {\n                    amnt = new bn_js_1.default(output.amount);\n                }\n                else {\n                    amnt = output.amount;\n                }\n                sOutputs.push({ to: output.to, assetID: asset, amount: amnt.toString(10) });\n            });\n            const params = {\n                username: username,\n                password: password,\n                outputs: sOutputs,\n            };\n            from = this._cleanAddressArray(from, \"send\");\n            if (typeof from !== \"undefined\") {\n                params[\"from\"] = from;\n            }\n            if (typeof changeAddr !== \"undefined\") {\n                if (typeof this.parseAddress(changeAddr) === \"undefined\") {\n                    /* istanbul ignore next */\n                    throw new errors_1.AddressError(\"Error - AVMAPI.send: Invalid address format\");\n                }\n                params[\"changeAddr\"] = changeAddr;\n            }\n            if (typeof memo !== \"undefined\") {\n                if (typeof memo !== \"string\") {\n                    params[\"memo\"] = bintools.cb58Encode(memo);\n                }\n                else {\n                    params[\"memo\"] = memo;\n                }\n            }\n            const response = yield this.callMethod(\"avm.sendMultiple\", params);\n            return response.data.result;\n        });\n        /**\n         * Given a JSON representation of this Virtual Machine’s genesis state, create the byte representation of that state.\n         *\n         * @param genesisData The blockchain\"s genesis data object\n         *\n         * @returns Promise of a string of bytes\n         */\n        this.buildGenesis = (genesisData) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                genesisData,\n            };\n            const response = yield this.callMethod(\"avm.buildGenesis\", params);\n            return response.data.result.bytes;\n        });\n        this.blockchainID = blockchainID;\n        const netid = core.getNetworkID();\n        if (netid in constants_2.Defaults.network && blockchainID in constants_2.Defaults.network[netid]) {\n            const { alias } = constants_2.Defaults.network[netid][blockchainID];\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[i] === \"string\") {\n                    if (typeof this.parseAddress(addresses[i]) === \"undefined\") {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - AVMAPI.${caller}: Invalid address format\");\n                    }\n                    addrs.push(addresses[i]);\n                }\n                else {\n                    const type = \"bech32\";\n                    addrs.push(serialization.bufferToType(addresses[i], type, this.core.getHRP(), chainid));\n                }\n            }\n        }\n        return addrs;\n    }\n}\nexports.AVMAPI = AVMAPI;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\nconst Buffer = require('safer-buffer').Buffer;\nconst Node = require('../base/node');\n\n// Import DER constants\nconst der = require('../constants/der');\n\nfunction DEREncoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n}\nmodule.exports = DEREncoder;\n\nDEREncoder.prototype.encode = function encode(data, reporter) {\n  return this.tree._encode(data, reporter).join();\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  Node.call(this, 'der', parent);\n}\ninherits(DERNode, Node);\n\nDERNode.prototype._encodeComposite = function encodeComposite(tag,\n  primitive,\n  cls,\n  content) {\n  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);\n\n  // Short form\n  if (content.length < 0x80) {\n    const header = Buffer.alloc(2);\n    header[0] = encodedTag;\n    header[1] = content.length;\n    return this._createEncoderBuffer([ header, content ]);\n  }\n\n  // Long form\n  // Count octets required to store length\n  let lenOctets = 1;\n  for (let i = content.length; i >= 0x100; i >>= 8)\n    lenOctets++;\n\n  const header = Buffer.alloc(1 + 1 + lenOctets);\n  header[0] = encodedTag;\n  header[1] = 0x80 | lenOctets;\n\n  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)\n    header[i] = j & 0xff;\n\n  return this._createEncoderBuffer([ header, content ]);\n};\n\nDERNode.prototype._encodeStr = function encodeStr(str, tag) {\n  if (tag === 'bitstr') {\n    return this._createEncoderBuffer([ str.unused | 0, str.data ]);\n  } else if (tag === 'bmpstr') {\n    const buf = Buffer.alloc(str.length * 2);\n    for (let i = 0; i < str.length; i++) {\n      buf.writeUInt16BE(str.charCodeAt(i), i * 2);\n    }\n    return this._createEncoderBuffer(buf);\n  } else if (tag === 'numstr') {\n    if (!this._isNumstr(str)) {\n      return this.reporter.error('Encoding of string type: numstr supports ' +\n                                 'only digits and space');\n    }\n    return this._createEncoderBuffer(str);\n  } else if (tag === 'printstr') {\n    if (!this._isPrintstr(str)) {\n      return this.reporter.error('Encoding of string type: printstr supports ' +\n                                 'only latin upper and lower case letters, ' +\n                                 'digits, space, apostrophe, left and rigth ' +\n                                 'parenthesis, plus sign, comma, hyphen, ' +\n                                 'dot, slash, colon, equal sign, ' +\n                                 'question mark');\n    }\n    return this._createEncoderBuffer(str);\n  } else if (/str$/.test(tag)) {\n    return this._createEncoderBuffer(str);\n  } else if (tag === 'objDesc') {\n    return this._createEncoderBuffer(str);\n  } else {\n    return this.reporter.error('Encoding of string type: ' + tag +\n                               ' unsupported');\n  }\n};\n\nDERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {\n  if (typeof id === 'string') {\n    if (!values)\n      return this.reporter.error('string objid given, but no values map found');\n    if (!values.hasOwnProperty(id))\n      return this.reporter.error('objid not found in values map');\n    id = values[id].split(/[\\s.]+/g);\n    for (let i = 0; i < id.length; i++)\n      id[i] |= 0;\n  } else if (Array.isArray(id)) {\n    id = id.slice();\n    for (let i = 0; i < id.length; i++)\n      id[i] |= 0;\n  }\n\n  if (!Array.isArray(id)) {\n    return this.reporter.error('objid() should be either array or string, ' +\n                               'got: ' + JSON.stringify(id));\n  }\n\n  if (!relative) {\n    if (id[1] >= 40)\n      return this.reporter.error('Second objid identifier OOB');\n    id.splice(0, 2, id[0] * 40 + id[1]);\n  }\n\n  // Count number of octets\n  let size = 0;\n  for (let i = 0; i < id.length; i++) {\n    let ident = id[i];\n    for (size++; ident >= 0x80; ident >>= 7)\n      size++;\n  }\n\n  const objid = Buffer.alloc(size);\n  let offset = objid.length - 1;\n  for (let i = id.length - 1; i >= 0; i--) {\n    let ident = id[i];\n    objid[offset--] = ident & 0x7f;\n    while ((ident >>= 7) > 0)\n      objid[offset--] = 0x80 | (ident & 0x7f);\n  }\n\n  return this._createEncoderBuffer(objid);\n};\n\nfunction two(num) {\n  if (num < 10)\n    return '0' + num;\n  else\n    return num;\n}\n\nDERNode.prototype._encodeTime = function encodeTime(time, tag) {\n  let str;\n  const date = new Date(time);\n\n  if (tag === 'gentime') {\n    str = [\n      two(date.getUTCFullYear()),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else if (tag === 'utctime') {\n    str = [\n      two(date.getUTCFullYear() % 100),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else {\n    this.reporter.error('Encoding ' + tag + ' time is not supported yet');\n  }\n\n  return this._encodeStr(str, 'octstr');\n};\n\nDERNode.prototype._encodeNull = function encodeNull() {\n  return this._createEncoderBuffer('');\n};\n\nDERNode.prototype._encodeInt = function encodeInt(num, values) {\n  if (typeof num === 'string') {\n    if (!values)\n      return this.reporter.error('String int or enum given, but no values map');\n    if (!values.hasOwnProperty(num)) {\n      return this.reporter.error('Values map doesn\\'t contain: ' +\n                                 JSON.stringify(num));\n    }\n    num = values[num];\n  }\n\n  // Bignum, assume big endian\n  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {\n    const numArray = num.toArray();\n    if (!num.sign && numArray[0] & 0x80) {\n      numArray.unshift(0);\n    }\n    num = Buffer.from(numArray);\n  }\n\n  if (Buffer.isBuffer(num)) {\n    let size = num.length;\n    if (num.length === 0)\n      size++;\n\n    const out = Buffer.alloc(size);\n    num.copy(out);\n    if (num.length === 0)\n      out[0] = 0;\n    return this._createEncoderBuffer(out);\n  }\n\n  if (num < 0x80)\n    return this._createEncoderBuffer(num);\n\n  if (num < 0x100)\n    return this._createEncoderBuffer([0, num]);\n\n  let size = 1;\n  for (let i = num; i >= 0x100; i >>= 8)\n    size++;\n\n  const out = new Array(size);\n  for (let i = out.length - 1; i >= 0; i--) {\n    out[i] = num & 0xff;\n    num >>= 8;\n  }\n  if(out[0] & 0x80) {\n    out.unshift(0);\n  }\n\n  return this._createEncoderBuffer(Buffer.from(out));\n};\n\nDERNode.prototype._encodeBool = function encodeBool(value) {\n  return this._createEncoderBuffer(value ? 0xff : 0);\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getEncoder('der').tree;\n};\n\nDERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {\n  const state = this._baseState;\n  let i;\n  if (state['default'] === null)\n    return false;\n\n  const data = dataBuffer.join();\n  if (state.defaultBuffer === undefined)\n    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();\n\n  if (data.length !== state.defaultBuffer.length)\n    return false;\n\n  for (i=0; i < data.length; i++)\n    if (data[i] !== state.defaultBuffer[i])\n      return false;\n\n  return true;\n};\n\n// Utility methods\n\nfunction encodeTag(tag, primitive, cls, reporter) {\n  let res;\n\n  if (tag === 'seqof')\n    tag = 'seq';\n  else if (tag === 'setof')\n    tag = 'set';\n\n  if (der.tagByName.hasOwnProperty(tag))\n    res = der.tagByName[tag];\n  else if (typeof tag === 'number' && (tag | 0) === tag)\n    res = tag;\n  else\n    return reporter.error('Unknown tag: ' + tag);\n\n  if (res >= 0x1f)\n    return reporter.error('Multi-octet tag encoding unsupported');\n\n  if (!primitive)\n    res |= 0x20;\n\n  res |= (der.tagClassByName[cls || 'universal'] << 6);\n\n  return res;\n}\n","'use strict';\n\nconst base = exports;\n\nbase.Reporter = require('./reporter').Reporter;\nbase.DecoderBuffer = require('./buffer').DecoderBuffer;\nbase.EncoderBuffer = require('./buffer').EncoderBuffer;\nbase.Node = require('./node');\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMInput = exports.SECPTransferInput = exports.AmountInput = exports.TransferableInput = exports.SelectInputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-EVM-Inputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\nconst outputs_1 = require(\"./outputs\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst credentials_1 = require(\"../../common/credentials\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputID A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nexports.SelectInputClass = (inputID, ...args) => {\n    if (inputID === constants_1.EVMConstants.SECPINPUTID) {\n        return new SECPTransferInput(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.InputIdError(\"Error - SelectInputClass: unknown inputID\");\n};\nclass TransferableInput extends input_1.StandardTransferableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableInput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = exports.SelectInputClass(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.EVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.input = exports.SelectInputClass(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountInput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    select(id, ...args) {\n        return exports.SelectInputClass(id, ...args);\n    }\n}\nexports.AmountInput = AmountInput;\nclass SECPTransferInput extends AmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferInput\";\n        this._typeID = constants_1.EVMConstants.SECPINPUTID;\n        this.getCredentialID = () => constants_1.EVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    /**\n       * Returns the inputID for this input\n       */\n    getInputID() {\n        return constants_1.EVMConstants.SECPINPUTID;\n    }\n    create(...args) {\n        return new SECPTransferInput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferInput = SECPTransferInput;\nclass EVMInput extends outputs_1.EVMOutput {\n    /**\n     * An [[EVMInput]] class which contains address, amount, assetID, nonce.\n     *\n     * @param address is the EVM address from which to transfer funds.\n     * @param amount is the amount of the asset to be transferred (specified in nDJTX for DJTX and the smallest denomination for all other assets).\n     * @param assetID The assetID which is being sent as a {@link https://github.com/feross/buffer|Buffer} or as a string.\n     * @param nonce A {@link https://github.com/indutny/bn.js/|BN} or a number representing the nonce.\n     */\n    constructor(address = undefined, amount = undefined, assetID = undefined, nonce = undefined) {\n        super(address, amount, assetID);\n        this.nonce = buffer_1.Buffer.alloc(8);\n        this.nonceValue = new bn_js_1.default(0);\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n         * Returns the array of [[SigIdx]] for this [[Input]]\n         */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n         * Creates and adds a [[SigIdx]] to the [[Input]].\n         *\n         * @param addressIdx The index of the address to reference in the signatures\n         * @param address The address of the source of the signature\n         */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n        /**\n         * Returns the nonce as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getNonce = () => this.nonceValue.clone();\n        this.getCredentialID = () => constants_1.EVMConstants.SECPCREDENTIAL;\n        if (typeof nonce !== 'undefined') {\n            // convert number nonce to BN\n            let n;\n            if (typeof nonce === 'number') {\n                n = new bn_js_1.default(nonce);\n            }\n            else {\n                n = nonce;\n            }\n            this.nonceValue = n.clone();\n            this.nonce = bintools.fromBNToBuffer(n, 8);\n        }\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[EVMOutput]].\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let bsize = superbuff.length + this.nonce.length;\n        let barr = [superbuff, this.nonce];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Decodes the [[EVMInput]] as a {@link https://github.com/feross/buffer|Buffer} and returns the size.\n     *\n     * @param bytes The bytes as a {@link https://github.com/feross/buffer|Buffer}.\n     * @param offset An offset as a number.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.nonce = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a base-58 representation of the [[EVMInput]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n    create(...args) {\n        return new EVMInput(...args);\n    }\n    clone() {\n        const newEVMInput = this.create();\n        newEVMInput.fromBuffer(this.toBuffer());\n        return newEVMInput;\n    }\n}\nexports.EVMInput = EVMInput;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvZXZtL2lucHV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7O0dBR0c7QUFDSCxvQ0FBaUM7QUFDakMsb0VBQTRDO0FBQzVDLDJDQUEyQztBQUMzQyw4Q0FJNEI7QUFFNUIsdUNBQXNDO0FBQ3RDLGtEQUF1QjtBQUN2QiwwREFBa0Q7QUFDbEQsK0NBQWtEO0FBRWxEOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQWEsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUVsRDs7Ozs7O0dBTUc7QUFDVSxRQUFBLGdCQUFnQixHQUFHLENBQUMsT0FBZSxFQUFFLEdBQUcsSUFBVyxFQUFTLEVBQUU7SUFDekUsSUFBSSxPQUFPLEtBQUssd0JBQVksQ0FBQyxXQUFXLEVBQUU7UUFDeEMsT0FBTyxJQUFJLGlCQUFpQixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7S0FDdkM7SUFDRCwwQkFBMEI7SUFDMUIsTUFBTSxJQUFJLHFCQUFZLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUN0RSxDQUFDLENBQUM7QUFFRixNQUFhLGlCQUFrQixTQUFRLGlDQUF5QjtJQUFoRTs7UUFDWSxjQUFTLEdBQUcsbUJBQW1CLENBQUM7UUFDaEMsWUFBTyxHQUFHLFNBQVMsQ0FBQztJQThCaEMsQ0FBQztJQTVCQyx3QkFBd0I7SUFFeEIsV0FBVyxDQUFDLE1BQWMsRUFBRSxXQUErQixLQUFLO1FBQzlELEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxLQUFLLEdBQUcsd0JBQWdCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFD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b3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktRVZNLUlucHV0c1xuICovXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJztcbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi8uLi91dGlscy9iaW50b29scyc7XG5pbXBvcnQgeyBFVk1Db25zdGFudHMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBcbiAgSW5wdXQsIFxuICBTdGFuZGFyZFRyYW5zZmVyYWJsZUlucHV0LCBcbiAgU3RhbmRhcmRBbW91bnRJbnB1dCBcbn0gZnJvbSAnLi4vLi4vY29tbW9uL2lucHV0JztcbmltcG9ydCB7IFNlcmlhbGl6ZWRFbmNvZGluZyB9IGZyb20gJy4uLy4uL3V0aWxzL3NlcmlhbGl6YXRpb24nO1xuaW1wb3J0IHsgRVZNT3V0cHV0IH0gZnJvbSAnLi9vdXRwdXRzJztcbmltcG9ydCBCTiBmcm9tICdibi5qcyc7XG5pbXBvcnQgeyBTaWdJZHggfSBmcm9tICcuLi8uLi9jb21tb24vY3JlZGVudGlhbHMnO1xuaW1wb3J0IHsgSW5wdXRJZEVycm9yIH0gZnJvbSAnLi4vLi4vdXRpbHMvZXJyb3JzJztcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzOiBCaW5Ub29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cbi8qKlxuICogVGFrZXMgYSBidWZmZXIgcmVwcmVzZW50aW5nIHRoZSBvdXRwdXQgYW5kIHJldHVybnMgdGhlIHByb3BlciBbW0lucHV0XV0gaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIGlucHV0SUQgQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBpbnB1dElEIHBhcnNlZCBwcmlvciB0byB0aGUgYnl0ZXMgcGFzc2VkIGluXG4gKlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYW4gW1tJbnB1dF1dLWV4dGVuZGVkIGNsYXNzLlxuICovXG5leHBvcnQgY29uc3QgU2VsZWN0SW5wdXRDbGFzcyA9IChpbnB1dElEOiBudW1iZXIsIC4uLmFyZ3M6IGFueVtdKTogSW5wdXQgPT4ge1xuICBpZiAoaW5wdXRJRCA9PT0gRVZNQ29uc3RhbnRzLlNFQ1BJTlBVVElEKSB7XG4gICAgcmV0dXJuIG5ldyBTRUNQVHJhbnNmZXJJbnB1dCguLi5hcmdzKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB0aHJvdyBuZXcgSW5wdXRJZEVycm9yKFwiRXJyb3IgLSBTZWxlY3RJbnB1dENsYXNzOiB1bmtub3duIGlucHV0SURcIik7XG59O1xuXG5leHBvcnQgY2xhc3MgVHJhbnNmZXJhYmxlSW5wdXQgZXh0ZW5kcyBTdGFuZGFyZFRyYW5zZmVyYWJsZUlucHV0IHtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiVHJhbnNmZXJhYmxlSW5wdXRcIjtcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWQ7XG5cbiAgLy9zZXJpYWxpemUgaXMgaW5oZXJpdGVkXG5cbiAgZGVzZXJpYWxpemUoZmllbGRzOiBvYmplY3QsIGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKSB7XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZmllbGRzLCBlbmNvZGluZyk7XG4gICAgdGhpcy5pbnB1dCA9IFNlbGVjdElucHV0Q2xhc3MoZmllbGRzW1wiaW5wdXRcIl1bXCJfdHlwZUlEXCJdKTtcbiAgICB0aGlzLmlucHV0LmRlc2VyaWFsaXplKGZpZWxkc1tcImlucHV0XCJdLCBlbmNvZGluZyk7XG4gIH1cblxuICAvKipcbiAgICogVGFrZXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBjb250YWluaW5nIGEgW1tUcmFuc2ZlcmFibGVJbnB1dF1dLCBwYXJzZXMgaXQsIHBvcHVsYXRlcyB0aGUgY2xhc3MsIGFuZCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIFtbVHJhbnNmZXJhYmxlSW5wdXRdXSBpbiBieXRlcy5cbiAgICpcbiAgICogQHBhcmFtIGJ5dGVzIEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhIHJhdyBbW1RyYW5zZmVyYWJsZUlucHV0XV1cbiAgICpcbiAgICogQHJldHVybnMgVGhlIGxlbmd0aCBvZiB0aGUgcmF3IFtbVHJhbnNmZXJhYmxlSW5wdXRdXVxuICAgKi9cbiAgZnJvbUJ1ZmZlcihieXRlczogQnVmZmVyLCBvZmZzZXQ6IG51bWJlciA9IDApOiBudW1iZXIge1xuICAgIHRoaXMudHhpZCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDMyKTtcbiAgICBvZmZzZXQgKz0gMzI7XG4gICAgdGhpcy5vdXRwdXRpZHggPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KTtcbiAgICBvZmZzZXQgKz0gNDtcbiAgICB0aGlzLmFzc2V0SUQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyBFVk1Db25zdGFudHMuQVNTRVRJRExFTik7XG4gICAgb2Zmc2V0ICs9IDMyO1xuICAgIGNvbnN0IGlucHV0aWQ6bnVtYmVyID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCkucmVhZFVJbnQzMkJFKDApO1xuICAgIG9mZnNldCArPSA0O1xuICAgIHRoaXMuaW5wdXQgPSBTZWxlY3RJbnB1dENsYXNzKGlucHV0aWQpO1xuICAgIHJldHVybiB0aGlzLmlucHV0LmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldCk7XG4gIH1cbiAgXG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBbW91bnRJbnB1dCBleHRlbmRzIFN0YW5kYXJkQW1vdW50SW5wdXQge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJBbW91bnRJbnB1dFwiO1xuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHVuZGVmaW5lZDtcblxuICAvL3NlcmlhbGl6ZSBhbmQgZGVzZXJpYWxpemUgYm90aCBhcmUgaW5oZXJpdGVkXG5cbiAgc2VsZWN0KGlkOiBudW1iZXIsIC4uLmFyZ3M6IGFueVtdKTogSW5wdXQge1xuICAgIHJldHVybiBTZWxlY3RJbnB1dENsYXNzKGlkLCAuLi5hcmdzKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU0VDUFRyYW5zZmVySW5wdXQgZXh0ZW5kcyBBbW91bnRJbnB1dCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIlNFQ1BUcmFuc2ZlcklucHV0XCI7XG4gIHByb3RlY3RlZCBfdHlwZUlEID0gRVZNQ29uc3RhbnRzLlNFQ1BJTlBVVElEO1xuXG4gIC8vc2VyaWFsaXplIGFuZCBkZXNlcmlhbGl6ZSBib3RoIGFyZSBpbmhlcml0ZWRcblxuICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBpbnB1dElEIGZvciB0aGlzIGlucHV0XG4gICAgICovXG4gIGdldElucHV0SUQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gRVZNQ29uc3RhbnRzLlNFQ1BJTlBVVElEO1xuICB9XG5cbiAgZ2V0Q3JlZGVudGlhbElEID0gKCk6IG51bWJlciA9PiBFVk1Db25zdGFudHMuU0VDUENSRURFTlRJQUw7XG5cbiAgY3JlYXRlKC4uLmFyZ3M6IGFueVtdKTogdGhpc3tcbiAgICByZXR1cm4gbmV3IFNFQ1BUcmFuc2ZlcklucHV0KC4uLmFyZ3MpIGFzIHRoaXM7XG4gIH1cblxuICBjbG9uZSgpOiB0aGlzIHtcbiAgICBjb25zdCBuZXdvdXQ6IFNFQ1BUcmFuc2ZlcklucHV0ID0gdGhpcy5jcmVhdGUoKVxuICAgIG5ld291dC5mcm9tQnVmZmVyKHRoaXMudG9CdWZmZXIoKSk7XG4gICAgcmV0dXJuIG5ld291dCBhcyB0aGlzO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFVk1JbnB1dCBleHRlbmRzIEVWTU91dHB1dCB7XG4gIHByb3RlY3RlZCBub25jZTogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDgpO1xuICBwcm90ZWN0ZWQgbm9uY2VWYWx1ZTogQk4gPSBuZXcgQk4oMCk7XG4gIHByb3RlY3RlZCBzaWdDb3VudDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpO1xuICBwcm90ZWN0ZWQgc2lnSWR4czogU2lnSWR4W10gPSBbXTsgLy8gaWR4cyBvZiBzaWduZXJzIGZyb20gdXR4b1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSBvZiBbW1NpZ0lkeF1dIGZvciB0aGlzIFtbSW5wdXRdXVxuICAgKi9cbiAgZ2V0U2lnSWR4cyA9ICgpOiBTaWdJZHhbXSA9PiB0aGlzLnNpZ0lkeHM7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5kIGFkZHMgYSBbW1NpZ0lkeF1dIHRvIHRoZSBbW0lucHV0XV0uXG4gICAqXG4gICAqIEBwYXJhbSBhZGRyZXNzSWR4IFRoZSBpbmRleCBvZiB0aGUgYWRkcmVzcyB0byByZWZlcmVuY2UgaW4gdGhlIHNpZ25hdHVyZXNcbiAgICogQHBhcmFtIGFkZHJlc3MgVGhlIGFkZHJlc3Mgb2YgdGhlIHNvdXJjZSBvZiB0aGUgc2lnbmF0dXJlXG4gICAqL1xuICBhZGRTaWduYXR1cmVJZHggPSAoYWRkcmVzc0lkeDogbnVtYmVyLCBhZGRyZXNzOiBCdWZmZXIpID0+IHtcbiAgICBjb25zdCBzaWdpZHg6IFNpZ0lkeCA9IG5ldyBTaWdJZHgoKTtcbiAgICBjb25zdCBiOiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoNCk7XG4gICAgYi53cml0ZVVJbnQzMkJFKGFkZHJlc3NJZHgsIDApO1xuICAgIHNpZ2lkeC5mcm9tQnVmZmVyKGIpO1xuICAgIHNpZ2lkeC5zZXRTb3VyY2UoYWRkcmVzcyk7XG4gICAgdGhpcy5zaWdJZHhzLnB1c2goc2lnaWR4KTtcbiAgICB0aGlzLnNpZ0NvdW50LndyaXRlVUludDMyQkUodGhpcy5zaWdJZHhzLmxlbmd0aCwgMCk7XG4gIH07XG5cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbm9uY2UgYXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfS5cbiAgICovXG4gIGdldE5vbmNlID0gKCk6IEJOID0+IHRoaXMubm9uY2VWYWx1ZS5jbG9uZSgpO1xuIFxuICAvKipcbiAgICogUmV0dXJucyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBbW0VWTU91dHB1dF1dLlxuICAgKi9cbiAgdG9CdWZmZXIoKTogQnVmZmVyIHtcbiAgICBsZXQgc3VwZXJidWZmOiBCdWZmZXIgPSBzdXBlci50b0J1ZmZlcigpO1xuICAgIGxldCBic2l6ZTogbnVtYmVyID0gc3VwZXJidWZmLmxlbmd0aCArIHRoaXMubm9uY2UubGVuZ3RoO1xuICAgIGxldCBiYXJyOiBCdWZmZXJbXSA9IFtzdXBlcmJ1ZmYsIHRoaXMubm9uY2VdO1xuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGJhcnIsYnNpemUpO1xuICB9XG5cbiAgZ2V0Q3JlZGVudGlhbElEID0gKCk6IG51bWJlciA9PiBFVk1Db25zdGFudHMuU0VDUENSRURFTlRJQUw7XG5cbiAgLyoqXG4gICAqIERlY29kZXMgdGhlIFtbRVZNSW5wdXRdXSBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGFuZCByZXR1cm5zIHRoZSBzaXplLlxuICAgKlxuICAgKiBAcGFyYW0gYnl0ZXMgVGhlIGJ5dGVzIGFzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0uXG4gICAqIEBwYXJhbSBvZmZzZXQgQW4gb2Zmc2V0IGFzIGEgbnVtYmVyLlxuICAgKi9cbiAgZnJvbUJ1ZmZlcihieXRlczogQnVmZmVyLCBvZmZzZXQ6IG51bWJlciA9IDApOiBudW1iZXIge1xuICAgIG9mZnNldCA9IHN1cGVyLmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldCk7XG4gICAgdGhpcy5ub25jZSA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDgpO1xuICAgIG9mZnNldCArPSA4O1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGJhc2UtNTggcmVwcmVzZW50YXRpb24gb2YgdGhlIFtbRVZNSW5wdXRdXS5cbiAgICovXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGJpbnRvb2xzLmJ1ZmZlclRvQjU4KHRoaXMudG9CdWZmZXIoKSk7XG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczogYW55W10pOiB0aGlze1xuICAgIHJldHVybiBuZXcgRVZNSW5wdXQoLi4uYXJncykgYXMgdGhpcztcbiAgfVxuXG4gIGNsb25lKCk6IHRoaXMge1xuICAgIGNvbnN0IG5ld0VWTUlucHV0OiBFVk1JbnB1dCA9IHRoaXMuY3JlYXRlKCk7XG4gICAgbmV3RVZNSW5wdXQuZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpO1xuICAgIHJldHVybiBuZXdFVk1JbnB1dCBhcyB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIFtbRVZNSW5wdXRdXSBjbGFzcyB3aGljaCBjb250YWlucyBhZGRyZXNzLCBhbW91bnQsIGFzc2V0SUQsIG5vbmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYWRkcmVzcyBpcyB0aGUgRVZNIGFkZHJlc3MgZnJvbSB3aGljaCB0byB0cmFuc2ZlciBmdW5kcy5cbiAgICogQHBhcmFtIGFtb3VudCBpcyB0aGUgYW1vdW50IG9mIHRoZSBhc3NldCB0byBiZSB0cmFuc2ZlcnJlZCAoc3BlY2lmaWVkIGluIG5BVkFYIGZvciBBVkFYIGFuZCB0aGUgc21hbGxlc3QgZGVub21pbmF0aW9uIGZvciBhbGwgb3RoZXIgYXNzZXRzKS5cbiAgICogQHBhcmFtIGFzc2V0SUQgVGhlIGFzc2V0SUQgd2hpY2ggaXMgYmVpbmcgc2VudCBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IG9yIGFzIGEgc3RyaW5nLlxuICAgKiBAcGFyYW0gbm9uY2UgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfSBvciBhIG51bWJlciByZXByZXNlbnRpbmcgdGhlIG5vbmNlLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgYWRkcmVzczogQnVmZmVyIHwgc3RyaW5nID0gdW5kZWZpbmVkLCBcbiAgICBhbW91bnQ6IEJOIHwgbnVtYmVyID0gdW5kZWZpbmVkLCBcbiAgICBhc3NldElEOiBCdWZmZXIgfCBzdHJpbmcgPSB1bmRlZmluZWQsXG4gICAgbm9uY2U6IEJOIHwgbnVtYmVyID0gdW5kZWZpbmVkXG4gICkge1xuICAgIHN1cGVyKGFkZHJlc3MsIGFtb3VudCwgYXNzZXRJRCk7XG5cbiAgICBpZiAodHlwZW9mIG5vbmNlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gY29udmVydCBudW1iZXIgbm9uY2UgdG8gQk5cbiAgICAgIGxldCBuOkJOO1xuICAgICAgaWYgKHR5cGVvZiBub25jZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbiA9IG5ldyBCTihub25jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gbm9uY2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubm9uY2VWYWx1ZSA9IG4uY2xvbmUoKTtcbiAgICAgIHRoaXMubm9uY2UgPSBiaW50b29scy5mcm9tQk5Ub0J1ZmZlcihuLCA4KTtcbiAgICB9XG4gIH1cbn0gIFxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPTransferInput = exports.AmountInput = exports.TransferableInput = exports.SelectInputClass = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nexports.SelectInputClass = (inputid, ...args) => {\n    if (inputid === constants_1.AVMConstants.SECPINPUTID || inputid === constants_1.AVMConstants.SECPINPUTID_CODECONE) {\n        return new SECPTransferInput(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.InputIdError(\"Error - SelectInputClass: unknown inputid\");\n};\nclass TransferableInput extends input_1.StandardTransferableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableInput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = exports.SelectInputClass(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.AVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.input = exports.SelectInputClass(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountInput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    select(id, ...args) {\n        return exports.SelectInputClass(id, ...args);\n    }\n}\nexports.AmountInput = AmountInput;\nclass SECPTransferInput extends AmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferInput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.SECPINPUTID : constants_1.AVMConstants.SECPINPUTID_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPTransferInput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.SECPINPUTID : constants_1.AVMConstants.SECPINPUTID_CODECONE;\n    }\n    /**\n       * Returns the inputID for this input\n       */\n    getInputID() {\n        return this._typeID;\n    }\n    getCredentialID() {\n        if (this._codecID === 0) {\n            return constants_1.AVMConstants.SECPCREDENTIAL;\n        }\n        else if (this._codecID === 1) {\n            return constants_1.AVMConstants.SECPCREDENTIAL_CODECONE;\n        }\n    }\n    create(...args) {\n        return new SECPTransferInput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferInput = SECPTransferInput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-ImportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst basetx_1 = require(\"./basetx\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst cb58 = \"cb58\";\nconst buffer = \"Buffer\";\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param sourceChain Optional chainid for the source inputs to import. Default platform chainid.\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, sourceChain = undefined, importIns = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ImportTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.IMPORTTX : constants_1.AVMConstants.IMPORTTX_CODECONE;\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        /**\n           * Returns the id of the [[ImportTx]]\n           */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} for the source chainid.\n         */\n        this.getSourceChain = () => {\n            return this.sourceChain;\n        };\n        this.sourceChain = sourceChain; // do not correct, if it's wrong it'll bomb on toBuffer\n        if (typeof importIns !== \"undefined\" && Array.isArray(importIns)) {\n            for (let i = 0; i < importIns.length; i++) {\n                if (!(importIns[i] instanceof inputs_1.TransferableInput)) {\n                    throw new errors_1.TransferableInputError(`Error - ImportTx.constructor: invalid TransferableInput in array parameter ${importIns}`);\n                }\n            }\n            this.importIns = importIns;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sourceChain: serialization.encoder(this.sourceChain, encoding, buffer, cb58), importIns: this.importIns.map((i) => i.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sourceChain = serialization.decoder(fields[\"sourceChain\"], encoding, cb58, buffer, 32);\n        this.importIns = fields[\"importIns\"].map((i) => {\n            let ii = new inputs_1.TransferableInput();\n            ii.deserialize(i, encoding);\n            return ii;\n        });\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n    }\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - ImportTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.IMPORTTX : constants_1.AVMConstants.IMPORTTX_CODECONE;\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it, populates the class, and returns the length of the [[ImportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n       *\n       * @returns The length of the raw [[ImportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        for (let i = 0; i < this.importIns.length; i++) {\n            barr.push(this.importIns[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n       * Returns an array of [[TransferableInput]]s in this transaction.\n       */\n    getImportInputs() {\n        return this.importIns;\n    }\n    clone() {\n        let newbase = new ImportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ImportTx(...args);\n    }\n    /**\n       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n       *\n       * @param msg A Buffer for the [[UnsignedTx]]\n       * @param kc An [[KeyChain]] used in signing\n       *\n       * @returns An array of [[Credential]]s\n       */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        for (let i = 0; i < this.importIns.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.importIns[i].getInput().getCredentialID());\n            const sigidxs = this.importIns[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOID = exports.NFTTransferOperation = exports.NFTMintOperation = exports.SECPMintOperation = exports.TransferableOperation = exports.Operation = exports.SelectOperationClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Operations\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst nbytes_1 = require(\"../../common/nbytes\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst output_1 = require(\"../../common/output\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst cb58 = \"cb58\";\nconst buffer = \"Buffer\";\nconst hex = \"hex\";\nconst decimalString = \"decimalString\";\n/**\n * Takes a buffer representing the output and returns the proper [[Operation]] instance.\n *\n * @param opid A number representing the operation ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Operation]]-extended class.\n */\nexports.SelectOperationClass = (opid, ...args) => {\n    if (opid === constants_1.AVMConstants.SECPMINTOPID || opid === constants_1.AVMConstants.SECPMINTOPID_CODECONE) {\n        return new SECPMintOperation(...args);\n    }\n    else if (opid === constants_1.AVMConstants.NFTMINTOPID || opid === constants_1.AVMConstants.NFTMINTOPID_CODECONE) {\n        return new NFTMintOperation(...args);\n    }\n    else if (opid === constants_1.AVMConstants.NFTXFEROPID || opid === constants_1.AVMConstants.NFTXFEROPID_CODECONE) {\n        return new NFTTransferOperation(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.InvalidOperationIdError(`Error - SelectOperationClass: unknown opid ${opid}`);\n};\n/**\n * A class representing an operation. All operation types must extend on this class.\n */\nclass Operation extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Operation\";\n        this._typeID = undefined;\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n         * Returns the array of [[SigIdx]] for this [[Operation]]\n         */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n         * Creates and adds a [[SigIdx]] to the [[Operation]].\n         *\n         * @param addressIdx The index of the address to reference in the signatures\n         * @param address The address of the source of the signature\n         */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sigIdxs: this.sigIdxs.map((s) => s.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sigIdxs = fields[\"sigIdxs\"].map((s) => {\n            let sidx = new credentials_1.SigIdx();\n            sidx.deserialize(s, encoding);\n            return sidx;\n        });\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.sigCount = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const sigCount = this.sigCount.readUInt32BE(0);\n        this.sigIdxs = [];\n        for (let i = 0; i < sigCount; i++) {\n            const sigidx = new credentials_1.SigIdx();\n            const sigbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            sigidx.fromBuffer(sigbuff);\n            offset += 4;\n            this.sigIdxs.push(sigidx);\n        }\n        return offset;\n    }\n    toBuffer() {\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        let bsize = this.sigCount.length;\n        const barr = [this.sigCount];\n        for (let i = 0; i < this.sigIdxs.length; i++) {\n            const b = this.sigIdxs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[NFTMintOperation]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.Operation = Operation;\nOperation.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getOperationID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getOperationID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\n/**\n * A class which contains an [[Operation]] for transfers.\n *\n */\nclass TransferableOperation extends serialization_1.Serializable {\n    constructor(assetID = undefined, utxoids = undefined, operation = undefined) {\n        super();\n        this._typeName = \"TransferableOperation\";\n        this._typeID = undefined;\n        this.assetID = buffer_1.Buffer.alloc(32);\n        this.utxoIDs = [];\n        /**\n         * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.\n         */\n        this.getAssetID = () => this.assetID;\n        /**\n         * Returns an array of UTXOIDs in this operation.\n         */\n        this.getUTXOIDs = () => this.utxoIDs;\n        /**\n         * Returns the operation\n         */\n        this.getOperation = () => this.operation;\n        if (typeof assetID !== \"undefined\" && assetID.length === constants_1.AVMConstants.ASSETIDLEN\n            && operation instanceof Operation && typeof utxoids !== \"undefined\"\n            && Array.isArray(utxoids)) {\n            this.assetID = assetID;\n            this.operation = operation;\n            for (let i = 0; i < utxoids.length; i++) {\n                const utxoid = new UTXOID();\n                if (typeof utxoids[i] === \"string\") {\n                    utxoid.fromString(utxoids[i]);\n                }\n                else if (utxoids[i] instanceof buffer_1.Buffer) {\n                    utxoid.fromBuffer(utxoids[i]);\n                }\n                else if (utxoids[i] instanceof UTXOID) {\n                    utxoid.fromString(utxoids[i].toString()); // clone\n                }\n                this.utxoIDs.push(utxoid);\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { assetID: serialization.encoder(this.assetID, encoding, buffer, cb58, 32), utxoIDs: this.utxoIDs.map((u) => u.serialize(encoding)), operation: this.operation.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.assetID = serialization.decoder(fields[\"assetID\"], encoding, cb58, buffer, 32);\n        this.utxoIDs = fields[\"utxoIDs\"].map((u) => {\n            let utxoid = new UTXOID();\n            utxoid.deserialize(u, encoding);\n            return utxoid;\n        });\n        this.operation = exports.SelectOperationClass(fields[\"operation\"][\"_typeID\"]);\n        this.operation.deserialize(fields[\"operation\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const numutxoIDs = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.utxoIDs = [];\n        for (let i = 0; i < numutxoIDs; i++) {\n            const utxoid = new UTXOID();\n            offset = utxoid.fromBuffer(bytes, offset);\n            this.utxoIDs.push(utxoid);\n        }\n        const opid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.operation = exports.SelectOperationClass(opid);\n        return this.operation.fromBuffer(bytes, offset);\n    }\n    toBuffer() {\n        const numutxoIDs = buffer_1.Buffer.alloc(4);\n        numutxoIDs.writeUInt32BE(this.utxoIDs.length, 0);\n        let bsize = this.assetID.length + numutxoIDs.length;\n        const barr = [this.assetID, numutxoIDs];\n        this.utxoIDs = this.utxoIDs.sort(UTXOID.comparator());\n        for (let i = 0; i < this.utxoIDs.length; i++) {\n            const b = this.utxoIDs[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        const opid = buffer_1.Buffer.alloc(4);\n        opid.writeUInt32BE(this.operation.getOperationID(), 0);\n        barr.push(opid);\n        bsize += opid.length;\n        const b = this.operation.toBuffer();\n        bsize += b.length;\n        barr.push(b);\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.TransferableOperation = TransferableOperation;\n/**\n * Returns a function used to sort an array of [[TransferableOperation]]s\n */\nTransferableOperation.comparator = () => {\n    return function (a, b) {\n        return buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n    };\n};\n/**\n * An [[Operation]] class which specifies a SECP256k1 Mint Op.\n */\nclass SECPMintOperation extends Operation {\n    /**\n     * An [[Operation]] class which mints new tokens on an assetID.\n     *\n     * @param mintOutput The [[SECPMintOutput]] that will be produced by this transaction.\n     * @param transferOutput A [[SECPTransferOutput]] that will be produced from this minting operation.\n     */\n    constructor(mintOutput = undefined, transferOutput = undefined) {\n        super();\n        this._typeName = \"SECPMintOperation\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.SECPMINTOPID : constants_1.AVMConstants.SECPMINTOPID_CODECONE;\n        this.mintOutput = undefined;\n        this.transferOutput = undefined;\n        if (typeof mintOutput !== \"undefined\") {\n            this.mintOutput = mintOutput;\n        }\n        if (typeof transferOutput !== \"undefined\") {\n            this.transferOutput = transferOutput;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { mintOutput: this.mintOutput.serialize(encoding), transferOutputs: this.transferOutput.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.mintOutput = new outputs_1.SECPMintOutput();\n        this.mintOutput.deserialize(fields[\"mintOutput\"], encoding);\n        this.transferOutput = new outputs_1.SECPTransferOutput();\n        this.transferOutput.deserialize(fields[\"transferOutputs\"], encoding);\n    }\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPMintOperation.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.SECPMINTOPID : constants_1.AVMConstants.SECPMINTOPID_CODECONE;\n    }\n    /**\n     * Returns the operation ID.\n     */\n    getOperationID() {\n        return this._typeID;\n    }\n    /**\n     * Returns the credential ID.\n     */\n    getCredentialID() {\n        if (this._codecID === 0) {\n            return constants_1.AVMConstants.SECPCREDENTIAL;\n        }\n        else if (this._codecID === 1) {\n            return constants_1.AVMConstants.SECPCREDENTIAL_CODECONE;\n        }\n    }\n    /**\n     * Returns the [[SECPMintOutput]] to be produced by this operation.\n     */\n    getMintOutput() {\n        return this.mintOutput;\n    }\n    /**\n     * Returns [[SECPTransferOutput]] to be produced by this operation.\n     */\n    getTransferOutput() {\n        return this.transferOutput;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[SECPMintOperation]] and returns the updated offset.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.mintOutput = new outputs_1.SECPMintOutput();\n        offset = this.mintOutput.fromBuffer(bytes, offset);\n        this.transferOutput = new outputs_1.SECPTransferOutput();\n        offset = this.transferOutput.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[SECPMintOperation]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const mintoutBuff = this.mintOutput.toBuffer();\n        const transferOutBuff = this.transferOutput.toBuffer();\n        const bsize = superbuff.length +\n            mintoutBuff.length +\n            transferOutBuff.length;\n        const barr = [\n            superbuff,\n            mintoutBuff,\n            transferOutBuff\n        ];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.SECPMintOperation = SECPMintOperation;\n/**\n * An [[Operation]] class which specifies a NFT Mint Op.\n */\nclass NFTMintOperation extends Operation {\n    /**\n    * An [[Operation]] class which contains an NFT on an assetID.\n    *\n    * @param groupID The group to which to issue the NFT Output\n    * @param payload A {@link https://github.com/feross/buffer|Buffer} of the NFT payload\n    * @param outputOwners An array of outputOwners\n    */\n    constructor(groupID = undefined, payload = undefined, outputOwners = undefined) {\n        super();\n        this._typeName = \"NFTMintOperation\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.NFTMINTOPID : constants_1.AVMConstants.NFTMINTOPID_CODECONE;\n        this.groupID = buffer_1.Buffer.alloc(4);\n        this.outputOwners = [];\n        /**\n        * Returns the credential ID.\n        */\n        this.getCredentialID = () => {\n            if (this._codecID === 0) {\n                return constants_1.AVMConstants.NFTCREDENTIAL;\n            }\n            else if (this._codecID === 1) {\n                return constants_1.AVMConstants.NFTCREDENTIAL_CODECONE;\n            }\n        };\n        /**\n        * Returns the payload.\n        */\n        this.getGroupID = () => {\n            return bintools.copyFrom(this.groupID, 0);\n        };\n        /**\n        * Returns the payload.\n        */\n        this.getPayload = () => {\n            return bintools.copyFrom(this.payload, 0);\n        };\n        /**\n        * Returns the payload's raw {@link https://github.com/feross/buffer|Buffer} with length prepended, for use with [[PayloadBase]]'s fromBuffer\n        */\n        this.getPayloadBuffer = () => {\n            let payloadlen = buffer_1.Buffer.alloc(4);\n            payloadlen.writeUInt32BE(this.payload.length, 0);\n            return buffer_1.Buffer.concat([payloadlen, bintools.copyFrom(this.payload, 0)]);\n        };\n        /**\n        * Returns the outputOwners.\n        */\n        this.getOutputOwners = () => {\n            return this.outputOwners;\n        };\n        if (typeof groupID !== \"undefined\" && typeof payload !== \"undefined\" && outputOwners.length) {\n            this.groupID.writeUInt32BE((groupID ? groupID : 0), 0);\n            this.payload = payload;\n            this.outputOwners = outputOwners;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { groupID: serialization.encoder(this.groupID, encoding, buffer, decimalString, 4), payload: serialization.encoder(this.payload, encoding, buffer, hex), outputOwners: this.outputOwners.map((o) => o.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.groupID = serialization.decoder(fields[\"groupID\"], encoding, decimalString, buffer, 4);\n        this.payload = serialization.decoder(fields[\"payload\"], encoding, hex, buffer);\n        // this.outputOwners = fields[\"outputOwners\"].map((o: NFTMintOutput) => {\n        //   let oo: NFTMintOutput = new NFTMintOutput()\n        //   oo.deserialize(o, encoding)\n        //   return oo\n        // })\n        this.outputOwners = fields[\"outputOwners\"].map((o) => {\n            let oo = new output_1.OutputOwners();\n            oo.deserialize(o, encoding);\n            return oo;\n        });\n    }\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTMintOperation.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.NFTMINTOPID : constants_1.AVMConstants.NFTMINTOPID_CODECONE;\n    }\n    /**\n    * Returns the operation ID.\n    */\n    getOperationID() {\n        return this._typeID;\n    }\n    /**\n    * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOperation]] and returns the updated offset.\n    */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.groupID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        let payloadLen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.payload = bintools.copyFrom(bytes, offset, offset + payloadLen);\n        offset += payloadLen;\n        let numoutputs = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.outputOwners = [];\n        for (let i = 0; i < numoutputs; i++) {\n            let outputOwner = new output_1.OutputOwners();\n            offset = outputOwner.fromBuffer(bytes, offset);\n            this.outputOwners.push(outputOwner);\n        }\n        return offset;\n    }\n    /**\n    * Returns the buffer representing the [[NFTMintOperation]] instance.\n    */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const payloadlen = buffer_1.Buffer.alloc(4);\n        payloadlen.writeUInt32BE(this.payload.length, 0);\n        const outputownerslen = buffer_1.Buffer.alloc(4);\n        outputownerslen.writeUInt32BE(this.outputOwners.length, 0);\n        let bsize = superbuff.length +\n            this.groupID.length +\n            payloadlen.length +\n            this.payload.length +\n            outputownerslen.length;\n        const barr = [\n            superbuff,\n            this.groupID,\n            payloadlen,\n            this.payload,\n            outputownerslen\n        ];\n        for (let i = 0; i < this.outputOwners.length; i++) {\n            let b = this.outputOwners[i].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n    * Returns a base-58 string representing the [[NFTMintOperation]].\n    */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NFTMintOperation = NFTMintOperation;\n/**\n* A [[Operation]] class which specifies a NFT Transfer Op.\n*/\nclass NFTTransferOperation extends Operation {\n    /**\n    * An [[Operation]] class which contains an NFT on an assetID.\n    *\n    * @param output An [[NFTTransferOutput]]\n    */\n    constructor(output = undefined) {\n        super();\n        this._typeName = \"NFTTransferOperation\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.NFTXFEROPID : constants_1.AVMConstants.NFTXFEROPID_CODECONE;\n        this.getOutput = () => this.output;\n        if (typeof output !== \"undefined\") {\n            this.output = output;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { output: this.output.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = new outputs_1.NFTTransferOutput();\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTTransferOperation.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.NFTXFEROPID : constants_1.AVMConstants.NFTXFEROPID_CODECONE;\n    }\n    /**\n    * Returns the operation ID.\n    */\n    getOperationID() {\n        return this._typeID;\n    }\n    /**\n    * Returns the credential ID.\n    */\n    getCredentialID() {\n        if (this._codecID === 0) {\n            return constants_1.AVMConstants.NFTCREDENTIAL;\n        }\n        else if (this._codecID === 1) {\n            return constants_1.AVMConstants.NFTCREDENTIAL_CODECONE;\n        }\n    }\n    /**\n    * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOperation]] and returns the updated offset.\n    */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.output = new outputs_1.NFTTransferOutput();\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n    * Returns the buffer representing the [[NFTTransferOperation]] instance.\n    */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const outbuff = this.output.toBuffer();\n        const bsize = superbuff.length + outbuff.length;\n        const barr = [superbuff, outbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n    * Returns a base-58 string representing the [[NFTTransferOperation]].\n    */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NFTTransferOperation = NFTTransferOperation;\n/**\n* Class for representing a UTXOID used in [[TransferableOp]] types\n*/\nclass UTXOID extends nbytes_1.NBytes {\n    /**\n    * Class for representing a UTXOID used in [[TransferableOp]] types\n    */\n    constructor() {\n        super();\n        this._typeName = \"UTXOID\";\n        this._typeID = undefined;\n        //serialize and deserialize both are inherited\n        this.bytes = buffer_1.Buffer.alloc(36);\n        this.bsize = 36;\n    }\n    /**\n    * Returns a base-58 representation of the [[UTXOID]].\n    */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    /**\n    * Takes a base-58 string containing an [[UTXOID]], parses it, populates the class, and returns the length of the UTXOID in bytes.\n    *\n    * @param bytes A base-58 string containing a raw [[UTXOID]]\n    *\n    * @returns The length of the raw [[UTXOID]]\n    */\n    fromString(utxoid) {\n        const utxoidbuff = bintools.b58ToBuffer(utxoid);\n        if (utxoidbuff.length === 40 && bintools.validateChecksum(utxoidbuff)) {\n            const newbuff = bintools.copyFrom(utxoidbuff, 0, utxoidbuff.length - 4);\n            if (newbuff.length === 36) {\n                this.bytes = newbuff;\n            }\n        }\n        else if (utxoidbuff.length === 40) {\n            throw new errors_1.ChecksumError(\"Error - UTXOID.fromString: invalid checksum on address\");\n        }\n        else if (utxoidbuff.length === 36) {\n            this.bytes = utxoidbuff;\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.AddressError(\"Error - UTXOID.fromString: invalid address\");\n        }\n        return this.getSize();\n    }\n    clone() {\n        const newbase = new UTXOID();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new UTXOID();\n    }\n}\nexports.UTXOID = UTXOID;\n/**\n* Returns a function used to sort an array of [[UTXOID]]s\n*/\nUTXOID.comparator = () => (a, b) => buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-Credentials\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPCredential = exports.SelectCredentialClass = void 0;\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nexports.SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.EVMConstants.SECPCREDENTIAL) {\n        return new SECPCredential(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.CredIdError(\"Error - SelectCredentialClass: unknown credid\");\n};\nclass SECPCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPCredential\";\n        this._typeID = constants_1.EVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new SECPCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SECPCredential(...args);\n    }\n    select(id, ...args) {\n        let credential = exports.SelectCredentialClass(id, ...args);\n        return credential;\n    }\n}\nexports.SECPCredential = SECPCredential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9ldm0vY3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgsMkNBQTJDO0FBQzNDLDBEQUFzRDtBQUN0RCwrQ0FBaUQ7QUFFakQ7Ozs7OztHQU1HO0FBQ1UsUUFBQSxxQkFBcUIsR0FBRyxDQUFDLE1BQWMsRUFBRSxHQUFHLElBQVcsRUFBYyxFQUFFO0lBQ2xGLElBQUksTUFBTSxLQUFLLHdCQUFZLENBQUMsY0FBYyxFQUFFO1FBQzFDLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztLQUNwQztJQUNELDBCQUEwQjtJQUMxQixNQUFNLElBQUksb0JBQVcsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0FBQ3pFLENBQUMsQ0FBQztBQUVGLE1BQWEsY0FBZSxTQUFRLHdCQUFVO0lBQTlDOztRQUNZLGNBQVMsR0FBVyxnQkFBZ0IsQ0FBQztRQUNyQyxZQUFPLEdBQVcsd0JBQVksQ0FBQyxjQUFjLENBQUM7SUFzQjFELENBQUM7SUFwQkMsOENBQThDO0lBRTlDLGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLE9BQU8sR0FBbUIsSUFBSSxjQUFjLEVBQUUsQ0FBQztRQUNuRCxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sT0FBZSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxJQUFXO1FBQ25CLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQVMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQVUsRUFBRSxHQUFHLElBQVc7UUFDL0IsSUFBSSxVQUFVLEdBQWUsNkJBQXFCLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDaEUsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztDQUNGO0FBeEJELHdDQXdCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1FVk0tQ3JlZGVudGlhbHNcbiAqL1xuXG5pbXBvcnQgeyBFVk1Db25zdGFudHMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NyZWRlbnRpYWxzJztcbmltcG9ydCB7IENyZWRJZEVycm9yIH0gZnJvbSAnLi4vLi4vdXRpbHMvZXJyb3JzJztcblxuLyoqXG4gKiBUYWtlcyBhIGJ1ZmZlciByZXByZXNlbnRpbmcgdGhlIGNyZWRlbnRpYWwgYW5kIHJldHVybnMgdGhlIHByb3BlciBbW0NyZWRlbnRpYWxdXSBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gY3JlZGlkIEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgY3JlZGVudGlhbCBJRCBwYXJzZWQgcHJpb3IgdG8gdGhlIGJ5dGVzIHBhc3NlZCBpblxuICpcbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIGFuIFtbQ3JlZGVudGlhbF1dLWV4dGVuZGVkIGNsYXNzLlxuICovXG5leHBvcnQgY29uc3QgU2VsZWN0Q3JlZGVudGlhbENsYXNzID0gKGNyZWRpZDogbnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6IENyZWRlbnRpYWwgPT4ge1xuICBpZiAoY3JlZGlkID09PSBFVk1Db25zdGFudHMuU0VDUENSRURFTlRJQUwpIHtcbiAgICByZXR1cm4gbmV3IFNFQ1BDcmVkZW50aWFsKC4uLmFyZ3MpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHRocm93IG5ldyBDcmVkSWRFcnJvcihcIkVycm9yIC0gU2VsZWN0Q3JlZGVudGlhbENsYXNzOiB1bmtub3duIGNyZWRpZFwiKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBTRUNQQ3JlZGVudGlhbCBleHRlbmRzIENyZWRlbnRpYWwge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lOiBzdHJpbmcgPSBcIlNFQ1BDcmVkZW50aWFsXCI7XG4gIHByb3RlY3RlZCBfdHlwZUlEOiBudW1iZXIgPSBFVk1Db25zdGFudHMuU0VDUENSRURFTlRJQUw7XG5cbiAgLy9zZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIGJvdGggYXJlIGluaGVyaXRlZFxuXG4gIGdldENyZWRlbnRpYWxJRCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl90eXBlSUQ7XG4gIH1cblxuICBjbG9uZSgpOiB0aGlzIHtcbiAgICBsZXQgbmV3YmFzZTogU0VDUENyZWRlbnRpYWwgPSBuZXcgU0VDUENyZWRlbnRpYWwoKTtcbiAgICBuZXdiYXNlLmZyb21CdWZmZXIodGhpcy50b0J1ZmZlcigpKTtcbiAgICByZXR1cm4gbmV3YmFzZSBhcyB0aGlzO1xuICB9XG5cbiAgY3JlYXRlKC4uLmFyZ3M6IGFueVtdKTogdGhpcyB7XG4gICAgcmV0dXJuIG5ldyBTRUNQQ3JlZGVudGlhbCguLi5hcmdzKSBhcyB0aGlzO1xuICB9XG5cbiAgc2VsZWN0KGlkOiBudW1iZXIsIC4uLmFyZ3M6IGFueVtdKTogQ3JlZGVudGlhbCB7XG4gICAgbGV0IGNyZWRlbnRpYWw6IENyZWRlbnRpYWwgPSBTZWxlY3RDcmVkZW50aWFsQ2xhc3MoaWQsIC4uLmFyZ3MpO1xuICAgIHJldHVybiBjcmVkZW50aWFsO1xuICB9XG59XG5cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateAssetTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-CreateAssetTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst initialstates_1 = require(\"./initialstates\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst utf8 = \"utf8\";\nconst decimalString = \"decimalString\";\nconst buffer = \"Buffer\";\nclass CreateAssetTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Create Asset transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param name String for the descriptive name of the asset\n     * @param symbol String for the ticker symbol of the asset\n     * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 DJTX = 10^9 $nDJTX\n     * @param initialState Optional [[InitialStates]] that represent the intial state of a created asset\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, name = undefined, symbol = undefined, denomination = undefined, initialState = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"CreateAssetTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.CREATEASSETTX : constants_1.AVMConstants.CREATEASSETTX_CODECONE;\n        this.name = \"\";\n        this.symbol = \"\";\n        this.denomination = buffer_1.Buffer.alloc(1);\n        this.initialState = new initialstates_1.InitialStates();\n        /**\n         * Returns the id of the [[CreateAssetTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        /**\n         * Returns the array of array of [[Output]]s for the initial state\n         */\n        this.getInitialStates = () => this.initialState;\n        /**\n         * Returns the string representation of the name\n         */\n        this.getName = () => this.name;\n        /**\n         * Returns the string representation of the symbol\n         */\n        this.getSymbol = () => this.symbol;\n        /**\n         * Returns the numeric representation of the denomination\n         */\n        this.getDenomination = () => this.denomination.readUInt8(0);\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the denomination\n         */\n        this.getDenominationBuffer = () => {\n            return this.denomination;\n        };\n        if (typeof name === \"string\" && typeof symbol === \"string\" && typeof denomination === \"number\"\n            && denomination >= 0 && denomination <= 32 && typeof initialState !== \"undefined\") {\n            this.initialState = initialState;\n            this.name = name;\n            this.symbol = symbol;\n            this.denomination.writeUInt8(denomination, 0);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { name: serialization.encoder(this.name, encoding, utf8, utf8), symbol: serialization.encoder(this.symbol, encoding, utf8, utf8), denomination: serialization.encoder(this.denomination, encoding, buffer, decimalString, 1), initialState: this.initialState.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.name = serialization.decoder(fields[\"name\"], encoding, utf8, utf8);\n        this.symbol = serialization.decoder(fields[\"symbol\"], encoding, utf8, utf8);\n        this.denomination = serialization.decoder(fields[\"denomination\"], encoding, decimalString, buffer, 1);\n        this.initialState = new initialstates_1.InitialStates();\n        this.initialState.deserialize(fields[\"initialState\"], encoding);\n    }\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - CreateAssetTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.CREATEASSETTX : constants_1.AVMConstants.CREATEASSETTX_CODECONE;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[CreateAssetTx]], parses it, populates the class, and returns the length of the [[CreateAssetTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[CreateAssetTx]]\n     *\n     * @returns The length of the raw [[CreateAssetTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        const namesize = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        this.name = bintools.copyFrom(bytes, offset, offset + namesize).toString(\"utf8\");\n        offset += namesize;\n        const symsize = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        this.symbol = bintools.copyFrom(bytes, offset, offset + symsize).toString(\"utf8\");\n        offset += symsize;\n        this.denomination = bintools.copyFrom(bytes, offset, offset + 1);\n        offset += 1;\n        const inits = new initialstates_1.InitialStates();\n        offset = inits.fromBuffer(bytes, offset);\n        this.initialState = inits;\n        return offset;\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateAssetTx]].\n       */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const initstatebuff = this.initialState.toBuffer();\n        const namebuff = buffer_1.Buffer.alloc(this.name.length);\n        namebuff.write(this.name, 0, this.name.length, utf8);\n        const namesize = buffer_1.Buffer.alloc(2);\n        namesize.writeUInt16BE(this.name.length, 0);\n        const symbuff = buffer_1.Buffer.alloc(this.symbol.length);\n        symbuff.write(this.symbol, 0, this.symbol.length, utf8);\n        const symsize = buffer_1.Buffer.alloc(2);\n        symsize.writeUInt16BE(this.symbol.length, 0);\n        const bsize = superbuff.length + namesize.length + namebuff.length + symsize.length + symbuff.length + this.denomination.length + initstatebuff.length;\n        const barr = [superbuff, namesize, namebuff, symsize, symbuff, this.denomination, initstatebuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    clone() {\n        let newbase = new CreateAssetTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new CreateAssetTx(...args);\n    }\n}\nexports.CreateAssetTx = CreateAssetTx;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\nconst Reporter = require('../base/reporter').Reporter;\nconst Buffer = require('safer-buffer').Buffer;\n\nfunction DecoderBuffer(base, options) {\n  Reporter.call(this, options);\n  if (!Buffer.isBuffer(base)) {\n    this.error('Input not Buffer');\n    return;\n  }\n\n  this.base = base;\n  this.offset = 0;\n  this.length = base.length;\n}\ninherits(DecoderBuffer, Reporter);\nexports.DecoderBuffer = DecoderBuffer;\n\nDecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {\n  if (data instanceof DecoderBuffer) {\n    return true;\n  }\n\n  // Or accept compatible API\n  const isCompatible = typeof data === 'object' &&\n    Buffer.isBuffer(data.base) &&\n    data.constructor.name === 'DecoderBuffer' &&\n    typeof data.offset === 'number' &&\n    typeof data.length === 'number' &&\n    typeof data.save === 'function' &&\n    typeof data.restore === 'function' &&\n    typeof data.isEmpty === 'function' &&\n    typeof data.readUInt8 === 'function' &&\n    typeof data.skip === 'function' &&\n    typeof data.raw === 'function';\n\n  return isCompatible;\n};\n\nDecoderBuffer.prototype.save = function save() {\n  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };\n};\n\nDecoderBuffer.prototype.restore = function restore(save) {\n  // Return skipped data\n  const res = new DecoderBuffer(this.base);\n  res.offset = save.offset;\n  res.length = this.offset;\n\n  this.offset = save.offset;\n  Reporter.prototype.restore.call(this, save.reporter);\n\n  return res;\n};\n\nDecoderBuffer.prototype.isEmpty = function isEmpty() {\n  return this.offset === this.length;\n};\n\nDecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {\n  if (this.offset + 1 <= this.length)\n    return this.base.readUInt8(this.offset++, true);\n  else\n    return this.error(fail || 'DecoderBuffer overrun');\n};\n\nDecoderBuffer.prototype.skip = function skip(bytes, fail) {\n  if (!(this.offset + bytes <= this.length))\n    return this.error(fail || 'DecoderBuffer overrun');\n\n  const res = new DecoderBuffer(this.base);\n\n  // Share reporter state\n  res._reporterState = this._reporterState;\n\n  res.offset = this.offset;\n  res.length = this.offset + bytes;\n  this.offset += bytes;\n  return res;\n};\n\nDecoderBuffer.prototype.raw = function raw(save) {\n  return this.base.slice(save ? save.offset : this.offset, this.length);\n};\n\nfunction EncoderBuffer(value, reporter) {\n  if (Array.isArray(value)) {\n    this.length = 0;\n    this.value = value.map(function(item) {\n      if (!EncoderBuffer.isEncoderBuffer(item))\n        item = new EncoderBuffer(item, reporter);\n      this.length += item.length;\n      return item;\n    }, this);\n  } else if (typeof value === 'number') {\n    if (!(0 <= value && value <= 0xff))\n      return reporter.error('non-byte EncoderBuffer value');\n    this.value = value;\n    this.length = 1;\n  } else if (typeof value === 'string') {\n    this.value = value;\n    this.length = Buffer.byteLength(value);\n  } else if (Buffer.isBuffer(value)) {\n    this.value = value;\n    this.length = value.length;\n  } else {\n    return reporter.error('Unsupported type: ' + typeof value);\n  }\n}\nexports.EncoderBuffer = EncoderBuffer;\n\nEncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {\n  if (data instanceof EncoderBuffer) {\n    return true;\n  }\n\n  // Or accept compatible API\n  const isCompatible = typeof data === 'object' &&\n    data.constructor.name === 'EncoderBuffer' &&\n    typeof data.length === 'number' &&\n    typeof data.join === 'function';\n\n  return isCompatible;\n};\n\nEncoderBuffer.prototype.join = function join(out, offset) {\n  if (!out)\n    out = Buffer.alloc(this.length);\n  if (!offset)\n    offset = 0;\n\n  if (this.length === 0)\n    return out;\n\n  if (Array.isArray(this.value)) {\n    this.value.forEach(function(item) {\n      item.join(out, offset);\n      offset += item.length;\n    });\n  } else {\n    if (typeof this.value === 'number')\n      out[offset] = this.value;\n    else if (typeof this.value === 'string')\n      out.write(this.value, offset);\n    else if (Buffer.isBuffer(this.value))\n      this.value.copy(out, offset);\n    offset += this.length;\n  }\n\n  return out;\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GenesisAsset = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-GenesisAsset\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst initialstates_1 = require(\"./initialstates\");\nconst constants_1 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst createassettx_1 = require(\"./createassettx\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * @ignore\n */\nconst serialization = serialization_1.Serialization.getInstance();\nconst bintools = bintools_1.default.getInstance();\nconst utf8 = \"utf8\";\nconst buffer = \"Buffer\";\nconst decimalString = \"decimalString\";\nclass GenesisAsset extends createassettx_1.CreateAssetTx {\n    /**\n    * Class representing a GenesisAsset\n     *\n     * @param assetAlias Optional String for the asset alias\n     * @param name Optional String for the descriptive name of the asset\n     * @param symbol Optional String for the ticker symbol of the asset\n     * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 DJTX = 10^9 $nDJTX\n     * @param initialState Optional [[InitialStates]] that represent the intial state of a created asset\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(assetAlias = undefined, name = undefined, symbol = undefined, denomination = undefined, initialState = undefined, memo = undefined) {\n        super(constants_1.DefaultNetworkID, buffer_1.Buffer.alloc(32), [], [], memo);\n        this._typeName = \"GenesisAsset\";\n        this._codecID = undefined;\n        this._typeID = undefined;\n        this.assetAlias = \"\";\n        /**\n         * Returns the string representation of the assetAlias\n         */\n        this.getAssetAlias = () => this.assetAlias;\n        if (typeof assetAlias === \"string\" && typeof name === \"string\" &&\n            typeof symbol === \"string\" && typeof denomination === \"number\" &&\n            denomination >= 0 && denomination <= 32 && typeof initialState !== \"undefined\") {\n            this.assetAlias = assetAlias;\n            this.name = name;\n            this.symbol = symbol;\n            this.denomination.writeUInt8(denomination, 0);\n            this.initialState = initialState;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        delete fields[\"blockchainID\"];\n        delete fields[\"outs\"];\n        delete fields[\"ins\"];\n        return Object.assign(Object.assign({}, fields), { assetAlias: serialization.encoder(this.assetAlias, encoding, utf8, utf8), name: serialization.encoder(this.name, encoding, utf8, utf8), symbol: serialization.encoder(this.symbol, encoding, utf8, utf8), denomination: serialization.encoder(this.denomination, encoding, buffer, decimalString, 1), initialState: this.initialState.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        fields[\"blockchainID\"] = buffer_1.Buffer.alloc(32, 16).toString(\"hex\");\n        fields[\"outs\"] = [];\n        fields[\"ins\"] = [];\n        super.deserialize(fields, encoding);\n        this.assetAlias = serialization.decoder(fields[\"assetAlias\"], encoding, utf8, utf8);\n        this.name = serialization.decoder(fields[\"name\"], encoding, utf8, utf8);\n        this.symbol = serialization.decoder(fields[\"symbol\"], encoding, utf8, utf8);\n        this.denomination = serialization.decoder(fields[\"denomination\"], encoding, decimalString, buffer, 1);\n        this.initialState = new initialstates_1.InitialStates();\n        this.initialState.deserialize(fields[\"initialState\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[GenesisAsset]], parses it, populates the class, and returns the length of the [[GenesisAsset]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[GenesisAsset]]\n     *\n     * @returns The length of the raw [[GenesisAsset]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        const assetAliasSize = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        this.assetAlias = bintools.copyFrom(bytes, offset, offset + assetAliasSize).toString(\"utf8\");\n        offset += assetAliasSize;\n        offset += super.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[GenesisAsset]].\n     */\n    toBuffer(networkID = constants_1.DefaultNetworkID) {\n        // asset alias\n        const assetAlias = this.getAssetAlias();\n        const assetAliasbuffSize = buffer_1.Buffer.alloc(2);\n        assetAliasbuffSize.writeUInt16BE(assetAlias.length, 0);\n        let bsize = assetAliasbuffSize.length;\n        let barr = [assetAliasbuffSize];\n        const assetAliasbuff = buffer_1.Buffer.alloc(assetAlias.length);\n        assetAliasbuff.write(assetAlias, 0, assetAlias.length, utf8);\n        bsize += assetAliasbuff.length;\n        barr.push(assetAliasbuff);\n        const networkIDBuff = buffer_1.Buffer.alloc(4);\n        networkIDBuff.writeUInt32BE(new bn_js_1.default(networkID).toNumber(), 0);\n        bsize += networkIDBuff.length;\n        barr.push(networkIDBuff);\n        // Blockchain ID\n        bsize += 32;\n        barr.push(buffer_1.Buffer.alloc(32));\n        // num Outputs\n        bsize += 4;\n        barr.push(buffer_1.Buffer.alloc(4));\n        // num Inputs\n        bsize += 4;\n        barr.push(buffer_1.Buffer.alloc(4));\n        // memo\n        const memo = this.getMemo();\n        const memobuffSize = buffer_1.Buffer.alloc(4);\n        memobuffSize.writeUInt32BE(memo.length, 0);\n        bsize += memobuffSize.length;\n        barr.push(memobuffSize);\n        bsize += memo.length;\n        barr.push(memo);\n        // asset name\n        const name = this.getName();\n        const namebuffSize = buffer_1.Buffer.alloc(2);\n        namebuffSize.writeUInt16BE(name.length, 0);\n        bsize += namebuffSize.length;\n        barr.push(namebuffSize);\n        const namebuff = buffer_1.Buffer.alloc(name.length);\n        namebuff.write(name, 0, name.length, utf8);\n        bsize += namebuff.length;\n        barr.push(namebuff);\n        // symbol\n        const symbol = this.getSymbol();\n        const symbolbuffSize = buffer_1.Buffer.alloc(2);\n        symbolbuffSize.writeUInt16BE(symbol.length, 0);\n        bsize += symbolbuffSize.length;\n        barr.push(symbolbuffSize);\n        const symbolbuff = buffer_1.Buffer.alloc(symbol.length);\n        symbolbuff.write(symbol, 0, symbol.length, utf8);\n        bsize += symbolbuff.length;\n        barr.push(symbolbuff);\n        // denomination\n        const denomination = this.getDenomination();\n        const denominationbuffSize = buffer_1.Buffer.alloc(1);\n        denominationbuffSize.writeUInt8(denomination, 0);\n        bsize += denominationbuffSize.length;\n        barr.push(denominationbuffSize);\n        bsize += this.initialState.toBuffer().length;\n        barr.push(this.initialState.toBuffer());\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.GenesisAsset = GenesisAsset;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n* @packageDocumentation\n* @module API-AVM-InitialStates\n*/\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InitialStates = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst output_1 = require(\"../../common/output\");\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n* @ignore\n*/\nconst bintools = bintools_1.default.getInstance();\n/**\n* Class for creating initial output states used in asset creation\n*/\nclass InitialStates extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"InitialStates\";\n        this._typeID = undefined;\n        this.fxs = {};\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        const flatfxs = {};\n        for (let fxid in this.fxs) {\n            flatfxs[fxid] = this.fxs[fxid].map((o) => o.serialize(encoding));\n        }\n        return Object.assign(Object.assign({}, fields), { fxs: flatfxs });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        const unflat = {};\n        for (let fxid in fields[\"fxs\"]) {\n            unflat[fxid] = fields[\"fxs\"][fxid].map((o) => {\n                const out = outputs_1.SelectOutputClass(o[\"_typeID\"]);\n                out.deserialize(o, encoding);\n                return out;\n            });\n        }\n        this.fxs = unflat;\n    }\n    /**\n       *\n       * @param out The output state to add to the collection\n       * @param fxid The FxID that will be used for this output, default AVMConstants.SECPFXID\n       */\n    addOutput(out, fxid = constants_1.AVMConstants.SECPFXID) {\n        if (!(fxid in this.fxs)) {\n            this.fxs[fxid] = [];\n        }\n        this.fxs[fxid].push(out);\n    }\n    fromBuffer(bytes, offset = 0) {\n        const result = [];\n        const klen = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const klennum = klen.readUInt32BE(0);\n        for (let i = 0; i < klennum; i++) {\n            const fxidbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            offset += 4;\n            const fxid = fxidbuff.readUInt32BE(0);\n            result[fxid] = [];\n            const statelenbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            offset += 4;\n            const statelen = statelenbuff.readUInt32BE(0);\n            for (let j = 0; j < statelen; j++) {\n                const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n                offset += 4;\n                const out = outputs_1.SelectOutputClass(outputid);\n                offset = out.fromBuffer(bytes, offset);\n                result[fxid].push(out);\n            }\n        }\n        this.fxs = result;\n        return offset;\n    }\n    toBuffer() {\n        const buff = [];\n        const keys = Object.keys(this.fxs).map((k) => parseInt(k, 10)).sort();\n        const klen = buffer_1.Buffer.alloc(4);\n        klen.writeUInt32BE(keys.length, 0);\n        buff.push(klen);\n        for (let i = 0; i < keys.length; i++) {\n            const fxid = keys[i];\n            const fxidbuff = buffer_1.Buffer.alloc(4);\n            fxidbuff.writeUInt32BE(fxid, 0);\n            buff.push(fxidbuff);\n            const initialState = this.fxs[fxid].sort(output_1.Output.comparator());\n            const statelen = buffer_1.Buffer.alloc(4);\n            statelen.writeUInt32BE(initialState.length, 0);\n            buff.push(statelen);\n            for (let j = 0; j < initialState.length; j++) {\n                const outputid = buffer_1.Buffer.alloc(4);\n                outputid.writeInt32BE(initialState[j].getOutputID(), 0);\n                buff.push(outputid);\n                buff.push(initialState[j].toBuffer());\n            }\n        }\n        return buffer_1.Buffer.concat(buff);\n    }\n}\nexports.InitialStates = InitialStates;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbHN0YXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGlzL2F2bS9pbml0aWFsc3RhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0VBR0U7Ozs7OztBQUVGLG9DQUFnQztBQUNoQyxvRUFBMkM7QUFDM0MsZ0RBQTRDO0FBQzVDLHVDQUE2QztBQUM3QywyQ0FBMEM7QUFDMUMsNkRBQTRFO0FBQzVFOztFQUVFO0FBQ0YsTUFBTSxRQUFRLEdBQWEsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUVqRDs7RUFFRTtBQUNGLE1BQWEsYUFBYyxTQUFRLDRCQUFZO0lBQS9DOztRQUNZLGNBQVMsR0FBRyxlQUFlLENBQUE7UUFDM0IsWUFBTyxHQUFHLFNBQVMsQ0FBQTtRQTBCbkIsUUFBRyxHQUFpQyxFQUFFLENBQUE7SUErRGxELENBQUM7SUF2RkMsU0FBUyxDQUFDLFdBQStCLEtBQUs7UUFDNUMsTUFBTSxNQUFNLEdBQVcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNoRCxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUE7UUFDMUIsS0FBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQVMsRUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBO1NBQ2pGO1FBQ0QsdUNBQ0ssTUFBTSxLQUNULEdBQUcsRUFBRSxPQUFPLElBQ2I7SUFDSCxDQUFDO0lBQ0QsV0FBVyxDQUFDLE1BQWMsRUFBRSxXQUErQixLQUFLO1FBQzlELEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ25DLE1BQU0sTUFBTSxHQUFpQyxFQUFFLENBQUE7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RSxFQUFFO2dCQUNwRCxNQUFNLFFBQVEsR0FBVyxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUN4QyxRQUFRLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtnQkFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtnQkFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTthQUN0QztTQUNGO1FBQ0QsT0FBTyxlQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzVCLENBQUM7Q0FDRjtBQTNGRCxzQ0EyRkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4qIEBtb2R1bGUgQVBJLUFWTS1Jbml0aWFsU3RhdGVzXG4qL1xuXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5pbXBvcnQgQmluVG9vbHMgZnJvbSBcIi4uLy4uL3V0aWxzL2JpbnRvb2xzXCJcbmltcG9ydCB7IE91dHB1dCB9IGZyb20gXCIuLi8uLi9jb21tb24vb3V0cHV0XCJcbmltcG9ydCB7IFNlbGVjdE91dHB1dENsYXNzIH0gZnJvbSBcIi4vb3V0cHV0c1wiXG5pbXBvcnQgeyBBVk1Db25zdGFudHMgfSBmcm9tIFwiLi9jb25zdGFudHNcIlxuaW1wb3J0IHsgU2VyaWFsaXphYmxlLCBTZXJpYWxpemVkRW5jb2RpbmcgfSBmcm9tIFwiLi4vLi4vdXRpbHMvc2VyaWFsaXphdGlvblwiXG4vKipcbiogQGlnbm9yZVxuKi9cbmNvbnN0IGJpbnRvb2xzOiBCaW5Ub29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKClcblxuLyoqXG4qIENsYXNzIGZvciBjcmVhdGluZyBpbml0aWFsIG91dHB1dCBzdGF0ZXMgdXNlZCBpbiBhc3NldCBjcmVhdGlvblxuKi9cbmV4cG9ydCBjbGFzcyBJbml0aWFsU3RhdGVzIGV4dGVuZHMgU2VyaWFsaXphYmxlIHtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiSW5pdGlhbFN0YXRlc1wiXG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkXG5cbiAgc2VyaWFsaXplKGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKTogb2JqZWN0IHtcbiAgICBjb25zdCBmaWVsZHM6IG9iamVjdCA9IHN1cGVyLnNlcmlhbGl6ZShlbmNvZGluZylcbiAgICBjb25zdCBmbGF0ZnhzOiBvYmplY3QgPSB7fVxuICAgIGZvcihsZXQgZnhpZCBpbiB0aGlzLmZ4cyl7XG4gICAgICBmbGF0ZnhzW2Z4aWRdID0gdGhpcy5meHNbZnhpZF0ubWFwKChvOiBPdXRwdXQpOiBvYmplY3QgPT4gby5zZXJpYWxpemUoZW5jb2RpbmcpKVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgLi4uZmllbGRzLFxuICAgICAgZnhzOiBmbGF0ZnhzXG4gICAgfVxuICB9XG4gIGRlc2VyaWFsaXplKGZpZWxkczogb2JqZWN0LCBlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIikge1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGZpZWxkcywgZW5jb2RpbmcpXG4gICAgY29uc3QgdW5mbGF0OiB7IFtmeGlkOiBudW1iZXJdOiBPdXRwdXRbXSB9ID0ge31cbiAgICBmb3IobGV0IGZ4aWQgaW4gZmllbGRzW1wiZnhzXCJdKXtcbiAgICAgIHVuZmxhdFtmeGlkXSA9IGZpZWxkc1tcImZ4c1wiXVtmeGlkXS5tYXAoKG86b2JqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IG91dDogT3V0cHV0ID0gU2VsZWN0T3V0cHV0Q2xhc3Mob1tcIl90eXBlSURcIl0pXG4gICAgICAgIG91dC5kZXNlcmlhbGl6ZShvLCBlbmNvZGluZylcbiAgICAgICAgcmV0dXJuIG91dFxuICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5meHMgPSB1bmZsYXRcbiAgfVxuXG4gIHByb3RlY3RlZCBmeHM6IHsgW2Z4aWQ6IG51bWJlcl06IE91dHB1dFtdIH0gPSB7fVxuXG4gIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIG91dCBUaGUgb3V0cHV0IHN0YXRlIHRvIGFkZCB0byB0aGUgY29sbGVjdGlvblxuICAgICAqIEBwYXJhbSBmeGlkIFRoZSBGeElEIHRoYXQgd2lsbCBiZSB1c2VkIGZvciB0aGlzIG91dHB1dCwgZGVmYXVsdCBBVk1Db25zdGFudHMuU0VDUEZYSURcbiAgICAgKi9cbiAgYWRkT3V0cHV0KG91dDogT3V0cHV0LCBmeGlkOiBudW1iZXIgPSBBVk1Db25zdGFudHMuU0VDUEZYSUQpOiB2b2lkIHtcbiAgICBpZiAoIShmeGlkIGluIHRoaXMuZnhzKSkge1xuICAgICAgdGhpcy5meHNbZnhpZF0gPSBbXVxuICAgIH1cbiAgICB0aGlzLmZ4c1tmeGlkXS5wdXNoKG91dClcbiAgfVxuXG4gIGZyb21CdWZmZXIoYnl0ZXM6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICBjb25zdCByZXN1bHQ6IHsgW2Z4aWQ6IG51bWJlcl06IE91dHB1dFtdIH0gPSBbXVxuICAgIGNvbnN0IGtsZW46IEJ1ZmZlciA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDQpXG4gICAgb2Zmc2V0ICs9IDRcbiAgICBjb25zdCBrbGVubnVtOiBudW1iZXIgPSBrbGVuLnJlYWRVSW50MzJCRSgwKVxuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBrbGVubnVtOyBpKyspIHtcbiAgICAgIGNvbnN0IGZ4aWRidWZmOiBCdWZmZXIgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KVxuICAgICAgb2Zmc2V0ICs9IDRcbiAgICAgIGNvbnN0IGZ4aWQ6IG51bWJlciA9IGZ4aWRidWZmLnJlYWRVSW50MzJCRSgwKVxuICAgICAgcmVzdWx0W2Z4aWRdID0gW11cbiAgICAgIGNvbnN0IHN0YXRlbGVuYnVmZjogQnVmZmVyID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNClcbiAgICAgIG9mZnNldCArPSA0XG4gICAgICBjb25zdCBzdGF0ZWxlbjogbnVtYmVyID0gc3RhdGVsZW5idWZmLnJlYWRVSW50MzJCRSgwKVxuICAgICAgZm9yIChsZXQgajogbnVtYmVyID0gMDsgaiA8IHN0YXRlbGVuOyBqKyspIHtcbiAgICAgICAgY29uc3Qgb3V0cHV0aWQ6IG51bWJlciA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDQpLnJlYWRVSW50MzJCRSgwKVxuICAgICAgICBvZmZzZXQgKz0gNFxuICAgICAgICBjb25zdCBvdXQ6IE91dHB1dCA9IFNlbGVjdE91dHB1dENsYXNzKG91dHB1dGlkKVxuICAgICAgICBvZmZzZXQgPSBvdXQuZnJvbUJ1ZmZlcihieXRlcywgb2Zmc2V0KVxuICAgICAgICByZXN1bHRbZnhpZF0ucHVzaChvdXQpXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZnhzID0gcmVzdWx0XG4gICAgcmV0dXJuIG9mZnNldFxuICB9XG5cbiAgdG9CdWZmZXIoKTpCdWZmZXIge1xuICAgIGNvbnN0IGJ1ZmY6IEJ1ZmZlcltdID0gW11cbiAgICBjb25zdCBrZXlzOiBudW1iZXJbXSA9IE9iamVjdC5rZXlzKHRoaXMuZnhzKS5tYXAoKGs6IHN0cmluZyk6IG51bWJlciA9PiBwYXJzZUludChrLCAxMCkpLnNvcnQoKVxuICAgIGNvbnN0IGtsZW46IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KVxuICAgIGtsZW4ud3JpdGVVSW50MzJCRShrZXlzLmxlbmd0aCwgMClcbiAgICBidWZmLnB1c2goa2xlbilcbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZnhpZDogbnVtYmVyID0ga2V5c1tpXVxuICAgICAgY29uc3QgZnhpZGJ1ZmY6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KVxuICAgICAgZnhpZGJ1ZmYud3JpdGVVSW50MzJCRShmeGlkLCAwKVxuICAgICAgYnVmZi5wdXNoKGZ4aWRidWZmKVxuICAgICAgY29uc3QgaW5pdGlhbFN0YXRlID0gdGhpcy5meHNbZnhpZF0uc29ydChPdXRwdXQuY29tcGFyYXRvcigpKVxuICAgICAgY29uc3Qgc3RhdGVsZW46IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KVxuICAgICAgc3RhdGVsZW4ud3JpdGVVSW50MzJCRShpbml0aWFsU3RhdGUubGVuZ3RoLCAwKVxuICAgICAgYnVmZi5wdXNoKHN0YXRlbGVuKVxuICAgICAgZm9yIChsZXQgajogbnVtYmVyID0gMDsgaiA8IGluaXRpYWxTdGF0ZS5sZW5ndGg7IGorKykge1xuICAgICAgICBjb25zdCBvdXRwdXRpZDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpXG4gICAgICAgIG91dHB1dGlkLndyaXRlSW50MzJCRShpbml0aWFsU3RhdGVbal0uZ2V0T3V0cHV0SUQoKSwgMClcbiAgICAgICAgYnVmZi5wdXNoKG91dHB1dGlkKVxuICAgICAgICBidWZmLnB1c2goaW5pdGlhbFN0YXRlW2pdLnRvQnVmZmVyKCkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGJ1ZmYpXG4gIH1cbn1cbiAgIl19","'use strict';\n\nconst asn1 = exports;\n\nasn1.bignum = require('bn.js');\n\nasn1.define = require('./asn1/api').define;\nasn1.base = require('./asn1/base');\nasn1.constants = require('./asn1/constants');\nasn1.decoders = require('./asn1/decoders');\nasn1.encoders = require('./asn1/encoders');\n","'use strict';\n\nconst Reporter = require('../base/reporter').Reporter;\nconst EncoderBuffer = require('../base/buffer').EncoderBuffer;\nconst DecoderBuffer = require('../base/buffer').DecoderBuffer;\nconst assert = require('minimalistic-assert');\n\n// Supported tags\nconst tags = [\n  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',\n  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',\n  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',\n  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'\n];\n\n// Public methods list\nconst methods = [\n  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',\n  'any', 'contains'\n].concat(tags);\n\n// Overrided methods list\nconst overrided = [\n  '_peekTag', '_decodeTag', '_use',\n  '_decodeStr', '_decodeObjid', '_decodeTime',\n  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',\n\n  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',\n  '_encodeNull', '_encodeInt', '_encodeBool'\n];\n\nfunction Node(enc, parent, name) {\n  const state = {};\n  this._baseState = state;\n\n  state.name = name;\n  state.enc = enc;\n\n  state.parent = parent || null;\n  state.children = null;\n\n  // State\n  state.tag = null;\n  state.args = null;\n  state.reverseArgs = null;\n  state.choice = null;\n  state.optional = false;\n  state.any = false;\n  state.obj = false;\n  state.use = null;\n  state.useDecoder = null;\n  state.key = null;\n  state['default'] = null;\n  state.explicit = null;\n  state.implicit = null;\n  state.contains = null;\n\n  // Should create new instance on each method\n  if (!state.parent) {\n    state.children = [];\n    this._wrap();\n  }\n}\nmodule.exports = Node;\n\nconst stateProps = [\n  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',\n  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',\n  'implicit', 'contains'\n];\n\nNode.prototype.clone = function clone() {\n  const state = this._baseState;\n  const cstate = {};\n  stateProps.forEach(function(prop) {\n    cstate[prop] = state[prop];\n  });\n  const res = new this.constructor(cstate.parent);\n  res._baseState = cstate;\n  return res;\n};\n\nNode.prototype._wrap = function wrap() {\n  const state = this._baseState;\n  methods.forEach(function(method) {\n    this[method] = function _wrappedMethod() {\n      const clone = new this.constructor(this);\n      state.children.push(clone);\n      return clone[method].apply(clone, arguments);\n    };\n  }, this);\n};\n\nNode.prototype._init = function init(body) {\n  const state = this._baseState;\n\n  assert(state.parent === null);\n  body.call(this);\n\n  // Filter children\n  state.children = state.children.filter(function(child) {\n    return child._baseState.parent === this;\n  }, this);\n  assert.equal(state.children.length, 1, 'Root node can have only one child');\n};\n\nNode.prototype._useArgs = function useArgs(args) {\n  const state = this._baseState;\n\n  // Filter children and args\n  const children = args.filter(function(arg) {\n    return arg instanceof this.constructor;\n  }, this);\n  args = args.filter(function(arg) {\n    return !(arg instanceof this.constructor);\n  }, this);\n\n  if (children.length !== 0) {\n    assert(state.children === null);\n    state.children = children;\n\n    // Replace parent to maintain backward link\n    children.forEach(function(child) {\n      child._baseState.parent = this;\n    }, this);\n  }\n  if (args.length !== 0) {\n    assert(state.args === null);\n    state.args = args;\n    state.reverseArgs = args.map(function(arg) {\n      if (typeof arg !== 'object' || arg.constructor !== Object)\n        return arg;\n\n      const res = {};\n      Object.keys(arg).forEach(function(key) {\n        if (key == (key | 0))\n          key |= 0;\n        const value = arg[key];\n        res[value] = key;\n      });\n      return res;\n    });\n  }\n};\n\n//\n// Overrided methods\n//\n\noverrided.forEach(function(method) {\n  Node.prototype[method] = function _overrided() {\n    const state = this._baseState;\n    throw new Error(method + ' not implemented for encoding: ' + state.enc);\n  };\n});\n\n//\n// Public methods\n//\n\ntags.forEach(function(tag) {\n  Node.prototype[tag] = function _tagMethod() {\n    const state = this._baseState;\n    const args = Array.prototype.slice.call(arguments);\n\n    assert(state.tag === null);\n    state.tag = tag;\n\n    this._useArgs(args);\n\n    return this;\n  };\n});\n\nNode.prototype.use = function use(item) {\n  assert(item);\n  const state = this._baseState;\n\n  assert(state.use === null);\n  state.use = item;\n\n  return this;\n};\n\nNode.prototype.optional = function optional() {\n  const state = this._baseState;\n\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.def = function def(val) {\n  const state = this._baseState;\n\n  assert(state['default'] === null);\n  state['default'] = val;\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.explicit = function explicit(num) {\n  const state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.explicit = num;\n\n  return this;\n};\n\nNode.prototype.implicit = function implicit(num) {\n  const state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.implicit = num;\n\n  return this;\n};\n\nNode.prototype.obj = function obj() {\n  const state = this._baseState;\n  const args = Array.prototype.slice.call(arguments);\n\n  state.obj = true;\n\n  if (args.length !== 0)\n    this._useArgs(args);\n\n  return this;\n};\n\nNode.prototype.key = function key(newKey) {\n  const state = this._baseState;\n\n  assert(state.key === null);\n  state.key = newKey;\n\n  return this;\n};\n\nNode.prototype.any = function any() {\n  const state = this._baseState;\n\n  state.any = true;\n\n  return this;\n};\n\nNode.prototype.choice = function choice(obj) {\n  const state = this._baseState;\n\n  assert(state.choice === null);\n  state.choice = obj;\n  this._useArgs(Object.keys(obj).map(function(key) {\n    return obj[key];\n  }));\n\n  return this;\n};\n\nNode.prototype.contains = function contains(item) {\n  const state = this._baseState;\n\n  assert(state.use === null);\n  state.contains = item;\n\n  return this;\n};\n\n//\n// Decoding\n//\n\nNode.prototype._decode = function decode(input, options) {\n  const state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return input.wrapResult(state.children[0]._decode(input, options));\n\n  let result = state['default'];\n  let present = true;\n\n  let prevKey = null;\n  if (state.key !== null)\n    prevKey = input.enterKey(state.key);\n\n  // Check if tag is there\n  if (state.optional) {\n    let tag = null;\n    if (state.explicit !== null)\n      tag = state.explicit;\n    else if (state.implicit !== null)\n      tag = state.implicit;\n    else if (state.tag !== null)\n      tag = state.tag;\n\n    if (tag === null && !state.any) {\n      // Trial and Error\n      const save = input.save();\n      try {\n        if (state.choice === null)\n          this._decodeGeneric(state.tag, input, options);\n        else\n          this._decodeChoice(input, options);\n        present = true;\n      } catch (e) {\n        present = false;\n      }\n      input.restore(save);\n    } else {\n      present = this._peekTag(input, tag, state.any);\n\n      if (input.isError(present))\n        return present;\n    }\n  }\n\n  // Push object on stack\n  let prevObj;\n  if (state.obj && present)\n    prevObj = input.enterObject();\n\n  if (present) {\n    // Unwrap explicit values\n    if (state.explicit !== null) {\n      const explicit = this._decodeTag(input, state.explicit);\n      if (input.isError(explicit))\n        return explicit;\n      input = explicit;\n    }\n\n    const start = input.offset;\n\n    // Unwrap implicit and normal values\n    if (state.use === null && state.choice === null) {\n      let save;\n      if (state.any)\n        save = input.save();\n      const body = this._decodeTag(\n        input,\n        state.implicit !== null ? state.implicit : state.tag,\n        state.any\n      );\n      if (input.isError(body))\n        return body;\n\n      if (state.any)\n        result = input.raw(save);\n      else\n        input = body;\n    }\n\n    if (options && options.track && state.tag !== null)\n      options.track(input.path(), start, input.length, 'tagged');\n\n    if (options && options.track && state.tag !== null)\n      options.track(input.path(), input.offset, input.length, 'content');\n\n    // Select proper method for tag\n    if (state.any) {\n      // no-op\n    } else if (state.choice === null) {\n      result = this._decodeGeneric(state.tag, input, options);\n    } else {\n      result = this._decodeChoice(input, options);\n    }\n\n    if (input.isError(result))\n      return result;\n\n    // Decode children\n    if (!state.any && state.choice === null && state.children !== null) {\n      state.children.forEach(function decodeChildren(child) {\n        // NOTE: We are ignoring errors here, to let parser continue with other\n        // parts of encoded data\n        child._decode(input, options);\n      });\n    }\n\n    // Decode contained/encoded by schema, only in bit or octet strings\n    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {\n      const data = new DecoderBuffer(result);\n      result = this._getUse(state.contains, input._reporterState.obj)\n        ._decode(data, options);\n    }\n  }\n\n  // Pop object\n  if (state.obj && present)\n    result = input.leaveObject(prevObj);\n\n  // Set key\n  if (state.key !== null && (result !== null || present === true))\n    input.leaveKey(prevKey, state.key, result);\n  else if (prevKey !== null)\n    input.exitKey(prevKey);\n\n  return result;\n};\n\nNode.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {\n  const state = this._baseState;\n\n  if (tag === 'seq' || tag === 'set')\n    return null;\n  if (tag === 'seqof' || tag === 'setof')\n    return this._decodeList(input, tag, state.args[0], options);\n  else if (/str$/.test(tag))\n    return this._decodeStr(input, tag, options);\n  else if (tag === 'objid' && state.args)\n    return this._decodeObjid(input, state.args[0], state.args[1], options);\n  else if (tag === 'objid')\n    return this._decodeObjid(input, null, null, options);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._decodeTime(input, tag, options);\n  else if (tag === 'null_')\n    return this._decodeNull(input, options);\n  else if (tag === 'bool')\n    return this._decodeBool(input, options);\n  else if (tag === 'objDesc')\n    return this._decodeStr(input, tag, options);\n  else if (tag === 'int' || tag === 'enum')\n    return this._decodeInt(input, state.args && state.args[0], options);\n\n  if (state.use !== null) {\n    return this._getUse(state.use, input._reporterState.obj)\n      ._decode(input, options);\n  } else {\n    return input.error('unknown tag: ' + tag);\n  }\n};\n\nNode.prototype._getUse = function _getUse(entity, obj) {\n\n  const state = this._baseState;\n  // Create altered use decoder if implicit is set\n  state.useDecoder = this._use(entity, obj);\n  assert(state.useDecoder._baseState.parent === null);\n  state.useDecoder = state.useDecoder._baseState.children[0];\n  if (state.implicit !== state.useDecoder._baseState.implicit) {\n    state.useDecoder = state.useDecoder.clone();\n    state.useDecoder._baseState.implicit = state.implicit;\n  }\n  return state.useDecoder;\n};\n\nNode.prototype._decodeChoice = function decodeChoice(input, options) {\n  const state = this._baseState;\n  let result = null;\n  let match = false;\n\n  Object.keys(state.choice).some(function(key) {\n    const save = input.save();\n    const node = state.choice[key];\n    try {\n      const value = node._decode(input, options);\n      if (input.isError(value))\n        return false;\n\n      result = { type: key, value: value };\n      match = true;\n    } catch (e) {\n      input.restore(save);\n      return false;\n    }\n    return true;\n  }, this);\n\n  if (!match)\n    return input.error('Choice not matched');\n\n  return result;\n};\n\n//\n// Encoding\n//\n\nNode.prototype._createEncoderBuffer = function createEncoderBuffer(data) {\n  return new EncoderBuffer(data, this.reporter);\n};\n\nNode.prototype._encode = function encode(data, reporter, parent) {\n  const state = this._baseState;\n  if (state['default'] !== null && state['default'] === data)\n    return;\n\n  const result = this._encodeValue(data, reporter, parent);\n  if (result === undefined)\n    return;\n\n  if (this._skipDefault(result, reporter, parent))\n    return;\n\n  return result;\n};\n\nNode.prototype._encodeValue = function encode(data, reporter, parent) {\n  const state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return state.children[0]._encode(data, reporter || new Reporter());\n\n  let result = null;\n\n  // Set reporter to share it with a child class\n  this.reporter = reporter;\n\n  // Check if data is there\n  if (state.optional && data === undefined) {\n    if (state['default'] !== null)\n      data = state['default'];\n    else\n      return;\n  }\n\n  // Encode children first\n  let content = null;\n  let primitive = false;\n  if (state.any) {\n    // Anything that was given is translated to buffer\n    result = this._createEncoderBuffer(data);\n  } else if (state.choice) {\n    result = this._encodeChoice(data, reporter);\n  } else if (state.contains) {\n    content = this._getUse(state.contains, parent)._encode(data, reporter);\n    primitive = true;\n  } else if (state.children) {\n    content = state.children.map(function(child) {\n      if (child._baseState.tag === 'null_')\n        return child._encode(null, reporter, data);\n\n      if (child._baseState.key === null)\n        return reporter.error('Child should have a key');\n      const prevKey = reporter.enterKey(child._baseState.key);\n\n      if (typeof data !== 'object')\n        return reporter.error('Child expected, but input is not object');\n\n      const res = child._encode(data[child._baseState.key], reporter, data);\n      reporter.leaveKey(prevKey);\n\n      return res;\n    }, this).filter(function(child) {\n      return child;\n    });\n    content = this._createEncoderBuffer(content);\n  } else {\n    if (state.tag === 'seqof' || state.tag === 'setof') {\n      // TODO(indutny): this should be thrown on DSL level\n      if (!(state.args && state.args.length === 1))\n        return reporter.error('Too many args for : ' + state.tag);\n\n      if (!Array.isArray(data))\n        return reporter.error('seqof/setof, but data is not Array');\n\n      const child = this.clone();\n      child._baseState.implicit = null;\n      content = this._createEncoderBuffer(data.map(function(item) {\n        const state = this._baseState;\n\n        return this._getUse(state.args[0], data)._encode(item, reporter);\n      }, child));\n    } else if (state.use !== null) {\n      result = this._getUse(state.use, parent)._encode(data, reporter);\n    } else {\n      content = this._encodePrimitive(state.tag, data);\n      primitive = true;\n    }\n  }\n\n  // Encode data itself\n  if (!state.any && state.choice === null) {\n    const tag = state.implicit !== null ? state.implicit : state.tag;\n    const cls = state.implicit === null ? 'universal' : 'context';\n\n    if (tag === null) {\n      if (state.use === null)\n        reporter.error('Tag could be omitted only for .use()');\n    } else {\n      if (state.use === null)\n        result = this._encodeComposite(tag, primitive, cls, content);\n    }\n  }\n\n  // Wrap in explicit\n  if (state.explicit !== null)\n    result = this._encodeComposite(state.explicit, false, 'context', result);\n\n  return result;\n};\n\nNode.prototype._encodeChoice = function encodeChoice(data, reporter) {\n  const state = this._baseState;\n\n  const node = state.choice[data.type];\n  if (!node) {\n    assert(\n      false,\n      data.type + ' not found in ' +\n            JSON.stringify(Object.keys(state.choice)));\n  }\n  return node._encode(data.value, reporter);\n};\n\nNode.prototype._encodePrimitive = function encodePrimitive(tag, data) {\n  const state = this._baseState;\n\n  if (/str$/.test(tag))\n    return this._encodeStr(data, tag);\n  else if (tag === 'objid' && state.args)\n    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);\n  else if (tag === 'objid')\n    return this._encodeObjid(data, null, null);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._encodeTime(data, tag);\n  else if (tag === 'null_')\n    return this._encodeNull();\n  else if (tag === 'int' || tag === 'enum')\n    return this._encodeInt(data, state.args && state.reverseArgs[0]);\n  else if (tag === 'bool')\n    return this._encodeBool(data);\n  else if (tag === 'objDesc')\n    return this._encodeStr(data, tag);\n  else\n    throw new Error('Unsupported tag: ' + tag);\n};\n\nNode.prototype._isNumstr = function isNumstr(str) {\n  return /^[0-9 ]*$/.test(str);\n};\n\nNode.prototype._isPrintstr = function isPrintstr(str) {\n  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);\n};\n","'use strict';\n\nconst inherits = require('inherits');\n\nconst DEREncoder = require('./der');\n\nfunction PEMEncoder(entity) {\n  DEREncoder.call(this, entity);\n  this.enc = 'pem';\n}\ninherits(PEMEncoder, DEREncoder);\nmodule.exports = PEMEncoder;\n\nPEMEncoder.prototype.encode = function encode(data, options) {\n  const buf = DEREncoder.prototype.encode.call(this, data);\n\n  const p = buf.toString('base64');\n  const out = [ '-----BEGIN ' + options.label + '-----' ];\n  for (let i = 0; i < p.length; i += 64)\n    out.push(p.slice(i, i + 64));\n  out.push('-----END ' + options.label + '-----');\n  return out.join('\\n');\n};\n","'use strict';\n\n// Helper\nfunction reverse(map) {\n  const res = {};\n\n  Object.keys(map).forEach(function(key) {\n    // Convert key to integer if it is stringified\n    if ((key | 0) == key)\n      key = key | 0;\n\n    const value = map[key];\n    res[value] = key;\n  });\n\n  return res;\n}\n\nexports.tagClass = {\n  0: 'universal',\n  1: 'application',\n  2: 'context',\n  3: 'private'\n};\nexports.tagClassByName = reverse(exports.tagClass);\n\nexports.tag = {\n  0x00: 'end',\n  0x01: 'bool',\n  0x02: 'int',\n  0x03: 'bitstr',\n  0x04: 'octstr',\n  0x05: 'null_',\n  0x06: 'objid',\n  0x07: 'objDesc',\n  0x08: 'external',\n  0x09: 'real',\n  0x0a: 'enum',\n  0x0b: 'embed',\n  0x0c: 'utf8str',\n  0x0d: 'relativeOid',\n  0x10: 'seq',\n  0x11: 'set',\n  0x12: 'numstr',\n  0x13: 'printstr',\n  0x14: 't61str',\n  0x15: 'videostr',\n  0x16: 'ia5str',\n  0x17: 'utctime',\n  0x18: 'gentime',\n  0x19: 'graphstr',\n  0x1a: 'iso646str',\n  0x1b: 'genstr',\n  0x1c: 'unistr',\n  0x1d: 'charstr',\n  0x1e: 'bmpstr'\n};\nexports.tagByName = reverse(exports.tag);\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for representing a private and public keypair on an AVM Chain.\n */\nclass KeyPair extends secp256k1_1.SECP256k1KeyPair {\n    constructor(hrp, chainid) {\n        super();\n        this.chainid = \"\";\n        this.hrp = \"\";\n        /**\n        * Returns the address's string representation.\n        *\n        * @returns A string representation of the address\n        */\n        this.getAddressString = () => {\n            const addr = this.addressFromPublicKey(this.pubk);\n            const type = \"bech32\";\n            return serialization.bufferToType(addr, type, this.hrp, this.chainid);\n        };\n        /**\n        * Returns the chainID associated with this key.\n        *\n        * @returns The [[KeyPair]]'s chainID\n        */\n        this.getChainID = () => this.chainid;\n        /**\n        * Sets the the chainID associated with this key.\n        *\n        * @param chainid String for the chainID\n        */\n        this.setChainID = (chainid) => {\n            this.chainid = chainid;\n        };\n        /**\n        * Returns the Human-Readable-Part of the network associated with this key.\n        *\n        * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n        */\n        this.getHRP = () => this.hrp;\n        /**\n        * Sets the the Human-Readable-Part of the network associated with this key.\n        *\n        * @param hrp String for the Human-Readable-Part of Bech32 addresses\n        */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        this.chainid = chainid;\n        this.hrp = hrp;\n        this.generateKey();\n    }\n    clone() {\n        const newkp = new KeyPair(this.hrp, this.chainid);\n        newkp.importKey(bintools.copyFrom(this.getPrivateKey()));\n        return newkp;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyPair(args[0], args[1]);\n        }\n        return new KeyPair(this.hrp, this.chainid);\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam KeyPair Class extending [[SECP256k1KeyChain]] which is used as the key in [[KeyChain]]\n */\nclass KeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n    * Returns instance of KeyChain.\n    */\n    constructor(hrp, chainid) {\n        super();\n        this.hrp = \"\";\n        this.chainid = \"\";\n        /**\n        * Makes a new key pair, returns the address.\n        *\n        * @returns The new key pair\n        */\n        this.makeKey = () => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainid);\n            super.addKey(newKey);\n        };\n        /**\n        * Given a private key, makes a new key pair, returns the address.\n        *\n        * @param privk A {@link https://github.com/feross/buffer|Buffer} or cb58 serialized string representing the private key\n        *\n        * @returns The new key pair\n        */\n        this.importKey = (privk) => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            let pk;\n            if (typeof privk === \"string\") {\n                pk = bintools.cb58Decode(privk.split(\"-\")[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainid = chainid;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyChain(args[0], args[1]);\n        }\n        return new KeyChain(this.hrp, this.chainid);\n    }\n    clone() {\n        const newkc = new KeyChain(this.hrp, this.chainid);\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n    union(kc) {\n        let newkc = kc.clone();\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\nconst Buffer = require('safer-buffer').Buffer;\n\nconst DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n}\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  const lines = data.toString().split(/[\\r\\n]+/g);\n\n  const label = options.label.toUpperCase();\n\n  const re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  let start = -1;\n  let end = -1;\n  for (let i = 0; i < lines.length; i++) {\n    const match = lines[i].match(re);\n    if (match === null)\n      continue;\n\n    if (match[2] !== label)\n      continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN')\n        break;\n      start = i;\n    } else {\n      if (match[1] !== 'END')\n        break;\n      end = i;\n      break;\n    }\n  }\n  if (start === -1 || end === -1)\n    throw new Error('PEM section not found for: ' + label);\n\n  const base64 = lines.slice(start + 1, end).join('');\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9+/=]+/gi, '');\n\n  const input = Buffer.from(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n","\"use strict\";\n/**\n* @packageDocumentation\n* @module API-AVM-Constants\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AVMConstants = void 0;\nclass AVMConstants {\n}\nexports.AVMConstants = AVMConstants;\nAVMConstants.LATESTCODEC = 0;\nAVMConstants.SECPFXID = 0;\nAVMConstants.NFTFXID = 1;\nAVMConstants.SECPMINTOUTPUTID = 6;\nAVMConstants.SECPMINTOUTPUTID_CODECONE = 65537;\nAVMConstants.SECPXFEROUTPUTID = 7;\nAVMConstants.SECPXFEROUTPUTID_CODECONE = 65538;\nAVMConstants.NFTXFEROUTPUTID = 11;\nAVMConstants.NFTXFEROUTPUTID_CODECONE = 131073;\nAVMConstants.NFTMINTOUTPUTID = 10;\nAVMConstants.NFTMINTOUTPUTID_CODECONE = 131072;\nAVMConstants.SECPINPUTID = 5;\nAVMConstants.SECPINPUTID_CODECONE = 65536;\nAVMConstants.SECPMINTOPID = 8;\nAVMConstants.SECPMINTOPID_CODECONE = 65539;\nAVMConstants.NFTMINTOPID = 12;\nAVMConstants.NFTMINTOPID_CODECONE = 131074;\nAVMConstants.NFTXFEROPID = 13;\nAVMConstants.NFTXFEROPID_CODECONE = 131075;\nAVMConstants.BASETX = 0;\nAVMConstants.BASETX_CODECONE = 0;\nAVMConstants.CREATEASSETTX = 1;\nAVMConstants.CREATEASSETTX_CODECONE = 1;\nAVMConstants.OPERATIONTX = 2;\nAVMConstants.OPERATIONTX_CODECONE = 2;\nAVMConstants.IMPORTTX = 3;\nAVMConstants.IMPORTTX_CODECONE = 3;\nAVMConstants.EXPORTTX = 4;\nAVMConstants.EXPORTTX_CODECONE = 4;\nAVMConstants.SECPCREDENTIAL = 9;\nAVMConstants.SECPCREDENTIAL_CODECONE = 65540;\nAVMConstants.NFTCREDENTIAL = 14;\nAVMConstants.NFTCREDENTIAL_CODECONE = 131076;\nAVMConstants.ASSETIDLEN = 32;\nAVMConstants.BLOCKCHAINIDLEN = 32;\nAVMConstants.SYMBOLMAXLEN = 4;\nAVMConstants.ASSETNAMELEN = 128;\nAVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztFQUdFOzs7QUFFRixNQUFhLFlBQVk7O0FBQXpCLG9DQTRFQztBQTNFUSx3QkFBVyxHQUFXLENBQUMsQ0FBQTtBQUV2QixxQkFBUSxHQUFXLENBQUMsQ0FBQTtBQUVwQixvQkFBTyxHQUFXLENBQUMsQ0FBQTtBQUVuQiw2QkFBZ0IsR0FBVyxDQUFDLENBQUE7QUFFNUIsc0NBQXlCLEdBQVcsS0FBSyxDQUFBO0FBRXpDLDZCQUFnQixHQUFXLENBQUMsQ0FBQTtBQUU1QixzQ0FBeUIsR0FBVyxLQUFLLENBQUE7QUFFekMsNEJBQWUsR0FBVyxFQUFFLENBQUE7QUFFNUIscUNBQXdCLEdBQVcsTUFBTSxDQUFBO0FBRXpDLDRCQUFlLEdBQVcsRUFBRSxDQUFBO0FBRTVCLHFDQUF3QixHQUFXLE1BQU0sQ0FBQTtBQUV6Qyx3QkFBVyxHQUFXLENBQUMsQ0FBQTtBQUV2QixpQ0FBb0IsR0FBVyxLQUFLLENBQUE7QUFFcEMseUJBQVksR0FBVyxDQUFDLENBQUE7QUFFeEIsa0NBQXFCLEdBQVcsS0FBSyxDQUFBO0FBRXJDLHdCQUFXLEdBQVcsRUFBRSxDQUFBO0FBRXhCLGlDQUFvQixHQUFXLE1BQU0sQ0FBQTtBQUVyQyx3QkFBVyxHQUFXLEVBQUUsQ0FBQTtBQUV4QixpQ0FBb0IsR0FBVyxNQUFNLENBQUE7QUFFckMsbUJBQU0sR0FBVyxDQUFDLENBQUE7QUFFbEIsNEJBQWUsR0FBVyxDQUFDLENBQUE7QUFFM0IsMEJBQWEsR0FBVyxDQUFDLENBQUE7QUFFekIsbUNBQXNCLEdBQVcsQ0FBQyxDQUFBO0FBRWxDLHdCQUFXLEdBQVcsQ0FBQyxDQUFBO0FBRXZCLGlDQUFvQixHQUFXLENBQUMsQ0FBQTtBQUVoQyxxQkFBUSxHQUFXLENBQUMsQ0FBQTtBQUVwQiw4QkFBaUIsR0FBVyxDQUFDLENBQUE7QUFFN0IscUJBQVEsR0FBVyxDQUFDLENBQUE7QUFFcEIsOEJBQWlCLEdBQVcsQ0FBQyxDQUFBO0FBRTdCLDJCQUFjLEdBQVcsQ0FBQyxDQUFBO0FBRTFCLG9DQUF1QixHQUFXLEtBQUssQ0FBQTtBQUV2QywwQkFBYSxHQUFXLEVBQUUsQ0FBQTtBQUUxQixtQ0FBc0IsR0FBVyxNQUFNLENBQUE7QUFFdkMsdUJBQVUsR0FBVyxFQUFFLENBQUE7QUFFdkIsNEJBQWUsR0FBVyxFQUFFLENBQUE7QUFFNUIseUJBQVksR0FBVyxDQUFDLENBQUE7QUFFeEIseUJBQVksR0FBVyxHQUFHLENBQUE7QUFFMUIsMEJBQWEsR0FBVyxFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4qIEBtb2R1bGUgQVBJLUFWTS1Db25zdGFudHNcbiovXG5cbmV4cG9ydCBjbGFzcyBBVk1Db25zdGFudHMge1xuICBzdGF0aWMgTEFURVNUQ09ERUM6IG51bWJlciA9IDBcblxuICBzdGF0aWMgU0VDUEZYSUQ6IG51bWJlciA9IDBcblxuICBzdGF0aWMgTkZURlhJRDogbnVtYmVyID0gMVxuXG4gIHN0YXRpYyBTRUNQTUlOVE9VVFBVVElEOiBudW1iZXIgPSA2XG5cbiAgc3RhdGljIFNFQ1BNSU5UT1VUUFVUSURfQ09ERUNPTkU6IG51bWJlciA9IDY1NTM3XG5cbiAgc3RhdGljIFNFQ1BYRkVST1VUUFVUSUQ6IG51bWJlciA9IDdcblxuICBzdGF0aWMgU0VDUFhGRVJPVVRQVVRJRF9DT0RFQ09ORTogbnVtYmVyID0gNjU1MzhcblxuICBzdGF0aWMgTkZUWEZFUk9VVFBVVElEOiBudW1iZXIgPSAxMVxuXG4gIHN0YXRpYyBORlRYRkVST1VUUFVUSURfQ09ERUNPTkU6IG51bWJlciA9IDEzMTA3M1xuXG4gIHN0YXRpYyBORlRNSU5UT1VUUFVUSUQ6IG51bWJlciA9IDEwXG5cbiAgc3RhdGljIE5GVE1JTlRPVVRQVVRJRF9DT0RFQ09ORTogbnVtYmVyID0gMTMxMDcyXG5cbiAgc3RhdGljIFNFQ1BJTlBVVElEOiBudW1iZXIgPSA1XG5cbiAgc3RhdGljIFNFQ1BJTlBVVElEX0NPREVDT05FOiBudW1iZXIgPSA2NTUzNlxuXG4gIHN0YXRpYyBTRUNQTUlOVE9QSUQ6IG51bWJlciA9IDhcblxuICBzdGF0aWMgU0VDUE1JTlRPUElEX0NPREVDT05FOiBudW1iZXIgPSA2NTUzOVxuXG4gIHN0YXRpYyBORlRNSU5UT1BJRDogbnVtYmVyID0gMTJcblxuICBzdGF0aWMgTkZUTUlOVE9QSURfQ09ERUNPTkU6IG51bWJlciA9IDEzMTA3NFxuXG4gIHN0YXRpYyBORlRYRkVST1BJRDogbnVtYmVyID0gMTNcblxuICBzdGF0aWMgTkZUWEZFUk9QSURfQ09ERUNPTkU6IG51bWJlciA9IDEzMTA3NVxuXG4gIHN0YXRpYyBCQVNFVFg6IG51bWJlciA9IDBcblxuICBzdGF0aWMgQkFTRVRYX0NPREVDT05FOiBudW1iZXIgPSAwXG5cbiAgc3RhdGljIENSRUFURUFTU0VUVFg6IG51bWJlciA9IDFcblxuICBzdGF0aWMgQ1JFQVRFQVNTRVRUWF9DT0RFQ09ORTogbnVtYmVyID0gMVxuXG4gIHN0YXRpYyBPUEVSQVRJT05UWDogbnVtYmVyID0gMlxuXG4gIHN0YXRpYyBPUEVSQVRJT05UWF9DT0RFQ09ORTogbnVtYmVyID0gMlxuXG4gIHN0YXRpYyBJTVBPUlRUWDogbnVtYmVyID0gM1xuXG4gIHN0YXRpYyBJTVBPUlRUWF9DT0RFQ09ORTogbnVtYmVyID0gM1xuXG4gIHN0YXRpYyBFWFBPUlRUWDogbnVtYmVyID0gNFxuXG4gIHN0YXRpYyBFWFBPUlRUWF9DT0RFQ09ORTogbnVtYmVyID0gNFxuXG4gIHN0YXRpYyBTRUNQQ1JFREVOVElBTDogbnVtYmVyID0gOVxuICBcbiAgc3RhdGljIFNFQ1BDUkVERU5USUFMX0NPREVDT05FOiBudW1iZXIgPSA2NTU0MFxuXG4gIHN0YXRpYyBORlRDUkVERU5USUFMOiBudW1iZXIgPSAxNFxuXG4gIHN0YXRpYyBORlRDUkVERU5USUFMX0NPREVDT05FOiBudW1iZXIgPSAxMzEwNzZcblxuICBzdGF0aWMgQVNTRVRJRExFTjogbnVtYmVyID0gMzJcblxuICBzdGF0aWMgQkxPQ0tDSEFJTklETEVOOiBudW1iZXIgPSAzMlxuXG4gIHN0YXRpYyBTWU1CT0xNQVhMRU46IG51bWJlciA9IDRcblxuICBzdGF0aWMgQVNTRVROQU1FTEVOOiBudW1iZXIgPSAxMjhcblxuICBzdGF0aWMgQUREUkVTU0xFTkdUSDogbnVtYmVyID0gMjBcbn1cbiJdfQ==","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-KeyChain\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for representing a private and public keypair on an AVM Chain.\n */\nclass KeyPair extends secp256k1_1.SECP256k1KeyPair {\n    constructor(hrp, chainid) {\n        super();\n        this.chainID = '';\n        this.hrp = '';\n        /**\n         * Returns the address's string representation.\n          *\n          * @returns A string representation of the address\n          */\n        this.getAddressString = () => {\n            const addr = this.addressFromPublicKey(this.pubk);\n            const type = \"bech32\";\n            return serialization.bufferToType(addr, type, this.hrp, this.chainID);\n        };\n        /**\n          * Returns the chainID associated with this key.\n          *\n          * @returns The [[KeyPair]]'s chainID\n          */\n        this.getChainID = () => this.chainID;\n        /**\n          * Sets the the chainID associated with this key.\n          *\n          * @param chainID String for the chainID\n          */\n        this.setChainID = (chainID) => {\n            this.chainID = chainID;\n        };\n        /**\n          * Returns the Human-Readable-Part of the network associated with this key.\n          *\n          * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n          */\n        this.getHRP = () => this.hrp;\n        /**\n          * Sets the the Human-Readable-Part of the network associated with this key.\n          *\n          * @param hrp String for the Human-Readable-Part of Bech32 addresses\n          */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        this.chainID = chainid;\n        this.hrp = hrp;\n        this.generateKey();\n    }\n    clone() {\n        let newkp = new KeyPair(this.hrp, this.chainID);\n        newkp.importKey(bintools.copyFrom(this.getPrivateKey()));\n        return newkp;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyPair(args[0], args[1]);\n        }\n        return new KeyPair(this.hrp, this.chainID);\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n  * Class for representing a key chain in Avalanche.\n  *\n  * @typeparam KeyPair Class extending [[SECP256k1KeyChain]] which is used as the key in [[KeyChain]]\n  */\nclass KeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n      * Returns instance of KeyChain.\n      */\n    constructor(hrp, chainID) {\n        super();\n        this.hrp = '';\n        this.chainID = '';\n        /**\n          * Makes a new key pair, returns the address.\n          *\n          * @returns The new key pair\n          */\n        this.makeKey = () => {\n            let keypair = new KeyPair(this.hrp, this.chainID);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainID);\n            super.addKey(newKey);\n        };\n        /**\n          * Given a private key, makes a new key pair, returns the address.\n          *\n          * @param privk A {@link https://github.com/feross/buffer|Buffer}\n          * or cb58 serialized string representing the private key\n          *\n          * @returns The new key pair\n          */\n        this.importKey = (privk) => {\n            let keypair = new KeyPair(this.hrp, this.chainID);\n            let pk;\n            if (typeof privk === 'string') {\n                pk = bintools.cb58Decode(privk.split('-')[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainID = chainID;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyChain(args[0], args[1]);\n        }\n        return new KeyChain(this.hrp, this.chainID);\n    }\n    ;\n    clone() {\n        const newkc = new KeyChain(this.hrp, this.chainID);\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n    ;\n    union(kc) {\n        let newkc = kc.clone();\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[k].clone());\n        }\n        return newkc;\n    }\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node's AuthAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AuthAPI extends jrpcapi_1.JRPCAPI {\n    constructor(core, baseurl = \"/ext/auth\") {\n        super(core, baseurl);\n        /**\n        * Creates a new authorization token that grants access to one or more API endpoints.\n        *\n        * @param password This node's authorization token password, set through the CLI when the node was launched.\n        * @param endpoints A list of endpoints that will be accessible using the generated token. If there\"s an element that is \"*\", this token can reach any endpoint.\n        *\n        * @returns Returns a Promise<string> containing the authorization token.\n        */\n        this.newToken = (password, endpoints) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                password,\n                endpoints\n            };\n            const response = yield this.callMethod(\"auth.newToken\", params);\n            return response.data.result.token;\n        });\n        /**\n        * Revokes an authorization token, removing all of its rights to access endpoints.\n        *\n        * @param password This node's authorization token password, set through the CLI when the node was launched.\n        * @param token An authorization token whose access should be revoked.\n        *\n        * @returns Returns a Promise<boolean> indicating if a token was successfully revoked.\n        */\n        this.revokeToken = (password, token) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                password,\n                token\n            };\n            const response = yield this.callMethod(\"auth.revokeToken\", params);\n            return response.data.result.success;\n        });\n        /**\n        * Change this node's authorization token password. **Any authorization tokens created under an old password will become invalid.**\n        *\n        * @param oldPassword This node's authorization token password, set through the CLI when the node was launched.\n        * @param newPassword A new password for this node's authorization token issuance.\n        *\n        * @returns Returns a Promise<boolean> indicating if the password was successfully changed.\n        */\n        this.changePassword = (oldPassword, newPassword) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                oldPassword,\n                newPassword\n            };\n            const response = yield this.callMethod(\"auth.changePassword\", params);\n            return response.data.result.success;\n        });\n    }\n}\nexports.AuthAPI = AuthAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXV0aC9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBS0Esa0RBQThDO0FBRzlDOzs7Ozs7R0FNRztBQUNILE1BQWEsT0FBUSxTQUFRLGlCQUFPO0lBcURsQyxZQUFZLElBQW1CLEVBQUUsVUFBa0IsV0FBVztRQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFwRHJGOzs7Ozs7O1VBT0U7UUFDSCxhQUFRLEdBQUcsQ0FBTyxRQUFnQixFQUFFLFNBQW1CLEVBQW1CLEVBQUU7WUFDMUUsTUFBTSxNQUFNLEdBQVE7Z0JBQ2xCLFFBQVE7Z0JBQ1IsU0FBUzthQUNWLENBQUE7WUFDRCxNQUFNLFFBQVEsR0FBd0IsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUNwRixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQTtRQUNuQyxDQUFDLENBQUEsQ0FBQTtRQUdEOzs7Ozs7O1VBT0U7UUFDRixnQkFBVyxHQUFHLENBQU8sUUFBZ0IsRUFBRSxLQUFhLEVBQW9CLEVBQUU7WUFDeEUsTUFBTSxNQUFNLEdBQVE7Z0JBQ2xCLFFBQVE7Z0JBQ1IsS0FBSzthQUNOLENBQUE7WUFDRCxNQUFNLFFBQVEsR0FBd0IsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFBO1lBQ3ZGLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFBO1FBQ3JDLENBQUMsQ0FBQSxDQUFBO1FBRUQ7Ozs7Ozs7VUFPRTtRQUNGLG1CQUFjLEdBQUcsQ0FBTyxXQUFtQixFQUFFLFdBQW1CLEVBQW9CLEVBQUU7WUFDcEYsTUFBTSxNQUFNLEdBQVE7Z0JBQ2xCLFdBQVc7Z0JBQ1gsV0FBVzthQUNaLENBQUE7WUFDRCxNQUFNLFFBQVEsR0FBd0IsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQyxDQUFBO1lBQzFGLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFBO1FBQ3JDLENBQUMsQ0FBQSxDQUFBO0lBRXNGLENBQUM7Q0FDekY7QUF0REQsMEJBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuKiBAbW9kdWxlIEFQSS1BdXRoXG4qL1xuaW1wb3J0IEF2YWxhbmNoZUNvcmUgZnJvbSBcIi4uLy4uL2F2YWxhbmNoZVwiXG5pbXBvcnQgeyBKUlBDQVBJIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9qcnBjYXBpXCJcbmltcG9ydCB7IFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2FwaWJhc2VcIlxuXG4vKipcbiAqIENsYXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIGEgbm9kZSdzIEF1dGhBUEkuXG4gKlxuICogQGNhdGVnb3J5IFJQQ0FQSXNcbiAqXG4gKiBAcmVtYXJrcyBUaGlzIGV4dGVuZHMgdGhlIFtbSlJQQ0FQSV1dIGNsYXNzLiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgZGlyZWN0bHkgY2FsbGVkLiBJbnN0ZWFkLCB1c2UgdGhlIFtbQXZhbGFuY2hlLmFkZEFQSV1dIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIHRoaXMgaW50ZXJmYWNlIHdpdGggQXZhbGFuY2hlLlxuICovXG5leHBvcnQgY2xhc3MgQXV0aEFQSSBleHRlbmRzIEpSUENBUEkge1xuICAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgYXV0aG9yaXphdGlvbiB0b2tlbiB0aGF0IGdyYW50cyBhY2Nlc3MgdG8gb25lIG9yIG1vcmUgQVBJIGVuZHBvaW50cy5cbiAgICpcbiAgICogQHBhcmFtIHBhc3N3b3JkIFRoaXMgbm9kZSdzIGF1dGhvcml6YXRpb24gdG9rZW4gcGFzc3dvcmQsIHNldCB0aHJvdWdoIHRoZSBDTEkgd2hlbiB0aGUgbm9kZSB3YXMgbGF1bmNoZWQuXG4gICAqIEBwYXJhbSBlbmRwb2ludHMgQSBsaXN0IG9mIGVuZHBvaW50cyB0aGF0IHdpbGwgYmUgYWNjZXNzaWJsZSB1c2luZyB0aGUgZ2VuZXJhdGVkIHRva2VuLiBJZiB0aGVyZVwicyBhbiBlbGVtZW50IHRoYXQgaXMgXCIqXCIsIHRoaXMgdG9rZW4gY2FuIHJlYWNoIGFueSBlbmRwb2ludC5cbiAgICpcbiAgICogQHJldHVybnMgUmV0dXJucyBhIFByb21pc2U8c3RyaW5nPiBjb250YWluaW5nIHRoZSBhdXRob3JpemF0aW9uIHRva2VuLlxuICAgKi9cbiAgbmV3VG9rZW4gPSBhc3luYyAocGFzc3dvcmQ6IHN0cmluZywgZW5kcG9pbnRzOiBzdHJpbmdbXSk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOiBhbnkgPSB7XG4gICAgICBwYXNzd29yZCxcbiAgICAgIGVuZHBvaW50c1xuICAgIH1cbiAgICBjb25zdCByZXNwb25zZTogUmVxdWVzdFJlc3BvbnNlRGF0YSA9IGF3YWl0IHRoaXMuY2FsbE1ldGhvZChcImF1dGgubmV3VG9rZW5cIiwgcGFyYW1zKVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhLnJlc3VsdC50b2tlblxuICB9XG5cblxuICAvKipcbiAgKiBSZXZva2VzIGFuIGF1dGhvcml6YXRpb24gdG9rZW4sIHJlbW92aW5nIGFsbCBvZiBpdHMgcmlnaHRzIHRvIGFjY2VzcyBlbmRwb2ludHMuXG4gICpcbiAgKiBAcGFyYW0gcGFzc3dvcmQgVGhpcyBub2RlJ3MgYXV0aG9yaXphdGlvbiB0b2tlbiBwYXNzd29yZCwgc2V0IHRocm91Z2ggdGhlIENMSSB3aGVuIHRoZSBub2RlIHdhcyBsYXVuY2hlZC5cbiAgKiBAcGFyYW0gdG9rZW4gQW4gYXV0aG9yaXphdGlvbiB0b2tlbiB3aG9zZSBhY2Nlc3Mgc2hvdWxkIGJlIHJldm9rZWQuXG4gICpcbiAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxib29sZWFuPiBpbmRpY2F0aW5nIGlmIGEgdG9rZW4gd2FzIHN1Y2Nlc3NmdWxseSByZXZva2VkLlxuICAqL1xuICByZXZva2VUb2tlbiA9IGFzeW5jIChwYXNzd29yZDogc3RyaW5nLCB0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOiBhbnkgPSB7XG4gICAgICBwYXNzd29yZCxcbiAgICAgIHRva2VuXG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFwiYXV0aC5yZXZva2VUb2tlblwiLCBwYXJhbXMpXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3NcbiAgfVxuXG4gIC8qKlxuICAqIENoYW5nZSB0aGlzIG5vZGUncyBhdXRob3JpemF0aW9uIHRva2VuIHBhc3N3b3JkLiAqKkFueSBhdXRob3JpemF0aW9uIHRva2VucyBjcmVhdGVkIHVuZGVyIGFuIG9sZCBwYXNzd29yZCB3aWxsIGJlY29tZSBpbnZhbGlkLioqXG4gICpcbiAgKiBAcGFyYW0gb2xkUGFzc3dvcmQgVGhpcyBub2RlJ3MgYXV0aG9yaXphdGlvbiB0b2tlbiBwYXNzd29yZCwgc2V0IHRocm91Z2ggdGhlIENMSSB3aGVuIHRoZSBub2RlIHdhcyBsYXVuY2hlZC5cbiAgKiBAcGFyYW0gbmV3UGFzc3dvcmQgQSBuZXcgcGFzc3dvcmQgZm9yIHRoaXMgbm9kZSdzIGF1dGhvcml6YXRpb24gdG9rZW4gaXNzdWFuY2UuXG4gICpcbiAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxib29sZWFuPiBpbmRpY2F0aW5nIGlmIHRoZSBwYXNzd29yZCB3YXMgc3VjY2Vzc2Z1bGx5IGNoYW5nZWQuXG4gICovXG4gIGNoYW5nZVBhc3N3b3JkID0gYXN5bmMgKG9sZFBhc3N3b3JkOiBzdHJpbmcsIG5ld1Bhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6IGFueSA9IHtcbiAgICAgIG9sZFBhc3N3b3JkLFxuICAgICAgbmV3UGFzc3dvcmRcbiAgICB9XG4gICAgY29uc3QgcmVzcG9uc2U6IFJlcXVlc3RSZXNwb25zZURhdGEgPSBhd2FpdCB0aGlzLmNhbGxNZXRob2QoXCJhdXRoLmNoYW5nZVBhc3N3b3JkXCIsIHBhcmFtcylcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzc1xuICB9XG5cbiAgY29uc3RydWN0b3IoY29yZTogQXZhbGFuY2hlQ29yZSwgYmFzZXVybDogc3RyaW5nID0gXCIvZXh0L2F1dGhcIikgeyBzdXBlcihjb3JlLCBiYXNldXJsKSB9XG59XG4iXX0=","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdXRoL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NFTTransferOutput = exports.NFTMintOutput = exports.SECPMintOutput = exports.SECPTransferOutput = exports.NFTOutput = exports.AmountOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Outputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nexports.SelectOutputClass = (outputid, ...args) => {\n    if (outputid === constants_1.AVMConstants.SECPXFEROUTPUTID || outputid === constants_1.AVMConstants.SECPXFEROUTPUTID_CODECONE) {\n        return new SECPTransferOutput(...args);\n    }\n    else if (outputid === constants_1.AVMConstants.SECPMINTOUTPUTID || outputid === constants_1.AVMConstants.SECPMINTOUTPUTID_CODECONE) {\n        return new SECPMintOutput(...args);\n    }\n    else if (outputid === constants_1.AVMConstants.NFTMINTOUTPUTID || outputid === constants_1.AVMConstants.NFTMINTOUTPUTID_CODECONE) {\n        return new NFTMintOutput(...args);\n    }\n    else if (outputid === constants_1.AVMConstants.NFTXFEROUTPUTID || outputid === constants_1.AVMConstants.NFTXFEROUTPUTID_CODECONE) {\n        return new NFTTransferOutput(...args);\n    }\n    throw new errors_1.OutputIdError(\"Error - SelectOutputClass: unknown outputid \" + outputid);\n};\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = exports.SelectOutputClass(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.AVMConstants.ASSETIDLEN);\n        offset += constants_1.AVMConstants.ASSETIDLEN;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = exports.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.AmountOutput = AmountOutput;\nclass NFTOutput extends output_1.BaseNFTOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"NFTOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.NFTOutput = NFTOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPTransferOutput extends AmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferOutput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.SECPXFEROUTPUTID : constants_1.AVMConstants.SECPXFEROUTPUTID_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPTransferOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.SECPXFEROUTPUTID : constants_1.AVMConstants.SECPXFEROUTPUTID_CODECONE;\n    }\n    /**\n       * Returns the outputID for this output\n       */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferOutput = SECPTransferOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPMintOutput extends output_1.Output {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPMintOutput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.SECPMINTOUTPUTID : constants_1.AVMConstants.SECPMINTOUTPUTID_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPMintOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.SECPMINTOUTPUTID : constants_1.AVMConstants.SECPMINTOUTPUTID_CODECONE;\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    create(...args) {\n        return new SECPMintOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.SECPMintOutput = SECPMintOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an NFT Mint and uses secp256k1 signature scheme.\n */\nclass NFTMintOutput extends NFTOutput {\n    /**\n     * An [[Output]] class which contains an NFT mint for an assetID.\n     *\n     * @param groupID A number specifies the group this NFT is issued to\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n     */\n    constructor(groupID = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this._typeName = \"NFTMintOutput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.NFTMINTOUTPUTID : constants_1.AVMConstants.NFTMINTOUTPUTID_CODECONE;\n        if (typeof groupID !== 'undefined') {\n            this.groupID.writeUInt32BE(groupID, 0);\n        }\n    }\n    //serialize and deserialize both are inherited\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTMintOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.NFTMINTOUTPUTID : constants_1.AVMConstants.NFTMINTOUTPUTID_CODECONE;\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOutput]] and returns the size of the output.\n     */\n    fromBuffer(utxobuff, offset = 0) {\n        this.groupID = bintools.copyFrom(utxobuff, offset, offset + 4);\n        offset += 4;\n        return super.fromBuffer(utxobuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[NFTMintOutput]] instance.\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let bsize = this.groupID.length + superbuff.length;\n        let barr = [this.groupID, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    create(...args) {\n        return new NFTMintOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.NFTMintOutput = NFTMintOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an NFT and uses secp256k1 signature scheme.\n */\nclass NFTTransferOutput extends NFTOutput {\n    /**\n       * An [[Output]] class which contains an NFT on an assetID.\n       *\n       * @param groupID A number representing the amount in the output\n       * @param payload A {@link https://github.com/feross/buffer|Buffer} of max length 1024\n       * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n       * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n       * @param threshold A number representing the the threshold number of signers required to sign the transaction\n  \n       */\n    constructor(groupID = undefined, payload = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this._typeName = \"NFTTransferOutput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.NFTXFEROUTPUTID : constants_1.AVMConstants.NFTXFEROUTPUTID_CODECONE;\n        this.sizePayload = buffer_1.Buffer.alloc(4);\n        /**\n         * Returns the payload as a {@link https://github.com/feross/buffer|Buffer} with content only.\n         */\n        this.getPayload = () => bintools.copyFrom(this.payload);\n        /**\n         * Returns the payload as a {@link https://github.com/feross/buffer|Buffer} with length of payload prepended.\n         */\n        this.getPayloadBuffer = () => buffer_1.Buffer.concat([bintools.copyFrom(this.sizePayload), bintools.copyFrom(this.payload)]);\n        if (typeof groupID !== 'undefined' && typeof payload !== 'undefined') {\n            this.groupID.writeUInt32BE(groupID, 0);\n            this.sizePayload.writeUInt32BE(payload.length, 0);\n            this.payload = bintools.copyFrom(payload, 0, payload.length);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"payload\": serialization.encoder(this.payload, encoding, \"Buffer\", \"hex\", this.payload.length) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.payload = serialization.decoder(fields[\"payload\"], encoding, \"hex\", \"Buffer\");\n        this.sizePayload = buffer_1.Buffer.alloc(4);\n        this.sizePayload.writeUInt32BE(this.payload.length, 0);\n    }\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTTransferOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.NFTXFEROUTPUTID : constants_1.AVMConstants.NFTXFEROUTPUTID_CODECONE;\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOutput]] and returns the size of the output.\n     */\n    fromBuffer(utxobuff, offset = 0) {\n        this.groupID = bintools.copyFrom(utxobuff, offset, offset + 4);\n        offset += 4;\n        this.sizePayload = bintools.copyFrom(utxobuff, offset, offset + 4);\n        let psize = this.sizePayload.readUInt32BE(0);\n        offset += 4;\n        this.payload = bintools.copyFrom(utxobuff, offset, offset + psize);\n        offset = offset + psize;\n        return super.fromBuffer(utxobuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[NFTTransferOutput]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.groupID.length + this.sizePayload.length + this.payload.length + superbuff.length;\n        this.sizePayload.writeUInt32BE(this.payload.length, 0);\n        const barr = [this.groupID, this.sizePayload, this.payload, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    create(...args) {\n        return new NFTTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.NFTTransferOutput = NFTTransferOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-Constants\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMConstants = void 0;\nclass EVMConstants {\n}\nexports.EVMConstants = EVMConstants;\nEVMConstants.SECPCREDENTIAL = 9;\nEVMConstants.IMPORTTX = 0;\nEVMConstants.EXPORTTX = 1;\nEVMConstants.SECPINPUTID = 5;\nEVMConstants.ASSETIDLEN = 32;\nEVMConstants.SECPXFEROUTPUTID = 7;\nEVMConstants.LATESTCODEC = 0;\nEVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvZXZtL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFFSCxNQUFhLFlBQVk7O0FBQXpCLG9DQWdCQztBQWZRLDJCQUFjLEdBQVcsQ0FBQyxDQUFDO0FBRTNCLHFCQUFRLEdBQVcsQ0FBQyxDQUFDO0FBRXJCLHFCQUFRLEdBQVcsQ0FBQyxDQUFDO0FBRXJCLHdCQUFXLEdBQVcsQ0FBQyxDQUFDO0FBRXhCLHVCQUFVLEdBQVcsRUFBRSxDQUFDO0FBRXhCLDZCQUFnQixHQUFXLENBQUMsQ0FBQztBQUU3Qix3QkFBVyxHQUFXLENBQUMsQ0FBQztBQUV4QiwwQkFBYSxHQUFVLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1FVk0tQ29uc3RhbnRzXG4gKi9cblxuZXhwb3J0IGNsYXNzIEVWTUNvbnN0YW50cyB7XG4gIHN0YXRpYyBTRUNQQ1JFREVOVElBTDogbnVtYmVyID0gOTtcblxuICBzdGF0aWMgSU1QT1JUVFg6IG51bWJlciA9IDA7XG5cbiAgc3RhdGljIEVYUE9SVFRYOiBudW1iZXIgPSAxO1xuXG4gIHN0YXRpYyBTRUNQSU5QVVRJRDogbnVtYmVyID0gNTtcblxuICBzdGF0aWMgQVNTRVRJRExFTjogbnVtYmVyID0gMzI7XG5cbiAgc3RhdGljIFNFQ1BYRkVST1VUUFVUSUQ6IG51bWJlciA9IDc7XG5cbiAgc3RhdGljIExBVEVTVENPREVDOiBudW1iZXIgPSAwO1xuXG4gIHN0YXRpYyBBRERSRVNTTEVOR1RIOm51bWJlciA9IDIwO1xufVxuIl19","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-ExportTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst basetx_1 = require(\"./basetx\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst inputs_1 = require(\"./inputs\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst outputs_1 = require(\"./outputs\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\nclass ExportTx extends basetx_1.EVMBaseTx {\n    /**\n     * Class representing a ExportTx.\n     *\n     * @param networkID Optional networkID\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param destinationChain Optional destinationChain, default Buffer.alloc(32, 16)\n     * @param inputs Optional array of the [[EVMInputs]]s\n     * @param exportedOutputs Optional array of the [[EVMOutputs]]s\n     */\n    constructor(networkID = undefined, blockchainID = buffer_1.Buffer.alloc(32, 16), destinationChain = buffer_1.Buffer.alloc(32, 16), inputs = undefined, exportedOutputs = undefined) {\n        super(networkID, blockchainID);\n        this._typeName = \"ExportTx\";\n        this._typeID = constants_1.EVMConstants.EXPORTTX;\n        this.destinationChain = buffer_1.Buffer.alloc(32);\n        this.numInputs = buffer_1.Buffer.alloc(4);\n        this.inputs = [];\n        this.numExportedOutputs = buffer_1.Buffer.alloc(4);\n        this.exportedOutputs = [];\n        /**\n         * Returns the destinationChain of the input as {@link https://github.com/feross/buffer|Buffer}\n         */\n        this.getDestinationChain = () => this.destinationChain;\n        /**\n         * Returns the inputs as an array of [[EVMInputs]]\n         */\n        this.getInputs = () => this.inputs;\n        /**\n         * Returns the outs as an array of [[EVMOutputs]]\n         */\n        this.getExportedOutputs = () => this.exportedOutputs;\n        this.destinationChain = destinationChain;\n        if (typeof inputs !== 'undefined' && Array.isArray(inputs)) {\n            inputs.forEach((input) => {\n                if (!(input instanceof inputs_1.EVMInput)) {\n                    throw new errors_1.EVMInputError(\"Error - ExportTx.constructor: invalid EVMInput in array parameter 'inputs'\");\n                }\n            });\n            if (inputs.length > 1) {\n                inputs = inputs.sort(inputs_1.EVMInput.comparator());\n            }\n            this.inputs = inputs;\n        }\n        if (typeof exportedOutputs !== 'undefined' && Array.isArray(exportedOutputs)) {\n            exportedOutputs.forEach((exportedOutput) => {\n                if (!(exportedOutput instanceof outputs_1.TransferableOutput)) {\n                    throw new errors_1.TransferableOutputError(\"Error - ExportTx.constructor: TransferableOutput EVMInput in array parameter 'exportedOutputs'\");\n                }\n            });\n            this.exportedOutputs = exportedOutputs;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { \"destinationChain\": serializer.encoder(this.destinationChain, encoding, \"Buffer\", \"cb58\"), \"exportedOutputs\": this.exportedOutputs.map((i) => i.serialize(encoding)) });\n    }\n    ;\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.destinationChain = serializer.decoder(fields[\"destinationChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.exportedOutputs = fields[\"exportedOutputs\"].map((i) => {\n            let eo = new outputs_1.TransferableOutput();\n            eo.deserialize(i, encoding);\n            return eo;\n        });\n        this.numExportedOutputs = buffer_1.Buffer.alloc(4);\n        this.numExportedOutputs.writeUInt32BE(this.exportedOutputs.length, 0);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n     */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numInputs.writeUInt32BE(this.inputs.length, 0);\n        this.numExportedOutputs.writeUInt32BE(this.exportedOutputs.length, 0);\n        let barr = [super.toBuffer(), this.destinationChain, this.numInputs];\n        let bsize = super.toBuffer().length + this.destinationChain.length + this.numInputs.length;\n        this.inputs.forEach((importIn) => {\n            bsize += importIn.toBuffer().length;\n            barr.push(importIn.toBuffer());\n        });\n        bsize += this.numExportedOutputs.length;\n        barr.push(this.numExportedOutputs);\n        this.exportedOutputs.forEach((out) => {\n            bsize += out.toBuffer().length;\n            barr.push(out.toBuffer());\n        });\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Decodes the [[ExportTx]] as a {@link https://github.com/feross/buffer|Buffer} and returns the size.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numInputs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numInputs = this.numInputs.readUInt32BE(0);\n        for (let i = 0; i < numInputs; i++) {\n            const anIn = new inputs_1.EVMInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.inputs.push(anIn);\n        }\n        this.numExportedOutputs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numExportedOutputs = this.numExportedOutputs.readUInt32BE(0);\n        for (let i = 0; i < numExportedOutputs; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportedOutputs.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a base-58 representation of the [[ExportTx]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n        *\n        * @param msg A Buffer for the [[UnsignedTx]]\n        * @param kc An [[KeyChain]] used in signing\n        *\n        * @returns An array of [[Credential]]s\n        */\n    sign(msg, kc) {\n        const sigs = super.sign(msg, kc);\n        this.inputs.forEach((input) => {\n            const cred = credentials_1.SelectCredentialClass(input.getCredentialID());\n            const sigidxs = input.getSigIdxs();\n            sigidxs.forEach((sigidx) => {\n                const keypair = kc.getKey(sigidx.getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            });\n            sigs.push(cred);\n        });\n        return sigs;\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-MinterSet\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MinterSet = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst decimalString = \"decimalString\";\nconst cb58 = \"cb58\";\nconst num = \"number\";\nconst buffer = \"Buffer\";\n/**\n * Class for representing a threshold and set of minting addresses in Avalanche.\n *\n * @typeparam MinterSet including a threshold and array of addresses\n */\nclass MinterSet extends serialization_1.Serializable {\n    /**\n     *\n     * @param threshold The number of signatures required to mint more of an asset by signing a minting transaction\n     * @param minters Array of addresss which are authorized to sign a minting transaction\n     */\n    constructor(threshold = 1, minters = []) {\n        super();\n        this._typeName = \"MinterSet\";\n        this._typeID = undefined;\n        this.minters = [];\n        /**\n         * Returns the threshold.\n         */\n        this.getThreshold = () => {\n            return this.threshold;\n        };\n        /**\n         * Returns the minters.\n         */\n        this.getMinters = () => {\n            return this.minters;\n        };\n        this._cleanAddresses = (addresses) => {\n            let addrs = [];\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[i] === \"string\") {\n                    addrs.push(bintools.stringToAddress(addresses[i]));\n                }\n                else if (addresses[i] instanceof buffer_1.Buffer) {\n                    addrs.push(addresses[i]);\n                }\n            }\n            return addrs;\n        };\n        this.threshold = threshold;\n        this.minters = this._cleanAddresses(minters);\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { threshold: serialization.encoder(this.threshold, encoding, num, decimalString, 4), minters: this.minters.map((m) => serialization.encoder(m, encoding, buffer, cb58, 20)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.threshold = serialization.decoder(fields[\"threshold\"], encoding, decimalString, num, 4);\n        this.minters = fields[\"minters\"].map((m) => serialization.decoder(m, encoding, cb58, buffer, 20));\n    }\n}\nexports.MinterSet = MinterSet;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWludGVyc2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL21pbnRlcnNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCxvQ0FBZ0M7QUFDaEMsb0VBQTJDO0FBQzNDLDZEQUEyRztBQUUzRzs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFhLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUE7QUFDakQsTUFBTSxhQUFhLEdBQWtCLDZCQUFhLENBQUMsV0FBVyxFQUFFLENBQUE7QUFDaEUsTUFBTSxhQUFhLEdBQW1CLGVBQWUsQ0FBQTtBQUNyRCxNQUFNLElBQUksR0FBbUIsTUFBTSxDQUFBO0FBQ25DLE1BQU0sR0FBRyxHQUFtQixRQUFRLENBQUE7QUFDcEMsTUFBTSxNQUFNLEdBQW1CLFFBQVEsQ0FBQTtBQUV2Qzs7OztHQUlHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsNEJBQVk7SUErQ3pDOzs7O09BSUc7SUFDSCxZQUFZLFlBQW9CLENBQUMsRUFBRSxVQUErQixFQUFFO1FBQ2xFLEtBQUssRUFBRSxDQUFBO1FBcERDLGNBQVMsR0FBRyxXQUFXLENBQUE7UUFDdkIsWUFBTyxHQUFHLFNBQVMsQ0FBQTtRQWlCbkIsWUFBTyxHQUFhLEVBQUUsQ0FBQTtRQUVoQzs7V0FFRztRQUNILGlCQUFZLEdBQUcsR0FBVyxFQUFFO1lBQzFCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQTtRQUN2QixDQUFDLENBQUE7UUFFRDs7V0FFRztRQUNILGVBQVUsR0FBRyxHQUFhLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFBO1FBQ3JCLENBQUMsQ0FBQTtRQUVTLG9CQUFlLEdBQUcsQ0FBQyxTQUE4QixFQUFZLEVBQUU7WUFDdkUsSUFBSSxLQUFLLEdBQWEsRUFBRSxDQUFBO1lBQ3hCLEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNqRCxJQUFJLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtvQkFDcEMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDLENBQUE7aUJBQzdEO3FCQUFNLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxZQUFZLGVBQU0sRUFBRTtvQkFDekMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQTtpQkFDbkM7YUFDRjtZQUNELE9BQU8sS0FBSyxDQUFBO1FBQ2QsQ0FBQyxDQUFBO1FBU0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7UUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQzlDLENBQUM7SUFwREQsU0FBUyxDQUFDLFdBQStCLEtBQUs7UUFDNUMsTUFBTSxNQUFNLEdBQVcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNoRCx1Q0FDSyxNQUFNLEtBQ1QsU0FBUyxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFDakYsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUN2RjtJQUNILENBQUM7SUFDRCxXQUFXLENBQUMsTUFBYyxFQUFFLFdBQStCLEtBQUs7UUFDOUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFDbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUM1RixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDM0csQ0FBQztDQXlDRjtBQXpERCw4QkF5REMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktQVZNLU1pbnRlclNldFxuICovXG5cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXIvXCJcbmltcG9ydCBCaW5Ub29scyBmcm9tICcuLi8uLi91dGlscy9iaW50b29scydcbmltcG9ydCB7IFNlcmlhbGl6YWJsZSwgU2VyaWFsaXphdGlvbiwgU2VyaWFsaXplZEVuY29kaW5nLCBTZXJpYWxpemVkVHlwZSB9IGZyb20gJy4uLy4uL3V0aWxzL3NlcmlhbGl6YXRpb24nXG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29sczogQmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpXG5jb25zdCBzZXJpYWxpemF0aW9uOiBTZXJpYWxpemF0aW9uID0gU2VyaWFsaXphdGlvbi5nZXRJbnN0YW5jZSgpXG5jb25zdCBkZWNpbWFsU3RyaW5nOiBTZXJpYWxpemVkVHlwZSA9IFwiZGVjaW1hbFN0cmluZ1wiXG5jb25zdCBjYjU4OiBTZXJpYWxpemVkVHlwZSA9IFwiY2I1OFwiXG5jb25zdCBudW06IFNlcmlhbGl6ZWRUeXBlID0gXCJudW1iZXJcIlxuY29uc3QgYnVmZmVyOiBTZXJpYWxpemVkVHlwZSA9IFwiQnVmZmVyXCJcblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgdGhyZXNob2xkIGFuZCBzZXQgb2YgbWludGluZyBhZGRyZXNzZXMgaW4gQXZhbGFuY2hlLiBcbiAqIFxuICogQHR5cGVwYXJhbSBNaW50ZXJTZXQgaW5jbHVkaW5nIGEgdGhyZXNob2xkIGFuZCBhcnJheSBvZiBhZGRyZXNzZXNcbiAqL1xuZXhwb3J0IGNsYXNzIE1pbnRlclNldCBleHRlbmRzIFNlcmlhbGl6YWJsZXtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiTWludGVyU2V0XCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWRcblxuICBzZXJpYWxpemUoZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpOiBvYmplY3Qge1xuICAgIGNvbnN0IGZpZWxkczogb2JqZWN0ID0gc3VwZXIuc2VyaWFsaXplKGVuY29kaW5nKVxuICAgIHJldHVybiB7XG4gICAgICAuLi5maWVsZHMsXG4gICAgICB0aHJlc2hvbGQ6IHNlcmlhbGl6YXRpb24uZW5jb2Rlcih0aGlzLnRocmVzaG9sZCwgZW5jb2RpbmcsIG51bSwgZGVjaW1hbFN0cmluZywgNCksXG4gICAgICBtaW50ZXJzOiB0aGlzLm1pbnRlcnMubWFwKChtKSA9PiBzZXJpYWxpemF0aW9uLmVuY29kZXIobSwgZW5jb2RpbmcsIGJ1ZmZlciwgY2I1OCwgMjApKVxuICAgIH1cbiAgfVxuICBkZXNlcmlhbGl6ZShmaWVsZHM6IG9iamVjdCwgZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKVxuICAgIHRoaXMudGhyZXNob2xkID0gc2VyaWFsaXphdGlvbi5kZWNvZGVyKGZpZWxkc1tcInRocmVzaG9sZFwiXSwgZW5jb2RpbmcsIGRlY2ltYWxTdHJpbmcsIG51bSwgNClcbiAgICB0aGlzLm1pbnRlcnMgPSBmaWVsZHNbXCJtaW50ZXJzXCJdLm1hcCgobTogc3RyaW5nKSA9PiBzZXJpYWxpemF0aW9uLmRlY29kZXIobSwgZW5jb2RpbmcsIGNiNTgsIGJ1ZmZlciwgMjApKVxuICB9XG4gIFxuICBwcm90ZWN0ZWQgdGhyZXNob2xkOiBudW1iZXJcbiAgcHJvdGVjdGVkIG1pbnRlcnM6IEJ1ZmZlcltdID0gW11cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdGhyZXNob2xkLlxuICAgKi9cbiAgZ2V0VGhyZXNob2xkID0gKCk6IG51bWJlciA9PiB7XG4gICAgcmV0dXJuIHRoaXMudGhyZXNob2xkXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbWludGVycy5cbiAgICovXG4gIGdldE1pbnRlcnMgPSAoKTogQnVmZmVyW10gPT4ge1xuICAgIHJldHVybiB0aGlzLm1pbnRlcnNcbiAgfVxuXG4gIHByb3RlY3RlZCBfY2xlYW5BZGRyZXNzZXMgPSAoYWRkcmVzc2VzOiBzdHJpbmdbXSB8IEJ1ZmZlcltdKTogQnVmZmVyW10gPT4ge1xuICAgIGxldCBhZGRyczogQnVmZmVyW10gPSBbXVxuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBhZGRyZXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0eXBlb2YgYWRkcmVzc2VzW2ldID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGFkZHJzLnB1c2goYmludG9vbHMuc3RyaW5nVG9BZGRyZXNzKGFkZHJlc3Nlc1tpXSBhcyBzdHJpbmcpKVxuICAgICAgfSBlbHNlIGlmIChhZGRyZXNzZXNbaV0gaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgICAgYWRkcnMucHVzaChhZGRyZXNzZXNbaV0gYXMgQnVmZmVyKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWRkcnNcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gdGhyZXNob2xkIFRoZSBudW1iZXIgb2Ygc2lnbmF0dXJlcyByZXF1aXJlZCB0byBtaW50IG1vcmUgb2YgYW4gYXNzZXQgYnkgc2lnbmluZyBhIG1pbnRpbmcgdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIG1pbnRlcnMgQXJyYXkgb2YgYWRkcmVzc3Mgd2hpY2ggYXJlIGF1dGhvcml6ZWQgdG8gc2lnbiBhIG1pbnRpbmcgdHJhbnNhY3Rpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKHRocmVzaG9sZDogbnVtYmVyID0gMSwgbWludGVyczogc3RyaW5nW10gfCBCdWZmZXJbXSA9IFtdKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMudGhyZXNob2xkID0gdGhyZXNob2xkXG4gICAgdGhpcy5taW50ZXJzID0gdGhpcy5fY2xlYW5BZGRyZXNzZXMobWludGVycylcbiAgfVxufSJdfQ==","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // 'A' - 'F'\n    if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    // '0' - '9'\n    } else {\n      return (c - 48) & 0xf;\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this.strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is BN v4 instance\n        r.strip();\n      } else {\n        // r is BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-BaseTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMBaseTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst evmtx_1 = require(\"../../common/evmtx\");\nconst constants_1 = require(\"../../utils/constants\");\nconst tx_1 = require(\"./tx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass EVMBaseTx extends evmtx_1.EVMStandardBaseTx {\n    /**\n     * Class representing an EVMBaseTx which is the foundation for all EVM transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     */\n    constructor(networkID = constants_1.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16)) {\n        super(networkID, blockchainID);\n        this._typeName = \"BaseTx\";\n        this._typeID = undefined;\n        /**\n         * Returns the id of the [[BaseTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        return offset;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = [];\n        return sigs;\n    }\n    clone() {\n        const newEVMBaseTx = new EVMBaseTx();\n        newEVMBaseTx.fromBuffer(this.toBuffer());\n        return newEVMBaseTx;\n    }\n    create(...args) {\n        return new EVMBaseTx(...args);\n    }\n    select(id, ...args) {\n        const newEVMBaseTx = tx_1.SelectTxClass(id, ...args);\n        return newEVMBaseTx;\n    }\n}\nexports.EVMBaseTx = EVMBaseTx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZXR4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvZXZtL2Jhc2V0eC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCxvQ0FBaUM7QUFDakMsb0VBQTRDO0FBSzVDLDhDQUF1RDtBQUV2RCxxREFBeUQ7QUFDekQsNkJBQXFDO0FBR3JDOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQWEsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUVsRDs7R0FFRztBQUNILE1BQWEsU0FBVSxTQUFRLHlCQUFvQztJQThEakU7Ozs7O09BS0c7SUFDSCxZQUFZLFlBQW9CLDRCQUFnQixFQUFFLGVBQXVCLGVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUMzRixLQUFLLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBcEV2QixjQUFTLEdBQUcsUUFBUSxDQUFDO1FBQ3JCLFlBQU8sR0FBRyxTQUFTLENBQUM7UUFROUI7O1dBRUc7UUFDSCxjQUFTLEdBQUcsR0FBVyxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDLENBQUE7SUF1REQsQ0FBQztJQWxFRCx3QkFBd0I7SUFFeEIsV0FBVyxDQUFDLE1BQWMsRUFBRSxXQUErQixLQUFLO1FBQzlELEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFTRDs7Ozs7Ozs7T0FRRztJQUNILFVBQVUsQ0FBQyxLQUFhLEVBQUUsU0FBaUIsQ0FBQztRQUMxQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDOUQsTUFBTSxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNsRSxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2IsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxJQUFJLENBQUMsR0FBVyxFQUFFLEVBQVk7UUFDNUIsTUFBTSxJQUFJLEdBQWlCLEVBQUUsQ0FBQztRQUM5QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLO1FBQ0gsTUFBTSxZQUFZLEdBQWMsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUNoRCxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sWUFBb0IsQ0FBQztJQUM5QixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBVztRQUNuQixPQUFPLElBQUksU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFTLENBQUM7SUFDeEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFVLEVBQUUsR0FBRyxJQUFXO1FBQy9CLE1BQU0sWUFBWSxHQUFjLGtCQUFhLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDM0QsT0FBTyxZQUFvQixDQUFDO0lBQzlCLENBQUM7Q0FXRjtBQXZFRCw4QkF1RUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktRVZNLUJhc2VUeFxuICovXG5cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlci8nO1xuaW1wb3J0IEJpblRvb2xzIGZyb20gJy4uLy4uL3V0aWxzL2JpbnRvb2xzJztcbmltcG9ydCB7IFxuICBLZXlDaGFpbiwgXG4gIEtleVBhaXIgXG59IGZyb20gJy4va2V5Y2hhaW4nO1xuaW1wb3J0IHsgRVZNU3RhbmRhcmRCYXNlVHggfSBmcm9tICcuLi8uLi9jb21tb24vZXZtdHgnO1xuaW1wb3J0IHsgQ3JlZGVudGlhbCB9IGZyb20gJy4uLy4uL2NvbW1vbi9jcmVkZW50aWFscyc7XG5pbXBvcnQgeyBEZWZhdWx0TmV0d29ya0lEIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IFNlbGVjdFR4Q2xhc3MgfSBmcm9tICcuL3R4JztcbmltcG9ydCB7IFNlcmlhbGl6ZWRFbmNvZGluZyB9IGZyb20gJy4uLy4uL3V0aWxzL3NlcmlhbGl6YXRpb24nO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6IEJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKTtcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBiYXNlIGZvciBhbGwgdHJhbnNhY3Rpb25zLlxuICovXG5leHBvcnQgY2xhc3MgRVZNQmFzZVR4IGV4dGVuZHMgRVZNU3RhbmRhcmRCYXNlVHg8S2V5UGFpciwgS2V5Q2hhaW4+IHtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiQmFzZVR4XCI7XG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkO1xuXG4gIC8vc2VyaWFsaXplIGlzIGluaGVyaXRlZFxuXG4gIGRlc2VyaWFsaXplKGZpZWxkczogb2JqZWN0LCBlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIikge1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGZpZWxkcywgZW5jb2RpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGlkIG9mIHRoZSBbW0Jhc2VUeF1dXG4gICAqL1xuICBnZXRUeFR5cGUgPSAoKTogbnVtYmVyID0+IHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUlEO1xuICB9XG5cbiAgLyoqXG4gICAqIFRha2VzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhbiBbW0Jhc2VUeF1dLCBwYXJzZXMgaXQsIHBvcHVsYXRlcyB0aGUgY2xhc3MsIGFuZCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIEJhc2VUeCBpbiBieXRlcy5cbiAgICpcbiAgICogQHBhcmFtIGJ5dGVzIEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gY29udGFpbmluZyBhIHJhdyBbW0Jhc2VUeF1dXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBsZW5ndGggb2YgdGhlIHJhdyBbW0Jhc2VUeF1dXG4gICAqXG4gICAqIEByZW1hcmtzIGFzc3VtZSBub3QtY2hlY2tzdW1tZWRcbiAgICovXG4gIGZyb21CdWZmZXIoYnl0ZXM6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICB0aGlzLm5ldHdvcmtJRCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDQpO1xuICAgIG9mZnNldCArPSA0O1xuICAgIHRoaXMuYmxvY2tjaGFpbklEID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgMzIpO1xuICAgIG9mZnNldCArPSAzMjtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRha2VzIHRoZSBieXRlcyBvZiBhbiBbW1Vuc2lnbmVkVHhdXSBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBbW0NyZWRlbnRpYWxdXXNcbiAgICpcbiAgICogQHBhcmFtIG1zZyBBIEJ1ZmZlciBmb3IgdGhlIFtbVW5zaWduZWRUeF1dXG4gICAqIEBwYXJhbSBrYyBBbiBbW0tleUNoYWluXV0gdXNlZCBpbiBzaWduaW5nXG4gICAqXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIFtbQ3JlZGVudGlhbF1dc1xuICAgKi9cbiAgc2lnbihtc2c6IEJ1ZmZlciwga2M6IEtleUNoYWluKTogQ3JlZGVudGlhbFtdIHtcbiAgICBjb25zdCBzaWdzOiBDcmVkZW50aWFsW10gPSBbXTtcbiAgICByZXR1cm4gc2lncztcbiAgfVxuXG4gIGNsb25lKCk6IHRoaXMge1xuICAgIGNvbnN0IG5ld0VWTUJhc2VUeDogRVZNQmFzZVR4ID0gbmV3IEVWTUJhc2VUeCgpO1xuICAgIG5ld0VWTUJhc2VUeC5mcm9tQnVmZmVyKHRoaXMudG9CdWZmZXIoKSk7XG4gICAgcmV0dXJuIG5ld0VWTUJhc2VUeCBhcyB0aGlzO1xuICB9XG5cbiAgY3JlYXRlKC4uLmFyZ3M6IGFueVtdKTogdGhpcyB7XG4gICAgcmV0dXJuIG5ldyBFVk1CYXNlVHgoLi4uYXJncykgYXMgdGhpcztcbiAgfVxuXG4gIHNlbGVjdChpZDogbnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6IHRoaXMge1xuICAgIGNvbnN0IG5ld0VWTUJhc2VUeDogRVZNQmFzZVR4ID0gU2VsZWN0VHhDbGFzcyhpZCwgLi4uYXJncyk7XG4gICAgcmV0dXJuIG5ld0VWTUJhc2VUeCBhcyB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENsYXNzIHJlcHJlc2VudGluZyBhbiBFVk1CYXNlVHggd2hpY2ggaXMgdGhlIGZvdW5kYXRpb24gZm9yIGFsbCBFVk0gdHJhbnNhY3Rpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gbmV0d29ya0lEIE9wdGlvbmFsIG5ldHdvcmtJRCwgW1tEZWZhdWx0TmV0d29ya0lEXV1cbiAgICogQHBhcmFtIGJsb2NrY2hhaW5JRCBPcHRpb25hbCBibG9ja2NoYWluSUQsIGRlZmF1bHQgQnVmZmVyLmFsbG9jKDMyLCAxNilcbiAgICovXG4gIGNvbnN0cnVjdG9yKG5ldHdvcmtJRDogbnVtYmVyID0gRGVmYXVsdE5ldHdvcmtJRCwgYmxvY2tjaGFpbklEOiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoMzIsIDE2KSkge1xuICAgIHN1cGVyKG5ldHdvcmtJRCwgYmxvY2tjaGFpbklEKTtcbiAgfVxufSJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GenesisData = void 0;\n/**\n* @packageDocumentation\n* @module API-AVM-GenesisData\n*/\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst serialization_1 = require(\"../../utils/serialization\");\nconst constants_1 = require(\"./constants\");\nconst _1 = require(\".\");\nconst utils_1 = require(\"../../utils\");\n/**\n* @ignore\n*/\nconst serialization = serialization_1.Serialization.getInstance();\nconst bintools = bintools_1.default.getInstance();\nconst decimalString = \"decimalString\";\nconst buffer = \"Buffer\";\nclass GenesisData extends serialization_1.Serializable {\n    /**\n    * Class representing AVM GenesisData\n    *\n    * @param genesisAssets Optional GenesisAsset[]\n    * @param networkID Optional DefaultNetworkID\n    */\n    constructor(genesisAssets = [], networkID = utils_1.DefaultNetworkID) {\n        super();\n        this._typeName = \"GenesisData\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this.networkID = buffer_1.Buffer.alloc(4);\n        /**\n        * Returns the GenesisAssets[]\n        */\n        this.getGenesisAssets = () => this.genesisAssets;\n        /**\n        * Returns the NetworkID as a number\n        */\n        this.getNetworkID = () => this.networkID.readUInt32BE(0);\n        this.genesisAssets = genesisAssets;\n        this.networkID.writeUInt32BE(networkID, 0);\n    }\n    // TODO - setCodecID?\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { genesisAssets: this.genesisAssets.map((genesisAsset) => genesisAsset.serialize(encoding)), networkID: serialization.encoder(this.networkID, encoding, buffer, decimalString) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.genesisAssets = fields[\"genesisAssets\"].map((genesisAsset) => {\n            let g = new _1.GenesisAsset();\n            g.deserialize(genesisAsset, encoding);\n            return g;\n        });\n        this.networkID = serialization.decoder(fields[\"networkID\"], encoding, decimalString, buffer, 4);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[GenesisAsset]], parses it, populates the class, and returns the length of the [[GenesisAsset]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[GenesisAsset]]\n     *\n     * @returns The length of the raw [[GenesisAsset]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this._codecID = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const numGenesisAssets = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const assetCount = numGenesisAssets.readUInt32BE(0);\n        this.genesisAssets = [];\n        for (let i = 0; i < assetCount; i++) {\n            const genesisAsset = new _1.GenesisAsset();\n            offset = genesisAsset.fromBuffer(bytes, offset);\n            this.genesisAssets.push(genesisAsset);\n            if (i === 0) {\n                this.networkID.writeUInt32BE(genesisAsset.getNetworkID(), 0);\n            }\n        }\n        return offset;\n    }\n    /**\n    * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[GenesisData]].\n    */\n    toBuffer() {\n        // codec id\n        const codecbuffSize = buffer_1.Buffer.alloc(2);\n        codecbuffSize.writeUInt16BE(this._codecID, 0);\n        // num assets\n        const numAssetsbuffSize = buffer_1.Buffer.alloc(4);\n        numAssetsbuffSize.writeUInt32BE(this.genesisAssets.length, 0);\n        let bsize = codecbuffSize.length + numAssetsbuffSize.length;\n        let barr = [codecbuffSize, numAssetsbuffSize];\n        this.genesisAssets.forEach((genesisAsset) => {\n            const b = genesisAsset.toBuffer(this.getNetworkID());\n            bsize += b.length;\n            barr.push(b);\n        });\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.GenesisData = GenesisData;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\n\nconst bignum = require('bn.js');\nconst DecoderBuffer = require('../base/buffer').DecoderBuffer;\nconst Node = require('../base/node');\n\n// Import DER constants\nconst der = require('../constants/der');\n\nfunction DERDecoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n}\nmodule.exports = DERDecoder;\n\nDERDecoder.prototype.decode = function decode(data, options) {\n  if (!DecoderBuffer.isDecoderBuffer(data)) {\n    data = new DecoderBuffer(data, options);\n  }\n\n  return this.tree._decode(data, options);\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  Node.call(this, 'der', parent);\n}\ninherits(DERNode, Node);\n\nDERNode.prototype._peekTag = function peekTag(buffer, tag, any) {\n  if (buffer.isEmpty())\n    return false;\n\n  const state = buffer.save();\n  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  buffer.restore(state);\n\n  return decodedTag.tag === tag || decodedTag.tagStr === tag ||\n    (decodedTag.tagStr + 'of') === tag || any;\n};\n\nDERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {\n  const decodedTag = derDecodeTag(buffer,\n    'Failed to decode tag of \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  let len = derDecodeLen(buffer,\n    decodedTag.primitive,\n    'Failed to get length of \"' + tag + '\"');\n\n  // Failure\n  if (buffer.isError(len))\n    return len;\n\n  if (!any &&\n      decodedTag.tag !== tag &&\n      decodedTag.tagStr !== tag &&\n      decodedTag.tagStr + 'of' !== tag) {\n    return buffer.error('Failed to match tag: \"' + tag + '\"');\n  }\n\n  if (decodedTag.primitive || len !== null)\n    return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n\n  // Indefinite length... find END tag\n  const state = buffer.save();\n  const res = this._skipUntilEnd(\n    buffer,\n    'Failed to skip indefinite length body: \"' + this.tag + '\"');\n  if (buffer.isError(res))\n    return res;\n\n  len = buffer.offset - state.offset;\n  buffer.restore(state);\n  return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n};\n\nDERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {\n  for (;;) {\n    const tag = derDecodeTag(buffer, fail);\n    if (buffer.isError(tag))\n      return tag;\n    const len = derDecodeLen(buffer, tag.primitive, fail);\n    if (buffer.isError(len))\n      return len;\n\n    let res;\n    if (tag.primitive || len !== null)\n      res = buffer.skip(len);\n    else\n      res = this._skipUntilEnd(buffer, fail);\n\n    // Failure\n    if (buffer.isError(res))\n      return res;\n\n    if (tag.tagStr === 'end')\n      break;\n  }\n};\n\nDERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,\n  options) {\n  const result = [];\n  while (!buffer.isEmpty()) {\n    const possibleEnd = this._peekTag(buffer, 'end');\n    if (buffer.isError(possibleEnd))\n      return possibleEnd;\n\n    const res = decoder.decode(buffer, 'der', options);\n    if (buffer.isError(res) && possibleEnd)\n      break;\n    result.push(res);\n  }\n  return result;\n};\n\nDERNode.prototype._decodeStr = function decodeStr(buffer, tag) {\n  if (tag === 'bitstr') {\n    const unused = buffer.readUInt8();\n    if (buffer.isError(unused))\n      return unused;\n    return { unused: unused, data: buffer.raw() };\n  } else if (tag === 'bmpstr') {\n    const raw = buffer.raw();\n    if (raw.length % 2 === 1)\n      return buffer.error('Decoding of string type: bmpstr length mismatch');\n\n    let str = '';\n    for (let i = 0; i < raw.length / 2; i++) {\n      str += String.fromCharCode(raw.readUInt16BE(i * 2));\n    }\n    return str;\n  } else if (tag === 'numstr') {\n    const numstr = buffer.raw().toString('ascii');\n    if (!this._isNumstr(numstr)) {\n      return buffer.error('Decoding of string type: ' +\n                          'numstr unsupported characters');\n    }\n    return numstr;\n  } else if (tag === 'octstr') {\n    return buffer.raw();\n  } else if (tag === 'objDesc') {\n    return buffer.raw();\n  } else if (tag === 'printstr') {\n    const printstr = buffer.raw().toString('ascii');\n    if (!this._isPrintstr(printstr)) {\n      return buffer.error('Decoding of string type: ' +\n                          'printstr unsupported characters');\n    }\n    return printstr;\n  } else if (/str$/.test(tag)) {\n    return buffer.raw().toString();\n  } else {\n    return buffer.error('Decoding of string type: ' + tag + ' unsupported');\n  }\n};\n\nDERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {\n  let result;\n  const identifiers = [];\n  let ident = 0;\n  let subident = 0;\n  while (!buffer.isEmpty()) {\n    subident = buffer.readUInt8();\n    ident <<= 7;\n    ident |= subident & 0x7f;\n    if ((subident & 0x80) === 0) {\n      identifiers.push(ident);\n      ident = 0;\n    }\n  }\n  if (subident & 0x80)\n    identifiers.push(ident);\n\n  const first = (identifiers[0] / 40) | 0;\n  const second = identifiers[0] % 40;\n\n  if (relative)\n    result = identifiers;\n  else\n    result = [first, second].concat(identifiers.slice(1));\n\n  if (values) {\n    let tmp = values[result.join(' ')];\n    if (tmp === undefined)\n      tmp = values[result.join('.')];\n    if (tmp !== undefined)\n      result = tmp;\n  }\n\n  return result;\n};\n\nDERNode.prototype._decodeTime = function decodeTime(buffer, tag) {\n  const str = buffer.raw().toString();\n\n  let year;\n  let mon;\n  let day;\n  let hour;\n  let min;\n  let sec;\n  if (tag === 'gentime') {\n    year = str.slice(0, 4) | 0;\n    mon = str.slice(4, 6) | 0;\n    day = str.slice(6, 8) | 0;\n    hour = str.slice(8, 10) | 0;\n    min = str.slice(10, 12) | 0;\n    sec = str.slice(12, 14) | 0;\n  } else if (tag === 'utctime') {\n    year = str.slice(0, 2) | 0;\n    mon = str.slice(2, 4) | 0;\n    day = str.slice(4, 6) | 0;\n    hour = str.slice(6, 8) | 0;\n    min = str.slice(8, 10) | 0;\n    sec = str.slice(10, 12) | 0;\n    if (year < 70)\n      year = 2000 + year;\n    else\n      year = 1900 + year;\n  } else {\n    return buffer.error('Decoding ' + tag + ' time is not supported yet');\n  }\n\n  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);\n};\n\nDERNode.prototype._decodeNull = function decodeNull() {\n  return null;\n};\n\nDERNode.prototype._decodeBool = function decodeBool(buffer) {\n  const res = buffer.readUInt8();\n  if (buffer.isError(res))\n    return res;\n  else\n    return res !== 0;\n};\n\nDERNode.prototype._decodeInt = function decodeInt(buffer, values) {\n  // Bigint, return as it is (assume big endian)\n  const raw = buffer.raw();\n  let res = new bignum(raw);\n\n  if (values)\n    res = values[res.toString(10)] || res;\n\n  return res;\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getDecoder('der').tree;\n};\n\n// Utility methods\n\nfunction derDecodeTag(buf, fail) {\n  let tag = buf.readUInt8(fail);\n  if (buf.isError(tag))\n    return tag;\n\n  const cls = der.tagClass[tag >> 6];\n  const primitive = (tag & 0x20) === 0;\n\n  // Multi-octet tag - load\n  if ((tag & 0x1f) === 0x1f) {\n    let oct = tag;\n    tag = 0;\n    while ((oct & 0x80) === 0x80) {\n      oct = buf.readUInt8(fail);\n      if (buf.isError(oct))\n        return oct;\n\n      tag <<= 7;\n      tag |= oct & 0x7f;\n    }\n  } else {\n    tag &= 0x1f;\n  }\n  const tagStr = der.tag[tag];\n\n  return {\n    cls: cls,\n    primitive: primitive,\n    tag: tag,\n    tagStr: tagStr\n  };\n}\n\nfunction derDecodeLen(buf, primitive, fail) {\n  let len = buf.readUInt8(fail);\n  if (buf.isError(len))\n    return len;\n\n  // Indefinite form\n  if (!primitive && len === 0x80)\n    return null;\n\n  // Definite form\n  if ((len & 0x80) === 0) {\n    // Short form\n    return len;\n  }\n\n  // Long form\n  const num = len & 0x7f;\n  if (num > 4)\n    return buf.error('length octect is too long');\n\n  len = 0;\n  for (let i = 0; i < num; i++) {\n    len <<= 8;\n    const j = buf.readUInt8(fail);\n    if (buf.isError(j))\n      return j;\n    len |= j;\n  }\n\n  return len;\n}\n","'use strict';\n\nconst inherits = require('inherits');\n\nfunction Reporter(options) {\n  this._reporterState = {\n    obj: null,\n    path: [],\n    options: options || {},\n    errors: []\n  };\n}\nexports.Reporter = Reporter;\n\nReporter.prototype.isError = function isError(obj) {\n  return obj instanceof ReporterError;\n};\n\nReporter.prototype.save = function save() {\n  const state = this._reporterState;\n\n  return { obj: state.obj, pathLen: state.path.length };\n};\n\nReporter.prototype.restore = function restore(data) {\n  const state = this._reporterState;\n\n  state.obj = data.obj;\n  state.path = state.path.slice(0, data.pathLen);\n};\n\nReporter.prototype.enterKey = function enterKey(key) {\n  return this._reporterState.path.push(key);\n};\n\nReporter.prototype.exitKey = function exitKey(index) {\n  const state = this._reporterState;\n\n  state.path = state.path.slice(0, index - 1);\n};\n\nReporter.prototype.leaveKey = function leaveKey(index, key, value) {\n  const state = this._reporterState;\n\n  this.exitKey(index);\n  if (state.obj !== null)\n    state.obj[key] = value;\n};\n\nReporter.prototype.path = function path() {\n  return this._reporterState.path.join('/');\n};\n\nReporter.prototype.enterObject = function enterObject() {\n  const state = this._reporterState;\n\n  const prev = state.obj;\n  state.obj = {};\n  return prev;\n};\n\nReporter.prototype.leaveObject = function leaveObject(prev) {\n  const state = this._reporterState;\n\n  const now = state.obj;\n  state.obj = prev;\n  return now;\n};\n\nReporter.prototype.error = function error(msg) {\n  let err;\n  const state = this._reporterState;\n\n  const inherited = msg instanceof ReporterError;\n  if (inherited) {\n    err = msg;\n  } else {\n    err = new ReporterError(state.path.map(function(elem) {\n      return '[' + JSON.stringify(elem) + ']';\n    }).join(''), msg.message || msg, msg.stack);\n  }\n\n  if (!state.options.partial)\n    throw err;\n\n  if (!inherited)\n    state.errors.push(err);\n\n  return err;\n};\n\nReporter.prototype.wrapResult = function wrapResult(result) {\n  const state = this._reporterState;\n  if (!state.options.partial)\n    return result;\n\n  return {\n    result: this.isError(result) ? null : result,\n    errors: state.errors\n  };\n};\n\nfunction ReporterError(path, msg) {\n  this.path = path;\n  this.rethrow(msg);\n}\ninherits(ReporterError, Error);\n\nReporterError.prototype.rethrow = function rethrow(msg) {\n  this.message = msg + ' at: ' + (this.path || '(shallow)');\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, ReporterError);\n\n  if (!this.stack) {\n    try {\n      // IE only adds stack when thrown\n      throw new Error(this.message);\n    } catch (e) {\n      this.stack = e.stack;\n    }\n  }\n  return this;\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-ExportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst cb58 = \"cb58\";\nconst buffer = \"Buffer\";\n/**\n * Class representing an unsigned Export transaction.\n */\nclass ExportTx extends basetx_1.BaseTx {\n    /**\n       * Class representing an unsigned Export transaction.\n       *\n       * @param networkID Optional networkID, [[DefaultNetworkID]]\n       * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n       * @param outs Optional array of the [[TransferableOutput]]s\n       * @param ins Optional array of the [[TransferableInput]]s\n       * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n       * @param destinationChain Optional chainid which identifies where the funds will sent to\n       * @param exportOuts Array of [[TransferableOutputs]]s used in the transaction\n       */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, destinationChain = undefined, exportOuts = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ExportTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.EXPORTTX : constants_1.AVMConstants.EXPORTTX_CODECONE;\n        this.destinationChain = undefined;\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.exportOuts = [];\n        /**\n           * Returns the id of the [[ExportTx]]\n           */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} for the destination chainid.\n         */\n        this.getDestinationChain = () => {\n            return this.destinationChain;\n        };\n        this.destinationChain = destinationChain; // no correction, if they don\"t pass a chainid here, it will BOMB on toBuffer\n        if (typeof exportOuts !== \"undefined\" && Array.isArray(exportOuts)) {\n            for (let i = 0; i < exportOuts.length; i++) {\n                if (!(exportOuts[i] instanceof outputs_1.TransferableOutput)) {\n                    throw new errors_1.TransferableOutputError(`Error - ExportTx.constructor: invalid TransferableOutput in array parameter ${exportOuts}`);\n                }\n            }\n            this.exportOuts = exportOuts;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { destinationChain: serialization.encoder(this.destinationChain, encoding, buffer, cb58), exportOuts: this.exportOuts.map((e) => e.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.destinationChain = serialization.decoder(fields[\"destinationChain\"], encoding, cb58, buffer, 32);\n        this.exportOuts = fields[\"exportOuts\"].map((e) => {\n            let eo = new outputs_1.TransferableOutput();\n            eo.deserialize(e, encoding);\n            return eo;\n        });\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n    }\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - ExportTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.EXPORTTX : constants_1.AVMConstants.EXPORTTX_CODECONE;\n    }\n    /**\n     * Returns an array of [[TransferableOutput]]s in this transaction.\n     */\n    getExportOutputs() {\n        return this.exportOuts;\n    }\n    /**\n     * Returns the totall exported amount as a {@link https://github.com/indutny/bn.js/|BN}.\n     */\n    getExportTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            val = val.add(this.exportOuts[i].getOutput().getAmount());\n        }\n        return val;\n    }\n    getTotalOuts() {\n        return [...this.getOuts(), ...this.getExportOutputs()];\n    }\n    /**\n       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ExportTx]], parses it, populates the class, and returns the length of the [[ExportTx]] in bytes.\n       *\n       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ExportTx]]\n       *\n       * @returns The length of the raw [[ExportTx]]\n       *\n       * @remarks assume not-checksummed\n       */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportOuts.push(anOut);\n        }\n        return offset;\n    }\n    /**\n       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n       */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n        let barr = [super.toBuffer(), this.destinationChain, this.numOuts];\n        this.exportOuts = this.exportOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            barr.push(this.exportOuts[i].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    clone() {\n        let newbase = new ExportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ExportTx(...args);\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMOutput = exports.SECPTransferOutput = exports.AmountOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-EVM-Outputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst errors_1 = require(\"../../utils/errors\");\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputID A number representing the outputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nexports.SelectOutputClass = (outputID, ...args) => {\n    if (outputID == constants_1.EVMConstants.SECPXFEROUTPUTID) {\n        return new SECPTransferOutput(...args);\n    }\n    throw new errors_1.OutputIdError(\"Error - SelectOutputClass: unknown outputID\");\n};\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = exports.SelectOutputClass(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.EVMConstants.ASSETIDLEN);\n        offset += constants_1.EVMConstants.ASSETIDLEN;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = exports.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return exports.SelectOutputClass(id, ...args);\n    }\n}\nexports.AmountOutput = AmountOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPTransferOutput extends AmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferOutput\";\n        this._typeID = constants_1.EVMConstants.SECPXFEROUTPUTID;\n    }\n    //serialize and deserialize both are inherited\n    /**\n       * Returns the outputID for this output\n       */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferOutput = SECPTransferOutput;\nclass EVMOutput {\n    /**\n     * An [[EVMOutput]] class which contains address, amount, and assetID.\n     *\n     * @param address The address recieving the asset as a {@link https://github.com/feross/buffer|Buffer} or a string.\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} or number representing the amount.\n     * @param assetID The assetID which is being sent as a {@link https://github.com/feross/buffer|Buffer} or a string.\n     */\n    constructor(address = undefined, amount = undefined, assetID = undefined) {\n        this.address = buffer_1.Buffer.alloc(20);\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        this.assetID = buffer_1.Buffer.alloc(32);\n        /**\n         * Returns the address of the input as {@link https://github.com/feross/buffer|Buffer}\n         */\n        this.getAddress = () => this.address;\n        /**\n         * Returns the address as a bech32 encoded string.\n         */\n        this.getAddressString = () => this.address.toString('hex');\n        /**\n         * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getAmount = () => this.amountValue.clone();\n        /**\n         * Returns the assetID of the input as {@link https://github.com/feross/buffer|Buffer}\n         */\n        this.getAssetID = () => this.assetID;\n        if (typeof address !== 'undefined' && typeof amount !== 'undefined' && typeof assetID !== 'undefined') {\n            if (typeof address === 'string') {\n                // if present then remove `0x` prefix\n                let prefix = address.substring(0, 2);\n                if (prefix === '0x') {\n                    address = address.split('x')[1];\n                }\n                address = buffer_1.Buffer.from(address, 'hex');\n            }\n            // convert number amount to BN\n            let amnt;\n            if (typeof amount === 'number') {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            // convert string assetID to Buffer\n            if (!(assetID instanceof buffer_1.Buffer)) {\n                assetID = bintools.cb58Decode(assetID);\n            }\n            this.address = address;\n            this.amountValue = amnt.clone();\n            this.amount = bintools.fromBNToBuffer(amnt, 8);\n            this.assetID = assetID;\n        }\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[EVMOutput]].\n     */\n    toBuffer() {\n        const bsize = this.address.length + this.amount.length + this.assetID.length;\n        const barr = [this.address, this.amount, this.assetID];\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Decodes the [[EVMOutput]] as a {@link https://github.com/feross/buffer|Buffer} and returns the size.\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.address = bintools.copyFrom(bytes, offset, offset + 20);\n        offset += 20;\n        this.amount = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        return offset;\n    }\n    /**\n     * Returns a base-58 representation of the [[EVMOutput]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n    create(...args) {\n        return new EVMOutput(...args);\n    }\n    clone() {\n        const newEVMOutput = this.create();\n        newEVMOutput.fromBuffer(this.toBuffer());\n        return newEVMOutput;\n    }\n}\nexports.EVMOutput = EVMOutput;\n/**\n* Returns a function used to sort an array of [[EVMOutput]]s\n*/\nEVMOutput.comparator = () => (a, b) => {\n    // primarily sort by address\n    let sorta = a.getAddress();\n    let sortb = b.getAddress();\n    // secondarily sort by assetID\n    if (sorta.equals(sortb)) {\n        sorta = a.getAssetID();\n        sortb = b.getAssetID();\n    }\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst encoders = require('./encoders');\nconst decoders = require('./decoders');\nconst inherits = require('inherits');\n\nconst api = exports;\n\napi.define = function define(name, body) {\n  return new Entity(name, body);\n};\n\nfunction Entity(name, body) {\n  this.name = name;\n  this.body = body;\n\n  this.decoders = {};\n  this.encoders = {};\n}\n\nEntity.prototype._createNamed = function createNamed(Base) {\n  const name = this.name;\n\n  function Generated(entity) {\n    this._initNamed(entity, name);\n  }\n  inherits(Generated, Base);\n  Generated.prototype._initNamed = function _initNamed(entity, name) {\n    Base.call(this, entity, name);\n  };\n\n  return new Generated(this);\n};\n\nEntity.prototype._getDecoder = function _getDecoder(enc) {\n  enc = enc || 'der';\n  // Lazily create decoder\n  if (!this.decoders.hasOwnProperty(enc))\n    this.decoders[enc] = this._createNamed(decoders[enc]);\n  return this.decoders[enc];\n};\n\nEntity.prototype.decode = function decode(data, enc, options) {\n  return this._getDecoder(enc).decode(data, options);\n};\n\nEntity.prototype._getEncoder = function _getEncoder(enc) {\n  enc = enc || 'der';\n  // Lazily create encoder\n  if (!this.encoders.hasOwnProperty(enc))\n    this.encoders[enc] = this._createNamed(encoders[enc]);\n  return this.encoders[enc];\n};\n\nEntity.prototype.encode = function encode(data, enc, /* internal */ reporter) {\n  return this._getEncoder(enc).encode(data, reporter);\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./createassettx\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./genesisasset\"), exports);\n__exportStar(require(\"./genesisdata\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./initialstates\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./minterset\"), exports);\n__exportStar(require(\"./operationtx\"), exports);\n__exportStar(require(\"./ops\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXFCO0FBQ3JCLDJDQUF3QjtBQUN4Qiw4Q0FBMkI7QUFDM0Isa0RBQStCO0FBQy9CLGdEQUE2QjtBQUM3Qiw2Q0FBMEI7QUFDMUIsaURBQThCO0FBQzlCLGdEQUE2QjtBQUM3Qiw2Q0FBMEI7QUFDMUIsa0RBQStCO0FBQy9CLDJDQUF3QjtBQUN4Qiw2Q0FBMEI7QUFDMUIsOENBQTJCO0FBQzNCLGdEQUE2QjtBQUM3Qix3Q0FBcUI7QUFDckIsNENBQXlCO0FBQ3pCLHVDQUFvQjtBQUNwQiwwQ0FBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9hcGlcIlxuZXhwb3J0ICogZnJvbSBcIi4vYmFzZXR4XCJcbmV4cG9ydCAqIGZyb20gXCIuL2NvbnN0YW50c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9jcmVhdGVhc3NldHR4XCJcbmV4cG9ydCAqIGZyb20gXCIuL2NyZWRlbnRpYWxzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2V4cG9ydHR4XCJcbmV4cG9ydCAqIGZyb20gXCIuL2dlbmVzaXNhc3NldFwiXG5leHBvcnQgKiBmcm9tIFwiLi9nZW5lc2lzZGF0YVwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbXBvcnR0eFwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbml0aWFsc3RhdGVzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2lucHV0c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9rZXljaGFpblwiXG5leHBvcnQgKiBmcm9tIFwiLi9taW50ZXJzZXRcIlxuZXhwb3J0ICogZnJvbSBcIi4vb3BlcmF0aW9udHhcIlxuZXhwb3J0ICogZnJvbSBcIi4vb3BzXCJcbmV4cG9ydCAqIGZyb20gXCIuL291dHB1dHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vdHhcIlxuZXhwb3J0ICogZnJvbSBcIi4vdXR4b3NcIlxuIl19","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hZG1pbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2FwaSc7XG4iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-BaseTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst tx_2 = require(\"./tx\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst decimalString = \"decimalString\";\nconst buffer = \"Buffer\";\nconst display = \"display\";\n/**\n * Class representing a base for all transactions.\n */\nclass BaseTx extends tx_1.StandardBaseTx {\n    /**\n     * Class representing a BaseTx which is the foundation for all transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"BaseTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.BASETX : constants_1.AVMConstants.BASETX_CODECONE;\n        /**\n         * Returns the id of the [[BaseTx]]\n         */\n        this.getTxType = () => {\n            return this._typeID;\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.outs = fields[\"outs\"].map((o) => {\n            let newOut = new outputs_1.TransferableOutput();\n            newOut.deserialize(o, encoding);\n            return newOut;\n        });\n        this.ins = fields[\"ins\"].map((i) => {\n            let newIn = new inputs_1.TransferableInput();\n            newIn.deserialize(i, encoding);\n            return newIn;\n        });\n        this.numouts = serialization.decoder(this.outs.length.toString(), display, decimalString, buffer, 4);\n        this.numins = serialization.decoder(this.ins.length.toString(), display, decimalString, buffer, 4);\n    }\n    getOuts() {\n        return this.outs;\n    }\n    getIns() {\n        return this.ins;\n    }\n    getTotalOuts() {\n        return this.getOuts();\n    }\n    /**\n    * Set the codecID\n    *\n    * @param codecID The codecID to set\n    */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - BaseTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.BASETX : constants_1.AVMConstants.BASETX_CODECONE;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = this.numouts.readUInt32BE(0);\n        this.outs = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.outs.push(xferout);\n        }\n        this.numins = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const incount = this.numins.readUInt32BE(0);\n        this.ins = [];\n        for (let i = 0; i < incount; i++) {\n            const xferin = new inputs_1.TransferableInput();\n            offset = xferin.fromBuffer(bytes, offset);\n            this.ins.push(xferin);\n        }\n        let memolen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.memo = bintools.copyFrom(bytes, offset, offset + memolen);\n        offset += memolen;\n        return offset;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const sigs = [];\n        for (let i = 0; i < this.ins.length; i++) {\n            const cred = credentials_1.SelectCredentialClass(this.ins[i].getInput().getCredentialID());\n            const sigidxs = this.ins[i].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[j].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            sigs.push(cred);\n        }\n        return sigs;\n    }\n    clone() {\n        let newbase = new BaseTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new BaseTx(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = tx_2.SelectTxClass(id, ...args);\n        return newbasetx;\n    }\n}\nexports.BaseTx = BaseTx;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nvar objectAssign = require('object-assign');\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n// NB: The URL to the CommonJS spec is kept just for tradition.\n//     node-assert has evolved a lot since then, both in API and behavior.\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = require('util/');\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\n// Expose a strict only variant of assert\nfunction strict(value, message) {\n  if (!value) fail(value, true, message, '==', strict);\n}\nassert.strict = objectAssign(strict, assert, {\n  equal: assert.strictEqual,\n  deepEqual: assert.deepStrictEqual,\n  notEqual: assert.notStrictEqual,\n  notDeepEqual: assert.notDeepStrictEqual\n});\nassert.strict.strict = assert.strict;\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9ldm0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXNCO0FBQ3RCLDJDQUF5QjtBQUN6Qiw4Q0FBNEI7QUFDNUIsZ0RBQThCO0FBQzlCLDJDQUF5QjtBQUN6Qiw2Q0FBMkI7QUFDM0IsNkNBQTJCO0FBQzNCLDZDQUEyQjtBQUMzQiw0Q0FBMEI7QUFDMUIsdUNBQXFCO0FBQ3JCLDBDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpJztcbmV4cG9ydCAqIGZyb20gJy4vYmFzZXR4JztcbmV4cG9ydCAqIGZyb20gJy4vY29uc3RhbnRzJztcbmV4cG9ydCAqIGZyb20gJy4vY3JlZGVudGlhbHMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnB1dHMnO1xuZXhwb3J0ICogZnJvbSAnLi9leHBvcnR0eCc7XG5leHBvcnQgKiBmcm9tICcuL2ltcG9ydHR4JztcbmV4cG9ydCAqIGZyb20gJy4va2V5Y2hhaW4nO1xuZXhwb3J0ICogZnJvbSAnLi9vdXRwdXRzJztcbmV4cG9ydCAqIGZyb20gJy4vdHgnO1xuZXhwb3J0ICogZnJvbSAnLi91dHhvcyc7Il19","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AdminAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n* Class for interacting with a node's AdminAPI.\n*\n* @category RPCAPIs\n*\n* @remarks This extends the [[JRPCAPI]] class. This class should not be directly called.\n* Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n*/\nclass AdminAPI extends jrpcapi_1.JRPCAPI {\n    /**\n    * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]]\n    * method.\n    *\n    * @param core A reference to the Avalanche class\n    * @param baseurl Defaults to the string \"/ext/admin\" as the path to rpc's baseurl\n    */\n    constructor(core, baseurl = \"/ext/admin\") {\n        super(core, baseurl);\n        /**\n        * Assign an API an alias, a different endpoint for the API. The original endpoint will still\n        * work. This change only affects this node other nodes will not know about this alias.\n        *\n        * @param endpoint The original endpoint of the API. endpoint should only include the part of\n        * the endpoint after /ext/\n        * @param alias The API being aliased can now be called at ext/alias\n        *\n        * @returns Returns a Promise<boolean> containing success, true for success, false for failure.\n        */\n        this.alias = (endpoint, alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                endpoint,\n                alias,\n            };\n            const response = yield this.callMethod(\"admin.alias\", params);\n            return response.data.result.success;\n        });\n        /**\n        * Give a blockchain an alias, a different name that can be used any place the blockchain’s\n        * ID is used.\n        *\n        * @param endpoint The blockchain’s ID\n        * @param alias Can now be used in place of the blockchain’s ID (in API endpoints, for example)\n        *\n        * @returns Returns a Promise<boolean> containing success, true for success, false for failure.\n        */\n        this.aliasChain = (chain, alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                chain,\n                alias\n            };\n            const response = yield this.callMethod(\"admin.aliasChain\", params);\n            return response.data.result.success;\n        });\n        /**\n        * Get all aliases for given blockchain\n        *\n        * @param chain The blockchain’s ID\n        *\n        * @returns Returns a Promise<string[]> containing aliases of the blockchain.\n        */\n        this.getChainAliases = (chain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                chain\n            };\n            const response = yield this.callMethod(\"admin.getChainAliases\", params);\n            return response.data.result.aliases;\n        });\n        /**\n        * Dump the mutex statistics of the node to the specified file.\n        *\n        * @returns Promise for a boolean that is true on success.\n        */\n        this.lockProfile = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"admin.lockProfile\");\n            return response.data.result.success;\n        });\n        /**\n        * Dump the current memory footprint of the node to the specified file.\n        *\n        * @returns Promise for a boolean that is true on success.\n        */\n        this.memoryProfile = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"admin.memoryProfile\");\n            return response.data.result.success;\n        });\n        /**\n        * Start profiling the cpu utilization of the node. Will dump the profile information into\n        * the specified file on stop.\n        *\n        * @returns Promise for a boolean that is true on success.\n        */\n        this.startCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"admin.startCPUProfiler\");\n            return response.data.result.success;\n        });\n        /**\n        * Stop the CPU profile that was previously started.\n        *\n        * @returns Promise for a boolean that is true on success.\n        */\n        this.stopCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"admin.stopCPUProfiler\");\n            return response.data.result.success;\n        });\n    }\n}\nexports.AdminAPI = AdminAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYWRtaW4vYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUtBLGtEQUE4QztBQUk5Qzs7Ozs7OztFQU9FO0FBRUYsTUFBYSxRQUFTLFNBQVEsaUJBQU87SUErRm5DOzs7Ozs7TUFNRTtJQUNGLFlBQVksSUFBbUIsRUFBRSxVQUFrQixZQUFZO1FBQUksS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtRQXBHdkY7Ozs7Ozs7OztVQVNFO1FBQ0YsVUFBSyxHQUFHLENBQU8sUUFBZ0IsRUFBRSxLQUFhLEVBQW9CLEVBQUU7WUFDbEUsTUFBTSxNQUFNLEdBQVE7Z0JBQ2xCLFFBQVE7Z0JBQ1IsS0FBSzthQUNOLENBQUE7WUFDRCxNQUFNLFFBQVEsR0FBd0IsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUNsRixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQTtRQUNyQyxDQUFDLENBQUEsQ0FBQTtRQUVEOzs7Ozs7OztVQVFFO1FBQ0YsZUFBVSxHQUFHLENBQU8sS0FBYSxFQUFFLEtBQWEsRUFBb0IsRUFBRTtZQUNwRSxNQUFNLE1BQU0sR0FBUTtnQkFDbEIsS0FBSztnQkFDTCxLQUFLO2FBQ04sQ0FBQTtZQUNELE1BQU0sUUFBUSxHQUF3QixNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUE7WUFDdkYsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUE7UUFDckMsQ0FBQyxDQUFBLENBQUE7UUFFRDs7Ozs7O1VBTUU7UUFDRixvQkFBZSxHQUFHLENBQU8sS0FBYSxFQUFxQixFQUFFO1lBQzNELE1BQU0sTUFBTSxHQUFRO2dCQUNsQixLQUFLO2FBQ04sQ0FBQTtZQUNELE1BQU0sUUFBUSxHQUF3QixNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxDQUFDLENBQUE7WUFDNUYsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUE7UUFDckMsQ0FBQyxDQUFBLENBQUE7UUFFRDs7OztVQUlFO1FBQ0YsZ0JBQVcsR0FBRyxHQUEyQixFQUFFO1lBQ3pDLE1BQU0sUUFBUSxHQUF3QixNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtZQUNoRixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQTtRQUNyQyxDQUFDLENBQUEsQ0FBQTtRQUVEOzs7O1VBSUU7UUFDRixrQkFBYSxHQUFHLEdBQTJCLEVBQUU7WUFDM0MsTUFBTSxRQUFRLEdBQXdCLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO1lBQ2xGLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFBO1FBQ3JDLENBQUMsQ0FBQSxDQUFBO1FBRUQ7Ozs7O1VBS0U7UUFDRixxQkFBZ0IsR0FBRyxHQUEyQixFQUFFO1lBQzlDLE1BQU0sUUFBUSxHQUF3QixNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtZQUNyRixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQTtRQUNyQyxDQUFDLENBQUEsQ0FBQTtRQUVEOzs7O1VBSUU7UUFDRixvQkFBZSxHQUFHLEdBQTJCLEVBQUU7WUFDN0MsTUFBTSxRQUFRLEdBQXdCLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO1lBQ3BGLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFBO1FBQ3JDLENBQUMsQ0FBQSxDQUFBO0lBU3VGLENBQUM7Q0FDMUY7QUF2R0QsNEJBdUdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUFkbWluXG4gKi9cbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gXCIuLi8uLi9hdmFsYW5jaGVcIlxuaW1wb3J0IHsgSlJQQ0FQSSB9IGZyb20gXCIuLi8uLi9jb21tb24vanJwY2FwaVwiXG5pbXBvcnQgeyBSZXF1ZXN0UmVzcG9uc2VEYXRhIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9hcGliYXNlXCJcblxuXG4vKipcbiogQ2xhc3MgZm9yIGludGVyYWN0aW5nIHdpdGggYSBub2RlJ3MgQWRtaW5BUEkuXG4qXG4qIEBjYXRlZ29yeSBSUENBUElzXG4qXG4qIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tKUlBDQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuXG4qIEluc3RlYWQsIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV0gZnVuY3Rpb24gdG8gcmVnaXN0ZXIgdGhpcyBpbnRlcmZhY2Ugd2l0aCBBdmFsYW5jaGUuXG4qL1xuXG5leHBvcnQgY2xhc3MgQWRtaW5BUEkgZXh0ZW5kcyBKUlBDQVBJIHtcblxuICAvKipcbiAgKiBBc3NpZ24gYW4gQVBJIGFuIGFsaWFzLCBhIGRpZmZlcmVudCBlbmRwb2ludCBmb3IgdGhlIEFQSS4gVGhlIG9yaWdpbmFsIGVuZHBvaW50IHdpbGwgc3RpbGxcbiAgKiB3b3JrLiBUaGlzIGNoYW5nZSBvbmx5IGFmZmVjdHMgdGhpcyBub2RlIG90aGVyIG5vZGVzIHdpbGwgbm90IGtub3cgYWJvdXQgdGhpcyBhbGlhcy5cbiAgKlxuICAqIEBwYXJhbSBlbmRwb2ludCBUaGUgb3JpZ2luYWwgZW5kcG9pbnQgb2YgdGhlIEFQSS4gZW5kcG9pbnQgc2hvdWxkIG9ubHkgaW5jbHVkZSB0aGUgcGFydCBvZlxuICAqIHRoZSBlbmRwb2ludCBhZnRlciAvZXh0L1xuICAqIEBwYXJhbSBhbGlhcyBUaGUgQVBJIGJlaW5nIGFsaWFzZWQgY2FuIG5vdyBiZSBjYWxsZWQgYXQgZXh0L2FsaWFzXG4gICpcbiAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxib29sZWFuPiBjb250YWluaW5nIHN1Y2Nlc3MsIHRydWUgZm9yIHN1Y2Nlc3MsIGZhbHNlIGZvciBmYWlsdXJlLlxuICAqL1xuICBhbGlhcyA9IGFzeW5jIChlbmRwb2ludDogc3RyaW5nLCBhbGlhczogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOiBhbnkgPSB7XG4gICAgICBlbmRwb2ludCxcbiAgICAgIGFsaWFzLFxuICAgIH1cbiAgICBjb25zdCByZXNwb25zZTogUmVxdWVzdFJlc3BvbnNlRGF0YSA9IGF3YWl0IHRoaXMuY2FsbE1ldGhvZChcImFkbWluLmFsaWFzXCIsIHBhcmFtcylcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzc1xuICB9XG5cbiAgLyoqXG4gICogR2l2ZSBhIGJsb2NrY2hhaW4gYW4gYWxpYXMsIGEgZGlmZmVyZW50IG5hbWUgdGhhdCBjYW4gYmUgdXNlZCBhbnkgcGxhY2UgdGhlIGJsb2NrY2hhaW7igJlzXG4gICogSUQgaXMgdXNlZC5cbiAgKlxuICAqIEBwYXJhbSBlbmRwb2ludCBUaGUgYmxvY2tjaGFpbuKAmXMgSURcbiAgKiBAcGFyYW0gYWxpYXMgQ2FuIG5vdyBiZSB1c2VkIGluIHBsYWNlIG9mIHRoZSBibG9ja2NoYWlu4oCZcyBJRCAoaW4gQVBJIGVuZHBvaW50cywgZm9yIGV4YW1wbGUpXG4gICpcbiAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxib29sZWFuPiBjb250YWluaW5nIHN1Y2Nlc3MsIHRydWUgZm9yIHN1Y2Nlc3MsIGZhbHNlIGZvciBmYWlsdXJlLlxuICAqL1xuICBhbGlhc0NoYWluID0gYXN5bmMgKGNoYWluOiBzdHJpbmcsIGFsaWFzOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6IGFueSA9IHtcbiAgICAgIGNoYWluLFxuICAgICAgYWxpYXNcbiAgICB9XG4gICAgY29uc3QgcmVzcG9uc2U6IFJlcXVlc3RSZXNwb25zZURhdGEgPSBhd2FpdCB0aGlzLmNhbGxNZXRob2QoXCJhZG1pbi5hbGlhc0NoYWluXCIsIHBhcmFtcylcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzc1xuICB9XG5cbiAgLyoqXG4gICogR2V0IGFsbCBhbGlhc2VzIGZvciBnaXZlbiBibG9ja2NoYWluXG4gICpcbiAgKiBAcGFyYW0gY2hhaW4gVGhlIGJsb2NrY2hhaW7igJlzIElEXG4gICpcbiAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZTxzdHJpbmdbXT4gY29udGFpbmluZyBhbGlhc2VzIG9mIHRoZSBibG9ja2NoYWluLlxuICAqL1xuICBnZXRDaGFpbkFsaWFzZXMgPSBhc3luYyAoY2hhaW46IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+ID0+IHtcbiAgICBjb25zdCBwYXJhbXM6IGFueSA9IHtcbiAgICAgIGNoYWluXG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFwiYWRtaW4uZ2V0Q2hhaW5BbGlhc2VzXCIsIHBhcmFtcylcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuYWxpYXNlc1xuICB9XG5cbiAgLyoqXG4gICogRHVtcCB0aGUgbXV0ZXggc3RhdGlzdGljcyBvZiB0aGUgbm9kZSB0byB0aGUgc3BlY2lmaWVkIGZpbGUuXG4gICpcbiAgKiBAcmV0dXJucyBQcm9taXNlIGZvciBhIGJvb2xlYW4gdGhhdCBpcyB0cnVlIG9uIHN1Y2Nlc3MuXG4gICovXG4gIGxvY2tQcm9maWxlID0gYXN5bmMgKCk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFwiYWRtaW4ubG9ja1Byb2ZpbGVcIilcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzc1xuICB9XG5cbiAgLyoqXG4gICogRHVtcCB0aGUgY3VycmVudCBtZW1vcnkgZm9vdHByaW50IG9mIHRoZSBub2RlIHRvIHRoZSBzcGVjaWZpZWQgZmlsZS5cbiAgKlxuICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB0aGF0IGlzIHRydWUgb24gc3VjY2Vzcy5cbiAgKi9cbiAgbWVtb3J5UHJvZmlsZSA9IGFzeW5jICgpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZTogUmVxdWVzdFJlc3BvbnNlRGF0YSA9IGF3YWl0IHRoaXMuY2FsbE1ldGhvZChcImFkbWluLm1lbW9yeVByb2ZpbGVcIilcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzc1xuICB9XG5cbiAgLyoqXG4gICogU3RhcnQgcHJvZmlsaW5nIHRoZSBjcHUgdXRpbGl6YXRpb24gb2YgdGhlIG5vZGUuIFdpbGwgZHVtcCB0aGUgcHJvZmlsZSBpbmZvcm1hdGlvbiBpbnRvXG4gICogdGhlIHNwZWNpZmllZCBmaWxlIG9uIHN0b3AuXG4gICpcbiAgKiBAcmV0dXJucyBQcm9taXNlIGZvciBhIGJvb2xlYW4gdGhhdCBpcyB0cnVlIG9uIHN1Y2Nlc3MuXG4gICovXG4gIHN0YXJ0Q1BVUHJvZmlsZXIgPSBhc3luYyAoKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2U6IFJlcXVlc3RSZXNwb25zZURhdGEgPSBhd2FpdCB0aGlzLmNhbGxNZXRob2QoXCJhZG1pbi5zdGFydENQVVByb2ZpbGVyXCIpXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3NcbiAgfVxuXG4gIC8qKlxuICAqIFN0b3AgdGhlIENQVSBwcm9maWxlIHRoYXQgd2FzIHByZXZpb3VzbHkgc3RhcnRlZC5cbiAgKlxuICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgYm9vbGVhbiB0aGF0IGlzIHRydWUgb24gc3VjY2Vzcy5cbiAgKi9cbiAgc3RvcENQVVByb2ZpbGVyID0gYXN5bmMgKCk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFwiYWRtaW4uc3RvcENQVVByb2ZpbGVyXCIpXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3NcbiAgfVxuXG4gIC8qKlxuICAqIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuIEluc3RlYWQgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXVxuICAqIG1ldGhvZC5cbiAgKlxuICAqIEBwYXJhbSBjb3JlIEEgcmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgY2xhc3NcbiAgKiBAcGFyYW0gYmFzZXVybCBEZWZhdWx0cyB0byB0aGUgc3RyaW5nIFwiL2V4dC9hZG1pblwiIGFzIHRoZSBwYXRoIHRvIHJwYydzIGJhc2V1cmxcbiAgKi9cbiAgY29uc3RydWN0b3IoY29yZTogQXZhbGFuY2hlQ29yZSwgYmFzZXVybDogc3RyaW5nID0gXCIvZXh0L2FkbWluXCIpIHsgc3VwZXIoY29yZSwgYmFzZXVybCkgfVxufVxuIl19","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-UTXOs\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.UTXO = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst constants_2 = require(\"../../utils/constants\");\nconst assetamount_1 = require(\"../../common/assetamount\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst tx_1 = require(\"./tx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXO\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = outputs_1.SelectOutputClass(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);\n        offset += 4;\n        this.output = outputs_1.SelectOutputClass(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.EVMConstants.LATESTCODEC, txID = undefined, outputidx = undefined, assetID = undefined, output = undefined) {\n        return new UTXO(codecID, txID, outputidx, assetID, output);\n    }\n}\nexports.UTXO = UTXO;\nclass AssetAmountDestination extends assetamount_1.StandardAssetAmountDestination {\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXOSet\";\n        this._typeID = undefined;\n        this.getMinimumSpendable = (aad, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const utxoArray = this.getAllUTXOs();\n            const outids = {};\n            for (let i = 0; i < utxoArray.length && !aad.canComplete(); i++) {\n                const u = utxoArray[i];\n                const assetKey = u.getAssetID().toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                if (u.getOutput() instanceof outputs_1.AmountOutput && aad.assetExists(assetKey) && u.getOutput().meetsThreshold(fromAddresses, asOf)) {\n                    const am = aad.getAssetAmount(assetKey);\n                    if (!am.isFinished()) {\n                        const uout = u.getOutput();\n                        outids[assetKey] = uout.getOutputID();\n                        const amount = uout.getAmount();\n                        am.spendAmount(amount);\n                        const txid = u.getTxID();\n                        const outputidx = u.getOutputIdx();\n                        const input = new inputs_1.SECPTransferInput(amount);\n                        const xferin = new inputs_1.TransferableInput(txid, outputidx, u.getAssetID(), input);\n                        const spenders = uout.getSpenders(fromAddresses, asOf);\n                        spenders.forEach((spender) => {\n                            const idx = uout.getAddressIdx(spender);\n                            if (idx === -1) {\n                                /* istanbul ignore next */\n                                throw new errors_1.AddressError(\"Error - UTXOSet.getMinimumSpendable: no such address in output\");\n                            }\n                            xferin.getInput().addSignatureIdx(idx, spender);\n                        });\n                        aad.addInput(xferin);\n                    }\n                    else if (aad.assetExists(assetKey) && !(u.getOutput() instanceof outputs_1.AmountOutput)) {\n                        /**\n                         * Leaving the below lines, not simply for posterity, but for clarification.\n                         * AssetIDs may have mixed OutputTypes.\n                         * Some of those OutputTypes may implement AmountOutput.\n                         * Others may not.\n                         * Simply continue in this condition.\n                         */\n                        /*return new Error('Error - UTXOSet.getMinimumSpendable: outputID does not '\n                          + `implement AmountOutput: ${u.getOutput().getOutputID}`);*/\n                        continue;\n                    }\n                }\n            }\n            if (!aad.canComplete()) {\n                return new errors_1.InsufficientFundsError(`Error - UTXOSet.getMinimumSpendable: insufficient funds to create the transaction`);\n            }\n            const amounts = aad.getAmounts();\n            const zero = new bn_js_1.default(0);\n            for (let i = 0; i < amounts.length; i++) {\n                const assetKey = amounts[i].getAssetIDString();\n                const amount = amounts[i].getAmount();\n                if (amount.gt(zero)) {\n                    const spendout = outputs_1.SelectOutputClass(outids[assetKey], amount, aad.getDestinations(), locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), spendout);\n                    aad.addOutput(xferout);\n                }\n                const change = amounts[i].getChange();\n                if (change.gt(zero)) {\n                    const changeout = outputs_1.SelectOutputClass(outids[assetKey], change, aad.getChangeAddresses());\n                    const chgxferout = new outputs_1.TransferableOutput(amounts[i].getAssetID(), changeout);\n                    aad.addChange(chgxferout);\n                }\n            }\n            return undefined;\n        };\n        /**\n          * Creates an unsigned ImportTx transaction.\n          *\n          * @param networkID The number representing NetworkID of the node\n          * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n          * @param toAddress The address to send the funds\n          * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n          * @param importIns An array of [[TransferableInput]]s being imported\n          * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n          * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}. Fee will come from the inputs first, if they can.\n          * @param feeAssetID Optional. The assetID of the fees being burned.\n          * @param memo Optional contains arbitrary bytes, up to 256 bytes\n          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n          * @param locktime Optional. The locktime field created in the resulting outputs\n          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n          * @returns An unsigned transaction created from the passed in parameters.\n          *\n          */\n        this.buildImportTx = (networkID, blockchainID, toAddress, fromAddresses, atomics, sourceChain = undefined, fee = undefined, feeAssetID = undefined) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            const outs = [];\n            if (typeof fee === \"undefined\") {\n                fee = zero.clone();\n            }\n            let feepaid = new bn_js_1.default(0);\n            const map = new Map();\n            atomics.forEach((atomic) => {\n                const assetIDBuf = atomic.getAssetID();\n                const assetID = bintools.cb58Encode(atomic.getAssetID());\n                const output = atomic.getOutput();\n                const amt = output.getAmount().clone();\n                let infeeamount = amt.clone();\n                if (typeof feeAssetID !== \"undefined\" &&\n                    fee.gt(zero) &&\n                    feepaid.lt(fee) &&\n                    (buffer_1.Buffer.compare(feeAssetID, assetIDBuf) === 0)) {\n                    feepaid = feepaid.add(infeeamount);\n                    if (feepaid.gt(fee)) {\n                        infeeamount = feepaid.sub(fee);\n                        feepaid = fee.clone();\n                    }\n                    else {\n                        infeeamount = zero.clone();\n                    }\n                }\n                const txid = atomic.getTxID();\n                const outputidx = atomic.getOutputIdx();\n                const input = new inputs_1.SECPTransferInput(amt);\n                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetIDBuf, input);\n                const from = output.getAddresses();\n                const spenders = output.getSpenders(from);\n                spenders.forEach((spender) => {\n                    const idx = output.getAddressIdx(spender);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - UTXOSet.buildImportTx: no such address in output\");\n                    }\n                    xferin.getInput().addSignatureIdx(idx, spender);\n                });\n                ins.push(xferin);\n                // lexicographically sort array\n                ins = ins.sort(inputs_1.TransferableInput.comparator());\n                if (map.has(assetID)) {\n                    infeeamount = infeeamount.add(new bn_js_1.default(map.get(assetID)));\n                }\n                map.set(assetID, infeeamount.toString());\n            });\n            for (let [assetID, amount] of map) {\n                // Create single EVMOutput for each assetID\n                const evmOutput = new outputs_1.EVMOutput(toAddress, new bn_js_1.default(amount), bintools.cb58Decode(assetID));\n                outs.push(evmOutput);\n            }\n            const importTx = new importtx_1.ImportTx(networkID, blockchainID, sourceChain, ins, outs);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n        * Creates an unsigned ExportTx transaction.\n        *\n        * @param networkID The number representing NetworkID of the node\n        * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n        * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param djtxAssetID {@link https://github.com/feross/buffer|Buffer} of the AssetID for DJTX\n        * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the DJTX\n        * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the DJTX\n        * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n        * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n        * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n        * @param feeAssetID Optional. The assetID of the fees being burned.\n        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n        * @param locktime Optional. The locktime field created in the resulting outputs\n        * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n        * @returns An unsigned transaction created from the passed in parameters.\n        *\n        */\n        this.buildExportTx = (networkID, blockchainID, amount, djtxAssetID, toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, asOf = helperfunctions_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let outs = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === 'undefined') {\n                feeAssetID = djtxAssetID;\n            }\n            else if (feeAssetID.toString('hex') !== djtxAssetID.toString('hex')) {\n                /* istanbul ignore next */\n                throw new errors_1.FeeAssetError('Error - UTXOSet.buildExportTx: feeAssetID must match djtxAssetID');\n            }\n            if (typeof destinationChain === 'undefined') {\n                destinationChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (djtxAssetID.toString('hex') === feeAssetID.toString('hex')) {\n                aad.addAssetAmount(djtxAssetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(djtxAssetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === 'undefined') {\n                outs = aad.getChangeOutputs();\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw success;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkID, blockchainID, destinationChain, ins, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let utxos = {};\n        for (let utxoid in fields[\"utxos\"]) {\n            let utxoidCleaned = serializer.decoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[utxoidCleaned] = new UTXO();\n            utxos[utxoidCleaned].deserialize(fields[\"utxos\"][utxoid], encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in fields[\"addressUTXOs\"]) {\n            let addressCleaned = serializer.decoder(address, encoding, \"cb58\", \"hex\");\n            let utxobalance = {};\n            for (let utxoid in fields[\"addressUTXOs\"][address]) {\n                let utxoidCleaned = serializer.decoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[utxoidCleaned] = serializer.decoder(fields[\"addressUTXOs\"][address][utxoid], encoding, \"decimalString\", \"BN\");\n            }\n            addressUTXOs[addressCleaned] = utxobalance;\n        }\n        this.utxos = utxos;\n        this.addressUTXOs = addressUTXOs;\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === 'string') {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof UTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.UTXOError(\"Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string\");\n        }\n        return utxovar;\n    }\n    create(...args) {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) && feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":""}